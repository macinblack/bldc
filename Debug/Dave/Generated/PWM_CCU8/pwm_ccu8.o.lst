   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "pwm_ccu8.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_CCU8_EnableClock,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_CCU8_EnableClock:
  25              	.LFB144:
  26              	 .file 1 "D:\\Naukowe\\BLDC_workspace\\PWM_from_ex\\Libraries\\XMCLib\\inc/xmc_ccu8.h"
   1:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
   2:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @file xmc_ccu8.h
   3:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @date 2015-10-27
   4:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
   5:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @cond
   6:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  **************************************************************************************************
   7:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * XMClib v2.1.2 - XMC Peripheral Driver Library 
   8:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
   9:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Copyright (c) 2015, Infineon Technologies AG
  10:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * All rights reserved.                        
  11:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *                                             
  12:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * following conditions are met:   
  14:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *                                                                              
  15:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * disclaimer.                        
  17:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * 
  18:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * 
  21:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * products derived from this software without specific prior written permission.                  
  23:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *                                                                              
  24:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *                                                                              
  32:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  **************************************************************************************************
  35:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
  36:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Change History
  37:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * --------------
  38:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
  39:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * 2015-02-20:
  40:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *     - Initial <br>
  41:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *     - Documentation updates <br>
  42:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
  43:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * 2015-06-20:
  44:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *     - Removed version macros and declaration of GetDriverVersion API <br>
  45:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *     - Added XMC_CCU8_SLICE_LoadSelector() API, to select which compare register value has to be 
  46:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *       during external load event.
  47:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
  48:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * 2015-07-01:
  49:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *     - In XMC_CCU8_SLICE_CHECK_INTERRUPT macro, fixed the missing item for compare match down for
  50:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
  51:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * 2015-07-24:
  52:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *     - XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent() is updated to support XMC14 device. <br>
  53:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
  54:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * 2015-08-17:
  55:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *     - XMC_CCU8_SLICE_PRESCALER_t enum is added to set the prescaler divider. <br>
  56:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *     - XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE_t is added for all the devices except XMC45 devices, t
  57:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *       shadow transfer has to happen. <br>
  58:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *     - XMC_CCU8_SOURCE_OUT0_t, XMC_CCU8_SOURCE_OUT1_t, XMC_CCU8_SOURCE_OUT2_t, XMC_CCU8_SOURCE_OU
  59:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *       to maps one of the ST to OUT0, OUT1, OUT3, OUT4 signals.
  60:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *     - In XMC_CCU8_SLICE_COMPARE_CONFIG_t structure, selector_out0, selector_out1, selector_out2,
  61:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *       added to support XMC14 devices.
  62:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *     - XMC_CCU8_EnableShadowTransfer() API is made as inline, to improve the speed. <br>
  63:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *     - XMC_CCU8_SLICE_EnableCascadedShadowTransfer(), XMC_CCU8_SLICE_DisableCascadedShadowTransfe
  64:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *       XMC_CCU8_SLICE_SetShadowTransferMode() API are supported for all the devices except XMC45.
  65:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
  66:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * 2015-09-29:
  67:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *     - In XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_t, two more enum items are added to support exte
  68:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *       settings.
  69:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
  70:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * 2015-10-07:
  71:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *     - XMC_CCU8_SLICE_SetTimerCompareMatchChannel1(), XMC_CCU8_SLICE_SetTimerCompareMatchChannel2
  72:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *       added to update the respective compare registers directly.
  73:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *     - XMC_CCU8_SLICE_GetEvent() is made as inline.
  74:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *     - XMC_CCU8_SLICE_MULTI_IRQ_ID_t is added to support the XMC_CCU8_SLICE_EnableMultipleEvents(
  75:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *       XMC_CCU8_SLICE_DisableMultipleEvents() APIs.
  76:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *     - DOC updates for the newly added APIs.
  77:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
  78:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @endcond
  79:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
  80:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
  81:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** #ifndef XMC_CCU8_H
  82:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** #define XMC_CCU8_H
  83:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
  84:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**************************************************************************************************
  85:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * HEADER FILES
  86:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  **************************************************************************************************
  87:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** #include "xmc_common.h"
  88:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
  89:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** #if defined(CCU80)
  90:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
  91:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** #if UC_FAMILY == XMC1
  92:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  #include "xmc1_ccu8_map.h"
  93:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** #endif
  94:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
  95:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** #if UC_FAMILY == XMC4
  96:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  #include "xmc4_ccu8_map.h"
  97:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** #endif
  98:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
  99:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 100:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @addtogroup XMClib XMC Peripheral Library
 101:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @{
 102:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 103:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 104:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 105:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @addtogroup CCU8
 106:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
 107:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @brief Capture Compare Unit 8 (CCU8) low level driver for XMC family of microcontrollers<br>
 108:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
 109:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * The CCU8 peripheral functions play a major role in applications that need complex Pulse Width Mo
 110:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * generation, with complementary high side and low side switches, multi phase control. These funct
 111:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * with a very flexible and programmable signal conditioning scheme, make the CCU8 the must have pe
 112:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * of the art motor control, multi phase and multi level power electronics systems.\n
 113:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Each CCU8 module is comprised of four identical 16 bit Capture/Compare Timer slices, CC8y (where
 114:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * timer slice can work in compare mode or in capture mode.
 115:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
 116:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * APIs provided in this file cover the following functional blocks of CCU8:
 117:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * -- Timer configuration, Capture configuration, Function/Event configuration, Interrupt configura
 118:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par Note:
 119:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * 1. SLICE (APIs prefixed with e.g. XMC_CCU8_SLICE_)
 120:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * 2. Module (APIs are not having any prefix e.g. XMC_CCU8_)
 121:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
 122:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par Timer(Compare mode) configuration:
 123:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * This section of the LLD provides the configuration structure XMC_CCU8_SLICE_COMPARE_CONFIG_t, 
 124:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * XMC_CCU8_SLICE_DEAD_TIME_CONFIG_t and the initialization functions XMC_CCU8_SLICE_CompareInit(),
 125:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
 126:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * It can be used to:
 127:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * -# Start and Stop the timer. (XMC_CCU8_SLICE_StartTimer(), XMC_CCU8_SLICE_StopTimer())
 128:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * -# Update the period, compare, Dither, Prescaler  and Passive values. (XMC_CCU8_SLICE_SetTimerPe
 129:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    XMC_CCU8_SLICE_SetTimerCompareMatch(), XMC_CCU8_SLICE_SetPrescaler(), XMC_CCU8_SLICE_SetDithe
 130:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    XMC_CCU8_SLICE_SetPassiveLevel())
 131:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * -# Configure the dead time.(XMC_CCU8_SLICE_SetDeadTimeValue(), XMC_CCU8_SLICE_SetDeadTimePrescal
 132:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * -# Enable the slices to support multichannel mode. (XMC_CCU8_SLICE_EnableMultiChannelMode())
 133:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * 
 134:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par Capture configuration:
 135:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * This section of the LLD provides the configuration structure XMC_CCU8_SLICE_CAPTURE_CONFIG_t and
 136:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * function XMC_CCU8_SLICE_CaptureInit().
 137:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
 138:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * It can be used to:
 139:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * -# Configure the capture functionality. (XMC_CCU8_SLICE_Capture0Config(), XMC_CCU8_SLICE_Capture
 140:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * -# Read the captured values along with the status, which indicate the value is latest or not.
 141:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    (XMC_CCU8_SLICE_GetCaptureRegisterValue())
 142:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * 
 143:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par Function/Event configuration:
 144:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * This section of the LLD provides the configuration structure XMC_CCU8_SLICE_EVENT_CONFIG_t.
 145:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * 
 146:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * It can be used to:
 147:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * -# Enable and Disable the events. (XMC_CCU8_SLICE_EnableEvent(), XMC_CCU8_SLICE_DisableEvent())
 148:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * -# Configure to start and stop the timer on external events.(XMC_CCU8_SLICE_StartConfig(), XMC_C
 149:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * -# Modulation, external load and Gating of the timer output.(XMC_CCU8_SLICE_ModulationConfig(), 
 150:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    XMC_CCU8_SLICE_LoadConfig(), XMC_CCU8_SLICE_GateConfig())
 151:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * -# Control the count direction of the timer based on the external event. (XMC_CCU8_SLICE_Directi
 152:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * -# Count the external events.(XMC_CCU8_SLICE_CountConfig())
 153:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * -# External Trap. Which can be used as protective feature.(XMC_CCU8_SLICE_EnableTrap(), XMC_CCU8
 154:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    XMC_CCU8_SLICE_TrapConfig())
 155:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
 156:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par Interrupt configuration:
 157:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * This section of the LLD provides the function to configure the interrupt node to each event (XMC
 158:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
 159:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @{
 160:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 161:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 162:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**************************************************************************************************
 163:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * MACROS
 164:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  **************************************************************************************************
 165:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** #define XMC_CCU8_SLICE_CHECK_INTERRUPT(interrupt) \
 166:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****     ((interrupt == XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH)           || \
 167:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH)              || \
 168:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1)  || \
 169:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1)|| \
 170:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2)  || \
 171:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2)|| \
 172:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_EVENT0)                 || \
 173:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_EVENT1)                 || \
 174:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_EVENT2)                 || \
 175:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_TRAP))
 176:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****      
 177:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /* Macro to check if the slice ptr passed is valid */
 178:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** #define XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(cmp_channel) \
 179:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****     ((cmp_channel == XMC_CCU8_SLICE_COMPARE_CHANNEL_1) || \
 180:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****      (cmp_channel == XMC_CCU8_SLICE_COMPARE_CHANNEL_2))
 181:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 182:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**************************************************************************************************
 183:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * ENUMS
 184:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  **************************************************************************************************
 185:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 186:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 187:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Typedef for CCU8 Global data structure
 188:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 189:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef CCU8_GLOBAL_TypeDef XMC_CCU8_MODULE_t;
 190:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 191:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 192:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Typedef for CCU8 Slice data structure
 193:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 194:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef CCU8_CC8_TypeDef XMC_CCU8_SLICE_t;
 195:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 196:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 197:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Return Value of an API
 198:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 199:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_STATUS
 200:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 201:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_STATUS_OK      = 0U, /**< API fulfils request */
 202:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_STATUS_ERROR       , /**< API cannot fulfil request */
 203:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_STATUS_RUNNING     , /**< The timer slice is currently running */
 204:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_STATUS_IDLE          /**< The timer slice is currently idle */
 205:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_STATUS_t;
 206:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 207:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 208:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * CCU8 module clock
 209:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 210:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_CLOCK
 211:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 212:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_CLOCK_SCU        = 0U, /**< Select the fCCU as the clock */
 213:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_CLOCK_EXTERNAL_A     , /**< External clock-A */
 214:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_CLOCK_EXTERNAL_B     , /**< External clock-B */
 215:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_CLOCK_EXTERNAL_C       /**< External clock-C */
 216:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_CLOCK_t;
 217:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 218:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 219:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * CCU8 set the shadow transfer type for multichannel mode
 220:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 221:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER
 222:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 223:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE0       = (uint32_t)0x4000000, /**< Shadow transfe
 224:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                                      only for slice
 225:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE0  = (uint32_t)0x4000400, /**< Shadow transfe
 226:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                                      and hardware f
 227:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE1       = (uint32_t)0x8000000, /**< Shadow transfe
 228:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                                      only for slice
 229:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE1  = (uint32_t)0x8000800, /**< Shadow transfe
 230:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                                      and hardware f
 231:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE2       = (uint32_t)0x10000000, /**< Shadow transf
 232:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                                       only for slic
 233:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE2  = (uint32_t)0x10001000, /**< Shadow transf
 234:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                                       and hardware 
 235:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE3       = (uint32_t)0x20000000, /**< Shadow transf
 236:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                                       only for slic
 237:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE3  = (uint32_t)0x20002000  /**< Shadow transf
 238:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                                       and hardware 
 239:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_t;
 240:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 241:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 242:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Operational modes of CCU8 slice
 243:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 244:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_MODE
 245:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 246:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MODE_COMPARE  = 0U, /**< slice(CC8y) operates in Compare Mode */
 247:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MODE_CAPTURE        /**< slice(CC8y) operates in Capture Mode */
 248:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_MODE_t;
 249:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 250:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 251:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Slice Output selection
 252:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 253:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_OUTPUT
 254:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 255:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_OUTPUT_0  = 1U, /**< Slice Output-0 */
 256:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_OUTPUT_1  = 2U, /**< Slice Output-1 */
 257:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_OUTPUT_2  = 4U, /**< Slice Output-2 */
 258:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_OUTPUT_3  = 8U  /**< Slice Output-3 */
 259:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_OUTPUT_t;
 260:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 261:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 262:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Timer counting modes for the slice
 263:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 264:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_TIMER_COUNT_MODE
 265:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 266:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_COUNT_MODE_EA  = 0U, /**< Edge Aligned Mode */
 267:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_COUNT_MODE_CA        /**< Centre Aligned Mode */
 268:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_TIMER_COUNT_MODE_t;
 269:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 270:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 271:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Timer repetition mode for the slice
 272:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 273:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_TIMER_REPEAT_MODE
 274:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 275:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_REPEAT_MODE_REPEAT = 0U, /**< Repetitive mode: continuous mode of operation 
 276:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_REPEAT_MODE_SINGLE       /**< Single shot mode: Once a Period match/One matc
 277:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                      occurs timer goes to idle state */
 278:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_TIMER_REPEAT_MODE_t;
 279:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 280:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 281:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Timer counting direction for the CCU8 slice
 282:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 283:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_TIMER_COUNT_DIR
 284:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 285:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_COUNT_DIR_UP   = 0U, /**< Counting up */
 286:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_COUNT_DIR_DOWN       /**< Counting down */
 287:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_TIMER_COUNT_DIR_t;
 288:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 289:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 290:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Capture mode register sets
 291:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 292:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_CAP_REG_SET
 293:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 294:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_CAP_REG_SET_LOW  = 0U, /**< Capture register-0, Capture register-1 used */
 295:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_CAP_REG_SET_HIGH       /**< Capture register-0, Capture register-1 used */
 296:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_CAP_REG_SET_t;
 297:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 298:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 299:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Prescaler mode
 300:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 301:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_PRESCALER_MODE
 302:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 303:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_MODE_NORMAL = 0U, /**< Fixed division of module clock */
 304:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_MODE_FLOAT        /**< Floating divider */
 305:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_PRESCALER_MODE_t;
 306:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 307:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 308:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Timer output passive level
 309:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 310:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL
 311:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 312:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_LOW  = 0U, /**< Passive level = Low */
 313:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_HIGH       /**< Passive level = High */
 314:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_t;
 315:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 316:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 317:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Compare Channel selection
 318:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 319:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_COMPARE_CHANNEL
 320:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 321:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_COMPARE_CHANNEL_1  = 0U, /**< Compare Channel-1 */
 322:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_COMPARE_CHANNEL_2        /**< Compare Channel-2 */
 323:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_COMPARE_CHANNEL_t;
 324:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 325:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 326:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Timer clock Divider
 327:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 328:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_PRESCALER
 329:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 330:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_1  = 0U, /**< Slice Clock = fccu8 */
 331:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_2      , /**< Slice Clock = fccu8/2 */
 332:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_4      , /**< Slice Clock = fccu8/4 */
 333:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_8      , /**< Slice Clock = fccu8/8 */
 334:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_16     , /**< Slice Clock = fccu8/16 */
 335:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_32     , /**< Slice Clock = fccu8/32 */
 336:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_64     , /**< Slice Clock = fccu8/64 */
 337:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_128    , /**< Slice Clock = fccu8/128 */
 338:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_256    , /**< Slice Clock = fccu8/256 */
 339:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_512    , /**< Slice Clock = fccu8/512 */
 340:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_1024   , /**< Slice Clock = fccu8/1024 */
 341:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_2048   , /**< Slice Clock = fccu8/2048 */
 342:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_4096   , /**< Slice Clock = fccu8/4096 */
 343:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_8192   , /**< Slice Clock = fccu8/8192 */
 344:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_16384  , /**< Slice Clock = fccu8/16384 */
 345:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_32768    /**< Slice Clock = fccu8/32768 */
 346:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_PRESCALER_t;
 347:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 348:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 349:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Dead Time Generator Clock Divider
 350:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 351:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_DTC_DIV
 352:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 353:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_DTC_DIV_1  = 0U, /**< DTC clock = Slice Clock */
 354:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_DTC_DIV_2      , /**< DTC clock = Slice Clock/2 */
 355:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_DTC_DIV_4      , /**< DTC clock = Slice Clock/4 */
 356:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_DTC_DIV_8        /**< DTC clock = Slice Clock/8 */
 357:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_DTC_DIV_t;
 358:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 359:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 360:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 361:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  The compare channel output which is routed to the slice output signal(STy).
 362:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 363:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_STATUS
 364:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 365:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_STATUS_CHANNEL_1        = 0U, /**< Channel-1 status connected to Slice Status */
 366:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_STATUS_CHANNEL_2            , /**< Channel-2 status connected to Slice Status */
 367:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_STATUS_CHANNEL_1_AND_2      , /**< \b Wired \b AND of Channel-1 and Channel-2 stat
 368:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                     Slice status */
 369:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** #if ((UC_SERIES == XMC13) || (UC_SERIES == XMC14)) || defined(DOXYGEN)
 370:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_STATUS_CHANNEL_1_OR_2         /**< \b Wired \b OR of Channel-1 and Channel-2 statu
 371:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                     status. @note Only available for XMC1300 and XM
 372:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** #endif
 373:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_STATUS_t;
 374:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 375:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 376:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Compare channel for which modulation has to be applied
 377:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 378:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_MODULATION_CHANNEL
 379:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 380:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MODULATION_CHANNEL_NONE  = 0U, /**< No modulation */
 381:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MODULATION_CHANNEL_1         , /**< Modulation for Compare Channel-1 */
 382:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MODULATION_CHANNEL_2         , /**< Modulation for Compare Channel-2 */
 383:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MODULATION_CHANNEL_1_AND_2     /**< Modulation for Compare Channel-1 and Compare C
 384:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_MODULATION_CHANNEL_t;
 385:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 386:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 387:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  External Function list
 388:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 389:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_FUNCTION
 390:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 391:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_START           = 0U, /**< Start function */
 392:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_STOP                , /**< Stop function */
 393:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_CAPTURE_EVENT0      , /**< Capture Event-0 function, CCycapt0 signal is u
 394:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                      generation */
 395:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_CAPTURE_EVENT1      , /**< Capture Event-1 function, CCycapt1 signal is u
 396:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                      generation */
 397:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_GATING              , /**< Gating function */
 398:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_DIRECTION           , /**< Direction function */
 399:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_LOAD                , /**< Load function */
 400:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_COUNT               , /**< Counting function */
 401:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_OVERRIDE            , /**< Override function */
 402:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_MODULATION          , /**< Modulation function */
 403:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_TRAP                  /**< Trap function */
 404:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_FUNCTION_t;
 405:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 406:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 407:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  External Event list
 408:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 409:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_EVENT
 410:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 411:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_NONE  = 0U, /**< None */
 412:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_0         , /**< Event-0 */
 413:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_1         , /**< Event-1 */
 414:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_2           /**< Event-2 */
 415:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_EVENT_t;
 416:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 417:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 418:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  External Event trigger criteria  - Edge sensitivity
 419:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 420:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY
 421:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 422:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_NONE          = 0U, /**< None */
 423:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_RISING_EDGE       , /**< Rising Edge of the input signal ge
 424:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                  event trigger */
 425:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_FALLING_EDGE      , /**< Falling Edge of the input signal g
 426:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                  trigger */
 427:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_DUAL_EDGE           /**< Both Rising and Falling edges caus
 428:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_t;
 429:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 430:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 431:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  External Event trigger criteria  - Level sensitivity
 432:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 433:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY
 434:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 435:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH = 0U, /**< Level sensitive functions react to 
 436:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW  = 1U, /**< Level sensitive functions react to 
 437:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****     /* Below enum items can be utilised specific to the functionality */
 438:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_COUNT_UP_ON_LOW = 0U, /**< Timer counts up, during Low sta
 439:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_COUNT_UP_ON_HIGH = 1U /**< Timer counts up, during High st
 440:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_t;
 441:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 442:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 443:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Low pass filter Configuration. The External Event input should be stable for a selected number 
 444:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 445:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_EVENT_FILTER
 446:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 447:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_FILTER_DISABLED  = 0U, /**< No Low Pass Filtering is applied */
 448:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_FILTER_3_CYCLES      , /**< Input should be stable for 3 clock cycles */
 449:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_FILTER_5_CYCLES      , /**< Input should be stable for 5 clock cycles */
 450:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_FILTER_7_CYCLES        /**< Input should be stable for 7 clock cycles */
 451:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_EVENT_FILTER_t;
 452:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 453:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 454:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  External Event Input list. This list depicts the possible input connections to the CCU8 slice.
 455:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Interconnects are specific to each device.
 456:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 457:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef uint8_t XMC_CCU8_SLICE_INPUT_t;
 458:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 459:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 460:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 461:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Actions that can be performed upon detection of an external Timer STOP event
 462:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 463:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_END_MODE
 464:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 465:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_END_MODE_TIMER_STOP       = 0U, /**< Stops the timer, without clearing TIMER regis
 466:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_END_MODE_TIMER_CLEAR          , /**< Without stopping timer, clears the TIMER regi
 467:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_END_MODE_TIMER_STOP_CLEAR       /**< Stops the timer and clears the TIMER register
 468:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_END_MODE_t;
 469:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 470:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 471:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Actions that can be performed upon detection of an external Timer START event
 472:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 473:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_START_MODE
 474:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 475:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_START_MODE_TIMER_START       = 0U, /**< Start the timer from the current count of 
 476:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR       /**< Clears the TIMER register and start the ti
 477:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_START_MODE_t;
 478:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 479:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 480:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Modulation of timer output signals
 481:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 482:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_MODULATION_MODE
 483:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 484:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_ST_OUT  = 0U, /**< Clear ST and OUT signals */
 485:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_OUT           /**< Clear only the OUT signal */
 486:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_MODULATION_MODE_t;
 487:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 488:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 489:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Trap exit mode
 490:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 491:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_TRAP_EXIT_MODE
 492:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 493:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TRAP_EXIT_MODE_AUTOMATIC = 0U, /**< Clear trap state as soon as the trap signal is
 494:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TRAP_EXIT_MODE_SW              /**< Clear only when acknowledged by software */
 495:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_TRAP_EXIT_MODE_t;
 496:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 497:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 498:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Timer clear on capture
 499:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 500:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_TIMER_CLEAR_MODE
 501:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 502:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_CLEAR_MODE_NEVER    = 0U, /**< Never clear the timer on any capture event */
 503:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_CLEAR_MODE_CAP_HIGH     , /**< Clear only when timer value has been captured
 504:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_CLEAR_MODE_CAP_LOW      , /**< Clear only when timer value has been captured
 505:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_CLEAR_MODE_ALWAYS         /**< Always clear the timer upon detection of any 
 506:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_TIMER_CLEAR_MODE_t;
 507:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 508:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 509:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Multi Channel Shadow transfer request configuration options
 510:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 511:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_MCMS_ACTION
 512:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 513:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MCMS_ACTION_TRANSFER_PR_CR          = 0U, /**< Transfer Compare and Period Shadow 
 514:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                 the actual registers upon MCS xfer 
 515:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MCMS_ACTION_TRANSFER_PR_CR_PCMP     = 1U, /**< Transfer Compare, Period and Presca
 516:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                 register values to the actual regis
 517:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                 request */
 518:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MCMS_ACTION_TRANSFER_PR_CR_PCMP_DIT = 3U  /**< Transfer Compare, Period ,Prescaler
 519:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                 Compare register values to the actu
 520:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                 MCS xfer request */
 521:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_MCMS_ACTION_t;
 522:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 523:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 524:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Available Interrupt Event Ids
 525:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 526:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_IRQ_ID
 527:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 528:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH            = 0U , /**< Period match counting up */
 529:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH               = 1U , /**< One match counting down */
 530:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1   = 2U , /**< Compare match counting up for channel 1
 531:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1 = 3U , /**< Compare match counting down for channel
 532:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2   = 4U , /**< Compare match counting up for channel 2
 533:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2 = 5U , /**< Compare match counting down for channel
 534:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_EVENT0                  = 8U , /**< Event-0 occurrence */
 535:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_EVENT1                  = 9U , /**< Event-1 occurrence */
 536:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_EVENT2                  = 10U, /**< Event-2 occurrence */
 537:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_TRAP                    = 11U  /**< Trap occurrence */
 538:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_IRQ_ID_t;
 539:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 540:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 541:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Available Interrupt Event Ids, which is added to support multi event APIs
 542:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 543:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_MULTI_IRQ_ID
 544:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 545:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_PERIOD_MATCH            = 0x1U,   /**< Period match counting up */
 546:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_ONE_MATCH               = 0x2U,   /**< One match counting down */
 547:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_COMPARE_MATCH_UP_CH_1   = 0x4U,   /**< Compare match counting up for 
 548:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_COMPARE_MATCH_DOWN_CH_1 = 0x8U,   /**< Compare match counting down fo
 549:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_COMPARE_MATCH_UP_CH_2   = 0x10U,  /**< Compare match counting up for 
 550:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_COMPARE_MATCH_DOWN_CH_2 = 0x20U,  /**< Compare match counting down fo
 551:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_EVENT0                  = 0x100U, /**< Event-0 occurrence */
 552:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_EVENT1                  = 0x200U, /**< Event-1 occurrence */
 553:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_EVENT2                  = 0x400U, /**< Event-2 occurrence */
 554:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_MULTI_IRQ_ID_t;
 555:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 556:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 557:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Service Request Lines for CCU8. Event are mapped to these SR lines and these are used to generat
 558:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 559:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_SR_ID
 560:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 561:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_SR_ID_0    = 0U, /**< Service Request Line-0 selected  */
 562:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_SR_ID_1        , /**< Service Request Line-1 selected  */
 563:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_SR_ID_2        , /**< Service Request Line-2 selected  */
 564:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_SR_ID_3          /**< Service Request Line-3 selected  */
 565:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_SR_ID_t;
 566:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 567:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 568:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 569:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Slice shadow transfer options.
 570:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 571:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SHADOW_TRANSFER
 572:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 573:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_SLICE_0            = CCU8_GCSS_S0SE_Msk,  /**< Transfer Period, Compare 
 574:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                           shadow register values to
 575:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                           SLICE-0 */
 576:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_DITHER_SLICE_0     = CCU8_GCSS_S0DSE_Msk, /**< Transfer Dither compare s
 577:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                           to actual register for SL
 578:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_PRESCALER_SLICE_0  = CCU8_GCSS_S0PSE_Msk, /**< Transfer Prescaler shadow
 579:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                           actual register for SLICE
 580:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_SLICE_1            = CCU8_GCSS_S1SE_Msk,  /**< Transfer Period, Compare 
 581:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                           shadow register values to
 582:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                           SLICE-1 */
 583:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_DITHER_SLICE_1     = CCU8_GCSS_S1DSE_Msk, /**< Transfer Dither compare s
 584:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                           to actual registers for S
 585:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_PRESCALER_SLICE_1  = CCU8_GCSS_S1PSE_Msk, /**< Transfer Prescaler shadow
 586:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                           actual register for SLICE
 587:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_SLICE_2            = CCU8_GCSS_S2SE_Msk,  /**< Transfer Period, Compare 
 588:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                           shadow register values to
 589:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                           SLICE-2 */
 590:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_DITHER_SLICE_2     = CCU8_GCSS_S2DSE_Msk, /**< Transfer Dither compare s
 591:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                           to actual register for SL
 592:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_PRESCALER_SLICE_2  = CCU8_GCSS_S2PSE_Msk, /**< Transfer Prescaler shadow
 593:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                           actual register for SLICE
 594:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_SLICE_3            = CCU8_GCSS_S3SE_Msk,  /**< Transfer Period, Compare 
 595:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                           shadow register values to
 596:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                           SLICE-3 */
 597:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_DITHER_SLICE_3     = CCU8_GCSS_S3DSE_Msk, /**< Transfer Dither compare s
 598:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                           to actual register for SL
 599:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_PRESCALER_SLICE_3  = CCU8_GCSS_S3PSE_Msk  /**< Transfer Prescaler shadow
 600:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                           actual register for SLICE
 601:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SHADOW_TRANSFER_t;
 602:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 603:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** #if (UC_SERIES != XMC45) || defined(DOXYGEN)
 604:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 605:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Slice shadow transfer mode options.
 606:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @note Not available for XMC4500 series
 607:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 608:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE
 609:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 610:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE_IN_PERIOD_MATCH_AND_ONE_MATCH = 0U, /**< Shadow transfer is d
 611:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                                One match. */
 612:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE_ONLY_IN_PERIOD_MATCH = 1U,  /**< Shadow transfer is done only
 613:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE_ONLY_IN_ONE_MATCH = 2U  /**< Shadow transfer is done only in 
 614:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE_t;
 615:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** #endif
 616:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 617:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** #if defined(CCU8V3) || defined(DOXYGEN) /* Defined for XMC1400 devices only */
 618:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 619:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Output sources for OUTy0 signal
 620:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @note Only available for XMC1400 series
 621:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 622:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  typedef enum XMC_CCU8_SOURCE_OUT0
 623:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 624:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT0_ST1      = (uint32_t)0x0, /**< CCU8yST1 signal path is connected the CCU8x.O
 625:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT0_INV_ST1  = (uint32_t)0x1, /**< Inverted CCU8yST1 signal path is connected th
 626:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT0_ST2      = (uint32_t)0x2, /**< CCU8yST2 signal path is connected the CCU8x.O
 627:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT0_INV_ST2  = (uint32_t)0x3  /**< Inverted CCU8yST2 signal path is connected th
 628:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SOURCE_OUT0_t;
 629:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 630:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 631:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Output sources for OUTy1 signal
 632:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  @note Only available for XMC1400 series
 633:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 634:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  typedef enum XMC_CCU8_SOURCE_OUT1
 635:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 636:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT1_ST1      = (uint32_t)0x1, /**< CCU8yST1 signal path is connected the CCU8x.O
 637:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT1_INV_ST1  = (uint32_t)0x0, /**< Inverted CCU8yST1 signal path is connected th
 638:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT1_ST2      = (uint32_t)0x3, /**< CCU8yST2 signal path is connected the CCU8x.O
 639:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT1_INV_ST2  = (uint32_t)0x2  /**< Inverted CCU8yST2 signal path is connected th
 640:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SOURCE_OUT1_t;
 641:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 642:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 643:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Output sources for OUTy2 signal
 644:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @note Only available for XMC1400 series
 645:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 646:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  typedef enum XMC_CCU8_SOURCE_OUT2
 647:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 648:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT2_ST2      = (uint32_t)0x0, /**< CCU8yST2 signal path is connected the CCU8x.O
 649:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT2_INV_ST2  = (uint32_t)0x1, /**< Inverted CCU8yST2 signal path is connected th
 650:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT2_ST1      = (uint32_t)0x2, /**< CCU8yST1 signal path is connected the CCU8x.O
 651:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT2_INV_ST1  = (uint32_t)0x3  /**< Inverted CCU8yST1 signal path is connected th
 652:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SOURCE_OUT2_t;
 653:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 654:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 655:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Output sources for OUTy3 signal
 656:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  @note Only available for XMC1400 series
 657:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 658:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  typedef enum XMC_CCU8_SOURCE_OUT3
 659:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 660:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT3_ST2      = (uint32_t)0x1, /**< CCU8yST2 signal path is connected the CCU8x.O
 661:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT3_INV_ST2  = (uint32_t)0x0, /**< Inverted CCU8yST2 signal path is connected th
 662:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT3_ST1      = (uint32_t)0x3, /**< CCU8yST1 signal path is connected the CCU8x.O
 663:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT3_INV_ST1  = (uint32_t)0x2  /**< Inverted CCU8yST1 signal path is connected th
 664:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SOURCE_OUT3_t;
 665:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** #endif
 666:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 667:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 668:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 669:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Output selector for CCU8x.OUT0-3
 670:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 671:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** #if !defined(CCU8V3) /* Defined for all devices except XMC1400 */
 672:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_OUT_PATH
 673:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 674:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT0_ST1      = (uint32_t)0x20000, /**< CCU8yST1 signal path is connected the C
 675:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT0_INV_ST1  = (uint32_t)0x20002, /**< Inverted CCU8yST1 signal path is connec
 676:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT1_ST1      = (uint32_t)0x40000, /**< CCU8yST1 signal path is connected the C
 677:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT1_INV_ST1  = (uint32_t)0x40004, /**< Inverted CCU8yST1 signal path is connec
 678:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT2_ST2      = (uint32_t)0x80000, /**< CCU8yST2 signal path is connected the C
 679:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT2_INV_ST2  = (uint32_t)0x80008, /**< Inverted CCU8yST2 signal path is connec
 680:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT3_ST2      = (uint32_t)0x100000,/**< CCU8yST2 signal path is connected the C
 681:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT3_INV_ST1  = (uint32_t)0x100010 /**< Inverted CCU8yST2 signal path is connec
 682:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_OUT_PATH_t;
 683:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** #else
 684:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_OUT_PATH
 685:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 686:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT0_ST1      = (uint32_t)0x000C0, /**< CCU8yST1 signal path is connected the C
 687:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT0_INV_ST1  = (uint32_t)0x000D0, /**< Inverted CCU8yST1 signal path is connec
 688:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT0_ST2      = (uint32_t)0x000E0, /**< CCU8yST2 signal path is connected the C
 689:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT0_INV_ST2  = (uint32_t)0x000F0, /**< Inverted CCU8yST2 signal path is connec
 690:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT1_ST1      = (uint32_t)0x00D00, /**< CCU8yST1 signal path is connected the C
 691:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT1_INV_ST1  = (uint32_t)0x00C00, /**< Inverted CCU8yST1 signal path is connec
 692:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT1_ST2      = (uint32_t)0x00F00, /**< CCU8yST2 signal path is connected the C
 693:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT1_INV_ST2  = (uint32_t)0x00E00, /**< Inverted CCU8yST2 signal path is connec
 694:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT2_ST2      = (uint32_t)0x0C000, /**< CCU8yST2 signal path is connected the C
 695:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT2_INV_ST2  = (uint32_t)0x0D000, /**< Inverted CCU8yST2 signal path is connec
 696:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT2_ST1      = (uint32_t)0x0E000, /**< CCU8yST1 signal path is connected the C
 697:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT2_INV_ST1  = (uint32_t)0x0F000, /**< Inverted CCU8yST1 signal path is connec
 698:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT3_ST2      = (uint32_t)0xD0000, /**< CCU8yST2 signal path is connected the C
 699:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT3_INV_ST2  = (uint32_t)0xC0000, /**< Inverted CCU8yST2 signal path is connec
 700:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT3_ST1      = (uint32_t)0xF0000, /**< CCU8yST1 signal path is connected the C
 701:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT3_INV_ST1  = (uint32_t)0xE0000  /**< Inverted CCU8yST1 signal path is connec
 702:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_OUT_PATH_t;
 703:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 704:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 705:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Immediate write into configuration register
 706:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  @note Only available for XMC1400 series
 707:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 708:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_WRITE_INTO
 709:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 710:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_WRITE_INTO_PERIOD_CONFIGURATION = CCU8_CC8_STC_IRPC_Msk,                  /**< Imm
 711:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                                                 Wri
 712:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                                                 Con
 713:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_WRITE_INTO_COMPARE1_CONFIGURATION = CCU8_CC8_STC_IRCC1_Msk,               /**< Imm
 714:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                                                 Wri
 715:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                                                 Con
 716:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_WRITE_INTO_COMPARE2_CONFIGURATION = CCU8_CC8_STC_IRCC2_Msk,               /**< Imm
 717:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                                                 Wri
 718:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                                                 Con
 719:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_WRITE_INTO_PASSIVE_LEVEL_CONFIGURATION = CCU8_CC8_STC_IRLC_Msk,           /**< Imm
 720:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                                                 Wri
 721:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 	                                                                                            Config
 722:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_WRITE_INTO_DITHER_VALUE_CONFIGURATION = CCU8_CC8_STC_IRDC_Msk,            /**< Imm
 723:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                                                 Wri
 724:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 	                                                                                            Config
 725:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_WRITE_INTO_FLOATING_PRESCALER_VALUE_CONFIGURATION = CCU8_CC8_STC_IRFC_Msk /**< Imm
 726:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                                                 Wri
 727:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                                                 Val
 728:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_WRITE_INTO_t;
 729:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 730:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 731:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 732:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Automatic Shadow Transfer request when writing into shadow register
 733:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  @note Only available for XMC1400 series
 734:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 735:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO
 736:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 737:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_PERIOD_SHADOW = CCU8_CC8_STC_ASPC_Msk,        
 738:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 	                                                                                                  
 739:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                                                    
 740:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                                                    
 741:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_COMPARE1_SHADOW = CCU8_CC8_STC_ASCC1_Msk,     
 742:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 	                                                                                                  
 743:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 	                                                                                                  
 744:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 	                                                                                                  
 745:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_COMPARE2_SHADOW = CCU8_CC8_STC_ASCC2_Msk,     
 746:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 	                                                                                                  
 747:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 	                                                                                                  
 748:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 	                                                                                                  
 749:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_PASSIVE_LEVEL = CCU8_CC8_STC_ASLC_Msk,        
 750:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 	                                                                                                  
 751:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                                                    
 752:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_DITHER_SHADOW = CCU8_CC8_STC_ASDC_Msk,        
 753:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                                                    
 754:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                                                    
 755:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_FLOATING_PRESCALER_SHADOW = CCU8_CC8_STC_ASFC_
 756:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 	                                                                                                  
 757:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                                                    
 758:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                                                    
 759:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 760:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_t;
 761:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** #endif
 762:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 763:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  CCU8 slice mask which can be used for the APIs as input where multi slice support is available
 764:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 765:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_MASK
 766:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 767:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MASK_SLICE_0  = 1U , /**< SLICE-0 */
 768:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MASK_SLICE_1  = 2U , /**< SLICE-1 */
 769:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MASK_SLICE_2  = 4U , /**< SLICE-2 */
 770:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_MASK_SLICE_3  = 8U   /**< SLICE-3 */
 771:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_MASK_t;
 772:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 773:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**************************************************************************************************
 774:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * DATA STRUCTURES
 775:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  **************************************************************************************************
 776:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 777:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 778:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Configuration data structure of an External Event(Event-0/1/2).
 779:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Needed to configure the various aspects of an External Event.
 780:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  This structure will not connect the external event with an external function.
 781:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 782:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef struct XMC_CCU8_SLICE_EVENT_CONFIG
 783:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 784:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_INPUT_t                   mapped_input; /**< Required input signal for the Event. 
 785:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_t  edge;         /**< Select the event edge of the input si
 786:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                               This is needed for an edge sensitive 
 787:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_t level;        /**< Select the event level of the input s
 788:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                               This is needed for an level sensitive
 789:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_FILTER_t            duration;     /**< Low Pass filter duration in terms of 
 790:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_EVENT_CONFIG_t;
 791:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 792:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /*Anonymous structure/union guard start*/
 793:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** #if defined(__CC_ARM)
 794:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   #pragma push
 795:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   #pragma anon_unions
 796:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** #elif defined(__TASKING__)
 797:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   #pragma warning 586
 798:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** #endif
 799:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 800:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 801:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Dead Time configuration
 802:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 803:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef struct XMC_CCU8_SLICE_DEAD_TIME_CONFIG
 804:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 805:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   union
 806:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   {
 807:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****     struct
 808:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****     {
 809:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t enable_dead_time_channel1 : 1; /**< Enable dead time for Compare Channel-1 */
 810:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t enable_dead_time_channel2 : 1; /**< Enable dead time for Compare Channel-2 */
 811:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t channel1_st_path : 1;          /**< Should dead time be applied to ST output of Comp
 812:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t channel1_inv_st_path : 1;      /**< Should dead time be applied to inverse ST output
 813:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                    Compare Channel-1? */
 814:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t channel2_st_path : 1;          /**< Should dead time be applied to ST output of Comp
 815:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t channel2_inv_st_path : 1;      /**< Should dead time be applied to inverse ST output
 816:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                    Compare Channel-2? */
 817:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t div : 2;                       /**< Dead time prescaler divider value.
 818:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                    Accepts enum ::XMC_CCU8_SLICE_DTC_DIV_t*/
 819:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t : 24;
 820:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****     };
 821:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****     uint32_t dtc;
 822:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   };
 823:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   union
 824:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   {
 825:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****     struct
 826:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****     {
 827:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t channel1_st_rising_edge_counter : 8; /**< Contains the delay value that is applied t
 828:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 	                                                       for compare channel-1. Range: [0x0 to 0xFF]
 829:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t channel1_st_falling_edge_counter : 8; /**< Contains the delay value that is applied 
 830:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 	                                                        for compare channel-1. Range: [0x0 to 0xFF
 831:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t : 16;
 832:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****     };
 833:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****     uint32_t dc1r;
 834:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   };
 835:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   union
 836:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   {
 837:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****     struct
 838:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****     {
 839:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t channel2_st_rising_edge_counter : 8; /**< Contains the delay value that is applied t
 840:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 	                                                     for compare channel-2. Range: [0x0 to 0xFF]*/
 841:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t channel2_st_falling_edge_counter : 8; /**< Contains the delay value that is applied 
 842:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 	                                                     for compare channel-2. Range: [0x0 to 0xFF]*/
 843:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t : 16;
 844:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****     };
 845:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****     uint32_t dc2r;
 846:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   };
 847:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_DEAD_TIME_CONFIG_t;
 848:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 849:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 850:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Configuration data structure for CCU8 slice. Specifically configures the CCU8 slice to compare 
 851:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  This excludes event and function configuration.
 852:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 853:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef struct XMC_CCU8_SLICE_COMPARE_CONFIG
 854:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 855:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   union
 856:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   {
 857:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****     struct
 858:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****     {
 859:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t timer_mode : 1;         /**< Edge aligned or Centre Aligned.
 860:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                             Accepts enum :: XMC_CCU8_SLICE_TIMER_COUNT_MODE_t */
 861:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t monoshot : 1;           /**< Single shot or Continuous mode .
 862:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                             Accepts enum :: XMC_CCU8_SLICE_TIMER_REPEAT_MODE_t */
 863:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t shadow_xfer_clear : 1; /**< Should PR and CR shadow xfer happen when timer is cleare
 864:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t : 10;
 865:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t dither_timer_period: 1; /**< Can the period of the timer dither? */
 866:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t dither_duty_cycle : 1;  /**< Can the compare match of the timer dither? */
 867:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t : 1;
 868:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t prescaler_mode: 1;      /**< Normal or floating prescaler mode.
 869:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                             Accepts enum :: XMC_CCU8_SLICE_PRESCALER_MODE_t */
 870:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t : 8;
 871:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t mcm_ch1_enable : 1;     /**< Multi-Channel mode for compare channel 1 enable? */
 872:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t mcm_ch2_enable : 1;     /**< Multi-Channel mode for compare channel 2 enable? */
 873:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t : 2;
 874:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t slice_status : 2;       /**< Which of the two channels drives the slice status outpu
 875:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 	                                          Accepts enum :: XMC_CCU8_SLICE_STATUS_t*/
 876:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t : 1;
 877:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****     };
 878:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****     uint32_t tc;
 879:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   };
 880:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   union
 881:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   {
 882:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****     struct
 883:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****     {
 884:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t passive_level_out0 : 1; /**< ST and OUT passive levels Configuration for OUT0. 
 885:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 	                                          Accepts enum :: XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_t */
 886:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t passive_level_out1 : 1; /**< ST and OUT passive levels Configuration for OUT1. 
 887:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 	                                          Accepts enum :: XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_t */
 888:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t passive_level_out2 : 1; /**< ST and OUT passive levels Configuration for OUT2. 
 889:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 	                                          Accepts enum :: XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_t */
 890:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t passive_level_out3 : 1; /**< ST and OUT passive levels Configuration for OUT3. 
 891:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 	                                          Accepts enum :: XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_t */
 892:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t : 28;
 893:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****     };
 894:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****     uint32_t psl;
 895:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   };
 896:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   union
 897:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   {
 898:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****     struct
 899:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****     {
 900:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t asymmetric_pwm : 1;     /**< Should the PWM be a function of the 2 compare channels
 901:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                             rather than period value? */
 902:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   #if !defined(CCU8V3)    /* Defined for all devices except XMC1400 */                             
 903:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t invert_out0 : 1;        /**< Should inverted ST of Channel-1 be connected to OUT0? *
 904:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t invert_out1 : 1;        /**< Should inverted ST of Channel-1 be connected to OUT1? *
 905:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t invert_out2 : 1;        /**< Should inverted ST of Channel-2 be connected to OUT2? *
 906:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t invert_out3 : 1;        /**< Should inverted ST of Channel-2 be connected to OUT3? *
 907:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t : 27;
 908:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   #else
 909:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t : 3;
 910:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t selector_out0 : 2;      /**< Connect ST or inverted ST of Channel-1 or Channel-2 be 
 911:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                             Accepts enum :: XMC_CCU8_SOURCE_OUT0_t 
 912:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                             refer OCS1 bit-field of CHC register. 
 913:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 											@note Only available for XMC1400 series */
 914:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t : 2;
 915:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t selector_out1 : 2;      /**< Connect ST or inverted ST of Channel-1 or Channel-2 be 
 916:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                             Accepts enum :: XMC_CCU8_SOURCE_OUT1_t 
 917:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                             refer OCS2 bit-field of CHC register. 
 918:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 											@note Only available for XMC1400 series */
 919:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t : 2;
 920:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t selector_out2 : 2;      /**< Connect ST or inverted ST of Channel-1 or Channel-2 be 
 921:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                             Accepts enum :: XMC_CCU8_SOURCE_OUT2_t 
 922:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                             refer OCS3 bit-field of CHC register.
 923:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 											@note Only available for XMC1400 series */
 924:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t : 2;
 925:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t selector_out3 : 2;      /**< Connect ST or inverted ST of Channel-1 or Channel-2 be 
 926:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                             Accepts enum :: XMC_CCU8_SOURCE_OUT3_t 
 927:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                             refer OCS4 bit-field of CHC register.
 928:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 											@note Only available for XMC1400 series */
 929:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t : 14;
 930:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   #endif
 931:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****     };
 932:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****     uint32_t chc;
 933:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   };
 934:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   uint32_t prescaler_initval : 4;      /**< Initial prescaler divider value 
 935:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                             Accepts enum :: XMC_CCU8_SLICE_PRESCALER_t */
 936:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   uint32_t float_limit : 4;            /**< The max value which the prescaler divider can increment
 937:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                             Range : [0 to 15] */
 938:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   uint32_t dither_limit : 4;           /**< The value that determines the spreading of dithering 
 939:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                             Range : [0 to 15] */
 940:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   uint32_t timer_concatenation : 1;    /**< Enables the concatenation of the timer if true*/
 941:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_COMPARE_CONFIG_t;
 942:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 943:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
 944:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Configuration data structure for CCU8 slice. Specifically configures the CCU8 slice to capture 
 945:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  This excludes event and function configuration.
 946:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
 947:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** typedef struct XMC_CCU8_SLICE_CAPTURE_CONFIG
 948:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 949:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   union
 950:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   {
 951:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****     struct
 952:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****     {
 953:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t : 4;
 954:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t fifo_enable : 1;      /**< Should the capture registers be setup as a FIFO?(Extended
 955:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t timer_clear_mode : 2; /**< How should the timer register be cleared upon detection o
 956:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                           Accepts enum ::XMC_CCU8_SLICE_TIMER_CLEAR_MODE_t */
 957:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t : 4;
 958:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t same_event : 1;       /**< Should the capture event for C1V/C0V and C3V/C2V be same 
 959:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t ignore_full_flag : 1; /**< Should updates to capture registers follow full flag rule
 960:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t : 3;
 961:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t prescaler_mode: 1;    /**< Normal or floating prescaler Accepts enum :: XMC_CCU8_SLI
 962:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****       uint32_t : 15;
 963:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****     };
 964:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****     uint32_t tc;
 965:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   };
 966:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   uint32_t prescaler_initval : 4;    /**< Prescaler divider value */
 967:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   uint32_t float_limit : 4;          /**< The max value which the prescaler divider can increment t
 968:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   uint32_t timer_concatenation : 1;    /**< Enables the concatenation of the timer */
 969:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** } XMC_CCU8_SLICE_CAPTURE_CONFIG_t;
 970:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /*Anonymous structure/union guard end*/
 971:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** #if defined(__CC_ARM)
 972:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   #pragma pop
 973:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** #elif defined(__TASKING__)
 974:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   #pragma warning restore
 975:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** #endif
 976:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**************************************************************************************************
 977:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * API Prototypes
 978:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  **************************************************************************************************
 979:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** #ifdef __cplusplus
 980:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** extern "C" {
 981:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** #endif
 982:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 983:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE bool XMC_CCU8_IsValidModule(const XMC_CCU8_MODULE_t *const module)
 984:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 985:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   bool tmp = false;
 986:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   
 987:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   tmp = (module == CCU80);
 988:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   
 989:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** #if defined(CCU81)
 990:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   tmp = tmp || (module == CCU81);
 991:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** #endif
 992:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   
 993:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   return tmp;  
 994:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** } 
 995:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
 996:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE bool XMC_CCU8_IsValidSlice(const XMC_CCU8_SLICE_t *const slice)
 997:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 998:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   bool tmp = false;
 999:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   
1000:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   tmp = (slice == CCU80_CC80);
1001:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** #if defined(CCU80_CC81)  
1002:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   tmp = tmp || (slice == CCU80_CC81);
1003:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** #endif
1004:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** #if defined(CCU80_CC82)  
1005:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   tmp = tmp || (slice == CCU80_CC82);
1006:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** #endif
1007:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** #if defined(CCU80_CC83)  
1008:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   tmp = tmp || (slice == CCU80_CC83);
1009:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** #endif
1010:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** #if defined(CCU81)  
1011:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   tmp = tmp || (slice == CCU81_CC80);
1012:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** #if defined(CCU81_CC81)  
1013:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   tmp = tmp || (slice == CCU81_CC81);
1014:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** #endif
1015:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** #if defined(CCU81_CC82)  
1016:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   tmp = tmp || (slice == CCU81_CC82);
1017:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** #endif
1018:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** #if defined(CCU81_CC83)  
1019:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   tmp = tmp || (slice == CCU81_CC83);
1020:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** #endif
1021:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** #endif 
1022:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  
1023:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   return tmp;  
1024:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** } 
1025:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1026:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1027:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1028:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param mcs_action multi-channel shadow transfer request configuration
1029:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1030:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1031:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1032:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1033:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Initialization of global register GCTRL.\n\n
1034:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  As part of module initialization, behaviour of the module upon detection
1035:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Multi-Channel Mode trigger is configured. Will also invoke the XMC_CCU8_EnableModule().
1036:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  The API call would bring up the required CCU8 module and also initialize the module for
1037:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  the required multi-channel shadow transfer.
1038:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1039:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1040:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * XMC_CCU8_SLICE_CompareInit()<BR> XMC_CCU8_SLICE_CaptureInit().
1041:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1042:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** void XMC_CCU8_Init(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_SLICE_MCMS_ACTION_t mcs_action);
1043:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1044:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1045:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1046:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1047:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1048:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1049:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1050:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Enables the CCU8 module and brings it to active state.\n\n
1051:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Also disables the gating of the clock signal (if applicable depending on the device being select
1052:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Invoke this API before any operations are done on the CCU8 module. Invoked from  XMC_CCU8_Init()
1053:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1054:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1055:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * XMC_CCU8_SetModuleClock()<BR>  XMC_CCU8_DisableModule()<BR>  XMC_CCU8_StartPrescaler().
1056:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1057:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** void XMC_CCU8_EnableModule(XMC_CCU8_MODULE_t *const module);
1058:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1059:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1060:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1061:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1062:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1063:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1064:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1065:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Brings the CCU8 module to reset state and enables gating of the clock signal(if applicable depen
1066:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * on the device being selected).\n\n
1067:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Invoke this API when a CCU8 module needs to be disabled completely.
1068:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Any operation on the CCU8 module will have no effect after this API is called.
1069:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1070:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1071:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * XMC_CCU8_EnableModule()<BR> XMC_CCU8_DisableModule().
1072:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1073:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** void XMC_CCU8_DisableModule(XMC_CCU8_MODULE_t *const module);
1074:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1075:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1076:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1077:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param clock Choice of input clock to the module
1078:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1079:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1080:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1081:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1082:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Selects the Module Clock by configuring GCTRL.PCIS bits.\n\n
1083:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  There are 3 potential clock sources. This API helps to select the required clock source.
1084:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Call to this API is valid after the XMC_CCU8_Init().
1085:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1086:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1087:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * None.<BR>
1088:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1089:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** void XMC_CCU8_SetModuleClock(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_CLOCK_t clock);
1090:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1091:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1092:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1093:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1094:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1095:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1096:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1097:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1098:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Starts the prescaler and restores clocks to the timer slices, by setting GIDLC.SPRB bit.<br>\n
1099:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Once the input to the prescaler has been chosen and the prescaler divider of all slices program
1100:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  the prescaler itself may be started. Invoke this  API after XMC_CCU8_Init()
1101:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  (Mandatory to fully initialize the module).
1102:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1103:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1104:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPres
1105:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_StopPrescaler().
1106:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1107:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
1108:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
1109:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
1110:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   module->GIDLC |= (uint32_t) CCU8_GIDLC_SPRB_Msk;
1111:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** }
1112:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1113:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1114:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1115:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1116:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1117:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1118:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1119:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Stops the prescaler and blocks clocks to the timer slices, by setting GIDLS.CPRB bit.\n\n
1120:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Clears the run bit of the prescaler. Ensures that the module clock is not supplied to
1121:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * the slices of the module.
1122:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1123:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1124:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR>  XMC_CCU8
1125:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1126:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_StopPrescaler(XMC_CCU8_MODULE_t *const module)
1127:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
1128:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_StopPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
1129:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   module->GIDLS |= (uint32_t) CCU8_GIDLS_CPRB_Msk;
1130:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** }
1131:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1132:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1133:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1134:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1135:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1136:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1137:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1138:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Returns the state of the prescaler, by reading GSTAT.PRB bit.\n\n
1139:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * If clock is being supplied to the slices of the  module then returns as true. 
1140:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1141:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1142:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * XMC_CCU8_StartPrescaler()<BR>  XMC_CCU8_StopPrescaler()<BR> XMC_CCU8_EnableClock()<BR>  XMC_CCU8
1143:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1144:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE bool XMC_CCU8_IsPrescalerRunning(XMC_CCU8_MODULE_t *const module)
1145:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
1146:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_IsPrescalerRunning:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
1147:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   return((bool)((module->GSTAT & (uint32_t) CCU8_GSTAT_PRB_Msk) == CCU8_GSTAT_PRB_Msk));
1148:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** }
1149:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1150:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1151:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1152:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param clock_mask Slices whose clocks are to be enabled simultaneously.
1153:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *                   Bit location 0/1/2/3 represents slice-0/1/2/3 respectively. 
1154:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *                   Range: [0x1 to 0xF]
1155:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1156:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1157:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1158:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1159:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Enables clocks of multiple slices at a time, by configuring GIDLC.CS0I, GIDLC.CS1I, GIDLC.CS2I, 
1160:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * GIDLC.CS3I bits.\n\n
1161:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Takes an input clock_mask, which determines the slices that would receive the clock. Bring them 
1162:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * of the idle state simultaneously.
1163:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1164:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1165:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock().
1166:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1167:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_EnableMultipleClocks(XMC_CCU8_MODULE_t *const module, const uint8_t c
1168:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
1169:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_EnableMultipleClocks:Invalid Module Pointer", XMC_CCU8_IsValidModule(module)
1170:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_EnableMultipleClocks:Invalid clock mask", (clock_mask < 16U));
1171:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1172:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   module->GIDLC |= (uint32_t) clock_mask;
1173:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** }
1174:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1175:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1176:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1177:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param compare_init Pointer to slice configuration structure
1178:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1179:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1180:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1181:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1182:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Initialization of a CC8 slice to compare mode, by configuring CC8yTC, CC8yCMC, CC8yPSC, CC8yDITH
1183:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * CC8yFPCS, CC8yCHC registers.\n\n
1184:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * CC8 slice is configured with Timer configurations in this routine. Timer is stopped before initi
1185:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * by calling XMC_CCU8_SLICE_StopTimer(). After initialization user has to explicitly enable
1186:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * the shadow transfer for the required values by calling XMC_CCU8_EnableShadowTransfer() with appr
1187:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1188:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1189:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * None.
1190:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1191:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_CompareInit(XMC_CCU8_SLICE_t *const slice,
1192:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                 const XMC_CCU8_SLICE_COMPARE_CONFIG_t *const compare_init);
1193:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1194:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1195:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1196:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param capture_init Pointer to slice configuration structure
1197:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1198:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1199:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1200:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1201:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Initialization of a CC8 slice to capture mode, by configuring CC8yTC, CC8yCMC, CC8yPSC,CC8yFPCS 
1202:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * CC8 slice is configured with Capture configurations in  this routine. Timer is stopped before in
1203:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * by calling XMC_CCU8_SLICE_StopTimer(). After initialization user has to explicitly enable the sh
1204:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * for the required  values by calling XMC_CCU8_EnableShadowTransfer() with appropriate mask. 
1205:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1206:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1207:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * XMC_CCU8_SLICE_Capture0Config()<BR>  XMC_CCU8_SLICE_Capture1Config().
1208:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1209:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_CaptureInit(XMC_CCU8_SLICE_t *const slice,
1210:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                 const XMC_CCU8_SLICE_CAPTURE_CONFIG_t *const capture_init);
1211:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1212:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1213:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1214:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice_number Slice for which the clock should be Enabled.
1215:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *                   Range: [0x0 to 0x3]
1216:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1217:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1218:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1219:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1220:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Enables the slice timer clock, by configuring GIDLC.CS0I, GIDLC.CS1I, GIDLC.CS2I, 
1221:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  GIDLC.CS3I bits according to the selected \a slice_number.\n\n
1222:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  It is possible to enable/disable clock at slice level. This uses the \b slice_number to indicat
1223:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  slice whose clock needs to be enabled. Directly accessed register is GIDLC.
1224:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1225:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1226:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * XMC_CCU8_DisableClock()<BR>  XMC_CCU8_EnableMultipleClocks()<BR>  XMC_CCU8_StartPrescaler()<BR> 
1227:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1228:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_EnableClock(XMC_CCU8_MODULE_t *const module, const uint8_t slice_numb
1229:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
  27              	 .loc 1 1229 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
  43 0008 0B46     	 mov r3,r1
  44 000a FB70     	 strb r3,[r7,#3]
1230:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
1231:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Slice Number", (slice_number < 4U));
1232:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1233:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   module->GIDLC |= ((uint32_t) 1 << slice_number);
  45              	 .loc 1 1233 0
  46 000c 7B68     	 ldr r3,[r7,#4]
  47 000e DA68     	 ldr r2,[r3,#12]
  48 0010 FB78     	 ldrb r3,[r7,#3]
  49 0012 0121     	 movs r1,#1
  50 0014 01FA03F3 	 lsl r3,r1,r3
  51 0018 1A43     	 orrs r2,r2,r3
  52 001a 7B68     	 ldr r3,[r7,#4]
  53 001c DA60     	 str r2,[r3,#12]
1234:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** }
  54              	 .loc 1 1234 0
  55 001e 0C37     	 adds r7,r7,#12
  56              	.LCFI3:
  57              	 .cfi_def_cfa_offset 4
  58 0020 BD46     	 mov sp,r7
  59              	.LCFI4:
  60              	 .cfi_def_cfa_register 13
  61              	 
  62 0022 5DF8047B 	 ldr r7,[sp],#4
  63              	.LCFI5:
  64              	 .cfi_restore 7
  65              	 .cfi_def_cfa_offset 0
  66 0026 7047     	 bx lr
  67              	 .cfi_endproc
  68              	.LFE144:
  70              	 .section .text.XMC_CCU8_DisableClock,"ax",%progbits
  71              	 .align 2
  72              	 .thumb
  73              	 .thumb_func
  75              	XMC_CCU8_DisableClock:
  76              	.LFB145:
1235:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1236:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1237:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1238:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice_number Slice for which the clock should be disabled.
1239:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *                   Range: [0x0 to 0x3]
1240:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1241:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1242:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1243:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1244:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Disables the slice timer clock, by configuring GIDLS.SS0I, GIDLS.SSS1I, GIDLS.SSS2I, 
1245:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * GIDLS.SSS3I bits according to the selected \a slice_number .\n\n
1246:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * It is possible to disable clock at slice level using the module pointer.
1247:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \b slice_number is used to disable the clock to a given slice of the module.
1248:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1249:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1250:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * XMC_CCU8_EnableClock()<BR>  XMC_CCU8_EnableMultipleClocks()<BR>  XMC_CCU8_StartPrescaler()<BR>  
1251:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1252:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_DisableClock(XMC_CCU8_MODULE_t *const module, const uint8_t slice_num
1253:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
  77              	 .loc 1 1253 0
  78              	 .cfi_startproc
  79              	 
  80              	 
  81              	 
  82 0000 80B4     	 push {r7}
  83              	.LCFI6:
  84              	 .cfi_def_cfa_offset 4
  85              	 .cfi_offset 7,-4
  86 0002 83B0     	 sub sp,sp,#12
  87              	.LCFI7:
  88              	 .cfi_def_cfa_offset 16
  89 0004 00AF     	 add r7,sp,#0
  90              	.LCFI8:
  91              	 .cfi_def_cfa_register 7
  92 0006 7860     	 str r0,[r7,#4]
  93 0008 0B46     	 mov r3,r1
  94 000a FB70     	 strb r3,[r7,#3]
1254:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_DisableClock:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
1255:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_DisableClock:Invalid Slice Number", (slice_number < 4U));
1256:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1257:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   module->GIDLS |= ((uint32_t) 1 << slice_number);
  95              	 .loc 1 1257 0
  96 000c 7B68     	 ldr r3,[r7,#4]
  97 000e 9A68     	 ldr r2,[r3,#8]
  98 0010 FB78     	 ldrb r3,[r7,#3]
  99 0012 0121     	 movs r1,#1
 100 0014 01FA03F3 	 lsl r3,r1,r3
 101 0018 1A43     	 orrs r2,r2,r3
 102 001a 7B68     	 ldr r3,[r7,#4]
 103 001c 9A60     	 str r2,[r3,#8]
1258:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** }
 104              	 .loc 1 1258 0
 105 001e 0C37     	 adds r7,r7,#12
 106              	.LCFI9:
 107              	 .cfi_def_cfa_offset 4
 108 0020 BD46     	 mov sp,r7
 109              	.LCFI10:
 110              	 .cfi_def_cfa_register 13
 111              	 
 112 0022 5DF8047B 	 ldr r7,[sp],#4
 113              	.LCFI11:
 114              	 .cfi_restore 7
 115              	 .cfi_def_cfa_offset 0
 116 0026 7047     	 bx lr
 117              	 .cfi_endproc
 118              	.LFE145:
 120              	 .section .text.XMC_CCU8_SLICE_EnableTrap,"ax",%progbits
 121              	 .align 2
 122              	 .thumb
 123              	 .thumb_func
 125              	XMC_CCU8_SLICE_EnableTrap:
 126              	.LFB147:
1259:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1260:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1261:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1262:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param out_path_msk configuration for output path selection.
1263:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *        combination of XMC_CCU8_OUT_PATH_t enum items can be used to create a mask.
1264:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * 
1265:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1266:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1267:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1268:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1269:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Configure the out the path of the two compare channels with specified ST signal, by configuring 
1270:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  ^ CC8yCHC register.\n\n
1271:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * 
1272:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * For the two compare channels it is possible to select either direct ST signal or inverted ST sig
1273:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \b out_path_msk is used to set the required out put path.
1274:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1275:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1276:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * None
1277:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** */
1278:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_SetOutPath(XMC_CCU8_SLICE_t *const slice, const uint32_t out_path_msk);
1279:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1280:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1281:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1282:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param event Map an External event to the External Start Function
1283:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param start_mode Behaviour of slice when the start function is activated
1284:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1285:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1286:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1287:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1288:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Configures the Start Function of the slice, by configuring CC8yCMC.ENDS and CC8yTC.ENDM bits.\n
1289:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Start function is mapped with one of the 3 events. An external signal can control when a CC8 ti
1290:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Additionally, the behaviour of the slice upon activation of the start function is configured as
1291:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1292:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1293:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * XMC_CCU8_SLICE_StopConfig()<BR>  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1294:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1295:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_StartConfig(XMC_CCU8_SLICE_t *const slice,
1296:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                 const XMC_CCU8_SLICE_EVENT_t event,
1297:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                 const XMC_CCU8_SLICE_START_MODE_t start_mode);
1298:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1299:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1300:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1301:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param event Map an External event to the External Stop Function
1302:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param end_mode Behaviour of slice when the stop function is activated
1303:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1304:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1305:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1306:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1307:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Configures the Stop function for the slice, by configuring CC8yCMC.STRTS and CC8yTC.STRM bits.\n
1308:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Stop function is mapped with one of the 3 events. An external signal can control when a CCU8 tim
1309:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Additionally, the behaviour of the slice upon activation of the stop function is configured as w
1310:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1311:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1312:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * XMC_CCU8_SLICE_StartConfig()<BR>  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput()
1313:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1314:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_StopConfig(XMC_CCU8_SLICE_t *const slice,
1315:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                const XMC_CCU8_SLICE_EVENT_t event,
1316:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                const XMC_CCU8_SLICE_END_MODE_t end_mode);
1317:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1318:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1319:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1320:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param event Map an External event to the External load Function
1321:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1322:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1323:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1324:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1325:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Configures the Load Function for the slice, by configuring CC8yCMC.LDS bit.\n\n
1326:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Load function is mapped with one of the 3 events. Up on occurrence of the event,\n
1327:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  if CC8yTCST.CDIR set to 0,CC8yTIMER register is reloaded with the value from compare channel 1 
1328:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *                            compare channel 2\n
1329:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  if CC8yTCST.CDIR set to 1,CC8yTIMER register is reloaded with the value from period register\n
1330:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  
1331:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1332:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1333:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1334:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1335:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_LoadConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event);
1336:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1337:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1338:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1339:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param ch_num Select which compare channel value has to be loaded to the Timer register during e
1340:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1341:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1342:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1343:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1344:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Up on occurrence of the external load event, if CC8yTCST.CDIR set to 0, CC8yTIMER register can 
1345:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  with the value from compare channel 1 or compare channel 2\n
1346:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  If CC8yTC.TLS is 0, compare channel 1 value is loaded to the CC8yTIMER register\n
1347:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  If CC8yTC.TLS is 1, compare channel 2 value is loaded to the CC8yTIMER register\n
1348:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1349:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1350:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1351:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1352:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_LoadSelector(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_COMPARE_CHANNE
1353:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1354:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1355:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1356:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param event Map an External event to the External Modulation Function
1357:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param mod_mode Desired Modulation mode
1358:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param channel Specify the channel(s) on which the modulation should be applied.
1359:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param synch_with_pwm Option to synchronize modulation with PWM start
1360:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *                       Pass \b true if the modulation needs to be synchronized with PWM signal.
1361:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1362:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1363:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1364:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1365:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Configures the Output Modulation Function of the slice, by configuring CC8yCMC.MOS, CC8yTC.EMT a
1366:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * CC8yTC.EMS bits.\n\n
1367:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Modulation function is mapped with one of the 3 events. The output signal of the CCU can
1368:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * be modulated according to a external input.  Additionally, the behaviour of the slice upon activ
1369:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * of the modulation function is configured as well.
1370:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1371:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1372:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1373:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1374:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_ModulationConfig(XMC_CCU8_SLICE_t *const slice,
1375:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                      const XMC_CCU8_SLICE_EVENT_t event,
1376:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                      const XMC_CCU8_SLICE_MODULATION_MODE_t mod_mode,
1377:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                      const XMC_CCU8_SLICE_MODULATION_CHANNEL_t channel, 
1378:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                      const bool synch_with_pwm
1379:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                      );
1380:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1381:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1382:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1383:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param event Map an External event to the External Count Function
1384:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1385:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1386:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1387:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1388:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Configures the Count Function of the slice, by configuring CC8yCMC.CNTS bit.\n\n
1389:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Count function is mapped with one of the 3 events. CCU8 slice can take an external
1390:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * signal to act as the counting event. The CCU8 slice would count the
1391:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * edges present on the \b event selected. 
1392:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1393:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1394:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1395:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1396:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_CountConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event);
1397:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1398:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1399:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1400:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param event  Map an External event to the External Gating Function
1401:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1402:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1403:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1404:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1405:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Configures the Gating Function of the slice, by configuring CC8yCMC.GATES bit.\n\n
1406:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Gating function is mapped with one of the 3 events.  A CCU8 slice can use an input signal that w
1407:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * operate as counter gating. If the configured Active level is detected the counter will gate all 
1408:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1409:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1410:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1411:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1412:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_GateConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event);
1413:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1414:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1415:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1416:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param event Map an External event to the Capture-0 Function
1417:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1418:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1419:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1420:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1421:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Configures the Capture-0 Function of the slice, by configuring CC8yCMC.CAP0S bit.\n\n
1422:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Capture function is mapped with one of the 3 events.  A CCU8 slice can be configured into captur
1423:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * with the selected \b event. In this mode the CCU8 will capture the timer value into CC8yC0V and 
1424:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1425:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1426:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1427:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1428:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_Capture0Config(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t even
1429:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1430:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1431:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1432:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param event Map an External event to the Capture-1 Function
1433:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1434:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1435:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1436:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1437:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Configures the Capture-1 Function of the slice, by configuring CC8yCMC.CAP1S bit.\n\n
1438:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Capture function is mapped with one of the 3 events. A CCU8 slice can be configured into capture
1439:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * mode with the selected \b event. In this mode the CCU8 will capture the timer value into CC8yC2V
1440:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1441:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1442:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1443:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1444:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_Capture1Config(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t even
1445:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1446:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1447:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1448:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1449:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    bool would return true if the extended capture read back mode is enabled<BR>
1450:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1451:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1452:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Checks if Extended capture mode read is enabled for particular slice or not, by reading CC8yTC.E
1453:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * In this mode the there is only one associated read address for all the capture registers.
1454:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Individual capture registers can still be accessed in this mode.
1455:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1456:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1457:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_GetCapturedValueFromFifo().
1458:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1459:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE bool XMC_CCU8_SLICE_IsExtendedCapReadEnabled(const XMC_CCU8_SLICE_t *const slice)
1460:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
1461:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_IsPrescalerRunning:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1462:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   return((bool)((slice->TC & (uint32_t) CCU8_CC8_TC_ECM_Msk) == (uint32_t)CCU8_CC8_TC_ECM_Msk));
1463:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** }
1464:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1465:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** #if defined(CCU8V1) /* Defined for XMC4800, XMC4700, XMC4500, XMC4400, XMC4200, XMC4100 devices onl
1466:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1467:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1468:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice_number to check whether read value belongs to required slice or not
1469:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1470:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *   int32_t   Returns -1 if the FIFO value being retrieved is not from the \b slice_number.
1471:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *             Returns the value captured in the \b slice_number, if captured value is from the cor
1472:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *                     Range: [0x0 to 0xFFFF]
1473:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1474:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1475:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Read captured value from FIFO(ECRD register).\n\n
1476:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * This is applicable only in the Capture mode of operation. The signal whose timing characteristic
1477:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * must be mapped to an event which in turn must be mapped to the capture function. Based on the ca
1478:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * instant timer values are captured into capture registers. Timing characteristics of the input si
1479:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * derived/inferred from the captured values.
1480:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1481:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1482:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_IsExtendedCapReadEnabled().
1483:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1484:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** int32_t XMC_CCU8_GetCapturedValueFromFifo(const XMC_CCU8_MODULE_t *const module, const uint8_t slic
1485:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** #else
1486:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1487:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1488:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param set The capture register set from which the captured value is to be retrieved
1489:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1490:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    uint32_t Returns the value captured in the \b slice_number
1491:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *             Range: [0x0 to 0xFFFF]
1492:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1493:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1494:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Read captured value from FIFO(CC8yECRD0 and CC8yECRD1).\n\n
1495:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * This is applicable only in the Capture mode of operation. The signal whose timing characteristic
1496:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * must be mapped to an event which in turn must be mapped to the capture function. Based on the ca
1497:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * instant timer values are captured into capture registers. Timing characteristics of the input si
1498:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * derived/inferred from the captured values.
1499:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1500:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1501:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_IsExtendedCapReadEnabled().
1502:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @note Defined for XMC4800, XMC4700, XMC4500, XMC4400, XMC4200, XMC4100 devices only. For other d
1503:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1504:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** uint32_t XMC_CCU8_SLICE_GetCapturedValueFromFifo(const XMC_CCU8_SLICE_t *const slice,
1505:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 		                                             const XMC_CCU8_SLICE_CAP_REG_SET_t set);
1506:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** #endif
1507:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1508:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1509:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1510:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param event Map an External event to the External Count Direction Function
1511:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1512:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1513:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1514:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1515:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Configures the Count Direction of the slice, by configuring CC8yCMC.UDS bit.\n\n
1516:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Count direction function is mapped with one of the 3 events. A slice can be configured to change
1517:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * CC8yTIMER count direction depending on an external signal.
1518:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1519:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1520:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1521:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1522:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_DirectionConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t eve
1523:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1524:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1525:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1526:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1527:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1528:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1529:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1530:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Configures the status bit override Function of the slice, by configuring CC8yCMC.OFS bit.\n\n
1531:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Status bit override function is mapped with one of the 3 events. A slice can be configured to ch
1532:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * output of the timer's CC8yST1 signal depending on an external signal.
1533:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1534:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1535:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent().
1536:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1537:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_StatusBitOverrideConfig(XMC_CCU8_SLICE_t *const slice);
1538:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1539:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1540:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1541:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param exit_mode How should a previously logged trap state be exited?
1542:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param synch_with_pwm Should exit of trap state be synchronized with PWM cycle start?
1543:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1544:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1545:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1546:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1547:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1548:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Configures the Trap Function of the slice, by configuring CC8yCMC.TS, CC8yTC.TRPSE, and CC8yTC.T
1549:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Trap function is mapped with Event-2. Criteria for exiting the trap state is configured.
1550:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * This trap function allows PWM outputs to react on the state of an input pin.
1551:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Thus PWM output can be forced to inactive state upon detection of a trap.
1552:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * It is also possible to synchronize the trap function with the PWM signal using the \b synch_with
1553:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1554:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1555:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1556:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1557:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_TrapConfig(XMC_CCU8_SLICE_t *const slice,
1558:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                const XMC_CCU8_SLICE_TRAP_EXIT_MODE_t exit_mode,
1559:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                bool synch_with_pwm);
1560:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1561:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1562:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1563:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param ev1_config Pointer to event 1 configuration data
1564:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param ev2_config Pointer to event 2 configuration data
1565:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1566:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1567:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1568:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1569:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1570:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Map Status bit override function with an Event1 & Event 2 of the slice and configure CC8yINS reg
1571:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Details such as the input mapped to the event, event detection criteria and Low Pass filter opti
1572:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * by this routine for the events 1 & 2.  Event-1 input would be the trigger to override the value.
1573:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Event-2 input would be the override value.
1574:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1575:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1576:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StatusBitOverrideConfig().
1577:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1578:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent(XMC_CCU8_SLICE_t *const slice,
1579:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                     const XMC_CCU8_SLICE_EVENT_CONFIG_t *const ev1_
1580:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                     const XMC_CCU8_SLICE_EVENT_CONFIG_t *const ev2_
1581:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1582:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1583:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1584:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param event The External Event which needs to be configured.
1585:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param config Pointer to event configuration data.
1586:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1587:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1588:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1589:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1590:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Configures an External Event of the slice, by updating CC8yINS register .\n\n
1591:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Details such as the input mapped to the event, event detection criteria and low pass filter
1592:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * options are programmed by this routine. The Event \b config  will configure the input selection,
1593:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * the edge selection, the level selection and the Low pass filter for the  event.
1594:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1595:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1596:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StartConfig()<BR>  XMC_CCU8_SLICE_StopConfig()<BR>  XMC_CCU8_SLICE_LoadConfig()<
1597:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ModulationConfig()<BR>  XMC_CCU8_SLICE_CountConfig()<BR>  XMC_CCU8_SLICE_GateCon
1598:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_Capture0Config()<BR> XMC_CCU8_SLICE_Capture1Config()<BR>  XMC_CCU8_SLICE_Directi
1599:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StatusBitOverrideConfig()<BR>  XMC_CCU8_SLICE_TrapConfig().
1600:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1601:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_ConfigureEvent(XMC_CCU8_SLICE_t *const slice,
1602:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                    const XMC_CCU8_SLICE_EVENT_t event,
1603:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                    const XMC_CCU8_SLICE_EVENT_CONFIG_t *config);
1604:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1605:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1606:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1607:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param event The External Event which needs to be configured.
1608:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param input One of the 16 inputs meant to be mapped to the desired event
1609:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1610:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1611:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1612:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1613:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1614:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Selects an input for an external event, by configuring CC8yINS register.\n\n
1615:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * It is possible to select one of the possible 16 input signals for a given Event.
1616:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * This configures the CC8yINS.EVxIS for the selected event.
1617:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1618:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1619:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StartConfig()<BR>  XMC_CCU8_SLICE_StopConfig()<BR>  XMC_CCU8_SLICE_LoadConfig()<
1620:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ModulationConfig()<BR> XMC_CCU8_SLICE_CountConfig()<BR>  XMC_CCU8_SLICE_GateConf
1621:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_Capture0Config()<BR>  XMC_CCU8_SLICE_Capture1Config()<BR> XMC_CCU8_SLICE_Directi
1622:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StatusBitOverrideConfig()<BR>  XMC_CCU8_SLICE_TrapConfig().
1623:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1624:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_SetInput(XMC_CCU8_SLICE_t *const slice,
1625:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                              const XMC_CCU8_SLICE_EVENT_t event,
1626:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                              const XMC_CCU8_SLICE_INPUT_t input);
1627:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1628:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1629:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1630:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param out_mask  Output signals for which the Trap function needs to be activated.
1631:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *                   Use ::XMC_CCU8_SLICE_OUTPUT_t enum items to create a mask of choice,
1632:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *                   using a bit wise OR operation
1633:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *                   Range: [0x1 to 0xF]
1634:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1635:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1636:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1637:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1638:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Enables the trap feature, by setting CC8yTC.TRAPE0, CC8yTC.TRAPE1, CC8yTC.TRAPE2 and CC8yTC.TRAP
1639:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \a out_mask.\n\n
1640:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * A particularly useful feature where the PWM output can be forced inactive upon detection of a tr
1641:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * can be the output of a sensing element which has just detected an abnormal electrical condition.
1642:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1643:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1644:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_TrapConfig()<BR>  XMC_CCU8_SLICE_DisableTrap()<BR>  XMC_CCU8_SLICE_ConfigureEven
1645:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetInput().
1646:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1647:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_EnableTrap(XMC_CCU8_SLICE_t *const slice, const uint32_t out_ma
1648:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 127              	 .loc 1 1648 0
 128              	 .cfi_startproc
 129              	 
 130              	 
 131              	 
 132 0000 80B4     	 push {r7}
 133              	.LCFI12:
 134              	 .cfi_def_cfa_offset 4
 135              	 .cfi_offset 7,-4
 136 0002 83B0     	 sub sp,sp,#12
 137              	.LCFI13:
 138              	 .cfi_def_cfa_offset 16
 139 0004 00AF     	 add r7,sp,#0
 140              	.LCFI14:
 141              	 .cfi_def_cfa_register 7
 142 0006 7860     	 str r0,[r7,#4]
 143 0008 3960     	 str r1,[r7]
1649:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_EnableTrap:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1650:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   slice->TC |= (uint32_t)out_mask << CCU8_CC8_TC_TRAPE0_Pos;
 144              	 .loc 1 1650 0
 145 000a 7B68     	 ldr r3,[r7,#4]
 146 000c 5A69     	 ldr r2,[r3,#20]
 147 000e 3B68     	 ldr r3,[r7]
 148 0010 5B04     	 lsls r3,r3,#17
 149 0012 1A43     	 orrs r2,r2,r3
 150 0014 7B68     	 ldr r3,[r7,#4]
 151 0016 5A61     	 str r2,[r3,#20]
1651:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** }
 152              	 .loc 1 1651 0
 153 0018 0C37     	 adds r7,r7,#12
 154              	.LCFI15:
 155              	 .cfi_def_cfa_offset 4
 156 001a BD46     	 mov sp,r7
 157              	.LCFI16:
 158              	 .cfi_def_cfa_register 13
 159              	 
 160 001c 5DF8047B 	 ldr r7,[sp],#4
 161              	.LCFI17:
 162              	 .cfi_restore 7
 163              	 .cfi_def_cfa_offset 0
 164 0020 7047     	 bx lr
 165              	 .cfi_endproc
 166              	.LFE147:
 168 0022 00BF     	 .section .text.XMC_CCU8_SLICE_IsTimerRunning,"ax",%progbits
 169              	 .align 2
 170              	 .thumb
 171              	 .thumb_func
 173              	XMC_CCU8_SLICE_IsTimerRunning:
 174              	.LFB149:
1652:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1653:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1654:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1655:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param out_mask  Output signals for which the Trap function needs to be deactivated.
1656:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *                   Use ::XMC_CCU8_SLICE_OUTPUT_t enum items to create a mask of choice,
1657:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *                   using a bit wise OR operation.
1658:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *                   Range: [0x1 to 0xF]
1659:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1660:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1661:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1662:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1663:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Disables the trap feature, by clearing CC8yTC.TRAPE0, CC8yTC.TRAPE1, CC8yTC.TRAPE2 and CC8yTC.TR
1664:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \a out_mask.\n\n.\n\n
1665:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * This API will revert the changes done by XMC_CCU8_SLICE_EnableTrap().
1666:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * This Ensures that the TRAP function has no effect on the output of the CCU8 slice.
1667:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1668:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1669:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_EnableTrap().
1670:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1671:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_DisableTrap(XMC_CCU8_SLICE_t *const slice, const uint32_t out_m
1672:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
1673:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_DisableTrap:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1674:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   
1675:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   slice->TC &= ~((uint32_t)out_mask << CCU8_CC8_TC_TRAPE0_Pos);
1676:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** }
1677:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1678:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1679:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1680:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1681:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    bool returns \b true if the Timer is running else it returns \b false.
1682:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1683:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1684:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Returns the state of the timer (Either Running or stopped(idle)), by reading CC8yTCST.TRB bit.
1685:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1686:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1687:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StartTimer()<BR>  XMC_CCU8_SLICE_StopTimer().
1688:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1689:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE bool XMC_CCU8_SLICE_IsTimerRunning(const XMC_CCU8_SLICE_t *const slice)
1690:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 175              	 .loc 1 1690 0
 176              	 .cfi_startproc
 177              	 
 178              	 
 179              	 
 180 0000 80B4     	 push {r7}
 181              	.LCFI18:
 182              	 .cfi_def_cfa_offset 4
 183              	 .cfi_offset 7,-4
 184 0002 83B0     	 sub sp,sp,#12
 185              	.LCFI19:
 186              	 .cfi_def_cfa_offset 16
 187 0004 00AF     	 add r7,sp,#0
 188              	.LCFI20:
 189              	 .cfi_def_cfa_register 7
 190 0006 7860     	 str r0,[r7,#4]
1691:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_GetTimerStatus:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1692:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   return(bool)(((slice->TCST) & CCU8_CC8_TCST_TRB_Msk) == (uint32_t)CCU8_CC8_TCST_TRB_Msk);
 191              	 .loc 1 1692 0
 192 0008 7B68     	 ldr r3,[r7,#4]
 193 000a 9B68     	 ldr r3,[r3,#8]
 194 000c 03F00103 	 and r3,r3,#1
 195 0010 002B     	 cmp r3,#0
 196 0012 14BF     	 ite ne
 197 0014 0123     	 movne r3,#1
 198 0016 0023     	 moveq r3,#0
 199 0018 DBB2     	 uxtb r3,r3
1693:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** }
 200              	 .loc 1 1693 0
 201 001a 1846     	 mov r0,r3
 202 001c 0C37     	 adds r7,r7,#12
 203              	.LCFI21:
 204              	 .cfi_def_cfa_offset 4
 205 001e BD46     	 mov sp,r7
 206              	.LCFI22:
 207              	 .cfi_def_cfa_register 13
 208              	 
 209 0020 5DF8047B 	 ldr r7,[sp],#4
 210              	.LCFI23:
 211              	 .cfi_restore 7
 212              	 .cfi_def_cfa_offset 0
 213 0024 7047     	 bx lr
 214              	 .cfi_endproc
 215              	.LFE149:
 217 0026 00BF     	 .section .text.XMC_CCU8_SLICE_StartTimer,"ax",%progbits
 218              	 .align 2
 219              	 .thumb
 220              	 .thumb_func
 222              	XMC_CCU8_SLICE_StartTimer:
 223              	.LFB153:
1694:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1695:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1696:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Pointer to an instance of CC8 slice
1697:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1698:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    bool returns \b true if the dead time counter of Compare channel-1 is running else it returns
1699:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1700:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1701:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Returns the state of the  Dead time counter 1 (Either Running or stopped(idle)), by reading CC8y
1702:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * This returns the state of the dead time counter which is linked to Compare channel-1.
1703:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1704:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1705:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_IsDeadTimeCntr2Running().
1706:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1707:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE bool XMC_CCU8_SLICE_IsDeadTimeCntr1Running(const XMC_CCU8_SLICE_t *const slice)
1708:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
1709:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_IsDeadTimeCntr1Running:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(s
1710:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   return(bool)(((slice->TCST) & CCU8_CC8_TCST_DTR1_Msk) == (uint32_t)CCU8_CC8_TCST_DTR1_Msk);
1711:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** }
1712:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1713:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1714:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Pointer to an instance of CC8 slice
1715:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1716:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    bool returns \b true if the dead time counter of Compare channel-2 is running else it returns
1717:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1718:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1719:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Returns the state of the  Dead time counter 2 (Either Running or stopped(idle)), by reading CC8y
1720:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * This returns the state of the dead time counter which is linked to Compare channel-2.
1721:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1722:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1723:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_IsDeadTimeCntr1Running().
1724:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1725:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE bool XMC_CCU8_SLICE_IsDeadTimeCntr2Running(const XMC_CCU8_SLICE_t *const slice)
1726:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
1727:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_IsDeadTimeCntr2Running:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(s
1728:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   return(bool)(((slice->TCST) & CCU8_CC8_TCST_DTR2_Msk) == (uint32_t)CCU8_CC8_TCST_DTR2_Msk);
1729:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** }
1730:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1731:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1732:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1733:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1734:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *   ::XMC_CCU8_SLICE_TIMER_COUNT_DIR_t returns the direction in which the timer is counting.
1735:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1736:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1737:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Returns the timer counting direction, by reading CC8yTCST.CDIR bit.\n\n
1738:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * This API will return the direction in which the timer is currently
1739:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * incrementing(XMC_CCU8_SLICE_TIMER_COUNT_DIR_UP) or decrementing (XMC_CCU8_SLICE_TIMER_COUNT_DIR_
1740:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1741:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1742:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  None.
1743:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1744:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE XMC_CCU8_SLICE_TIMER_COUNT_DIR_t XMC_CCU8_SLICE_GetCountingDir(const XMC_CCU8_SLICE
1745:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
1746:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_GetCountingDir:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1747:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   return((XMC_CCU8_SLICE_TIMER_COUNT_DIR_t)(((slice->TCST) & CCU8_CC8_TCST_CDIR_Msk) >> CCU8_CC8_TC
1748:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** }
1749:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1750:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1751:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1752:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1753:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1754:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1755:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Starts the timer counting operation, by setting CC8yTCSET.TRBS bit.\n\n
1756:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * It is necessary to have configured the CC8 slice before starting its timer.
1757:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Before the Timer is started ensure that the clock is provided to the slice.
1758:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1759:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1760:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StopTimer().
1761:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1762:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_StartTimer(XMC_CCU8_SLICE_t *const slice)
1763:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 224              	 .loc 1 1763 0
 225              	 .cfi_startproc
 226              	 
 227              	 
 228              	 
 229 0000 80B4     	 push {r7}
 230              	.LCFI24:
 231              	 .cfi_def_cfa_offset 4
 232              	 .cfi_offset 7,-4
 233 0002 83B0     	 sub sp,sp,#12
 234              	.LCFI25:
 235              	 .cfi_def_cfa_offset 16
 236 0004 00AF     	 add r7,sp,#0
 237              	.LCFI26:
 238              	 .cfi_def_cfa_register 7
 239 0006 7860     	 str r0,[r7,#4]
1764:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1765:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   slice->TCSET = CCU8_CC8_TCSET_TRBS_Msk;
 240              	 .loc 1 1765 0
 241 0008 7B68     	 ldr r3,[r7,#4]
 242 000a 0122     	 movs r2,#1
 243 000c DA60     	 str r2,[r3,#12]
1766:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** }
 244              	 .loc 1 1766 0
 245 000e 0C37     	 adds r7,r7,#12
 246              	.LCFI27:
 247              	 .cfi_def_cfa_offset 4
 248 0010 BD46     	 mov sp,r7
 249              	.LCFI28:
 250              	 .cfi_def_cfa_register 13
 251              	 
 252 0012 5DF8047B 	 ldr r7,[sp],#4
 253              	.LCFI29:
 254              	 .cfi_restore 7
 255              	 .cfi_def_cfa_offset 0
 256 0016 7047     	 bx lr
 257              	 .cfi_endproc
 258              	.LFE153:
 260              	 .section .text.XMC_CCU8_SLICE_StopTimer,"ax",%progbits
 261              	 .align 2
 262              	 .thumb
 263              	 .thumb_func
 265              	XMC_CCU8_SLICE_StopTimer:
 266              	.LFB154:
1767:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1768:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1769:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1770:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1771:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1772:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1773:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1774:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Stops the Timer.\n\n
1775:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Timer counting operation can be stopped by invoking this API, by setting CC8yTCCLR.TRBC bit.
1776:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1777:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1778:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StartTimer().
1779:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1780:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_StopTimer(XMC_CCU8_SLICE_t *const slice)
1781:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 267              	 .loc 1 1781 0
 268              	 .cfi_startproc
 269              	 
 270              	 
 271              	 
 272 0000 80B4     	 push {r7}
 273              	.LCFI30:
 274              	 .cfi_def_cfa_offset 4
 275              	 .cfi_offset 7,-4
 276 0002 83B0     	 sub sp,sp,#12
 277              	.LCFI31:
 278              	 .cfi_def_cfa_offset 16
 279 0004 00AF     	 add r7,sp,#0
 280              	.LCFI32:
 281              	 .cfi_def_cfa_register 7
 282 0006 7860     	 str r0,[r7,#4]
1782:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1783:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   slice->TCCLR |= (uint32_t) CCU8_CC8_TCCLR_TRBC_Msk;
 283              	 .loc 1 1783 0
 284 0008 7B68     	 ldr r3,[r7,#4]
 285 000a 1B69     	 ldr r3,[r3,#16]
 286 000c 43F00102 	 orr r2,r3,#1
 287 0010 7B68     	 ldr r3,[r7,#4]
 288 0012 1A61     	 str r2,[r3,#16]
1784:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** }
 289              	 .loc 1 1784 0
 290 0014 0C37     	 adds r7,r7,#12
 291              	.LCFI33:
 292              	 .cfi_def_cfa_offset 4
 293 0016 BD46     	 mov sp,r7
 294              	.LCFI34:
 295              	 .cfi_def_cfa_register 13
 296              	 
 297 0018 5DF8047B 	 ldr r7,[sp],#4
 298              	.LCFI35:
 299              	 .cfi_restore 7
 300              	 .cfi_def_cfa_offset 0
 301 001c 7047     	 bx lr
 302              	 .cfi_endproc
 303              	.LFE154:
 305 001e 00BF     	 .section .text.XMC_CCU8_SLICE_ClearTimer,"ax",%progbits
 306              	 .align 2
 307              	 .thumb
 308              	 .thumb_func
 310              	XMC_CCU8_SLICE_ClearTimer:
 311              	.LFB155:
1785:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1786:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1787:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1788:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1789:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1790:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1791:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1792:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Resets the timer count to zero, by setting CC8yTCCLR.TCC bit.\n\n
1793:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * A timer which has been stopped can still retain the last counted value.
1794:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * After invoking this API the timer value will be cleared.
1795:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1796:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1797:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StartTimer().
1798:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1799:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_ClearTimer(XMC_CCU8_SLICE_t *const slice)
1800:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 312              	 .loc 1 1800 0
 313              	 .cfi_startproc
 314              	 
 315              	 
 316              	 
 317 0000 80B4     	 push {r7}
 318              	.LCFI36:
 319              	 .cfi_def_cfa_offset 4
 320              	 .cfi_offset 7,-4
 321 0002 83B0     	 sub sp,sp,#12
 322              	.LCFI37:
 323              	 .cfi_def_cfa_offset 16
 324 0004 00AF     	 add r7,sp,#0
 325              	.LCFI38:
 326              	 .cfi_def_cfa_register 7
 327 0006 7860     	 str r0,[r7,#4]
1801:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1802:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   slice->TCCLR |= (uint32_t) CCU8_CC8_TCCLR_TCC_Msk;
 328              	 .loc 1 1802 0
 329 0008 7B68     	 ldr r3,[r7,#4]
 330 000a 1B69     	 ldr r3,[r3,#16]
 331 000c 43F00202 	 orr r2,r3,#2
 332 0010 7B68     	 ldr r3,[r7,#4]
 333 0012 1A61     	 str r2,[r3,#16]
1803:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** }
 334              	 .loc 1 1803 0
 335 0014 0C37     	 adds r7,r7,#12
 336              	.LCFI39:
 337              	 .cfi_def_cfa_offset 4
 338 0016 BD46     	 mov sp,r7
 339              	.LCFI40:
 340              	 .cfi_def_cfa_register 13
 341              	 
 342 0018 5DF8047B 	 ldr r7,[sp],#4
 343              	.LCFI41:
 344              	 .cfi_restore 7
 345              	 .cfi_def_cfa_offset 0
 346 001c 7047     	 bx lr
 347              	 .cfi_endproc
 348              	.LFE155:
 350 001e 00BF     	 .section .text.XMC_CCU8_SLICE_GetTimerPeriodMatch,"ax",%progbits
 351              	 .align 2
 352              	 .thumb
 353              	 .thumb_func
 355              	XMC_CCU8_SLICE_GetTimerPeriodMatch:
 356              	.LFB159:
1804:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1805:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1806:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1807:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1808:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    ::XMC_CCU8_SLICE_MODE_t returns XMC_CCU8_SLICE_MODE_COMPARE if the slice is operating in comp
1809:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *                          returns XMC_CCU8_SLICE_MODE_CAPTURE if the slice is operating in captur
1810:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1811:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1812:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Retrieves the current mode of operation in the slice (either Capture mode or Compare mode), by r
1813:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * CC8yTC.CMOD bit.\n\n
1814:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Ensure that before invoking this API the CCU8 slice should be configured otherwise the output of
1815:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * invalid.
1816:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1817:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1818:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  None.
1819:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1820:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE XMC_CCU8_SLICE_MODE_t XMC_CCU8_SLICE_GetSliceMode(const XMC_CCU8_SLICE_t *const sli
1821:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
1822:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_GetSliceMode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1823:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   return((XMC_CCU8_SLICE_MODE_t)(((slice->TC) & CCU8_CC8_TC_CMOD_Msk) >> CCU8_CC8_TC_CMOD_Pos));
1824:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** }
1825:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1826:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1827:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1828:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param mode Desired repetition mode (Either single shot or Continuous)
1829:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1830:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1831:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1832:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1833:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Configures the Timer to either Single shot mode or continuous mode, by configuring CC8yTC.TSSM b
1834:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * The timer will count up to the terminal count as specified in the period register and stops imme
1835:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * mode has been set to single shot. In the continuous mode of operation, the timer starts counting
1836:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * reaching the terminal count.
1837:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1838:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1839:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_GetTimerRepeatMode().
1840:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1841:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_SetTimerRepeatMode(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_TIMER_RE
1842:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1843:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1844:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1845:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <br>
1846:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  ::XMC_CCU8_SLICE_TIMER_REPEAT_MODE_t returns XMC_CCU8_SLICE_TIMER_REPEAT_MODE_REPEAT if continu
1847:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *                                     returns XMC_CCU8_SLICE_TIMER_REPEAT_MODE_SINGLE if single sh
1848:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1849:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1850:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Retrieves the Timer repeat mode, either Single shot mode or continuous mode, by reading CC8yTC.T
1851:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * The timer will count upto the terminal count as specified in the period register and stops immed
1852:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * mode has been set to single shot mode. In the continuous mode of operation, the timer starts cou
1853:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * all over again after reaching the terminal count.
1854:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1855:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1856:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetTimerRepeatMode().
1857:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1858:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE XMC_CCU8_SLICE_TIMER_REPEAT_MODE_t XMC_CCU8_SLICE_GetTimerRepeatMode(
1859:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                                     const XMC_CCU8_
1860:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
1861:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_GetTimerRepeatMode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice
1862:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   return((XMC_CCU8_SLICE_TIMER_REPEAT_MODE_t)(((slice->TC) & CCU8_CC8_TC_TSSM_Msk) >> CCU8_CC8_TC_T
1863:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** }
1864:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1865:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1866:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param mode Desired counting mode (Either Edge Aligned or Center Aligned)
1867:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1868:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1869:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1870:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1871:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Configures the timer counting mode either Edge Aligned or Center Aligned, by configuring CC8yTC.
1872:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * In the edge aligned mode, the timer counts from 0 to the terminal count. Once the timer count ha
1873:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * compare value, the timer status output asserts itself. It will now deassert only after the timer
1874:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * terminal count.\n In the center aligned mode, the timer first counts from 0 to the terminal coun
1875:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * During this upward and downward counting, the timer status output stays asserted as long as the 
1876:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * greater than the compare value.
1877:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1878:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1879:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_GetTimerCountingMode().
1880:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1881:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_SetTimerCountingMode(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_TIMER_
1882:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1883:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1884:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1885:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <br>
1886:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  ::XMC_CCU8_SLICE_TIMER_COUNT_MODE_t returns XMC_CCU8_SLICE_TIMER_COUNT_MODE_EA if edge aligned 
1887:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *                                     returns XMC_CCU8_SLICE_TIMER_COUNT_MODE_CA if center aligned
1888:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1889:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1890:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Retrieves timer counting mode either Edge aligned or Center Aligned, by reading CC8yTC.TCM bit.\
1891:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1892:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1893:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetTimerCountingMode().
1894:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1895:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE XMC_CCU8_SLICE_TIMER_COUNT_MODE_t XMC_CCU8_SLICE_GetTimerCountingMode(
1896:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 		                                                                            const XMC_CCU8_SLICE_
1897:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
1898:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_GetTimerCountingMode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(sli
1899:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   return((XMC_CCU8_SLICE_TIMER_COUNT_MODE_t)(((slice->TC) & CCU8_CC8_TC_TCM_Msk) >> CCU8_CC8_TC_TCM
1900:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** }
1901:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1902:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1903:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param period_val Timer period value
1904:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *        Range: [0x0 to 0xFFFF]
1905:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1906:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1907:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1908:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1909:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Programs the timer period, by writing CC8yPRS register.\n\n
1910:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * The frequency of counting/ PWM frequency is determined by this value. The period value is writte
1911:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * register. Explicitly enable the shadow transfer for the the period value by calling
1912:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * XMC_CCU8_EnableShadowTransfer() with appropriate mask. If shadow transfer is enabled and the tim
1913:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * a period match transfers the value from the shadow register to the actual period register.
1914:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1915:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1916:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_GetTimerPeriodMatch().
1917:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1918:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_SetTimerPeriodMatch(XMC_CCU8_SLICE_t *const slice, const uint16_t period_val);
1919:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1920:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1921:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1922:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1923:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *   uint16_t returns the current timer period value
1924:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *            Range: [0x0 to 0xFFFF]
1925:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1926:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1927:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Retrieves the timer period value currently effective, by reading CC8yPR register.\n\n
1928:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * If the timer is active then the value being returned is currently being used for the PWM period.
1929:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1930:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Note:</b><br>
1931:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * The XMC_CCU8_SLICE_SetTimerPeriodMatch() would set the new period value to a shadow register.
1932:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * This would only transfer the new values into the actual period register if the shadow transfer r
1933:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * is enabled and if a period match occurs. Hence a consecutive call to XMC_CCU8_SLICE_GetTimerPeri
1934:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * would not reflect the new values until the shadow transfer completes.
1935:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1936:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1937:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetTimerPeriodMatch().
1938:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1939:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE uint16_t XMC_CCU8_SLICE_GetTimerPeriodMatch(const XMC_CCU8_SLICE_t *const slice)
1940:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 357              	 .loc 1 1940 0
 358              	 .cfi_startproc
 359              	 
 360              	 
 361              	 
 362 0000 80B4     	 push {r7}
 363              	.LCFI42:
 364              	 .cfi_def_cfa_offset 4
 365              	 .cfi_offset 7,-4
 366 0002 83B0     	 sub sp,sp,#12
 367              	.LCFI43:
 368              	 .cfi_def_cfa_offset 16
 369 0004 00AF     	 add r7,sp,#0
 370              	.LCFI44:
 371              	 .cfi_def_cfa_register 7
 372 0006 7860     	 str r0,[r7,#4]
1941:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_GetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slic
1942:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   return((uint16_t) slice->PR);
 373              	 .loc 1 1942 0
 374 0008 7B68     	 ldr r3,[r7,#4]
 375 000a 1B6B     	 ldr r3,[r3,#48]
 376 000c 9BB2     	 uxth r3,r3
1943:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** }
 377              	 .loc 1 1943 0
 378 000e 1846     	 mov r0,r3
 379 0010 0C37     	 adds r7,r7,#12
 380              	.LCFI45:
 381              	 .cfi_def_cfa_offset 4
 382 0012 BD46     	 mov sp,r7
 383              	.LCFI46:
 384              	 .cfi_def_cfa_register 13
 385              	 
 386 0014 5DF8047B 	 ldr r7,[sp],#4
 387              	.LCFI47:
 388              	 .cfi_restore 7
 389              	 .cfi_def_cfa_offset 0
 390 0018 7047     	 bx lr
 391              	 .cfi_endproc
 392              	.LFE159:
 394 001a 00BF     	 .section .text.XMC_CCU8_EnableShadowTransfer,"ax",%progbits
 395              	 .align 2
 396              	 .thumb
 397              	 .thumb_func
 399              	XMC_CCU8_EnableShadowTransfer:
 400              	.LFB162:
1944:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1945:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1946:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param channel Select the compare channel to which the \b compare_val has to programmed.
1947:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param compare_val Timer compare value
1948:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1949:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1950:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1951:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1952:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Programs the timer compare value, by writing CC8yCR1S and CC8yCR2S registers.\n\n
1953:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  The PWM duty cycle is determined by this value.\n\n
1954:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * The compare value is written to a shadow register. Explicitly enable the shadow transfer for
1955:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * the the period/compare value by calling XMC_CCU8_EnableShadowTransfer() with
1956:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * appropriate mask.If shadow transfer is enabled and the timer is running,
1957:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * a period match transfers the value from the shadow register to the actual compare register.
1958:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1959:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1960:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_EnableShadowTransfer().
1961:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1962:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_SetTimerCompareMatch(XMC_CCU8_SLICE_t *const slice,
1963:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                          const XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel,
1964:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                          const uint16_t compare_val);
1965:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1966:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1967:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1968:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param compare_val Timer compare value
1969:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1970:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1971:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1972:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1973:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Programs the timer compare1 value, by writing CC8yCR1S register.\n\n
1974:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * The PWM duty cycle is determined by this value.\n\n
1975:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * The compare value is written to a shadow register. Explicitly enable the shadow transfer for
1976:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * the the period/compare value by calling XMC_CCU8_EnableShadowTransfer() with appropriate mask.
1977:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * If shadow transfer is enabled and the timer is running, a period match transfers the value from
1978:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * the shadow register to the actual compare register.
1979:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1980:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1981:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_EnableShadowTransfer().
1982:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
1983:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_SetTimerCompareMatchChannel1(XMC_CCU8_SLICE_t *const slice, con
1984:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
1985:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatchChannel1:Invalid Slice Pointer", XMC_CCU8_IsValidS
1986:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   slice->CR1S = (uint32_t) compare_val;
1987:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** }
1988:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
1989:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
1990:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1991:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param compare_val Timer compare value
1992:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
1993:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
1994:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
1995:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
1996:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Programs the timer compare2 value, by writing CC8yCR2S register.\n\n
1997:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * The PWM duty cycle is determined by this value.\n\n
1998:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * The compare value is written to a shadow register. Explicitly enable the shadow transfer for
1999:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * the the period/compare value by calling XMC_CCU8_EnableShadowTransfer() with appropriate mask.
2000:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * If shadow transfer is enabled and the timer is running, a period match transfers the value from
2001:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * the shadow register to the actual compare register.
2002:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2003:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2004:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_EnableShadowTransfer().
2005:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
2006:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_SetTimerCompareMatchChannel2(XMC_CCU8_SLICE_t *const slice, con
2007:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
2008:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatchChannel2:Invalid Slice Pointer", XMC_CCU8_IsValidS
2009:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   slice->CR2S = (uint32_t) compare_val;
2010:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** }
2011:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
2012:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
2013:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2014:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param channel Select the compare channel to retrieve from.
2015:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
2016:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *   uint16_t returns the current timer compare value
2017:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *            Range: [0x0 to 0xFFFF]
2018:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2019:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2020:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Retrieves the timer compare value currently effective, by reading CC8yCR1S and CC8yCR2S register
2021:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * If the timer is active then the value being returned is currently being for the PWM duty cycle( 
2022:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2023:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Note:</b><br>
2024:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * The XMC_CCU8_SLICE_SetTimerCompareMatch() would set the new compare value to a shadow register.
2025:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * This would only transfer the new values into the actual compare register if the shadow transfer 
2026:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * is enabled and if a period match occurs. Hence a consecutive call to XMC_CCU8_SLICE_GetTimerComp
2027:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * would not reflect the new values until the shadow transfer completes.
2028:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2029:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2030:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetTimerCompareMatch().
2031:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
2032:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** uint16_t XMC_CCU8_SLICE_GetTimerCompareMatch(const XMC_CCU8_SLICE_t *const slice,
2033:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                              const XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel);
2034:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
2035:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
2036:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
2037:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param shadow_transfer_msk Shadow transfer request mask for various transfers.
2038:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *                            Use ::XMC_CCU8_SHADOW_TRANSFER_t enum items to create a mask of choic
2039:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *                            using a bit wise OR operation.
2040:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
2041:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
2042:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2043:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2044:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Requests of shadow transfer for Period, Compare, Passive level, dither and prescaler, by configu
2045:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * the GCSS register.\n\n
2046:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * The transfer from the shadow registers to the actual registers is done in the immediate next occ
2047:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * shadow transfer trigger after the API is called.
2048:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2049:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Any call to XMC_CCU8_SLICE_SetTimerPeriodMatch()<BR>  XMC_CCU8_SLICE_SetTimerCompareMatch()<BR> 
2050:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * XMC_XMC_CCU8_SLICE_SetPrescaler()<BR> XMC_CCU8_SLICE_CompareInit()<BR> XMC_CCU8_SLICE_CaptureIni
2051:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * must be succeeded by this API.
2052:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2053:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2054:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  None.
2055:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
2056:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_EnableShadowTransfer(XMC_CCU8_MODULE_t *const module, const uint32_t 
2057:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 401              	 .loc 1 2057 0
 402              	 .cfi_startproc
 403              	 
 404              	 
 405              	 
 406 0000 80B4     	 push {r7}
 407              	.LCFI48:
 408              	 .cfi_def_cfa_offset 4
 409              	 .cfi_offset 7,-4
 410 0002 83B0     	 sub sp,sp,#12
 411              	.LCFI49:
 412              	 .cfi_def_cfa_offset 16
 413 0004 00AF     	 add r7,sp,#0
 414              	.LCFI50:
 415              	 .cfi_def_cfa_register 7
 416 0006 7860     	 str r0,[r7,#4]
 417 0008 3960     	 str r1,[r7]
2058:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_EnableShadowTransfer:Invalid module Pointer", XMC_CCU8_IsValidModule(module)
2059:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   module->GCSS |= (uint32_t)shadow_transfer_msk;  
 418              	 .loc 1 2059 0
 419 000a 7B68     	 ldr r3,[r7,#4]
 420 000c 1A69     	 ldr r2,[r3,#16]
 421 000e 3B68     	 ldr r3,[r7]
 422 0010 1A43     	 orrs r2,r2,r3
 423 0012 7B68     	 ldr r3,[r7,#4]
 424 0014 1A61     	 str r2,[r3,#16]
2060:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** }
 425              	 .loc 1 2060 0
 426 0016 0C37     	 adds r7,r7,#12
 427              	.LCFI51:
 428              	 .cfi_def_cfa_offset 4
 429 0018 BD46     	 mov sp,r7
 430              	.LCFI52:
 431              	 .cfi_def_cfa_register 13
 432              	 
 433 001a 5DF8047B 	 ldr r7,[sp],#4
 434              	.LCFI53:
 435              	 .cfi_restore 7
 436              	 .cfi_def_cfa_offset 0
 437 001e 7047     	 bx lr
 438              	 .cfi_endproc
 439              	.LFE162:
 441              	 .section .text.XMC_CCU8_SLICE_GetTimerValue,"ax",%progbits
 442              	 .align 2
 443              	 .thumb
 444              	 .thumb_func
 446              	XMC_CCU8_SLICE_GetTimerValue:
 447              	.LFB163:
2061:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
2062:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
2063:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2064:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
2065:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *   uint16_t returns the current timer value
2066:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *            Range: [0x0 to 0xFFFF]
2067:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2068:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2069:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Retrieves the latest timer value, from CC8yTIMER register.\n\n
2070:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2071:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2072:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetTimerValue().
2073:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
2074:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE uint16_t XMC_CCU8_SLICE_GetTimerValue(const XMC_CCU8_SLICE_t *const slice)
2075:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 448              	 .loc 1 2075 0
 449              	 .cfi_startproc
 450              	 
 451              	 
 452              	 
 453 0000 80B4     	 push {r7}
 454              	.LCFI54:
 455              	 .cfi_def_cfa_offset 4
 456              	 .cfi_offset 7,-4
 457 0002 83B0     	 sub sp,sp,#12
 458              	.LCFI55:
 459              	 .cfi_def_cfa_offset 16
 460 0004 00AF     	 add r7,sp,#0
 461              	.LCFI56:
 462              	 .cfi_def_cfa_register 7
 463 0006 7860     	 str r0,[r7,#4]
2076:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_GetTimerValue:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
2077:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   return((uint16_t) slice->TIMER);
 464              	 .loc 1 2077 0
 465 0008 7B68     	 ldr r3,[r7,#4]
 466 000a 1B6F     	 ldr r3,[r3,#112]
 467 000c 9BB2     	 uxth r3,r3
2078:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** }
 468              	 .loc 1 2078 0
 469 000e 1846     	 mov r0,r3
 470 0010 0C37     	 adds r7,r7,#12
 471              	.LCFI57:
 472              	 .cfi_def_cfa_offset 4
 473 0012 BD46     	 mov sp,r7
 474              	.LCFI58:
 475              	 .cfi_def_cfa_register 13
 476              	 
 477 0014 5DF8047B 	 ldr r7,[sp],#4
 478              	.LCFI59:
 479              	 .cfi_restore 7
 480              	 .cfi_def_cfa_offset 0
 481 0018 7047     	 bx lr
 482              	 .cfi_endproc
 483              	.LFE163:
 485 001a 00BF     	 .section .text.XMC_CCU8_SLICE_EnableEvent,"ax",%progbits
 486              	 .align 2
 487              	 .thumb
 488              	 .thumb_func
 490              	XMC_CCU8_SLICE_EnableEvent:
 491              	.LFB172:
2079:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
2080:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2081:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param timer_val The new timer value that has to be loaded into the TIMER register.
2082:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *                  Range: [0x0 to 0xFFFF]
2083:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
2084:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
2085:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2086:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2087:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Loads a new timer value, by setting CC8yTIMER register.\n\n
2088:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * 
2089:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Note:</b><br>
2090:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Request to load is ignored if the timer is running.
2091:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2092:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2093:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_GetTimerValue().
2094:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
2095:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_SetTimerValue(XMC_CCU8_SLICE_t *const slice, const uint16_t tim
2096:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
2097:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_SetTimerValue:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
2098:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   slice->TIMER = (uint32_t) timer_val;
2099:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** }
2100:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
2101:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2102:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param period_dither Boolean instruction on dithering of period match
2103:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param duty_dither Boolean instruction on dithering of compare match
2104:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param spread Dither compare value
2105:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
2106:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
2107:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2108:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2109:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Enables dithering of PWM frequency and duty cycle, by configuring CC8yTC.DITHE and CC8yDITS bits
2110:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Some control loops are slow in updating PWM frequency and duty cycle. In such a case, a Bresenha
2111:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * can help reduce long term errors. Dithering can be applied to period and duty individually,
2112:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * this can be selected using the parameter \b period_dither and \b duty_dither.
2113:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * The \b spread would provide the dither compare value. If the dither counter value is less than t
2114:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * the period/compare values would be dithered according to the dither mode selected. This API woul
2115:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * XMC_CCU8_SLICE_SetDitherCompareValue().
2116:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2117:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Note:</b><br>
2118:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * After this API call, XMC_CCU8_EnableShadowTransfer() has to be called with appropriate mask
2119:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * to transfer the dither value.
2120:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2121:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2122:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_DisableDithering().
2123:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
2124:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_EnableDithering(XMC_CCU8_SLICE_t *const slice,
2125:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                     const bool period_dither,
2126:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                     const bool duty_dither,
2127:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                     const uint8_t spread);
2128:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
2129:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
2130:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2131:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
2132:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
2133:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2134:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2135:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Disables dithering of PWM frequency and duty cycle, by clearing CC8yTC.DITHE bits.\n\n
2136:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * This disables the Dither mode that was set in XMC_CCU8_SLICE_EnableDithering().
2137:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * This API will not clear the dither compare value.
2138:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2139:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2140:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_EnableDithering().
2141:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
2142:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_DisableDithering(XMC_CCU8_SLICE_t *const slice)
2143:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
2144:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_DisableDithering:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice))
2145:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   slice->TC &= ~((uint32_t) CCU8_CC8_TC_DITHE_Msk);
2146:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** }
2147:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
2148:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
2149:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2150:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
2151:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
2152:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2153:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2154:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Enables the floating prescaler, by setting CC8yTC.FPE bit.\n\n
2155:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * The prescaler divider starts with an initial value and increments upon every period match. It ke
2156:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * until a ceiling (prescaler compare value) is hit and thereafter rolls back to the original presc
2157:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * It is necessary to have programmed an initial divider value and a compare value before the featu
2158:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2159:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2160:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetFloatingPrescalerCompareValue()<BR>  XMC_CCU8_SLICE_DisableFloatingPrescaler(
2161:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_XMC_CCU8_SLICE_SetPrescaler().
2162:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
2163:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_EnableFloatingPrescaler(XMC_CCU8_SLICE_t *const slice)
2164:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
2165:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_EnableFloatingPrescaler:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(
2166:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   slice->TC |= (uint32_t) CCU8_CC8_TC_FPE_Msk;
2167:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** }
2168:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
2169:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
2170:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2171:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
2172:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
2173:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2174:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2175:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Disables the floating prescaler, by clearing CC8yTC.FPE bit.\n\n
2176:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * This would return the prescaler to the normal mode.
2177:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * The prescaler that would be applied is the value present in CC8yPSC.
2178:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2179:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   * \par<b>Related APIs:</b><br>
2180:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_EnableFloatingPrescaler().
2181:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
2182:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_DisableFloatingPrescaler(XMC_CCU8_SLICE_t *const slice)
2183:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
2184:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_DisableFloatingPrescaler:Invalid Slice Pointer", XMC_CCU8_IsValidSlice
2185:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   slice->TC &= ~((uint32_t) CCU8_CC8_TC_FPE_Msk);
2186:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** }
2187:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
2188:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
2189:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2190:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param comp_val Dither compare value
2191:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *                 Range: [0x0 to 0xF]
2192:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
2193:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
2194:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2195:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2196:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Sets the dither spread/compare value, by setting CC8yDITS.DCVS bits.\n\n
2197:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * This value is the cornerstone of PWM dithering feature. Dithering is applied/done when the value
2198:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * dithering counter is less than this compare/spread value. For all dithering counter values great
2199:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * the spread value, there is no dithering. After setting the value XMC_CCU8_EnableShadowTransfer()
2200:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * called with appropriate mask.
2201:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2202:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   * \par<b>Related APIs:</b><br>
2203:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_EnableDithering().
2204:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
2205:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_SetDitherCompareValue(XMC_CCU8_SLICE_t *const slice, const uint
2206:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
2207:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_SetDitherCompareValue:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(sl
2208:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_SetDitherCompareValue:Invalid Dither compare value", (comp_val <= 15U)
2209:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
2210:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   slice->DITS = comp_val;
2211:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** }
2212:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
2213:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
2214:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2215:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param div_val Prescaler divider value
2216:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *                 Range: [0x0 to 0xF]
2217:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
2218:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
2219:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2220:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2221:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Programs the slice specific prescaler divider, by configuring the CC8yPSC and CC8yFPC registers.
2222:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * The prescaler divider may only be programmed after the prescaler run bit has been cleared
2223:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * by calling XMC_CCU8_StopPrescaler().
2224:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2225:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2226:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetFloatingPrescalerCompareValue().
2227:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
2228:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** void XMC_CCU8_SLICE_SetPrescaler(XMC_CCU8_SLICE_t *const slice, const uint8_t div_val);
2229:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
2230:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
2231:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2232:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param cmp_val Prescaler divider compare value
2233:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *                 Range: [0x0 to 0xF]
2234:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
2235:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
2236:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2237:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2238:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Programs the slice specific prescaler divider compare value, by configuring CC8yFPCS register.\n
2239:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * The compare value is applicable only in floating mode of operation. The prescaler divider starts
2240:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * value and increments to the compare value steadily upon every period match. Once prescaler divid
2241:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * equals the prescaler divider compare value, the value in the former resets back to the PVAL (fro
2242:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * the value, XMC_CCU8_EnableShadowTransfer() has to be called with appropriate mask.
2243:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2244:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2245:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetPrescaler().
2246:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
2247:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_SetFloatingPrescalerCompareValue(XMC_CCU8_SLICE_t *const slice,
2248:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                                      const uint8_t cmp_val)
2249:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
2250:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_SetFloatingPrescalerCompareValue:Invalid Slice Pointer", XMC_CCU8_IsVa
2251:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   /* First, write to the shadow register */
2252:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   slice->FPCS = (uint32_t) cmp_val;
2253:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** }
2254:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
2255:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
2256:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2257:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param ch_num Compare channel for which the multi-channel mode is needed.
2258:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
2259:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
2260:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2261:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2262:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Enables the multichannel mode, by setting CC8yTC.MCME1 or CC8yTC.MCME1 bits based on the \a ch_n
2263:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * The output state of the Timer slices can be controlled in parallel by a single input signal.
2264:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * A particularly useful feature in motor control applications where the PWM output of multiple sli
2265:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * be gated and ungated by multi-channel gating inputs connected to the slices. A peripheral like P
2266:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * motor knows exactly which of the power drive switches are to be turned on and off at any instant
2267:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * a gating bus (known as multi-channel inputs) control which of the slices output stays gated/unga
2268:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2269:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2270:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_DisableMultiChannelMode()<BR>  XMC_CCU8_SetMultiChannelShadowTransferMode().
2271:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
2272:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_EnableMultiChannelMode(XMC_CCU8_SLICE_t *const slice,
2273:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                            const XMC_CCU8_SLICE_COMPARE_CHANNEL_t c
2274:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
2275:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_EnableMultiChannelMode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(s
2276:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_EnableMultiChannelMode:Invalid Channel", XMC_CCU8_SLICE_CHECK_COMP_CHA
2277:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
2278:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   slice->TC |= (uint32_t)CCU8_CC8_TC_MCME1_Msk << ch_num;
2279:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** }
2280:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
2281:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
2282:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2283:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param ch_num Compare channel for which the multi-channel mode needs to be disabled.
2284:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
2285:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
2286:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2287:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2288:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Disables the multichannel mode, by clearing CC8yTC.MCME1 or CC8yTC.MCME1 bits based on the \a ch
2289:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Returns the slices to the normal operation mode. This takes the slice number as input and
2290:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * configures the multi channel mode for it.
2291:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2292:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2293:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_EnableMultiChannelMode().
2294:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
2295:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_DisableMultiChannelMode(XMC_CCU8_SLICE_t *const slice,
2296:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                             const XMC_CCU8_SLICE_COMPARE_CHANNEL_t 
2297:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
2298:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_DisableMultiChannelMode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(
2299:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_DisableMultiChannelMode:Invalid Channel", XMC_CCU8_SLICE_CHECK_COMP_CH
2300:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
2301:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   slice->TC &= ~((uint32_t)CCU8_CC8_TC_MCME1_Msk << ch_num);
2302:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** }
2303:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
2304:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
2305:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
2306:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice_mode_msk Slices for which the configuration has to be applied.
2307:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *                       Use ::XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_t enum items to create a mask
2308:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *                             using a bit wise OR operation.
2309:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
2310:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
2311:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2312:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2313:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Enables the Multi-channel shadow transfer request trigger signal either by software or hardware 
2314:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * GCTRL.MSE0, GCTRL.MSE1, GCTRL.MSE2, and GCTRL.MSE3 based on the mask.\n\n
2315:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * The shadow transfer would take place either if it was requested by software or by the CCU8x.MCSS
2316:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2317:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2318:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  None.
2319:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** */
2320:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** void XMC_CCU8_SetMultiChannelShadowTransferMode(XMC_CCU8_MODULE_t *const module, const uint32_t sli
2321:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
2322:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
2323:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2324:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param reg_num The capture register from which the captured value is to be retrieved
2325:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *                Range: [0,3]
2326:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
2327:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    uint32_t  Returns the Capture register value.
2328:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *              Range: [0 to 0x1FFFFF]
2329:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2330:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2331:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Retrieves timer value which has been captured in the Capture registers, by reading CC8yCV[\b reg
2332:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * The signal whose timing characteristics are to be measured must be mapped to an event which in t
2333:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * to the capture function. Based on the capture criteria, the timer values are captured into captu
2334:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * characteristics of the input signal may then be derived/inferred from the captured values. The f
2335:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * to find out if there is a new captured value present.
2336:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2337:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2338:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_GetLastCapturedTimerValue().
2339:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
2340:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** uint32_t XMC_CCU8_SLICE_GetCaptureRegisterValue(const XMC_CCU8_SLICE_t *const slice, const uint8_t 
2341:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
2342:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
2343:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2344:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param set  The capture register set, which must be evaluated
2345:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param val_ptr Out Parameter of the API.Stores the captured timer value into this out parameter.
2346:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
2347:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  ::XMC_CCU8_STATUS_t Returns XMC_CCU8_STATUS_OK if there was new value present in the capture re
2348:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *                   returns XMC_CCU8_STATUS_ERROR if there was no new value present in the capture
2349:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2350:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2351:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Retrieves the latest captured timer value, by reading CC8yCV registers.\n\n
2352:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Retrieve the timer value last stored by the slice. When separate capture events are used,
2353:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * users must specify the capture set to evaluate. If single capture event mode is used, all 8 capt
2354:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * evaluated.\n
2355:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * The lowest register is evaluated first followed by the next higher ordered register and this con
2356:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * capture registers have been evaluated.
2357:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2358:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2359:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_GetCaptureregisterValue().
2360:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
2361:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** XMC_CCU8_STATUS_t XMC_CCU8_SLICE_GetLastCapturedTimerValue(const XMC_CCU8_SLICE_t *const slice,
2362:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                            const XMC_CCU8_SLICE_CAP_REG_SET_t set,
2363:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****                                                            uint32_t *val_ptr);
2364:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
2365:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
2366:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2367:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param event Event whose assertion can potentially lead to an interrupt
2368:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
2369:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
2370:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2371:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2372:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Enables the generation of an interrupt pulse for the event, by configuring CC8yINTE register.\n\
2373:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * For an event to lead to an interrupt, it must first be enabled and bound to a service request li
2374:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * NVIC node must be enabled as well. This API merely enables the event. Binding with SR is perform
2375:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2376:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2377:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetInterruptNode()<BR>  XMC_CCU8_SLICE_EnableMultipleEvents()<BR>  XMC_CCU8_SLIC
2378:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_DisableMultipleEvents().
2379:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
2380:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_EnableEvent(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE
2381:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 492              	 .loc 1 2381 0
 493              	 .cfi_startproc
 494              	 
 495              	 
 496              	 
 497 0000 80B4     	 push {r7}
 498              	.LCFI60:
 499              	 .cfi_def_cfa_offset 4
 500              	 .cfi_offset 7,-4
 501 0002 83B0     	 sub sp,sp,#12
 502              	.LCFI61:
 503              	 .cfi_def_cfa_offset 16
 504 0004 00AF     	 add r7,sp,#0
 505              	.LCFI62:
 506              	 .cfi_def_cfa_register 7
 507 0006 7860     	 str r0,[r7,#4]
 508 0008 0B46     	 mov r3,r1
 509 000a FB70     	 strb r3,[r7,#3]
2382:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
2383:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));
2384:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
2385:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 510              	 .loc 1 2385 0
 511 000c 7B68     	 ldr r3,[r7,#4]
 512 000e D3F8A420 	 ldr r2,[r3,#164]
 513 0012 FB78     	 ldrb r3,[r7,#3]
 514 0014 0121     	 movs r1,#1
 515 0016 01FA03F3 	 lsl r3,r1,r3
 516 001a 1A43     	 orrs r2,r2,r3
 517 001c 7B68     	 ldr r3,[r7,#4]
 518 001e C3F8A420 	 str r2,[r3,#164]
2386:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** }
 519              	 .loc 1 2386 0
 520 0022 0C37     	 adds r7,r7,#12
 521              	.LCFI63:
 522              	 .cfi_def_cfa_offset 4
 523 0024 BD46     	 mov sp,r7
 524              	.LCFI64:
 525              	 .cfi_def_cfa_register 13
 526              	 
 527 0026 5DF8047B 	 ldr r7,[sp],#4
 528              	.LCFI65:
 529              	 .cfi_restore 7
 530              	 .cfi_def_cfa_offset 0
 531 002a 7047     	 bx lr
 532              	 .cfi_endproc
 533              	.LFE172:
 535              	 .section .text.XMC_CCU8_SLICE_ClearEvent,"ax",%progbits
 536              	 .align 2
 537              	 .thumb
 538              	 .thumb_func
 540              	XMC_CCU8_SLICE_ClearEvent:
 541              	.LFB177:
2387:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
2388:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
2389:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2390:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param mask Event mask such that multiple events can be enabled.
2391:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *                  Use ::XMC_CCU8_SLICE_MULTI_IRQ_ID_t enum items to create a mask of choice,
2392:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *                  using a bit wise OR operation.
2393:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
2394:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
2395:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2396:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2397:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Enables the generation of an interrupt pulse for the required events, by configuring CC8yINTE re
2398:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * For an event to lead to an interrupt, it must first be enabled and bound to a service request li
2399:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * NVIC node must be enabled as well. This API merely enables the events. Binding with SR is perfor
2400:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2401:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2402:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetInterruptNode()<BR>  XMC_CCU8_SLICE_EnableEvent()<BR>  XMC_CCU8_SLICE_Disable
2403:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_DisableMultipleEvents().
2404:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
2405:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_EnableMultipleEvents(XMC_CCU8_SLICE_t *const slice, const uint1
2406:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
2407:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_EnableMultipleEvents:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(sli
2408:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   slice->INTE = (uint32_t) mask;
2409:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** }
2410:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
2411:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
2412:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2413:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param event Event whose assertion can potentially lead to an interrupt
2414:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
2415:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
2416:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2417:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2418:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Disables the generation of an interrupt pulse for the event, by clearing CC8yINTE register.\n\n
2419:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Prevents the event from being asserted.
2420:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2421:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2422:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetInterruptNode()<BR>  XMC_CCU8_SLICE_EnableEvent()<BR>  XMC_CCU8_SLICE_EnableM
2423:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_DisableMultipleEvents().
2424:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
2425:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_DisableEvent(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLIC
2426:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
2427:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_DisableEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
2428:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_DisableEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event))
2429:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
2430:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   slice->INTE &= ~(((uint32_t) 1) << ((uint32_t) event));
2431:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** }
2432:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
2433:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
2434:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2435:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param mask Event mask such that multiple events can be enabled.
2436:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *             Use ::XMC_CCU8_SLICE_MULTI_IRQ_ID_t enum items to create a mask of choice,
2437:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *             using a bit wise OR operation.
2438:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
2439:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
2440:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2441:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2442:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Disables the generation of an interrupt pulse for the required events, by clearing CC8yINTE reg
2443:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  Prevents selected events of the slice from being asserted.
2444:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2445:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2446:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetInterruptNode()<BR>  XMC_CCU8_SLICE_EnableEvent()<BR>  XMC_CCU8_SLICE_EnableM
2447:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_DisableEvent().
2448:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
2449:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_DisableMultipleEvents(XMC_CCU8_SLICE_t *const slice, const uint
2450:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
2451:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_DisableMultipleEvents:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(sl
2452:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   slice->INTE &= ~((uint32_t) mask);
2453:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** }
2454:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
2455:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
2456:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2457:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param event Event whose assertion can potentially lead to an interrupt
2458:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
2459:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
2460:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2461:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2462:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Manually asserts the requested event, by setting CC8ySWS register.\n\n
2463:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * For an event to lead to an interrupt, it must first be enabled and bound to a service request li
2464:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * NVIC node must be enabled as well. This API manually asserts the requested event.
2465:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2466:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2467:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetInterruptNode()<BR>  XMC_CCU8_SLICE_EnableEvent()<BR>  XMC_CCU8_SLICE_EnableM
2468:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
2469:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_SetEvent(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_IR
2470:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
2471:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_SetEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
2472:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_SetEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));
2473:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
2474:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   slice->SWS |= ((uint32_t) 1) << ((uint32_t) event);
2475:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** }
2476:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
2477:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
2478:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2479:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param event Asserted event which must be acknowledged.
2480:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <BR>
2481:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *    None<BR>
2482:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2483:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2484:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Acknowledges an asserted event, by setting CC8ySWR with respective event flag.\n\n
2485:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2486:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2487:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_EnableEvent()<BR>  XMC_CCU8_SLICE_SetEvent()<BR>  XMC_CCU8_SLICE_GetEvent().
2488:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2489:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
2490:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_ClearEvent(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_
2491:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 542              	 .loc 1 2491 0
 543              	 .cfi_startproc
 544              	 
 545              	 
 546              	 
 547 0000 80B4     	 push {r7}
 548              	.LCFI66:
 549              	 .cfi_def_cfa_offset 4
 550              	 .cfi_offset 7,-4
 551 0002 83B0     	 sub sp,sp,#12
 552              	.LCFI67:
 553              	 .cfi_def_cfa_offset 16
 554 0004 00AF     	 add r7,sp,#0
 555              	.LCFI68:
 556              	 .cfi_def_cfa_register 7
 557 0006 7860     	 str r0,[r7,#4]
 558 0008 0B46     	 mov r3,r1
 559 000a FB70     	 strb r3,[r7,#3]
2492:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_ClearEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
2493:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_ClearEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));
2494:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   slice->SWR |= ((uint32_t) 1) << ((uint32_t) event);
 560              	 .loc 1 2494 0
 561 000c 7B68     	 ldr r3,[r7,#4]
 562 000e D3F8B020 	 ldr r2,[r3,#176]
 563 0012 FB78     	 ldrb r3,[r7,#3]
 564 0014 0121     	 movs r1,#1
 565 0016 01FA03F3 	 lsl r3,r1,r3
 566 001a 1A43     	 orrs r2,r2,r3
 567 001c 7B68     	 ldr r3,[r7,#4]
 568 001e C3F8B020 	 str r2,[r3,#176]
2495:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** }
 569              	 .loc 1 2495 0
 570 0022 0C37     	 adds r7,r7,#12
 571              	.LCFI69:
 572              	 .cfi_def_cfa_offset 4
 573 0024 BD46     	 mov sp,r7
 574              	.LCFI70:
 575              	 .cfi_def_cfa_register 13
 576              	 
 577 0026 5DF8047B 	 ldr r7,[sp],#4
 578              	.LCFI71:
 579              	 .cfi_restore 7
 580              	 .cfi_def_cfa_offset 0
 581 002a 7047     	 bx lr
 582              	 .cfi_endproc
 583              	.LFE177:
 585              	 .section .text.XMC_CCU8_SLICE_GetEvent,"ax",%progbits
 586              	 .align 2
 587              	 .thumb
 588              	 .thumb_func
 590              	XMC_CCU8_SLICE_GetEvent:
 591              	.LFB178:
2496:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** 
2497:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** /**
2498:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2499:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @param event Event to be evaluated for assertion
2500:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * @return <br>
2501:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *         bool  Returns true if event is set else false is returned.
2502:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2503:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Description:</b><br>
2504:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Evaluates if a given event is asserted or not, by reading CC8yINTS register.\n\n
2505:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * Return true if the event is asserted. For a event to be asserted it has to be
2506:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * first enabled. Only if that event is enabled the call to this API is valid.
2507:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * If the Event is enabled and has not yet occurred then a false is returned.
2508:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *
2509:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2510:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  *  XMC_CCU8_SLICE_EnableEvent()<BR>  XMC_CCU8_SLICE_SetEvent().
2511:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****  */
2512:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** __STATIC_INLINE bool XMC_CCU8_SLICE_GetEvent(const XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SL
2513:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h **** {
 592              	 .loc 1 2513 0
 593              	 .cfi_startproc
 594              	 
 595              	 
 596              	 
 597 0000 80B4     	 push {r7}
 598              	.LCFI72:
 599              	 .cfi_def_cfa_offset 4
 600              	 .cfi_offset 7,-4
 601 0002 83B0     	 sub sp,sp,#12
 602              	.LCFI73:
 603              	 .cfi_def_cfa_offset 16
 604 0004 00AF     	 add r7,sp,#0
 605              	.LCFI74:
 606              	 .cfi_def_cfa_register 7
 607 0006 7860     	 str r0,[r7,#4]
 608 0008 0B46     	 mov r3,r1
 609 000a FB70     	 strb r3,[r7,#3]
2514:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_GetEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
2515:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_GetEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));
2516:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   return(((uint32_t)(slice->INTS & ((uint32_t)1 << event))) != 0U);
 610              	 .loc 1 2516 0
 611 000c 7B68     	 ldr r3,[r7,#4]
 612 000e D3F8A020 	 ldr r2,[r3,#160]
 613 0012 FB78     	 ldrb r3,[r7,#3]
 614 0014 22FA03F3 	 lsr r3,r2,r3
 615 0018 03F00103 	 and r3,r3,#1
 616 001c 002B     	 cmp r3,#0
 617 001e 14BF     	 ite ne
 618 0020 0123     	 movne r3,#1
 619 0022 0023     	 moveq r3,#0
 620 0024 DBB2     	 uxtb r3,r3
2517:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_ccu8.h ****   }
 621              	 .loc 1 2517 0
 622 0026 1846     	 mov r0,r3
 623 0028 0C37     	 adds r7,r7,#12
 624              	.LCFI75:
 625              	 .cfi_def_cfa_offset 4
 626 002a BD46     	 mov sp,r7
 627              	.LCFI76:
 628              	 .cfi_def_cfa_register 13
 629              	 
 630 002c 5DF8047B 	 ldr r7,[sp],#4
 631              	.LCFI77:
 632              	 .cfi_restore 7
 633              	 .cfi_def_cfa_offset 0
 634 0030 7047     	 bx lr
 635              	 .cfi_endproc
 636              	.LFE178:
 638 0032 00BF     	 .section .text.PWM_CCU8_GetAppVersion,"ax",%progbits
 639              	 .align 2
 640              	 .global PWM_CCU8_GetAppVersion
 641              	 .thumb
 642              	 .thumb_func
 644              	PWM_CCU8_GetAppVersion:
 645              	.LFB208:
 646              	 .file 2 "../Dave/Generated/PWM_CCU8/pwm_ccu8.c"
   1:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** /**
   2:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  * @file pwm_ccu8.c
   3:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  * @date 2015-06-20
   4:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  *
   5:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  * NOTE:
   6:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   7:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  *
   8:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  * @cond
   9:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  **************************************************************************************************
  10:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  * PWM_CCU8 v4.1.16 - PWM APP using one timer slice of CCU8, with external events and dead time sup
  11:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  *                   to generate up to 4 PWM outputs.
  12:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  *
  13:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  * Copyright (c) 2015, Infineon Technologies AG
  14:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  * All rights reserved.
  15:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  *
  16:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  17:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  * following conditions are met:
  18:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  *
  19:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  20:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  *   disclaimer.
  21:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  *
  22:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  23:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  *   disclaimer in the documentation and/or other materials provided with the distribution.
  24:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  *
  25:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  26:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  *   products derived from this software without specific prior written permission.
  27:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  *
  28:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  29:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  30:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  31:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  32:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  33:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  34:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  *
  36:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  37:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  * with Infineon Technologies AG (dave@infineon.com).
  38:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  **************************************************************************************************
  39:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  *
  40:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  * Change History
  41:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  * --------------
  42:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  *
  43:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  * 2015-02-14:
  44:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  *     - Initial version for DAVEv4
  45:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  *
  46:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  * 2015-05-20:
  47:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  *     - PWM_CCU8_AcknowledgeInterrupt() api is renamed as PWM_CCU8_ClearEvent().
  48:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  *
  49:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  * 2015-06-20:
  50:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  *     - Copyright information updated.
  51:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  *
  52:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  * 2015-08-13:
  53:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  *     - Added support for selection of compare channel in external load event using API "XMC_CCU8_
  54:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  *     - Added support for selection of shadow transfer mode using API "XMC_CCU8_SLICE_SetShadowTra
  55:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  *     - Added support for selection of immediate shadow transfer using
  56:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  *       API "XMC_CCU8_SLICE_WriteImmediateAfterShadowTransfer" in XMC14* devices
  57:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  *     - Added support for automatic shadow transfer using
  58:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  *       API "XMC_CCU8_SLICE_EnableAutomaticShadowTransferRequest" in XMC14* devices
  59:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  *
  60:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  * @endcond
  61:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  *
  62:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  */
  63:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
  64:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** /**************************************************************************************************
  65:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  * HEADER FILES
  66:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  **************************************************************************************************
  67:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** #include "pwm_ccu8.h"
  68:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
  69:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** /**************************************************************************************************
  70:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  * PRIVATE FUNCTION PROTOTYPES
  71:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  **************************************************************************************************
  72:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** /* Initialize the App Interrupts */
  73:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** static void PWM_CCU8_lInit_Interrupt(PWM_CCU8_t* handle_ptr);
  74:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
  75:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** /* Initialize the App events and configurations */
  76:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** static void PWM_CCU8_lConfigure_Events(PWM_CCU8_t* handle_ptr);
  77:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
  78:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** /* Initialize the App pin configurations */
  79:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** static void PWM_CCU8_lInit_GPIO(PWM_CCU8_t* handle_ptr);
  80:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
  81:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** /**************************************************************************************************
  82:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  * MACROS
  83:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  **************************************************************************************************
  84:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
  85:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** /**************************************************************************************************
  86:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  * LOCAL DATA
  87:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  **************************************************************************************************
  88:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
  89:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** /**************************************************************************************************
  90:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  * LOCAL ROUTINES
  91:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  **************************************************************************************************
  92:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
  93:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** /**************************************************************************************************
  94:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  * API IMPLEMENTATION
  95:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****  **************************************************************************************************
  96:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
  97:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** /* API to retrieve App version info */
  98:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** DAVE_APP_VERSION_t PWM_CCU8_GetAppVersion(void)
  99:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** {
 647              	 .loc 2 99 0
 648              	 .cfi_startproc
 649              	 
 650              	 
 651              	 
 652 0000 80B4     	 push {r7}
 653              	.LCFI78:
 654              	 .cfi_def_cfa_offset 4
 655              	 .cfi_offset 7,-4
 656 0002 83B0     	 sub sp,sp,#12
 657              	.LCFI79:
 658              	 .cfi_def_cfa_offset 16
 659 0004 00AF     	 add r7,sp,#0
 660              	.LCFI80:
 661              	 .cfi_def_cfa_register 7
 100:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   DAVE_APP_VERSION_t version;
 101:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 102:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   version.major = PWM_CCU8_MAJOR_VERSION;
 662              	 .loc 2 102 0
 663 0006 0423     	 movs r3,#4
 664 0008 3B70     	 strb r3,[r7]
 103:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   version.minor = PWM_CCU8_MINOR_VERSION;
 665              	 .loc 2 103 0
 666 000a 0123     	 movs r3,#1
 667 000c 7B70     	 strb r3,[r7,#1]
 104:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   version.patch = PWM_CCU8_PATCH_VERSION;
 668              	 .loc 2 104 0
 669 000e 1023     	 movs r3,#16
 670 0010 BB70     	 strb r3,[r7,#2]
 105:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 106:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   return version;
 671              	 .loc 2 106 0
 672 0012 3B1D     	 adds r3,r7,#4
 673 0014 3A46     	 mov r2,r7
 674 0016 1268     	 ldr r2,[r2]
 675 0018 1146     	 mov r1,r2
 676 001a 1980     	 strh r1,[r3]
 677 001c 0233     	 adds r3,r3,#2
 678 001e 120C     	 lsrs r2,r2,#16
 679 0020 1A70     	 strb r2,[r3]
 680 0022 0023     	 movs r3,#0
 681 0024 3A79     	 ldrb r2,[r7,#4]
 682 0026 62F30703 	 bfi r3,r2,#0,#8
 683 002a 7A79     	 ldrb r2,[r7,#5]
 684 002c 62F30F23 	 bfi r3,r2,#8,#8
 685 0030 BA79     	 ldrb r2,[r7,#6]
 686 0032 62F31743 	 bfi r3,r2,#16,#8
 107:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** }
 687              	 .loc 2 107 0
 688 0036 1846     	 mov r0,r3
 689 0038 0C37     	 adds r7,r7,#12
 690              	.LCFI81:
 691              	 .cfi_def_cfa_offset 4
 692 003a BD46     	 mov sp,r7
 693              	.LCFI82:
 694              	 .cfi_def_cfa_register 13
 695              	 
 696 003c 5DF8047B 	 ldr r7,[sp],#4
 697              	.LCFI83:
 698              	 .cfi_restore 7
 699              	 .cfi_def_cfa_offset 0
 700 0040 7047     	 bx lr
 701              	 .cfi_endproc
 702              	.LFE208:
 704 0042 00BF     	 .section .text.PWM_CCU8_Init,"ax",%progbits
 705              	 .align 2
 706              	 .global PWM_CCU8_Init
 707              	 .thumb
 708              	 .thumb_func
 710              	PWM_CCU8_Init:
 711              	.LFB209:
 108:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 109:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** /* This function initializes the app */
 110:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** PWM_CCU8_STATUS_t PWM_CCU8_Init(PWM_CCU8_t* handle_ptr)
 111:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** {
 712              	 .loc 2 111 0
 713              	 .cfi_startproc
 714              	 
 715              	 
 716 0000 80B5     	 push {r7,lr}
 717              	.LCFI84:
 718              	 .cfi_def_cfa_offset 8
 719              	 .cfi_offset 7,-8
 720              	 .cfi_offset 14,-4
 721 0002 86B0     	 sub sp,sp,#24
 722              	.LCFI85:
 723              	 .cfi_def_cfa_offset 32
 724 0004 00AF     	 add r7,sp,#0
 725              	.LCFI86:
 726              	 .cfi_def_cfa_register 7
 727 0006 7860     	 str r0,[r7,#4]
 112:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   PWM_CCU8_STATUS_t status;
 113:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   GLOBAL_CCU8_STATUS_t status_ccu8_global;
 114:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   uint32_t frequency_module;
 115:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   uint32_t prescalar;
 116:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 117:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   status = PWM_CCU8_STATUS_FAILURE;
 728              	 .loc 2 117 0
 729 0008 0123     	 movs r3,#1
 730 000a FB75     	 strb r3,[r7,#23]
 118:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   status_ccu8_global = GLOBAL_CCU8_STATUS_FAILURE;
 731              	 .loc 2 118 0
 732 000c 0123     	 movs r3,#1
 733 000e BB75     	 strb r3,[r7,#22]
 119:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   XMC_ASSERT("PWM_CCU8_Init:handle_ptr is NULL", (handle_ptr != NULL));
 120:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 121:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   if (PWM_CCU8_STATE_UNINITIALIZED == handle_ptr->state)
 734              	 .loc 2 121 0
 735 0010 7B68     	 ldr r3,[r7,#4]
 736 0012 1B7F     	 ldrb r3,[r3,#28]
 737 0014 002B     	 cmp r3,#0
 738 0016 40F09A80 	 bne .L21
 122:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   {
 123:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     /* Initialize consumed Apps */
 124:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     status_ccu8_global = GLOBAL_CCU8_Init(handle_ptr->config_ptr->global_ccu8_handle);
 739              	 .loc 2 124 0
 740 001a 7B68     	 ldr r3,[r7,#4]
 741 001c 1B68     	 ldr r3,[r3]
 742 001e D3F88830 	 ldr r3,[r3,#136]
 743 0022 1846     	 mov r0,r3
 744 0024 FFF7FEFF 	 bl GLOBAL_CCU8_Init
 745 0028 0346     	 mov r3,r0
 746 002a BB75     	 strb r3,[r7,#22]
 125:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 126:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     /* Initialize CCU8x_CC8y slice */
 127:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     if (GLOBAL_CCU8_STATUS_SUCCESS == status_ccu8_global)
 747              	 .loc 2 127 0
 748 002c BB7D     	 ldrb r3,[r7,#22]
 749 002e 002B     	 cmp r3,#0
 750 0030 40F08980 	 bne .L22
 128:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     {
 129:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       XMC_DEBUG("PWM_CCU8_Init:Initilizing slice");
 130:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 131:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       /* Configure CCU8x_CC8y slice as timer */
 132:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       XMC_CCU8_SLICE_CompareInit(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ccu8_cc8_slice
 751              	 .loc 2 132 0
 752 0034 7B68     	 ldr r3,[r7,#4]
 753 0036 9A68     	 ldr r2,[r3,#8]
 754 0038 7B68     	 ldr r3,[r7,#4]
 755 003a 1B68     	 ldr r3,[r3]
 756 003c 5B6C     	 ldr r3,[r3,#68]
 757 003e 1046     	 mov r0,r2
 758 0040 1946     	 mov r1,r3
 759 0042 FFF7FEFF 	 bl XMC_CCU8_SLICE_CompareInit
 133:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       /* Set period match value of the timer  */
 134:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       XMC_CCU8_SLICE_SetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->period
 760              	 .loc 2 134 0
 761 0046 7B68     	 ldr r3,[r7,#4]
 762 0048 9A68     	 ldr r2,[r3,#8]
 763 004a 7B68     	 ldr r3,[r7,#4]
 764 004c 1B68     	 ldr r3,[r3]
 765 004e 5B88     	 ldrh r3,[r3,#2]
 766 0050 1046     	 mov r0,r2
 767 0052 1946     	 mov r1,r3
 768 0054 FFF7FEFF 	 bl XMC_CCU8_SLICE_SetTimerPeriodMatch
 135:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 136:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       /* Set timer compare match value for channel 1 */
 137:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNE
 769              	 .loc 2 137 0
 770 0058 7B68     	 ldr r3,[r7,#4]
 771 005a 9A68     	 ldr r2,[r3,#8]
 138:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                                           (uint16_t) handle_ptr->config_ptr->compare1_value);
 772              	 .loc 2 138 0
 773 005c 7B68     	 ldr r3,[r7,#4]
 774 005e 1B68     	 ldr r3,[r3]
 137:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                                           (uint16_t) handle_ptr->config_ptr->compare1_value);
 775              	 .loc 2 137 0
 776 0060 9B88     	 ldrh r3,[r3,#4]
 777 0062 1046     	 mov r0,r2
 778 0064 0021     	 movs r1,#0
 779 0066 1A46     	 mov r2,r3
 780 0068 FFF7FEFF 	 bl XMC_CCU8_SLICE_SetTimerCompareMatch
 139:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       /* Set timer compare match value for channel 2 */
 140:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNE
 781              	 .loc 2 140 0
 782 006c 7B68     	 ldr r3,[r7,#4]
 783 006e 9A68     	 ldr r2,[r3,#8]
 141:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                                           (uint16_t) handle_ptr->config_ptr->compare2_value);
 784              	 .loc 2 141 0
 785 0070 7B68     	 ldr r3,[r7,#4]
 786 0072 1B68     	 ldr r3,[r3]
 140:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                                           (uint16_t) handle_ptr->config_ptr->compare2_value);
 787              	 .loc 2 140 0
 788 0074 DB88     	 ldrh r3,[r3,#6]
 789 0076 1046     	 mov r0,r2
 790 0078 0121     	 movs r1,#1
 791 007a 1A46     	 mov r2,r3
 792 007c FFF7FEFF 	 bl XMC_CCU8_SLICE_SetTimerCompareMatch
 142:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 143:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       if ((1U == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch1_enable) || (1U
 793              	 .loc 2 143 0
 794 0080 7B68     	 ldr r3,[r7,#4]
 795 0082 1B68     	 ldr r3,[r3]
 796 0084 5B6C     	 ldr r3,[r3,#68]
 797 0086 DB78     	 ldrb r3,[r3,#3]
 798 0088 03F00203 	 and r3,r3,#2
 799 008c DBB2     	 uxtb r3,r3
 800 008e 002B     	 cmp r3,#0
 801 0090 08D1     	 bne .L23
 144:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****           == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch2_enable))
 802              	 .loc 2 144 0 discriminator 1
 803 0092 7B68     	 ldr r3,[r7,#4]
 804 0094 1B68     	 ldr r3,[r3]
 805 0096 5B6C     	 ldr r3,[r3,#68]
 806 0098 DB78     	 ldrb r3,[r3,#3]
 807 009a 03F00403 	 and r3,r3,#4
 808 009e DBB2     	 uxtb r3,r3
 143:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****           == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch2_enable))
 809              	 .loc 2 143 0 discriminator 1
 810 00a0 002B     	 cmp r3,#0
 811 00a2 08D0     	 beq .L24
 812              	.L23:
 145:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       {
 146:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         XMC_CCU8_SetMultiChannelShadowTransferMode(handle_ptr->ccu8_module_ptr,
 813              	 .loc 2 146 0
 814 00a4 7B68     	 ldr r3,[r7,#4]
 815 00a6 5A68     	 ldr r2,[r3,#4]
 147:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                                                    (uint32_t) handle_ptr->config_ptr->mcm_shadow_tx
 816              	 .loc 2 147 0
 817 00a8 7B68     	 ldr r3,[r7,#4]
 818 00aa 1B68     	 ldr r3,[r3]
 819 00ac DB6B     	 ldr r3,[r3,#60]
 146:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                                                    (uint32_t) handle_ptr->config_ptr->mcm_shadow_tx
 820              	 .loc 2 146 0
 821 00ae 1046     	 mov r0,r2
 822 00b0 1946     	 mov r1,r3
 823 00b2 FFF7FEFF 	 bl XMC_CCU8_SetMultiChannelShadowTransferMode
 824              	.L24:
 148:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       }
 149:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 150:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** #if (UC_SERIES != XMC45) /*STC register not available on XMC45xx devices */
 151:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       XMC_CCU8_SLICE_SetShadowTransferMode(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->shad
 152:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** #endif
 153:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 154:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** #if (UC_SERIES == XMC14) /*below feature available in XMC14xx devices */
 155:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       XMC_CCU8_SLICE_WriteImmediateAfterShadowTransfer(handle_ptr->ccu8_slice_ptr,
 156:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                                                        handle_ptr->config_ptr->immediate_write);
 157:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       XMC_CCU8_SLICE_EnableAutomaticShadowTransferRequest(handle_ptr->ccu8_slice_ptr,
 158:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                                                           handle_ptr->config_ptr->automatic_shadow_
 159:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       if((bool)true == handle_ptr->config_ptr->cascaded_shadow_txfr_enable)
 160:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       {
 161:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         XMC_CCU8_SLICE_EnableCascadedShadowTransfer(handle_ptr->ccu8_slice_ptr);
 162:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       }
 163:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** #endif
 164:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 165:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       /* Transfer value from shadow timer registers to actual timer registers */
 166:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       XMC_CCU8_EnableShadowTransfer(handle_ptr->ccu8_module_ptr, handle_ptr->shadow_txfr_msk);
 825              	 .loc 2 166 0
 826 00b6 7B68     	 ldr r3,[r7,#4]
 827 00b8 5A68     	 ldr r2,[r3,#4]
 828 00ba 7B68     	 ldr r3,[r7,#4]
 829 00bc 1B69     	 ldr r3,[r3,#16]
 830 00be 1046     	 mov r0,r2
 831 00c0 1946     	 mov r1,r3
 832 00c2 FFF7FEFF 	 bl XMC_CCU8_EnableShadowTransfer
 167:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       XMC_CCU8_EnableShadowTransfer(handle_ptr->ccu8_module_ptr, handle_ptr->dither_shadow_txfr_msk
 833              	 .loc 2 167 0
 834 00c6 7B68     	 ldr r3,[r7,#4]
 835 00c8 5A68     	 ldr r2,[r3,#4]
 836 00ca 7B68     	 ldr r3,[r7,#4]
 837 00cc 5B69     	 ldr r3,[r3,#20]
 838 00ce 1046     	 mov r0,r2
 839 00d0 1946     	 mov r1,r3
 840 00d2 FFF7FEFF 	 bl XMC_CCU8_EnableShadowTransfer
 168:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 169:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       XMC_CCU8_SLICE_DeadTimeInit(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->dt_config_ptr
 841              	 .loc 2 169 0
 842 00d6 7B68     	 ldr r3,[r7,#4]
 843 00d8 9A68     	 ldr r2,[r3,#8]
 844 00da 7B68     	 ldr r3,[r7,#4]
 845 00dc 1B68     	 ldr r3,[r3]
 846 00de 1B6C     	 ldr r3,[r3,#64]
 847 00e0 1046     	 mov r0,r2
 848 00e2 1946     	 mov r1,r3
 849 00e4 FFF7FEFF 	 bl XMC_CCU8_SLICE_DeadTimeInit
 170:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 171:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       /* Configure events */
 172:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       PWM_CCU8_lConfigure_Events(handle_ptr);
 850              	 .loc 2 172 0
 851 00e8 7868     	 ldr r0,[r7,#4]
 852 00ea FFF7FEFF 	 bl PWM_CCU8_lConfigure_Events
 173:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 174:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       /* Enable the interrupts */
 175:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       PWM_CCU8_lInit_Interrupt(handle_ptr);
 853              	 .loc 2 175 0
 854 00ee 7868     	 ldr r0,[r7,#4]
 855 00f0 FFF7FEFF 	 bl PWM_CCU8_lInit_Interrupt
 176:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 177:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       /*Initializes the GPIO*/
 178:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       PWM_CCU8_lInit_GPIO(handle_ptr);
 856              	 .loc 2 178 0
 857 00f4 7868     	 ldr r0,[r7,#4]
 858 00f6 FFF7FEFF 	 bl PWM_CCU8_lInit_GPIO
 179:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 180:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       frequency_module = handle_ptr->config_ptr->global_ccu8_handle->module_frequency;
 859              	 .loc 2 180 0
 860 00fa 7B68     	 ldr r3,[r7,#4]
 861 00fc 1B68     	 ldr r3,[r3]
 862 00fe D3F88830 	 ldr r3,[r3,#136]
 863 0102 1B68     	 ldr r3,[r3]
 864 0104 3B61     	 str r3,[r7,#16]
 181:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       prescalar = (uint32_t) handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->prescaler_initval;
 865              	 .loc 2 181 0
 866 0106 7B68     	 ldr r3,[r7,#4]
 867 0108 1B68     	 ldr r3,[r3]
 868 010a 5B6C     	 ldr r3,[r3,#68]
 869 010c 1B7B     	 ldrb r3,[r3,#12]
 870 010e C3F30303 	 ubfx r3,r3,#0,#4
 871 0112 DBB2     	 uxtb r3,r3
 872 0114 FB60     	 str r3,[r7,#12]
 182:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       frequency_module = frequency_module / ((uint32_t) 1 << prescalar);
 873              	 .loc 2 182 0
 874 0116 FB68     	 ldr r3,[r7,#12]
 875 0118 3A69     	 ldr r2,[r7,#16]
 876 011a 22FA03F3 	 lsr r3,r2,r3
 877 011e 3B61     	 str r3,[r7,#16]
 183:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       handle_ptr->frequency_tclk = frequency_module;
 878              	 .loc 2 183 0
 879 0120 7B68     	 ldr r3,[r7,#4]
 880 0122 3A69     	 ldr r2,[r7,#16]
 881 0124 1A62     	 str r2,[r3,#32]
 184:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 185:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       handle_ptr->state = PWM_CCU8_STATE_INITIALIZED;
 882              	 .loc 2 185 0
 883 0126 7B68     	 ldr r3,[r7,#4]
 884 0128 0122     	 movs r2,#1
 885 012a 1A77     	 strb r2,[r3,#28]
 186:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       status = PWM_CCU8_STATUS_SUCCESS;
 886              	 .loc 2 186 0
 887 012c 0023     	 movs r3,#0
 888 012e FB75     	 strb r3,[r7,#23]
 187:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 188:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       /* Start the PWM generation if start at initialization is enabled */
 189:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       if ((bool) true == handle_ptr->config_ptr->start_control)
 889              	 .loc 2 189 0
 890 0130 7B68     	 ldr r3,[r7,#4]
 891 0132 1B68     	 ldr r3,[r3]
 892 0134 1B78     	 ldrb r3,[r3]
 893 0136 002B     	 cmp r3,#0
 894 0138 0BD0     	 beq .L27
 190:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       {
 191:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         status = PWM_CCU8_Start(handle_ptr);
 895              	 .loc 2 191 0
 896 013a 7868     	 ldr r0,[r7,#4]
 897 013c FFF7FEFF 	 bl PWM_CCU8_Start
 898 0140 0346     	 mov r3,r0
 899 0142 FB75     	 strb r3,[r7,#23]
 900 0144 05E0     	 b .L27
 901              	.L22:
 192:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       }
 193:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 194:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     }
 195:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     else
 196:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     {
 197:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       handle_ptr->state = PWM_CCU8_STATE_UNINITIALIZED;
 902              	 .loc 2 197 0
 903 0146 7B68     	 ldr r3,[r7,#4]
 904 0148 0022     	 movs r2,#0
 905 014a 1A77     	 strb r2,[r3,#28]
 906 014c 01E0     	 b .L27
 907              	.L21:
 198:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     }
 199:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 200:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   }
 201:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   else
 202:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   {
 203:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     status = PWM_CCU8_STATUS_ALREADY_INITIALIZED;
 908              	 .loc 2 203 0
 909 014e 0223     	 movs r3,#2
 910 0150 FB75     	 strb r3,[r7,#23]
 911              	.L27:
 204:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     XMC_DEBUG("PWM_CCU8_Init:PWM_CCU8_STATUS_ALREADY_INITIALIZED");
 205:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   }
 206:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 207:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   return (status);
 912              	 .loc 2 207 0
 913 0152 FB7D     	 ldrb r3,[r7,#23]
 208:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** } /* end of PWM_CCU8_Init() api */
 914              	 .loc 2 208 0
 915 0154 1846     	 mov r0,r3
 916 0156 1837     	 adds r7,r7,#24
 917              	.LCFI87:
 918              	 .cfi_def_cfa_offset 8
 919 0158 BD46     	 mov sp,r7
 920              	.LCFI88:
 921              	 .cfi_def_cfa_register 13
 922              	 
 923 015a 80BD     	 pop {r7,pc}
 924              	 .cfi_endproc
 925              	.LFE209:
 927              	 .section .text.PWM_CCU8_lInit_Interrupt,"ax",%progbits
 928              	 .align 2
 929              	 .thumb
 930              	 .thumb_func
 932              	PWM_CCU8_lInit_Interrupt:
 933              	.LFB210:
 209:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 210:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** static void PWM_CCU8_lInit_Interrupt(PWM_CCU8_t* handle_ptr)
 211:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** {
 934              	 .loc 2 211 0
 935              	 .cfi_startproc
 936              	 
 937              	 
 938 0000 80B5     	 push {r7,lr}
 939              	.LCFI89:
 940              	 .cfi_def_cfa_offset 8
 941              	 .cfi_offset 7,-8
 942              	 .cfi_offset 14,-4
 943 0002 82B0     	 sub sp,sp,#8
 944              	.LCFI90:
 945              	 .cfi_def_cfa_offset 16
 946 0004 00AF     	 add r7,sp,#0
 947              	.LCFI91:
 948              	 .cfi_def_cfa_register 7
 949 0006 7860     	 str r0,[r7,#4]
 212:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 213:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   /* Enable events. Bind event to corresponding service request node. */
 214:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 215:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH,
 950              	 .loc 2 215 0
 951 0008 7B68     	 ldr r3,[r7,#4]
 952 000a 9A68     	 ldr r2,[r3,#8]
 216:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                                   handle_ptr->config_ptr->sr_per_match);
 953              	 .loc 2 216 0
 954 000c 7B68     	 ldr r3,[r7,#4]
 955 000e 1B68     	 ldr r3,[r3]
 215:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                                   handle_ptr->config_ptr->sr_per_match);
 956              	 .loc 2 215 0
 957 0010 5B7C     	 ldrb r3,[r3,#17]
 958 0012 1046     	 mov r0,r2
 959 0014 0021     	 movs r1,#0
 960 0016 1A46     	 mov r2,r3
 961 0018 FFF7FEFF 	 bl XMC_CCU8_SLICE_SetInterruptNode
 217:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_U
 962              	 .loc 2 217 0
 963 001c 7B68     	 ldr r3,[r7,#4]
 964 001e 9A68     	 ldr r2,[r3,#8]
 218:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                                   handle_ptr->config_ptr->sr_cmp1_match_up);
 965              	 .loc 2 218 0
 966 0020 7B68     	 ldr r3,[r7,#4]
 967 0022 1B68     	 ldr r3,[r3]
 217:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_U
 968              	 .loc 2 217 0
 969 0024 9B7C     	 ldrb r3,[r3,#18]
 970 0026 1046     	 mov r0,r2
 971 0028 0221     	 movs r1,#2
 972 002a 1A46     	 mov r2,r3
 973 002c FFF7FEFF 	 bl XMC_CCU8_SLICE_SetInterruptNode
 219:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_D
 974              	 .loc 2 219 0
 975 0030 7B68     	 ldr r3,[r7,#4]
 976 0032 9A68     	 ldr r2,[r3,#8]
 220:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                                   handle_ptr->config_ptr->sr_cmp1_match_down);
 977              	 .loc 2 220 0
 978 0034 7B68     	 ldr r3,[r7,#4]
 979 0036 1B68     	 ldr r3,[r3]
 219:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_D
 980              	 .loc 2 219 0
 981 0038 DB7C     	 ldrb r3,[r3,#19]
 982 003a 1046     	 mov r0,r2
 983 003c 0321     	 movs r1,#3
 984 003e 1A46     	 mov r2,r3
 985 0040 FFF7FEFF 	 bl XMC_CCU8_SLICE_SetInterruptNode
 221:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_U
 986              	 .loc 2 221 0
 987 0044 7B68     	 ldr r3,[r7,#4]
 988 0046 9A68     	 ldr r2,[r3,#8]
 222:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                                   handle_ptr->config_ptr->sr_cmp2_match_up);
 989              	 .loc 2 222 0
 990 0048 7B68     	 ldr r3,[r7,#4]
 991 004a 1B68     	 ldr r3,[r3]
 221:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_U
 992              	 .loc 2 221 0
 993 004c 1B7D     	 ldrb r3,[r3,#20]
 994 004e 1046     	 mov r0,r2
 995 0050 0421     	 movs r1,#4
 996 0052 1A46     	 mov r2,r3
 997 0054 FFF7FEFF 	 bl XMC_CCU8_SLICE_SetInterruptNode
 223:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_D
 998              	 .loc 2 223 0
 999 0058 7B68     	 ldr r3,[r7,#4]
 1000 005a 9A68     	 ldr r2,[r3,#8]
 224:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                                   handle_ptr->config_ptr->sr_cmp2_match_down);
 1001              	 .loc 2 224 0
 1002 005c 7B68     	 ldr r3,[r7,#4]
 1003 005e 1B68     	 ldr r3,[r3]
 223:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_D
 1004              	 .loc 2 223 0
 1005 0060 5B7D     	 ldrb r3,[r3,#21]
 1006 0062 1046     	 mov r0,r2
 1007 0064 0521     	 movs r1,#5
 1008 0066 1A46     	 mov r2,r3
 1009 0068 FFF7FEFF 	 bl XMC_CCU8_SLICE_SetInterruptNode
 225:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH,
 1010              	 .loc 2 225 0
 1011 006c 7B68     	 ldr r3,[r7,#4]
 1012 006e 9A68     	 ldr r2,[r3,#8]
 226:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                                   handle_ptr->config_ptr->sr_one_match_down);
 1013              	 .loc 2 226 0
 1014 0070 7B68     	 ldr r3,[r7,#4]
 1015 0072 1B68     	 ldr r3,[r3]
 225:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH,
 1016              	 .loc 2 225 0
 1017 0074 9B7D     	 ldrb r3,[r3,#22]
 1018 0076 1046     	 mov r0,r2
 1019 0078 0121     	 movs r1,#1
 1020 007a 1A46     	 mov r2,r3
 1021 007c FFF7FEFF 	 bl XMC_CCU8_SLICE_SetInterruptNode
 227:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT0,
 1022              	 .loc 2 227 0
 1023 0080 7B68     	 ldr r3,[r7,#4]
 1024 0082 9A68     	 ldr r2,[r3,#8]
 228:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                                   handle_ptr->config_ptr->sr_e0);
 1025              	 .loc 2 228 0
 1026 0084 7B68     	 ldr r3,[r7,#4]
 1027 0086 1B68     	 ldr r3,[r3]
 227:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT0,
 1028              	 .loc 2 227 0
 1029 0088 DB7D     	 ldrb r3,[r3,#23]
 1030 008a 1046     	 mov r0,r2
 1031 008c 0821     	 movs r1,#8
 1032 008e 1A46     	 mov r2,r3
 1033 0090 FFF7FEFF 	 bl XMC_CCU8_SLICE_SetInterruptNode
 229:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT1,
 1034              	 .loc 2 229 0
 1035 0094 7B68     	 ldr r3,[r7,#4]
 1036 0096 9A68     	 ldr r2,[r3,#8]
 230:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                                   handle_ptr->config_ptr->sr_e1);
 1037              	 .loc 2 230 0
 1038 0098 7B68     	 ldr r3,[r7,#4]
 1039 009a 1B68     	 ldr r3,[r3]
 229:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT1,
 1040              	 .loc 2 229 0
 1041 009c 1B7E     	 ldrb r3,[r3,#24]
 1042 009e 1046     	 mov r0,r2
 1043 00a0 0921     	 movs r1,#9
 1044 00a2 1A46     	 mov r2,r3
 1045 00a4 FFF7FEFF 	 bl XMC_CCU8_SLICE_SetInterruptNode
 231:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT2,
 1046              	 .loc 2 231 0
 1047 00a8 7B68     	 ldr r3,[r7,#4]
 1048 00aa 9A68     	 ldr r2,[r3,#8]
 232:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                                   handle_ptr->config_ptr->sr_e2);
 1049              	 .loc 2 232 0
 1050 00ac 7B68     	 ldr r3,[r7,#4]
 1051 00ae 1B68     	 ldr r3,[r3]
 231:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT2,
 1052              	 .loc 2 231 0
 1053 00b0 5B7E     	 ldrb r3,[r3,#25]
 1054 00b2 1046     	 mov r0,r2
 1055 00b4 0A21     	 movs r1,#10
 1056 00b6 1A46     	 mov r2,r3
 1057 00b8 FFF7FEFF 	 bl XMC_CCU8_SLICE_SetInterruptNode
 233:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 234:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   if ((bool) true == handle_ptr->config_ptr->int_per_match)
 1058              	 .loc 2 234 0
 1059 00bc 7B68     	 ldr r3,[r7,#4]
 1060 00be 1B68     	 ldr r3,[r3]
 1061 00c0 1B7A     	 ldrb r3,[r3,#8]
 1062 00c2 002B     	 cmp r3,#0
 1063 00c4 05D0     	 beq .L30
 235:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   {
 236:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     XMC_DEBUG("PWM_CCU8_Init: Interrupt period match enable");
 237:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH);
 1064              	 .loc 2 237 0
 1065 00c6 7B68     	 ldr r3,[r7,#4]
 1066 00c8 9B68     	 ldr r3,[r3,#8]
 1067 00ca 1846     	 mov r0,r3
 1068 00cc 0021     	 movs r1,#0
 1069 00ce FFF7FEFF 	 bl XMC_CCU8_SLICE_EnableEvent
 1070              	.L30:
 238:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   }
 239:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 240:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   if ((bool) true == handle_ptr->config_ptr->int_cmp1_match_up)
 1071              	 .loc 2 240 0
 1072 00d2 7B68     	 ldr r3,[r7,#4]
 1073 00d4 1B68     	 ldr r3,[r3]
 1074 00d6 5B7A     	 ldrb r3,[r3,#9]
 1075 00d8 002B     	 cmp r3,#0
 1076 00da 05D0     	 beq .L31
 241:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   {
 242:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     XMC_DEBUG("PWM_CCU8_Init: Interrupt compare match ch1 up enable");
 243:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_C
 1077              	 .loc 2 243 0
 1078 00dc 7B68     	 ldr r3,[r7,#4]
 1079 00de 9B68     	 ldr r3,[r3,#8]
 1080 00e0 1846     	 mov r0,r3
 1081 00e2 0221     	 movs r1,#2
 1082 00e4 FFF7FEFF 	 bl XMC_CCU8_SLICE_EnableEvent
 1083              	.L31:
 244:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   }
 245:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 246:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   if ((bool) true == handle_ptr->config_ptr->int_cmp1_match_down)
 1084              	 .loc 2 246 0
 1085 00e8 7B68     	 ldr r3,[r7,#4]
 1086 00ea 1B68     	 ldr r3,[r3]
 1087 00ec 9B7A     	 ldrb r3,[r3,#10]
 1088 00ee 002B     	 cmp r3,#0
 1089 00f0 05D0     	 beq .L32
 247:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   {
 248:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     XMC_DEBUG("PWM_CCU8_Init: Interrupt compare match ch1 down enable");
 249:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN
 1090              	 .loc 2 249 0
 1091 00f2 7B68     	 ldr r3,[r7,#4]
 1092 00f4 9B68     	 ldr r3,[r3,#8]
 1093 00f6 1846     	 mov r0,r3
 1094 00f8 0321     	 movs r1,#3
 1095 00fa FFF7FEFF 	 bl XMC_CCU8_SLICE_EnableEvent
 1096              	.L32:
 250:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   }
 251:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 252:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   if ((bool) true == handle_ptr->config_ptr->int_cmp2_match_up)
 1097              	 .loc 2 252 0
 1098 00fe 7B68     	 ldr r3,[r7,#4]
 1099 0100 1B68     	 ldr r3,[r3]
 1100 0102 DB7A     	 ldrb r3,[r3,#11]
 1101 0104 002B     	 cmp r3,#0
 1102 0106 05D0     	 beq .L33
 253:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   {
 254:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     XMC_DEBUG("PWM_CCU8_Init: Interrupt compare match ch2 up enable");
 255:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_C
 1103              	 .loc 2 255 0
 1104 0108 7B68     	 ldr r3,[r7,#4]
 1105 010a 9B68     	 ldr r3,[r3,#8]
 1106 010c 1846     	 mov r0,r3
 1107 010e 0421     	 movs r1,#4
 1108 0110 FFF7FEFF 	 bl XMC_CCU8_SLICE_EnableEvent
 1109              	.L33:
 256:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   }
 257:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 258:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   if ((bool) true == handle_ptr->config_ptr->int_cmp2_match_down)
 1110              	 .loc 2 258 0
 1111 0114 7B68     	 ldr r3,[r7,#4]
 1112 0116 1B68     	 ldr r3,[r3]
 1113 0118 1B7B     	 ldrb r3,[r3,#12]
 1114 011a 002B     	 cmp r3,#0
 1115 011c 05D0     	 beq .L34
 259:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   {
 260:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     XMC_DEBUG("PWM_CCU8_Init: Interrupt compare match ch2 down enable");
 261:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN
 1116              	 .loc 2 261 0
 1117 011e 7B68     	 ldr r3,[r7,#4]
 1118 0120 9B68     	 ldr r3,[r3,#8]
 1119 0122 1846     	 mov r0,r3
 1120 0124 0521     	 movs r1,#5
 1121 0126 FFF7FEFF 	 bl XMC_CCU8_SLICE_EnableEvent
 1122              	.L34:
 262:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   }
 263:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 264:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   if ((bool) true == handle_ptr->config_ptr->int_one_match_down)
 1123              	 .loc 2 264 0
 1124 012a 7B68     	 ldr r3,[r7,#4]
 1125 012c 1B68     	 ldr r3,[r3]
 1126 012e 5B7B     	 ldrb r3,[r3,#13]
 1127 0130 002B     	 cmp r3,#0
 1128 0132 05D0     	 beq .L35
 265:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   {
 266:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     XMC_DEBUG("PWM_CCU8_Init: Interrupt one match enable");
 267:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH);
 1129              	 .loc 2 267 0
 1130 0134 7B68     	 ldr r3,[r7,#4]
 1131 0136 9B68     	 ldr r3,[r3,#8]
 1132 0138 1846     	 mov r0,r3
 1133 013a 0121     	 movs r1,#1
 1134 013c FFF7FEFF 	 bl XMC_CCU8_SLICE_EnableEvent
 1135              	.L35:
 268:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   }
 269:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 270:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   if ((bool) true == handle_ptr->config_ptr->int_e0)
 1136              	 .loc 2 270 0
 1137 0140 7B68     	 ldr r3,[r7,#4]
 1138 0142 1B68     	 ldr r3,[r3]
 1139 0144 9B7B     	 ldrb r3,[r3,#14]
 1140 0146 002B     	 cmp r3,#0
 1141 0148 05D0     	 beq .L36
 271:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   {
 272:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     XMC_DEBUG("PWM_CCU8_Init: Interrupt event 0 enable");
 273:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT0);
 1142              	 .loc 2 273 0
 1143 014a 7B68     	 ldr r3,[r7,#4]
 1144 014c 9B68     	 ldr r3,[r3,#8]
 1145 014e 1846     	 mov r0,r3
 1146 0150 0821     	 movs r1,#8
 1147 0152 FFF7FEFF 	 bl XMC_CCU8_SLICE_EnableEvent
 1148              	.L36:
 274:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   }
 275:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 276:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   if ((bool) true == handle_ptr->config_ptr->int_e1)
 1149              	 .loc 2 276 0
 1150 0156 7B68     	 ldr r3,[r7,#4]
 1151 0158 1B68     	 ldr r3,[r3]
 1152 015a DB7B     	 ldrb r3,[r3,#15]
 1153 015c 002B     	 cmp r3,#0
 1154 015e 05D0     	 beq .L37
 277:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   {
 278:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     XMC_DEBUG("PWM_CCU8_Init: Interrupt event 1 enable");
 279:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT1);
 1155              	 .loc 2 279 0
 1156 0160 7B68     	 ldr r3,[r7,#4]
 1157 0162 9B68     	 ldr r3,[r3,#8]
 1158 0164 1846     	 mov r0,r3
 1159 0166 0921     	 movs r1,#9
 1160 0168 FFF7FEFF 	 bl XMC_CCU8_SLICE_EnableEvent
 1161              	.L37:
 280:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   }
 281:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 282:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   if ((bool) true == handle_ptr->config_ptr->int_e2)
 1162              	 .loc 2 282 0
 1163 016c 7B68     	 ldr r3,[r7,#4]
 1164 016e 1B68     	 ldr r3,[r3]
 1165 0170 1B7C     	 ldrb r3,[r3,#16]
 1166 0172 002B     	 cmp r3,#0
 1167 0174 05D0     	 beq .L29
 283:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   {
 284:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     XMC_DEBUG("PWM_CCU8_Init: Interrupt event 2 enable");
 285:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT2);
 1168              	 .loc 2 285 0
 1169 0176 7B68     	 ldr r3,[r7,#4]
 1170 0178 9B68     	 ldr r3,[r3,#8]
 1171 017a 1846     	 mov r0,r3
 1172 017c 0A21     	 movs r1,#10
 1173 017e FFF7FEFF 	 bl XMC_CCU8_SLICE_EnableEvent
 1174              	.L29:
 286:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   }
 287:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** }
 1175              	 .loc 2 287 0
 1176 0182 0837     	 adds r7,r7,#8
 1177              	.LCFI92:
 1178              	 .cfi_def_cfa_offset 8
 1179 0184 BD46     	 mov sp,r7
 1180              	.LCFI93:
 1181              	 .cfi_def_cfa_register 13
 1182              	 
 1183 0186 80BD     	 pop {r7,pc}
 1184              	 .cfi_endproc
 1185              	.LFE210:
 1187              	 .section .text.PWM_CCU8_lInit_GPIO,"ax",%progbits
 1188              	 .align 2
 1189              	 .thumb
 1190              	 .thumb_func
 1192              	PWM_CCU8_lInit_GPIO:
 1193              	.LFB211:
 288:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** static void PWM_CCU8_lInit_GPIO(PWM_CCU8_t* handle_ptr)
 289:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** {
 1194              	 .loc 2 289 0
 1195              	 .cfi_startproc
 1196              	 
 1197              	 
 1198 0000 80B5     	 push {r7,lr}
 1199              	.LCFI94:
 1200              	 .cfi_def_cfa_offset 8
 1201              	 .cfi_offset 7,-8
 1202              	 .cfi_offset 14,-4
 1203 0002 82B0     	 sub sp,sp,#8
 1204              	.LCFI95:
 1205              	 .cfi_def_cfa_offset 16
 1206 0004 00AF     	 add r7,sp,#0
 1207              	.LCFI96:
 1208              	 .cfi_def_cfa_register 7
 1209 0006 7860     	 str r0,[r7,#4]
 290:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   if ((bool) true == handle_ptr->config_ptr->gpio_ch1_out0_enable)
 1210              	 .loc 2 290 0
 1211 0008 7B68     	 ldr r3,[r7,#4]
 1212 000a 1B68     	 ldr r3,[r3]
 1213 000c 93F84830 	 ldrb r3,[r3,#72]
 1214 0010 002B     	 cmp r3,#0
 1215 0012 0ED0     	 beq .L40
 291:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   {
 292:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch1_out0_ptr, handle_ptr->config_ptr->gpio_ch1_out0_
 1216              	 .loc 2 292 0
 1217 0014 7B68     	 ldr r3,[r7,#4]
 1218 0016 1B68     	 ldr r3,[r3]
 1219 0018 D96C     	 ldr r1,[r3,#76]
 1220 001a 7B68     	 ldr r3,[r7,#4]
 1221 001c 1B68     	 ldr r3,[r3]
 1222 001e 93F85020 	 ldrb r2,[r3,#80]
 293:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                   handle_ptr->config_ptr->gpio_ch1_out0_config_ptr);
 1223              	 .loc 2 293 0
 1224 0022 7B68     	 ldr r3,[r7,#4]
 1225 0024 1B68     	 ldr r3,[r3]
 292:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                   handle_ptr->config_ptr->gpio_ch1_out0_config_ptr);
 1226              	 .loc 2 292 0
 1227 0026 5B6D     	 ldr r3,[r3,#84]
 1228 0028 0846     	 mov r0,r1
 1229 002a 1146     	 mov r1,r2
 1230 002c 1A46     	 mov r2,r3
 1231 002e FFF7FEFF 	 bl XMC_GPIO_Init
 1232              	.L40:
 294:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   }
 295:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 296:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   if ((bool) true == handle_ptr->config_ptr->gpio_ch1_out1_enable)
 1233              	 .loc 2 296 0
 1234 0032 7B68     	 ldr r3,[r7,#4]
 1235 0034 1B68     	 ldr r3,[r3]
 1236 0036 93F85830 	 ldrb r3,[r3,#88]
 1237 003a 002B     	 cmp r3,#0
 1238 003c 0ED0     	 beq .L41
 297:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   {
 298:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch1_out1_ptr, handle_ptr->config_ptr->gpio_ch1_out1_
 1239              	 .loc 2 298 0
 1240 003e 7B68     	 ldr r3,[r7,#4]
 1241 0040 1B68     	 ldr r3,[r3]
 1242 0042 D96D     	 ldr r1,[r3,#92]
 1243 0044 7B68     	 ldr r3,[r7,#4]
 1244 0046 1B68     	 ldr r3,[r3]
 1245 0048 93F86020 	 ldrb r2,[r3,#96]
 299:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                   handle_ptr->config_ptr->gpio_ch1_out1_config_ptr);
 1246              	 .loc 2 299 0
 1247 004c 7B68     	 ldr r3,[r7,#4]
 1248 004e 1B68     	 ldr r3,[r3]
 298:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                   handle_ptr->config_ptr->gpio_ch1_out1_config_ptr);
 1249              	 .loc 2 298 0
 1250 0050 5B6E     	 ldr r3,[r3,#100]
 1251 0052 0846     	 mov r0,r1
 1252 0054 1146     	 mov r1,r2
 1253 0056 1A46     	 mov r2,r3
 1254 0058 FFF7FEFF 	 bl XMC_GPIO_Init
 1255              	.L41:
 300:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   }
 301:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 302:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   if ((bool) true == handle_ptr->config_ptr->gpio_ch2_out2_enable)
 1256              	 .loc 2 302 0
 1257 005c 7B68     	 ldr r3,[r7,#4]
 1258 005e 1B68     	 ldr r3,[r3]
 1259 0060 93F86830 	 ldrb r3,[r3,#104]
 1260 0064 002B     	 cmp r3,#0
 1261 0066 0ED0     	 beq .L42
 303:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   {
 304:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch2_out2_ptr, handle_ptr->config_ptr->gpio_ch2_out2_
 1262              	 .loc 2 304 0
 1263 0068 7B68     	 ldr r3,[r7,#4]
 1264 006a 1B68     	 ldr r3,[r3]
 1265 006c D96E     	 ldr r1,[r3,#108]
 1266 006e 7B68     	 ldr r3,[r7,#4]
 1267 0070 1B68     	 ldr r3,[r3]
 1268 0072 93F87020 	 ldrb r2,[r3,#112]
 305:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                   handle_ptr->config_ptr->gpio_ch2_out2_config_ptr);
 1269              	 .loc 2 305 0
 1270 0076 7B68     	 ldr r3,[r7,#4]
 1271 0078 1B68     	 ldr r3,[r3]
 304:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                   handle_ptr->config_ptr->gpio_ch2_out2_config_ptr);
 1272              	 .loc 2 304 0
 1273 007a 5B6F     	 ldr r3,[r3,#116]
 1274 007c 0846     	 mov r0,r1
 1275 007e 1146     	 mov r1,r2
 1276 0080 1A46     	 mov r2,r3
 1277 0082 FFF7FEFF 	 bl XMC_GPIO_Init
 1278              	.L42:
 306:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   }
 307:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 308:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   if ((bool) true == handle_ptr->config_ptr->gpio_ch2_out3_enable)
 1279              	 .loc 2 308 0
 1280 0086 7B68     	 ldr r3,[r7,#4]
 1281 0088 1B68     	 ldr r3,[r3]
 1282 008a 93F87830 	 ldrb r3,[r3,#120]
 1283 008e 002B     	 cmp r3,#0
 1284 0090 0FD0     	 beq .L39
 309:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   {
 310:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch2_out3_ptr, handle_ptr->config_ptr->gpio_ch2_out3_
 1285              	 .loc 2 310 0
 1286 0092 7B68     	 ldr r3,[r7,#4]
 1287 0094 1B68     	 ldr r3,[r3]
 1288 0096 D96F     	 ldr r1,[r3,#124]
 1289 0098 7B68     	 ldr r3,[r7,#4]
 1290 009a 1B68     	 ldr r3,[r3]
 1291 009c 93F88020 	 ldrb r2,[r3,#128]
 311:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                   handle_ptr->config_ptr->gpio_ch2_out3_config_ptr);
 1292              	 .loc 2 311 0
 1293 00a0 7B68     	 ldr r3,[r7,#4]
 1294 00a2 1B68     	 ldr r3,[r3]
 310:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                   handle_ptr->config_ptr->gpio_ch2_out3_config_ptr);
 1295              	 .loc 2 310 0
 1296 00a4 D3F88430 	 ldr r3,[r3,#132]
 1297 00a8 0846     	 mov r0,r1
 1298 00aa 1146     	 mov r1,r2
 1299 00ac 1A46     	 mov r2,r3
 1300 00ae FFF7FEFF 	 bl XMC_GPIO_Init
 1301              	.L39:
 312:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   }
 313:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** }
 1302              	 .loc 2 313 0
 1303 00b2 0837     	 adds r7,r7,#8
 1304              	.LCFI97:
 1305              	 .cfi_def_cfa_offset 8
 1306 00b4 BD46     	 mov sp,r7
 1307              	.LCFI98:
 1308              	 .cfi_def_cfa_register 13
 1309              	 
 1310 00b6 80BD     	 pop {r7,pc}
 1311              	 .cfi_endproc
 1312              	.LFE211:
 1314              	 .section .text.PWM_CCU8_lConfigure_Events,"ax",%progbits
 1315              	 .align 2
 1316              	 .thumb
 1317              	 .thumb_func
 1319              	PWM_CCU8_lConfigure_Events:
 1320              	.LFB212:
 314:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 315:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** static void PWM_CCU8_lConfigure_Events(PWM_CCU8_t* handle_ptr)
 316:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** {
 1321              	 .loc 2 316 0
 1322              	 .cfi_startproc
 1323              	 
 1324              	 
 1325 0000 80B5     	 push {r7,lr}
 1326              	.LCFI99:
 1327              	 .cfi_def_cfa_offset 8
 1328              	 .cfi_offset 7,-8
 1329              	 .cfi_offset 14,-4
 1330 0002 84B0     	 sub sp,sp,#16
 1331              	.LCFI100:
 1332              	 .cfi_def_cfa_offset 24
 1333 0004 02AF     	 add r7,sp,#8
 1334              	.LCFI101:
 1335              	 .cfi_def_cfa 7,16
 1336 0006 7860     	 str r0,[r7,#4]
 317:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   /* Configure slice to a external event 0 */
 318:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_0,
 1337              	 .loc 2 318 0
 1338 0008 7B68     	 ldr r3,[r7,#4]
 1339 000a 9A68     	 ldr r2,[r3,#8]
 319:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                                 handle_ptr->config_ptr->event0_config_ptr);
 1340              	 .loc 2 319 0
 1341 000c 7B68     	 ldr r3,[r7,#4]
 1342 000e 1B68     	 ldr r3,[r3]
 318:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                                 handle_ptr->config_ptr->event0_config_ptr);
 1343              	 .loc 2 318 0
 1344 0010 DB69     	 ldr r3,[r3,#28]
 1345 0012 1046     	 mov r0,r2
 1346 0014 0121     	 movs r1,#1
 1347 0016 1A46     	 mov r2,r3
 1348 0018 FFF7FEFF 	 bl XMC_CCU8_SLICE_ConfigureEvent
 320:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 321:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   /* Configure slice to a external event 1 */
 322:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_1,
 1349              	 .loc 2 322 0
 1350 001c 7B68     	 ldr r3,[r7,#4]
 1351 001e 9A68     	 ldr r2,[r3,#8]
 323:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                                 handle_ptr->config_ptr->event1_config_ptr);
 1352              	 .loc 2 323 0
 1353 0020 7B68     	 ldr r3,[r7,#4]
 1354 0022 1B68     	 ldr r3,[r3]
 322:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                                 handle_ptr->config_ptr->event1_config_ptr);
 1355              	 .loc 2 322 0
 1356 0024 1B6A     	 ldr r3,[r3,#32]
 1357 0026 1046     	 mov r0,r2
 1358 0028 0221     	 movs r1,#2
 1359 002a 1A46     	 mov r2,r3
 1360 002c FFF7FEFF 	 bl XMC_CCU8_SLICE_ConfigureEvent
 324:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 325:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   /* Configure slice to a external event 2 */
 326:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_2,
 1361              	 .loc 2 326 0
 1362 0030 7B68     	 ldr r3,[r7,#4]
 1363 0032 9A68     	 ldr r2,[r3,#8]
 327:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                                 handle_ptr->config_ptr->event2_config_ptr);
 1364              	 .loc 2 327 0
 1365 0034 7B68     	 ldr r3,[r7,#4]
 1366 0036 1B68     	 ldr r3,[r3]
 326:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                                 handle_ptr->config_ptr->event2_config_ptr);
 1367              	 .loc 2 326 0
 1368 0038 5B6A     	 ldr r3,[r3,#36]
 1369 003a 1046     	 mov r0,r2
 1370 003c 0321     	 movs r1,#3
 1371 003e 1A46     	 mov r2,r3
 1372 0040 FFF7FEFF 	 bl XMC_CCU8_SLICE_ConfigureEvent
 328:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 329:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   /* External signal controls start of the timer */
 330:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_start_event)
 1373              	 .loc 2 330 0
 1374 0044 7B68     	 ldr r3,[r7,#4]
 1375 0046 1B68     	 ldr r3,[r3]
 1376 0048 93F82830 	 ldrb r3,[r3,#40]
 1377 004c 002B     	 cmp r3,#0
 1378 004e 0ED0     	 beq .L45
 331:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   {
 332:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     XMC_CCU8_SLICE_StartConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_start_event,
 1379              	 .loc 2 332 0
 1380 0050 7B68     	 ldr r3,[r7,#4]
 1381 0052 9968     	 ldr r1,[r3,#8]
 1382 0054 7B68     	 ldr r3,[r7,#4]
 1383 0056 1B68     	 ldr r3,[r3]
 1384 0058 93F82820 	 ldrb r2,[r3,#40]
 333:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                                handle_ptr->config_ptr->ext_start_mode);
 1385              	 .loc 2 333 0
 1386 005c 7B68     	 ldr r3,[r7,#4]
 1387 005e 1B68     	 ldr r3,[r3]
 332:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                                handle_ptr->config_ptr->ext_start_mode);
 1388              	 .loc 2 332 0
 1389 0060 93F82930 	 ldrb r3,[r3,#41]
 1390 0064 0846     	 mov r0,r1
 1391 0066 1146     	 mov r1,r2
 1392 0068 1A46     	 mov r2,r3
 1393 006a FFF7FEFF 	 bl XMC_CCU8_SLICE_StartConfig
 1394              	.L45:
 334:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   }
 335:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 336:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   /* External signal can stop the timer */
 337:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_stop_event)
 1395              	 .loc 2 337 0
 1396 006e 7B68     	 ldr r3,[r7,#4]
 1397 0070 1B68     	 ldr r3,[r3]
 1398 0072 93F82A30 	 ldrb r3,[r3,#42]
 1399 0076 002B     	 cmp r3,#0
 1400 0078 0ED0     	 beq .L46
 338:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   {
 339:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     XMC_CCU8_SLICE_StopConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_stop_event,
 1401              	 .loc 2 339 0
 1402 007a 7B68     	 ldr r3,[r7,#4]
 1403 007c 9968     	 ldr r1,[r3,#8]
 1404 007e 7B68     	 ldr r3,[r7,#4]
 1405 0080 1B68     	 ldr r3,[r3]
 1406 0082 93F82A20 	 ldrb r2,[r3,#42]
 340:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                               handle_ptr->config_ptr->ext_stop_mode);
 1407              	 .loc 2 340 0
 1408 0086 7B68     	 ldr r3,[r7,#4]
 1409 0088 1B68     	 ldr r3,[r3]
 339:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                               handle_ptr->config_ptr->ext_stop_mode);
 1410              	 .loc 2 339 0
 1411 008a 93F82B30 	 ldrb r3,[r3,#43]
 1412 008e 0846     	 mov r0,r1
 1413 0090 1146     	 mov r1,r2
 1414 0092 1A46     	 mov r2,r3
 1415 0094 FFF7FEFF 	 bl XMC_CCU8_SLICE_StopConfig
 1416              	.L46:
 341:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   }
 342:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 343:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   /* External signal can change the timer counting direction */
 344:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_count_dir_event)
 1417              	 .loc 2 344 0
 1418 0098 7B68     	 ldr r3,[r7,#4]
 1419 009a 1B68     	 ldr r3,[r3]
 1420 009c 93F82C30 	 ldrb r3,[r3,#44]
 1421 00a0 002B     	 cmp r3,#0
 1422 00a2 09D0     	 beq .L47
 345:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   {
 346:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     XMC_CCU8_SLICE_DirectionConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_count_di
 1423              	 .loc 2 346 0
 1424 00a4 7B68     	 ldr r3,[r7,#4]
 1425 00a6 9A68     	 ldr r2,[r3,#8]
 1426 00a8 7B68     	 ldr r3,[r7,#4]
 1427 00aa 1B68     	 ldr r3,[r3]
 1428 00ac 93F82C30 	 ldrb r3,[r3,#44]
 1429 00b0 1046     	 mov r0,r2
 1430 00b2 1946     	 mov r1,r3
 1431 00b4 FFF7FEFF 	 bl XMC_CCU8_SLICE_DirectionConfig
 1432              	.L47:
 347:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   }
 348:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   /* External signal can stop the timer and the timer value remains same */
 349:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_gate_event)
 1433              	 .loc 2 349 0
 1434 00b8 7B68     	 ldr r3,[r7,#4]
 1435 00ba 1B68     	 ldr r3,[r3]
 1436 00bc 93F82D30 	 ldrb r3,[r3,#45]
 1437 00c0 002B     	 cmp r3,#0
 1438 00c2 09D0     	 beq .L48
 350:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   {
 351:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     XMC_CCU8_SLICE_GateConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_gate_event);
 1439              	 .loc 2 351 0
 1440 00c4 7B68     	 ldr r3,[r7,#4]
 1441 00c6 9A68     	 ldr r2,[r3,#8]
 1442 00c8 7B68     	 ldr r3,[r7,#4]
 1443 00ca 1B68     	 ldr r3,[r3]
 1444 00cc 93F82D30 	 ldrb r3,[r3,#45]
 1445 00d0 1046     	 mov r0,r2
 1446 00d2 1946     	 mov r1,r3
 1447 00d4 FFF7FEFF 	 bl XMC_CCU8_SLICE_GateConfig
 1448              	.L48:
 352:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   }
 353:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   /* Timer increments on external signal */
 354:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_count_event)
 1449              	 .loc 2 354 0
 1450 00d8 7B68     	 ldr r3,[r7,#4]
 1451 00da 1B68     	 ldr r3,[r3]
 1452 00dc 93F82E30 	 ldrb r3,[r3,#46]
 1453 00e0 002B     	 cmp r3,#0
 1454 00e2 09D0     	 beq .L49
 355:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   {
 356:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     XMC_CCU8_SLICE_CountConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_count_event)
 1455              	 .loc 2 356 0
 1456 00e4 7B68     	 ldr r3,[r7,#4]
 1457 00e6 9A68     	 ldr r2,[r3,#8]
 1458 00e8 7B68     	 ldr r3,[r7,#4]
 1459 00ea 1B68     	 ldr r3,[r3]
 1460 00ec 93F82E30 	 ldrb r3,[r3,#46]
 1461 00f0 1046     	 mov r0,r2
 1462 00f2 1946     	 mov r1,r3
 1463 00f4 FFF7FEFF 	 bl XMC_CCU8_SLICE_CountConfig
 1464              	.L49:
 357:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   }
 358:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   /* Timer gets loaded with compare register value or period register value on external signal */
 359:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_load_event)
 1465              	 .loc 2 359 0
 1466 00f8 7B68     	 ldr r3,[r7,#4]
 1467 00fa 1B68     	 ldr r3,[r3]
 1468 00fc 93F82F30 	 ldrb r3,[r3,#47]
 1469 0100 002B     	 cmp r3,#0
 1470 0102 13D0     	 beq .L50
 360:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   {
 361:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     XMC_CCU8_SLICE_LoadConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_load_event);
 1471              	 .loc 2 361 0
 1472 0104 7B68     	 ldr r3,[r7,#4]
 1473 0106 9A68     	 ldr r2,[r3,#8]
 1474 0108 7B68     	 ldr r3,[r7,#4]
 1475 010a 1B68     	 ldr r3,[r3]
 1476 010c 93F82F30 	 ldrb r3,[r3,#47]
 1477 0110 1046     	 mov r0,r2
 1478 0112 1946     	 mov r1,r3
 1479 0114 FFF7FEFF 	 bl XMC_CCU8_SLICE_LoadConfig
 362:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     XMC_CCU8_SLICE_LoadSelector(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_load_select
 1480              	 .loc 2 362 0
 1481 0118 7B68     	 ldr r3,[r7,#4]
 1482 011a 9A68     	 ldr r2,[r3,#8]
 1483 011c 7B68     	 ldr r3,[r7,#4]
 1484 011e 1B68     	 ldr r3,[r3]
 1485 0120 93F83030 	 ldrb r3,[r3,#48]
 1486 0124 1046     	 mov r0,r2
 1487 0126 1946     	 mov r1,r3
 1488 0128 FFF7FEFF 	 bl XMC_CCU8_SLICE_LoadSelector
 1489              	.L50:
 363:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   }
 364:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   /* External signal PWM signal (ST bit) output gets modulated by external signal */
 365:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
 1490              	 .loc 2 365 0
 1491 012c 7B68     	 ldr r3,[r7,#4]
 1492 012e 1B68     	 ldr r3,[r3]
 1493 0130 93F83130 	 ldrb r3,[r3,#49]
 1494 0134 002B     	 cmp r3,#0
 1495 0136 11D0     	 beq .L51
 366:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   {
 367:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     XMC_CCU8_SLICE_ModulationConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_mod_eve
 1496              	 .loc 2 367 0
 1497 0138 7B68     	 ldr r3,[r7,#4]
 1498 013a 9868     	 ldr r0,[r3,#8]
 1499 013c 7B68     	 ldr r3,[r7,#4]
 1500 013e 1B68     	 ldr r3,[r3]
 1501 0140 93F83110 	 ldrb r1,[r3,#49]
 368:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                                     handle_ptr->config_ptr->ext_mod_mode, XMC_CCU8_SLICE_MODULATION
 1502              	 .loc 2 368 0
 1503 0144 7B68     	 ldr r3,[r7,#4]
 1504 0146 1B68     	 ldr r3,[r3]
 367:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                                     handle_ptr->config_ptr->ext_mod_mode, XMC_CCU8_SLICE_MODULATION
 1505              	 .loc 2 367 0
 1506 0148 93F83220 	 ldrb r2,[r3,#50]
 369:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                                     handle_ptr->config_ptr->ext_mod_sync);
 1507              	 .loc 2 369 0
 1508 014c 7B68     	 ldr r3,[r7,#4]
 1509 014e 1B68     	 ldr r3,[r3]
 367:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                                     handle_ptr->config_ptr->ext_mod_mode, XMC_CCU8_SLICE_MODULATION
 1510              	 .loc 2 367 0
 1511 0150 93F83330 	 ldrb r3,[r3,#51]
 1512 0154 0093     	 str r3,[sp]
 1513 0156 0323     	 movs r3,#3
 1514 0158 FFF7FEFF 	 bl XMC_CCU8_SLICE_ModulationConfig
 1515              	.L51:
 370:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   }
 371:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 372:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   /* PWM signal (ST bit) output gets modulated by external signal */
 373:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   if (XMC_CCU8_SLICE_EVENT_2 == handle_ptr->config_ptr->ext_trap_event)
 1516              	 .loc 2 373 0
 1517 015c 7B68     	 ldr r3,[r7,#4]
 1518 015e 1B68     	 ldr r3,[r3]
 1519 0160 93F83730 	 ldrb r3,[r3,#55]
 1520 0164 032B     	 cmp r3,#3
 1521 0166 1AD1     	 bne .L52
 374:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   {
 375:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     XMC_CCU8_SLICE_TrapConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_trap_exit,
 1522              	 .loc 2 375 0
 1523 0168 7B68     	 ldr r3,[r7,#4]
 1524 016a 9968     	 ldr r1,[r3,#8]
 1525 016c 7B68     	 ldr r3,[r7,#4]
 1526 016e 1B68     	 ldr r3,[r3]
 1527 0170 93F83920 	 ldrb r2,[r3,#57]
 376:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                               handle_ptr->config_ptr->ext_trap_sync);
 1528              	 .loc 2 376 0
 1529 0174 7B68     	 ldr r3,[r7,#4]
 1530 0176 1B68     	 ldr r3,[r3]
 375:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                               handle_ptr->config_ptr->ext_trap_sync);
 1531              	 .loc 2 375 0
 1532 0178 93F83830 	 ldrb r3,[r3,#56]
 1533 017c 0846     	 mov r0,r1
 1534 017e 1146     	 mov r1,r2
 1535 0180 1A46     	 mov r2,r3
 1536 0182 FFF7FEFF 	 bl XMC_CCU8_SLICE_TrapConfig
 377:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     if ((bool) true == handle_ptr->config_ptr->ext_trap_enable)
 1537              	 .loc 2 377 0
 1538 0186 7B68     	 ldr r3,[r7,#4]
 1539 0188 1B68     	 ldr r3,[r3]
 1540 018a 93F83630 	 ldrb r3,[r3,#54]
 1541 018e 002B     	 cmp r3,#0
 1542 0190 05D0     	 beq .L52
 378:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     {
 379:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       XMC_CCU8_SLICE_EnableTrap(
 1543              	 .loc 2 379 0
 1544 0192 7B68     	 ldr r3,[r7,#4]
 1545 0194 9B68     	 ldr r3,[r3,#8]
 1546 0196 1846     	 mov r0,r3
 1547 0198 0121     	 movs r1,#1
 1548 019a FFF7FEFF 	 bl XMC_CCU8_SLICE_EnableTrap
 1549              	.L52:
 380:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****           handle_ptr->ccu8_slice_ptr,
 381:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****           (uint32_t)(
 382:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****               XMC_CCU8_SLICE_OUTPUT_0 || XMC_CCU8_SLICE_OUTPUT_1 || XMC_CCU8_SLICE_OUTPUT_2
 383:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****               || XMC_CCU8_SLICE_OUTPUT_3));
 384:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     }
 385:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 386:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   }
 387:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   if ((XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_override_edge_event) || (XMC_CCU8_S
 1550              	 .loc 2 387 0
 1551 019e 7B68     	 ldr r3,[r7,#4]
 1552 01a0 1B68     	 ldr r3,[r3]
 1553 01a2 93F83430 	 ldrb r3,[r3,#52]
 1554 01a6 002B     	 cmp r3,#0
 1555 01a8 05D1     	 bne .L53
 388:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       != handle_ptr->config_ptr->ext_override_level_event))
 1556              	 .loc 2 388 0 discriminator 1
 1557 01aa 7B68     	 ldr r3,[r7,#4]
 1558 01ac 1B68     	 ldr r3,[r3]
 1559 01ae 93F83530 	 ldrb r3,[r3,#53]
 387:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       != handle_ptr->config_ptr->ext_override_level_event))
 1560              	 .loc 2 387 0 discriminator 1
 1561 01b2 002B     	 cmp r3,#0
 1562 01b4 11D0     	 beq .L44
 1563              	.L53:
 389:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   {
 390:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu8_slice_ptr,
 1564              	 .loc 2 390 0
 1565 01b6 7B68     	 ldr r3,[r7,#4]
 1566 01b8 9968     	 ldr r1,[r3,#8]
 391:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                                                    handle_ptr->config_ptr->event1_config_ptr,
 1567              	 .loc 2 391 0
 1568 01ba 7B68     	 ldr r3,[r7,#4]
 1569 01bc 1B68     	 ldr r3,[r3]
 390:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                                                    handle_ptr->config_ptr->event1_config_ptr,
 1570              	 .loc 2 390 0
 1571 01be 1A6A     	 ldr r2,[r3,#32]
 392:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                                                    handle_ptr->config_ptr->event2_config_ptr);
 1572              	 .loc 2 392 0
 1573 01c0 7B68     	 ldr r3,[r7,#4]
 1574 01c2 1B68     	 ldr r3,[r3]
 390:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                                                    handle_ptr->config_ptr->event1_config_ptr,
 1575              	 .loc 2 390 0
 1576 01c4 5B6A     	 ldr r3,[r3,#36]
 1577 01c6 0846     	 mov r0,r1
 1578 01c8 1146     	 mov r1,r2
 1579 01ca 1A46     	 mov r2,r3
 1580 01cc FFF7FEFF 	 bl XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent
 393:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     XMC_CCU8_SLICE_StatusBitOverrideConfig(handle_ptr->ccu8_slice_ptr);
 1581              	 .loc 2 393 0
 1582 01d0 7B68     	 ldr r3,[r7,#4]
 1583 01d2 9B68     	 ldr r3,[r3,#8]
 1584 01d4 1846     	 mov r0,r3
 1585 01d6 FFF7FEFF 	 bl XMC_CCU8_SLICE_StatusBitOverrideConfig
 1586              	.L44:
 394:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   }
 395:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 396:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** }
 1587              	 .loc 2 396 0
 1588 01da 0837     	 adds r7,r7,#8
 1589              	.LCFI102:
 1590              	 .cfi_def_cfa_offset 8
 1591 01dc BD46     	 mov sp,r7
 1592              	.LCFI103:
 1593              	 .cfi_def_cfa_register 13
 1594              	 
 1595 01de 80BD     	 pop {r7,pc}
 1596              	 .cfi_endproc
 1597              	.LFE212:
 1599              	 .section .text.PWM_CCU8_Start,"ax",%progbits
 1600              	 .align 2
 1601              	 .global PWM_CCU8_Start
 1602              	 .thumb
 1603              	 .thumb_func
 1605              	PWM_CCU8_Start:
 1606              	.LFB213:
 397:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** /**************************************************************************************************
 398:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** /*Starts the CCU8_CC8 slice. This needs to be called even if external start is configured.*/
 399:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** PWM_CCU8_STATUS_t PWM_CCU8_Start(PWM_CCU8_t* handle_ptr)
 400:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** {
 1607              	 .loc 2 400 0
 1608              	 .cfi_startproc
 1609              	 
 1610              	 
 1611 0000 80B5     	 push {r7,lr}
 1612              	.LCFI104:
 1613              	 .cfi_def_cfa_offset 8
 1614              	 .cfi_offset 7,-8
 1615              	 .cfi_offset 14,-4
 1616 0002 84B0     	 sub sp,sp,#16
 1617              	.LCFI105:
 1618              	 .cfi_def_cfa_offset 24
 1619 0004 00AF     	 add r7,sp,#0
 1620              	.LCFI106:
 1621              	 .cfi_def_cfa_register 7
 1622 0006 7860     	 str r0,[r7,#4]
 401:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   PWM_CCU8_STATUS_t status;
 402:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 403:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   status = PWM_CCU8_STATUS_FAILURE;
 1623              	 .loc 2 403 0
 1624 0008 0123     	 movs r3,#1
 1625 000a FB73     	 strb r3,[r7,#15]
 404:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   XMC_ASSERT("PWM_CCU8_Start:handle_ptr NULL", (handle_ptr != NULL));
 405:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   if ((PWM_CCU8_STATE_INITIALIZED == handle_ptr->state) || (PWM_CCU8_STATE_STOPPED == handle_ptr->s
 1626              	 .loc 2 405 0
 1627 000c 7B68     	 ldr r3,[r7,#4]
 1628 000e 1B7F     	 ldrb r3,[r3,#28]
 1629 0010 012B     	 cmp r3,#1
 1630 0012 03D0     	 beq .L56
 1631              	 .loc 2 405 0 is_stmt 0 discriminator 1
 1632 0014 7B68     	 ldr r3,[r7,#4]
 1633 0016 1B7F     	 ldrb r3,[r3,#28]
 1634 0018 032B     	 cmp r3,#3
 1635 001a 17D1     	 bne .L57
 1636              	.L56:
 406:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   {
 407:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     /* clear IDLE mode for the slice; Start timer */
 408:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     XMC_CCU8_EnableClock(handle_ptr->ccu8_module_ptr, handle_ptr->slice_number);
 1637              	 .loc 2 408 0 is_stmt 1
 1638 001c 7B68     	 ldr r3,[r7,#4]
 1639 001e 5A68     	 ldr r2,[r3,#4]
 1640 0020 7B68     	 ldr r3,[r7,#4]
 1641 0022 5B7B     	 ldrb r3,[r3,#13]
 1642 0024 1046     	 mov r0,r2
 1643 0026 1946     	 mov r1,r3
 1644 0028 FFF7FEFF 	 bl XMC_CCU8_EnableClock
 409:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 410:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     if (XMC_CCU8_SLICE_EVENT_NONE == handle_ptr->config_ptr->ext_start_event)
 1645              	 .loc 2 410 0
 1646 002c 7B68     	 ldr r3,[r7,#4]
 1647 002e 1B68     	 ldr r3,[r3]
 1648 0030 93F82830 	 ldrb r3,[r3,#40]
 1649 0034 002B     	 cmp r3,#0
 1650 0036 04D1     	 bne .L58
 411:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     {
 412:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       XMC_CCU8_SLICE_StartTimer(handle_ptr->ccu8_slice_ptr);
 1651              	 .loc 2 412 0
 1652 0038 7B68     	 ldr r3,[r7,#4]
 1653 003a 9B68     	 ldr r3,[r3,#8]
 1654 003c 1846     	 mov r0,r3
 1655 003e FFF7FEFF 	 bl XMC_CCU8_SLICE_StartTimer
 1656              	.L58:
 413:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     }
 414:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 415:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     handle_ptr->state = PWM_CCU8_STATE_RUNNING;
 1657              	 .loc 2 415 0
 1658 0042 7B68     	 ldr r3,[r7,#4]
 1659 0044 0222     	 movs r2,#2
 1660 0046 1A77     	 strb r2,[r3,#28]
 416:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     status = PWM_CCU8_STATUS_SUCCESS;
 1661              	 .loc 2 416 0
 1662 0048 0023     	 movs r3,#0
 1663 004a FB73     	 strb r3,[r7,#15]
 1664              	.L57:
 417:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     XMC_DEBUG("PWM_CCU8_Start:start PWM");
 418:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   }
 419:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   return (status);
 1665              	 .loc 2 419 0
 1666 004c FB7B     	 ldrb r3,[r7,#15]
 420:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** } /* end of PWM_CCU8_Start() api */
 1667              	 .loc 2 420 0
 1668 004e 1846     	 mov r0,r3
 1669 0050 1037     	 adds r7,r7,#16
 1670              	.LCFI107:
 1671              	 .cfi_def_cfa_offset 8
 1672 0052 BD46     	 mov sp,r7
 1673              	.LCFI108:
 1674              	 .cfi_def_cfa_register 13
 1675              	 
 1676 0054 80BD     	 pop {r7,pc}
 1677              	 .cfi_endproc
 1678              	.LFE213:
 1680 0056 00BF     	 .section .text.PWM_CCU8_Stop,"ax",%progbits
 1681              	 .align 2
 1682              	 .global PWM_CCU8_Stop
 1683              	 .thumb
 1684              	 .thumb_func
 1686              	PWM_CCU8_Stop:
 1687              	.LFB214:
 421:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** /**************************************************************************************************
 422:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** /*Stops the CCU8_CC8 slice. */
 423:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** PWM_CCU8_STATUS_t PWM_CCU8_Stop(PWM_CCU8_t* handle_ptr)
 424:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** {
 1688              	 .loc 2 424 0
 1689              	 .cfi_startproc
 1690              	 
 1691              	 
 1692 0000 80B5     	 push {r7,lr}
 1693              	.LCFI109:
 1694              	 .cfi_def_cfa_offset 8
 1695              	 .cfi_offset 7,-8
 1696              	 .cfi_offset 14,-4
 1697 0002 84B0     	 sub sp,sp,#16
 1698              	.LCFI110:
 1699              	 .cfi_def_cfa_offset 24
 1700 0004 00AF     	 add r7,sp,#0
 1701              	.LCFI111:
 1702              	 .cfi_def_cfa_register 7
 1703 0006 7860     	 str r0,[r7,#4]
 425:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   PWM_CCU8_STATUS_t status;
 426:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 427:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   status = PWM_CCU8_STATUS_FAILURE;
 1704              	 .loc 2 427 0
 1705 0008 0123     	 movs r3,#1
 1706 000a FB73     	 strb r3,[r7,#15]
 428:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   XMC_ASSERT("PWM_CCU8_Stop:handle_ptr NULL", (handle_ptr != NULL));
 429:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   if (PWM_CCU8_STATE_UNINITIALIZED != handle_ptr->state)
 1707              	 .loc 2 429 0
 1708 000c 7B68     	 ldr r3,[r7,#4]
 1709 000e 1B7F     	 ldrb r3,[r3,#28]
 1710 0010 002B     	 cmp r3,#0
 1711 0012 16D0     	 beq .L61
 430:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   {
 431:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     XMC_CCU8_SLICE_StopTimer(handle_ptr->ccu8_slice_ptr);
 1712              	 .loc 2 431 0
 1713 0014 7B68     	 ldr r3,[r7,#4]
 1714 0016 9B68     	 ldr r3,[r3,#8]
 1715 0018 1846     	 mov r0,r3
 1716 001a FFF7FEFF 	 bl XMC_CCU8_SLICE_StopTimer
 432:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     XMC_CCU8_SLICE_ClearTimer(handle_ptr->ccu8_slice_ptr);
 1717              	 .loc 2 432 0
 1718 001e 7B68     	 ldr r3,[r7,#4]
 1719 0020 9B68     	 ldr r3,[r3,#8]
 1720 0022 1846     	 mov r0,r3
 1721 0024 FFF7FEFF 	 bl XMC_CCU8_SLICE_ClearTimer
 433:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     XMC_CCU8_DisableClock(handle_ptr->ccu8_module_ptr, handle_ptr->slice_number);
 1722              	 .loc 2 433 0
 1723 0028 7B68     	 ldr r3,[r7,#4]
 1724 002a 5A68     	 ldr r2,[r3,#4]
 1725 002c 7B68     	 ldr r3,[r7,#4]
 1726 002e 5B7B     	 ldrb r3,[r3,#13]
 1727 0030 1046     	 mov r0,r2
 1728 0032 1946     	 mov r1,r3
 1729 0034 FFF7FEFF 	 bl XMC_CCU8_DisableClock
 434:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 435:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     handle_ptr->state = PWM_CCU8_STATE_STOPPED;
 1730              	 .loc 2 435 0
 1731 0038 7B68     	 ldr r3,[r7,#4]
 1732 003a 0322     	 movs r2,#3
 1733 003c 1A77     	 strb r2,[r3,#28]
 436:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     status = PWM_CCU8_STATUS_SUCCESS;
 1734              	 .loc 2 436 0
 1735 003e 0023     	 movs r3,#0
 1736 0040 FB73     	 strb r3,[r7,#15]
 1737              	.L61:
 437:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     XMC_DEBUG("PWM_CCU8_Stop:stop PWM");
 438:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   }
 439:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   return (status);
 1738              	 .loc 2 439 0
 1739 0042 FB7B     	 ldrb r3,[r7,#15]
 440:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 441:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** } /* end of PWM_CCU8_Stop() api */
 1740              	 .loc 2 441 0
 1741 0044 1846     	 mov r0,r3
 1742 0046 1037     	 adds r7,r7,#16
 1743              	.LCFI112:
 1744              	 .cfi_def_cfa_offset 8
 1745 0048 BD46     	 mov sp,r7
 1746              	.LCFI113:
 1747              	 .cfi_def_cfa_register 13
 1748              	 
 1749 004a 80BD     	 pop {r7,pc}
 1750              	 .cfi_endproc
 1751              	.LFE214:
 1753              	 .section .text.PWM_CCU8_GetTimerValue,"ax",%progbits
 1754              	 .align 2
 1755              	 .global PWM_CCU8_GetTimerValue
 1756              	 .thumb
 1757              	 .thumb_func
 1759              	PWM_CCU8_GetTimerValue:
 1760              	.LFB215:
 442:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** /**************************************************************************************************
 443:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** /*Gets the timer value of  CCU8_CC8 slice. */
 444:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** uint32_t PWM_CCU8_GetTimerValue(PWM_CCU8_t* handle_ptr)
 445:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** {
 1761              	 .loc 2 445 0
 1762              	 .cfi_startproc
 1763              	 
 1764              	 
 1765 0000 80B5     	 push {r7,lr}
 1766              	.LCFI114:
 1767              	 .cfi_def_cfa_offset 8
 1768              	 .cfi_offset 7,-8
 1769              	 .cfi_offset 14,-4
 1770 0002 84B0     	 sub sp,sp,#16
 1771              	.LCFI115:
 1772              	 .cfi_def_cfa_offset 24
 1773 0004 00AF     	 add r7,sp,#0
 1774              	.LCFI116:
 1775              	 .cfi_def_cfa_register 7
 1776 0006 7860     	 str r0,[r7,#4]
 446:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   uint32_t timer_value;
 447:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   XMC_ASSERT("PWM_CCU8_GetTimerValue:handle_ptr NULL", (handle_ptr != NULL));
 448:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   timer_value = (uint32_t) XMC_CCU8_SLICE_GetTimerValue(handle_ptr->ccu8_slice_ptr);
 1777              	 .loc 2 448 0
 1778 0008 7B68     	 ldr r3,[r7,#4]
 1779 000a 9B68     	 ldr r3,[r3,#8]
 1780 000c 1846     	 mov r0,r3
 1781 000e FFF7FEFF 	 bl XMC_CCU8_SLICE_GetTimerValue
 1782 0012 0346     	 mov r3,r0
 1783 0014 FB60     	 str r3,[r7,#12]
 449:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   XMC_DEBUG("PWM_CCU8_GetTimerValue:timer value");
 450:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   return (timer_value);
 1784              	 .loc 2 450 0
 1785 0016 FB68     	 ldr r3,[r7,#12]
 451:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** }/* end of PWM_CCU8_GetTimerValue() api */
 1786              	 .loc 2 451 0
 1787 0018 1846     	 mov r0,r3
 1788 001a 1037     	 adds r7,r7,#16
 1789              	.LCFI117:
 1790              	 .cfi_def_cfa_offset 8
 1791 001c BD46     	 mov sp,r7
 1792              	.LCFI118:
 1793              	 .cfi_def_cfa_register 13
 1794              	 
 1795 001e 80BD     	 pop {r7,pc}
 1796              	 .cfi_endproc
 1797              	.LFE215:
 1799              	 .section .text.PWM_CCU8_GetTimerStatus,"ax",%progbits
 1800              	 .align 2
 1801              	 .global PWM_CCU8_GetTimerStatus
 1802              	 .thumb
 1803              	 .thumb_func
 1805              	PWM_CCU8_GetTimerStatus:
 1806              	.LFB216:
 452:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** /**************************************************************************************************
 453:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** /*Gets the status of  CCU8_CC8 slice. */
 454:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** bool PWM_CCU8_GetTimerStatus(PWM_CCU8_t* handle_ptr)
 455:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** {
 1807              	 .loc 2 455 0
 1808              	 .cfi_startproc
 1809              	 
 1810              	 
 1811 0000 80B5     	 push {r7,lr}
 1812              	.LCFI119:
 1813              	 .cfi_def_cfa_offset 8
 1814              	 .cfi_offset 7,-8
 1815              	 .cfi_offset 14,-4
 1816 0002 84B0     	 sub sp,sp,#16
 1817              	.LCFI120:
 1818              	 .cfi_def_cfa_offset 24
 1819 0004 00AF     	 add r7,sp,#0
 1820              	.LCFI121:
 1821              	 .cfi_def_cfa_register 7
 1822 0006 7860     	 str r0,[r7,#4]
 456:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   bool status_timer;
 457:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   XMC_ASSERT("PWM_CCU8_GetTimerStatus:handle_ptr NULL", (handle_ptr != NULL));
 458:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   status_timer = XMC_CCU8_SLICE_IsTimerRunning(handle_ptr->ccu8_slice_ptr);
 1823              	 .loc 2 458 0
 1824 0008 7B68     	 ldr r3,[r7,#4]
 1825 000a 9B68     	 ldr r3,[r3,#8]
 1826 000c 1846     	 mov r0,r3
 1827 000e FFF7FEFF 	 bl XMC_CCU8_SLICE_IsTimerRunning
 1828 0012 0346     	 mov r3,r0
 1829 0014 FB73     	 strb r3,[r7,#15]
 459:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   return (status_timer);
 1830              	 .loc 2 459 0
 1831 0016 FB7B     	 ldrb r3,[r7,#15]
 460:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 461:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** } /* end of PWM_CCU8_GetStatus() api */
 1832              	 .loc 2 461 0
 1833 0018 1846     	 mov r0,r3
 1834 001a 1037     	 adds r7,r7,#16
 1835              	.LCFI122:
 1836              	 .cfi_def_cfa_offset 8
 1837 001c BD46     	 mov sp,r7
 1838              	.LCFI123:
 1839              	 .cfi_def_cfa_register 13
 1840              	 
 1841 001e 80BD     	 pop {r7,pc}
 1842              	 .cfi_endproc
 1843              	.LFE216:
 1845              	 .section .text.PWM_CCU8_SetFreqSymmetric,"ax",%progbits
 1846              	 .align 2
 1847              	 .global PWM_CCU8_SetFreqSymmetric
 1848              	 .thumb
 1849              	 .thumb_func
 1851              	PWM_CCU8_SetFreqSymmetric:
 1852              	.LFB217:
 462:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** /**************************************************************************************************
 463:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 464:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** /*Sets the frequency for CCU8_CC8 slice Symmetric Mode. */
 465:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** PWM_CCU8_STATUS_t PWM_CCU8_SetFreqSymmetric(PWM_CCU8_t* handle_ptr, uint32_t pwm_freq_hz)
 466:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** {
 1853              	 .loc 2 466 0
 1854              	 .cfi_startproc
 1855              	 
 1856              	 
 1857 0000 80B5     	 push {r7,lr}
 1858              	.LCFI124:
 1859              	 .cfi_def_cfa_offset 8
 1860              	 .cfi_offset 7,-8
 1861              	 .cfi_offset 14,-4
 1862 0002 88B0     	 sub sp,sp,#32
 1863              	.LCFI125:
 1864              	 .cfi_def_cfa_offset 40
 1865 0004 00AF     	 add r7,sp,#0
 1866              	.LCFI126:
 1867              	 .cfi_def_cfa_register 7
 1868 0006 7860     	 str r0,[r7,#4]
 1869 0008 3960     	 str r1,[r7]
 467:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   PWM_CCU8_STATUS_t status;
 468:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   uint32_t frequency_tclk;
 469:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   uint32_t period;
 470:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   uint32_t duty_ch1;
 471:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   uint32_t duty_ch2;
 472:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   uint16_t compare_ch1;
 473:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   uint16_t compare_ch2;
 474:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 475:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   status = PWM_CCU8_STATUS_FAILURE;
 1870              	 .loc 2 475 0
 1871 000a 0123     	 movs r3,#1
 1872 000c FB77     	 strb r3,[r7,#31]
 476:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   frequency_tclk = 0U;
 1873              	 .loc 2 476 0
 1874 000e 0023     	 movs r3,#0
 1875 0010 7B61     	 str r3,[r7,#20]
 477:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   XMC_ASSERT("PWM_CCU8_SetFreqSymmetric:handle_ptr NULL", (handle_ptr != NULL));
 478:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   if (PWM_CCU8_STATE_UNINITIALIZED != handle_ptr->state)
 1876              	 .loc 2 478 0
 1877 0012 7B68     	 ldr r3,[r7,#4]
 1878 0014 1B7F     	 ldrb r3,[r3,#28]
 1879 0016 002B     	 cmp r3,#0
 1880 0018 6BD0     	 beq .L68
 479:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   {
 480:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     if (0U == pwm_freq_hz)
 1881              	 .loc 2 480 0
 1882 001a 3B68     	 ldr r3,[r7]
 1883 001c 002B     	 cmp r3,#0
 1884 001e 68D0     	 beq .L68
 481:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     {
 482:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       XMC_DEBUG("PWM_CCU8_SetPwmFreq:cannot set frequency 0Hz");
 483:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     }
 484:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     else
 485:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     {
 486:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       frequency_tclk = handle_ptr->frequency_tclk;
 1885              	 .loc 2 486 0
 1886 0020 7B68     	 ldr r3,[r7,#4]
 1887 0022 1B6A     	 ldr r3,[r3,#32]
 1888 0024 7B61     	 str r3,[r7,#20]
 487:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       period = frequency_tclk / pwm_freq_hz;
 1889              	 .loc 2 487 0
 1890 0026 7A69     	 ldr r2,[r7,#20]
 1891 0028 3B68     	 ldr r3,[r7]
 1892 002a B2FBF3F3 	 udiv r3,r2,r3
 1893 002e BB61     	 str r3,[r7,#24]
 488:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 489:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       if ((uint32_t) XMC_CCU8_SLICE_TIMER_COUNT_MODE_CA == handle_ptr->config_ptr->ccu8_cc8_slice_t
 1894              	 .loc 2 489 0
 1895 0030 7B68     	 ldr r3,[r7,#4]
 1896 0032 1B68     	 ldr r3,[r3]
 1897 0034 5B6C     	 ldr r3,[r3,#68]
 1898 0036 1B78     	 ldrb r3,[r3]
 1899 0038 03F00103 	 and r3,r3,#1
 1900 003c DBB2     	 uxtb r3,r3
 1901 003e 002B     	 cmp r3,#0
 1902 0040 02D0     	 beq .L69
 490:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       {
 491:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         period = period >> 1U;/*divide by 2*/
 1903              	 .loc 2 491 0
 1904 0042 BB69     	 ldr r3,[r7,#24]
 1905 0044 5B08     	 lsrs r3,r3,#1
 1906 0046 BB61     	 str r3,[r7,#24]
 1907              	.L69:
 492:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       }
 493:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 494:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       if ((period != 0U) && (period <= PWM_CCU8_MAX_TIMER_COUNT))
 1908              	 .loc 2 494 0
 1909 0048 BB69     	 ldr r3,[r7,#24]
 1910 004a 002B     	 cmp r3,#0
 1911 004c 51D0     	 beq .L68
 1912              	 .loc 2 494 0 is_stmt 0 discriminator 1
 1913 004e BB69     	 ldr r3,[r7,#24]
 1914 0050 B3F5803F 	 cmp r3,#65536
 1915 0054 4DD2     	 bcs .L68
 495:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       {
 496:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         /*Calculate the current duty cycle in no-timer concatenation mode*/
 497:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         duty_ch1 = handle_ptr->sym_duty1;
 1916              	 .loc 2 497 0 is_stmt 1
 1917 0056 7B68     	 ldr r3,[r7,#4]
 1918 0058 5B6A     	 ldr r3,[r3,#36]
 1919 005a 3B61     	 str r3,[r7,#16]
 498:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         duty_ch2 = handle_ptr->sym_duty2;
 1920              	 .loc 2 498 0
 1921 005c 7B68     	 ldr r3,[r7,#4]
 1922 005e 9B6A     	 ldr r3,[r3,#40]
 1923 0060 FB60     	 str r3,[r7,#12]
 499:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 500:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         duty_ch1 = (PWM_CCU8_DUTY_FULL_SCALE - duty_ch1);
 1924              	 .loc 2 500 0
 1925 0062 3B69     	 ldr r3,[r7,#16]
 1926 0064 C3F51C53 	 rsb r3,r3,#9984
 1927 0068 1033     	 adds r3,r3,#16
 1928 006a 3B61     	 str r3,[r7,#16]
 501:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         duty_ch1 = duty_ch1 * period;
 1929              	 .loc 2 501 0
 1930 006c 3B69     	 ldr r3,[r7,#16]
 1931 006e BA69     	 ldr r2,[r7,#24]
 1932 0070 02FB03F3 	 mul r3,r2,r3
 1933 0074 3B61     	 str r3,[r7,#16]
 502:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         duty_ch1 = duty_ch1 / PWM_CCU8_DUTY_FULL_SCALE;
 1934              	 .loc 2 502 0
 1935 0076 3B69     	 ldr r3,[r7,#16]
 1936 0078 204A     	 ldr r2,.L71
 1937 007a A2FB0323 	 umull r2,r3,r2,r3
 1938 007e 5B0B     	 lsrs r3,r3,#13
 1939 0080 3B61     	 str r3,[r7,#16]
 503:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 504:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         duty_ch2 = (PWM_CCU8_DUTY_FULL_SCALE - duty_ch2);
 1940              	 .loc 2 504 0
 1941 0082 FB68     	 ldr r3,[r7,#12]
 1942 0084 C3F51C53 	 rsb r3,r3,#9984
 1943 0088 1033     	 adds r3,r3,#16
 1944 008a FB60     	 str r3,[r7,#12]
 505:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         duty_ch2 = duty_ch2 * period;
 1945              	 .loc 2 505 0
 1946 008c FB68     	 ldr r3,[r7,#12]
 1947 008e BA69     	 ldr r2,[r7,#24]
 1948 0090 02FB03F3 	 mul r3,r2,r3
 1949 0094 FB60     	 str r3,[r7,#12]
 506:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         duty_ch2 = duty_ch2 / PWM_CCU8_DUTY_FULL_SCALE;
 1950              	 .loc 2 506 0
 1951 0096 FB68     	 ldr r3,[r7,#12]
 1952 0098 184A     	 ldr r2,.L71
 1953 009a A2FB0323 	 umull r2,r3,r2,r3
 1954 009e 5B0B     	 lsrs r3,r3,#13
 1955 00a0 FB60     	 str r3,[r7,#12]
 507:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 508:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         compare_ch1 = (uint16_t) duty_ch1;
 1956              	 .loc 2 508 0
 1957 00a2 3B69     	 ldr r3,[r7,#16]
 1958 00a4 7B81     	 strh r3,[r7,#10]
 509:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         compare_ch2 = (uint16_t) duty_ch2;
 1959              	 .loc 2 509 0
 1960 00a6 FB68     	 ldr r3,[r7,#12]
 1961 00a8 3B81     	 strh r3,[r7,#8]
 510:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 511:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         XMC_CCU8_SLICE_SetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr, (uint16_t)(period - 1U));
 1962              	 .loc 2 511 0
 1963 00aa 7B68     	 ldr r3,[r7,#4]
 1964 00ac 9A68     	 ldr r2,[r3,#8]
 1965 00ae BB69     	 ldr r3,[r7,#24]
 1966 00b0 9BB2     	 uxth r3,r3
 1967 00b2 013B     	 subs r3,r3,#1
 1968 00b4 9BB2     	 uxth r3,r3
 1969 00b6 1046     	 mov r0,r2
 1970 00b8 1946     	 mov r1,r3
 1971 00ba FFF7FEFF 	 bl XMC_CCU8_SLICE_SetTimerPeriodMatch
 512:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHAN
 1972              	 .loc 2 512 0
 1973 00be 7B68     	 ldr r3,[r7,#4]
 1974 00c0 9A68     	 ldr r2,[r3,#8]
 1975 00c2 7B89     	 ldrh r3,[r7,#10]
 1976 00c4 1046     	 mov r0,r2
 1977 00c6 0021     	 movs r1,#0
 1978 00c8 1A46     	 mov r2,r3
 1979 00ca FFF7FEFF 	 bl XMC_CCU8_SLICE_SetTimerCompareMatch
 513:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHAN
 1980              	 .loc 2 513 0
 1981 00ce 7B68     	 ldr r3,[r7,#4]
 1982 00d0 9A68     	 ldr r2,[r3,#8]
 1983 00d2 3B89     	 ldrh r3,[r7,#8]
 1984 00d4 1046     	 mov r0,r2
 1985 00d6 0121     	 movs r1,#1
 1986 00d8 1A46     	 mov r2,r3
 1987 00da FFF7FEFF 	 bl XMC_CCU8_SLICE_SetTimerCompareMatch
 514:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         XMC_CCU8_EnableShadowTransfer(handle_ptr->ccu8_module_ptr, handle_ptr->shadow_txfr_msk);
 1988              	 .loc 2 514 0
 1989 00de 7B68     	 ldr r3,[r7,#4]
 1990 00e0 5A68     	 ldr r2,[r3,#4]
 1991 00e2 7B68     	 ldr r3,[r7,#4]
 1992 00e4 1B69     	 ldr r3,[r3,#16]
 1993 00e6 1046     	 mov r0,r2
 1994 00e8 1946     	 mov r1,r3
 1995 00ea FFF7FEFF 	 bl XMC_CCU8_EnableShadowTransfer
 515:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         XMC_DEBUG("PWM_CCU8_SetPwmFreq:frequency set");
 516:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         status = PWM_CCU8_STATUS_SUCCESS;
 1996              	 .loc 2 516 0
 1997 00ee 0023     	 movs r3,#0
 1998 00f0 FB77     	 strb r3,[r7,#31]
 1999              	.L68:
 517:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       }
 518:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     }
 519:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   }
 520:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   return (status);
 2000              	 .loc 2 520 0
 2001 00f2 FB7F     	 ldrb r3,[r7,#31]
 521:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 522:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** } /* end of PWM_CCU8_SetFreqSymmetric() api */
 2002              	 .loc 2 522 0
 2003 00f4 1846     	 mov r0,r3
 2004 00f6 2037     	 adds r7,r7,#32
 2005              	.LCFI127:
 2006              	 .cfi_def_cfa_offset 8
 2007 00f8 BD46     	 mov sp,r7
 2008              	.LCFI128:
 2009              	 .cfi_def_cfa_register 13
 2010              	 
 2011 00fa 80BD     	 pop {r7,pc}
 2012              	.L72:
 2013              	 .align 2
 2014              	.L71:
 2015 00fc 5917B7D1 	 .word -776530087
 2016              	 .cfi_endproc
 2017              	.LFE217:
 2019              	 .section .text.PWM_CCU8_SetDutyCycleSymmetric,"ax",%progbits
 2020              	 .align 2
 2021              	 .global PWM_CCU8_SetDutyCycleSymmetric
 2022              	 .thumb
 2023              	 .thumb_func
 2025              	PWM_CCU8_SetDutyCycleSymmetric:
 2026              	.LFB218:
 523:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 524:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** /**************************************************************************************************
 525:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 526:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** /*Sets the duty cycle (uint32_t) for CCU8_CC8 slice. */
 527:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** PWM_CCU8_STATUS_t PWM_CCU8_SetDutyCycleSymmetric(PWM_CCU8_t* handle_ptr, XMC_CCU8_SLICE_COMPARE_CHA
 528:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                                                  uint32_t duty_cycle)
 529:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** {
 2027              	 .loc 2 529 0
 2028              	 .cfi_startproc
 2029              	 
 2030              	 
 2031 0000 80B5     	 push {r7,lr}
 2032              	.LCFI129:
 2033              	 .cfi_def_cfa_offset 8
 2034              	 .cfi_offset 7,-8
 2035              	 .cfi_offset 14,-4
 2036 0002 88B0     	 sub sp,sp,#32
 2037              	.LCFI130:
 2038              	 .cfi_def_cfa_offset 40
 2039 0004 00AF     	 add r7,sp,#0
 2040              	.LCFI131:
 2041              	 .cfi_def_cfa_register 7
 2042 0006 F860     	 str r0,[r7,#12]
 2043 0008 0B46     	 mov r3,r1
 2044 000a 7A60     	 str r2,[r7,#4]
 2045 000c FB72     	 strb r3,[r7,#11]
 530:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   PWM_CCU8_STATUS_t status;
 531:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   uint32_t period;
 532:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   uint32_t compare;
 533:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 534:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   status = PWM_CCU8_STATUS_FAILURE;
 2046              	 .loc 2 534 0
 2047 000e 0123     	 movs r3,#1
 2048 0010 FB77     	 strb r3,[r7,#31]
 535:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   XMC_ASSERT("PWM_CCU8_SetDutyCycleSymmetric:handle_ptr NULL", (handle_ptr != NULL));
 536:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   if (PWM_CCU8_STATE_UNINITIALIZED != handle_ptr->state)
 2049              	 .loc 2 536 0
 2050 0012 FB68     	 ldr r3,[r7,#12]
 2051 0014 1B7F     	 ldrb r3,[r3,#28]
 2052 0016 002B     	 cmp r3,#0
 2053 0018 36D0     	 beq .L74
 537:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   {
 538:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     /* duty cycle has to be in between 0 and 100 */
 539:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     if ((duty_cycle > PWM_CCU8_SYM_DUTY_MAX))
 2054              	 .loc 2 539 0
 2055 001a 7B68     	 ldr r3,[r7,#4]
 2056 001c 42F21072 	 movw r2,#10000
 2057 0020 9342     	 cmp r3,r2
 2058 0022 31D8     	 bhi .L74
 540:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     {
 541:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       XMC_DEBUG("PWM_CCU8_SetDutyCycleSymmetric:Cannot set duty cycle > 100%");
 542:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     }
 543:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     else
 544:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     {
 545:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       period = (uint32_t) XMC_CCU8_SLICE_GetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr) + 1U;
 2059              	 .loc 2 545 0
 2060 0024 FB68     	 ldr r3,[r7,#12]
 2061 0026 9B68     	 ldr r3,[r3,#8]
 2062 0028 1846     	 mov r0,r3
 2063 002a FFF7FEFF 	 bl XMC_CCU8_SLICE_GetTimerPeriodMatch
 2064 002e 0346     	 mov r3,r0
 2065 0030 0133     	 adds r3,r3,#1
 2066 0032 BB61     	 str r3,[r7,#24]
 546:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 547:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       /* Duty Cycle(symmetric) = ((PR + 1)- CR) / (PR + 1) */
 548:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       compare = ((period * (PWM_CCU8_DUTY_FULL_SCALE - duty_cycle)) / PWM_CCU8_DUTY_FULL_SCALE);
 2067              	 .loc 2 548 0
 2068 0034 7B68     	 ldr r3,[r7,#4]
 2069 0036 C3F51C53 	 rsb r3,r3,#9984
 2070 003a 1033     	 adds r3,r3,#16
 2071 003c BA69     	 ldr r2,[r7,#24]
 2072 003e 02FB03F3 	 mul r3,r2,r3
 2073 0042 144A     	 ldr r2,.L78
 2074 0044 A2FB0323 	 umull r2,r3,r2,r3
 2075 0048 5B0B     	 lsrs r3,r3,#13
 2076 004a 7B61     	 str r3,[r7,#20]
 549:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 550:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, channel, (uint16_t) compare);
 2077              	 .loc 2 550 0
 2078 004c FB68     	 ldr r3,[r7,#12]
 2079 004e 9968     	 ldr r1,[r3,#8]
 2080 0050 7B69     	 ldr r3,[r7,#20]
 2081 0052 9BB2     	 uxth r3,r3
 2082 0054 FA7A     	 ldrb r2,[r7,#11]
 2083 0056 0846     	 mov r0,r1
 2084 0058 1146     	 mov r1,r2
 2085 005a 1A46     	 mov r2,r3
 2086 005c FFF7FEFF 	 bl XMC_CCU8_SLICE_SetTimerCompareMatch
 551:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       XMC_CCU8_EnableShadowTransfer(handle_ptr->ccu8_module_ptr, handle_ptr->shadow_txfr_msk);
 2087              	 .loc 2 551 0
 2088 0060 FB68     	 ldr r3,[r7,#12]
 2089 0062 5A68     	 ldr r2,[r3,#4]
 2090 0064 FB68     	 ldr r3,[r7,#12]
 2091 0066 1B69     	 ldr r3,[r3,#16]
 2092 0068 1046     	 mov r0,r2
 2093 006a 1946     	 mov r1,r3
 2094 006c FFF7FEFF 	 bl XMC_CCU8_EnableShadowTransfer
 552:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 553:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       if (XMC_CCU8_SLICE_COMPARE_CHANNEL_1 == channel)
 2095              	 .loc 2 553 0
 2096 0070 FB7A     	 ldrb r3,[r7,#11]
 2097 0072 002B     	 cmp r3,#0
 2098 0074 03D1     	 bne .L75
 554:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       {
 555:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         handle_ptr->sym_duty1 = duty_cycle;
 2099              	 .loc 2 555 0
 2100 0076 FB68     	 ldr r3,[r7,#12]
 2101 0078 7A68     	 ldr r2,[r7,#4]
 2102 007a 5A62     	 str r2,[r3,#36]
 2103 007c 02E0     	 b .L76
 2104              	.L75:
 556:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       }
 557:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       else
 558:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       {
 559:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         handle_ptr->sym_duty2 = duty_cycle;
 2105              	 .loc 2 559 0
 2106 007e FB68     	 ldr r3,[r7,#12]
 2107 0080 7A68     	 ldr r2,[r7,#4]
 2108 0082 9A62     	 str r2,[r3,#40]
 2109              	.L76:
 560:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       }
 561:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 562:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       XMC_DEBUG("PWM_CCU8_SetDutyCycleSymmetric:dutycycle set");
 563:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       status = PWM_CCU8_STATUS_SUCCESS;
 2110              	 .loc 2 563 0
 2111 0084 0023     	 movs r3,#0
 2112 0086 FB77     	 strb r3,[r7,#31]
 2113              	.L74:
 564:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     }
 565:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   }
 566:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   return (status);
 2114              	 .loc 2 566 0
 2115 0088 FB7F     	 ldrb r3,[r7,#31]
 567:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** } /* end of PWM_CCU8_SetDutyCycleSymmetric() api */
 2116              	 .loc 2 567 0
 2117 008a 1846     	 mov r0,r3
 2118 008c 2037     	 adds r7,r7,#32
 2119              	.LCFI132:
 2120              	 .cfi_def_cfa_offset 8
 2121 008e BD46     	 mov sp,r7
 2122              	.LCFI133:
 2123              	 .cfi_def_cfa_register 13
 2124              	 
 2125 0090 80BD     	 pop {r7,pc}
 2126              	.L79:
 2127 0092 00BF     	 .align 2
 2128              	.L78:
 2129 0094 5917B7D1 	 .word -776530087
 2130              	 .cfi_endproc
 2131              	.LFE218:
 2133              	 .section .text.PWM_CCU8_SetFreqAndDutyCycleSymmetric,"ax",%progbits
 2134              	 .align 2
 2135              	 .global PWM_CCU8_SetFreqAndDutyCycleSymmetric
 2136              	 .thumb
 2137              	 .thumb_func
 2139              	PWM_CCU8_SetFreqAndDutyCycleSymmetric:
 2140              	.LFB219:
 568:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 569:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** /**************************************************************************************************
 570:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 571:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** /*Sets the frequency and duty cycle for CCU8_CC8 slice Symmetric Mode. */
 572:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** PWM_CCU8_STATUS_t PWM_CCU8_SetFreqAndDutyCycleSymmetric(PWM_CCU8_t* handle_ptr, uint32_t pwm_freq_h
 573:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                                                         uint32_t duty_ch2)
 574:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** {
 2141              	 .loc 2 574 0
 2142              	 .cfi_startproc
 2143              	 
 2144              	 
 2145 0000 80B5     	 push {r7,lr}
 2146              	.LCFI134:
 2147              	 .cfi_def_cfa_offset 8
 2148              	 .cfi_offset 7,-8
 2149              	 .cfi_offset 14,-4
 2150 0002 8AB0     	 sub sp,sp,#40
 2151              	.LCFI135:
 2152              	 .cfi_def_cfa_offset 48
 2153 0004 00AF     	 add r7,sp,#0
 2154              	.LCFI136:
 2155              	 .cfi_def_cfa_register 7
 2156 0006 F860     	 str r0,[r7,#12]
 2157 0008 B960     	 str r1,[r7,#8]
 2158 000a 7A60     	 str r2,[r7,#4]
 2159 000c 3B60     	 str r3,[r7]
 575:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 576:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   PWM_CCU8_STATUS_t status;
 577:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   uint32_t frequency_tclk;
 578:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   uint32_t period;
 579:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   uint32_t compare_ch1;
 580:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   uint32_t compare_ch2;
 581:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 582:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   status = PWM_CCU8_STATUS_FAILURE;
 2160              	 .loc 2 582 0
 2161 000e 0123     	 movs r3,#1
 2162 0010 87F82730 	 strb r3,[r7,#39]
 583:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   frequency_tclk = 0U;
 2163              	 .loc 2 583 0
 2164 0014 0023     	 movs r3,#0
 2165 0016 FB61     	 str r3,[r7,#28]
 584:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   XMC_ASSERT("PWM_CCU8_SetFreqAndDutyCycleSymmetric:handle_ptr NULL", (handle_ptr != NULL));
 585:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   if (PWM_CCU8_STATE_UNINITIALIZED != handle_ptr->state)
 2166              	 .loc 2 585 0
 2167 0018 FB68     	 ldr r3,[r7,#12]
 2168 001a 1B7F     	 ldrb r3,[r3,#28]
 2169 001c 002B     	 cmp r3,#0
 2170 001e 6CD0     	 beq .L81
 586:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   {
 587:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     if (0U == pwm_freq_hz)
 2171              	 .loc 2 587 0
 2172 0020 BB68     	 ldr r3,[r7,#8]
 2173 0022 002B     	 cmp r3,#0
 2174 0024 69D0     	 beq .L81
 588:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     {
 589:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       XMC_DEBUG("PWM_CCU8_SetFreqAndDutyCycleSymmetric:cannot set frequency 0Hz");
 590:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     }
 591:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     else if ((duty_ch1 > PWM_CCU8_SYM_DUTY_MAX) || (duty_ch2 > PWM_CCU8_SYM_DUTY_MAX))
 2175              	 .loc 2 591 0
 2176 0026 7B68     	 ldr r3,[r7,#4]
 2177 0028 42F21072 	 movw r2,#10000
 2178 002c 9342     	 cmp r3,r2
 2179 002e 64D8     	 bhi .L81
 2180              	 .loc 2 591 0 is_stmt 0 discriminator 1
 2181 0030 3B68     	 ldr r3,[r7]
 2182 0032 42F21072 	 movw r2,#10000
 2183 0036 9342     	 cmp r3,r2
 2184 0038 5FD8     	 bhi .L81
 592:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     {
 593:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       XMC_DEBUG("PWM_CCU8_SetFreqAndDutyCycleSymmetric:duty > 100%");
 594:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     }
 595:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     else
 596:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     {
 597:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       frequency_tclk = handle_ptr->frequency_tclk;
 2185              	 .loc 2 597 0 is_stmt 1
 2186 003a FB68     	 ldr r3,[r7,#12]
 2187 003c 1B6A     	 ldr r3,[r3,#32]
 2188 003e FB61     	 str r3,[r7,#28]
 598:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       period = frequency_tclk / pwm_freq_hz;
 2189              	 .loc 2 598 0
 2190 0040 FA69     	 ldr r2,[r7,#28]
 2191 0042 BB68     	 ldr r3,[r7,#8]
 2192 0044 B2FBF3F3 	 udiv r3,r2,r3
 2193 0048 3B62     	 str r3,[r7,#32]
 599:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 600:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       if ((uint32_t) XMC_CCU8_SLICE_TIMER_COUNT_MODE_CA == handle_ptr->config_ptr->ccu8_cc8_slice_t
 2194              	 .loc 2 600 0
 2195 004a FB68     	 ldr r3,[r7,#12]
 2196 004c 1B68     	 ldr r3,[r3]
 2197 004e 5B6C     	 ldr r3,[r3,#68]
 2198 0050 1B78     	 ldrb r3,[r3]
 2199 0052 03F00103 	 and r3,r3,#1
 2200 0056 DBB2     	 uxtb r3,r3
 2201 0058 002B     	 cmp r3,#0
 2202 005a 02D0     	 beq .L82
 601:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       {
 602:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         period = period >> 1U;/*divide by 2*/
 2203              	 .loc 2 602 0
 2204 005c 3B6A     	 ldr r3,[r7,#32]
 2205 005e 5B08     	 lsrs r3,r3,#1
 2206 0060 3B62     	 str r3,[r7,#32]
 2207              	.L82:
 603:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       }
 604:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 605:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       if ((period != 0U) && (period <= PWM_CCU8_MAX_TIMER_COUNT))
 2208              	 .loc 2 605 0
 2209 0062 3B6A     	 ldr r3,[r7,#32]
 2210 0064 002B     	 cmp r3,#0
 2211 0066 48D0     	 beq .L81
 2212              	 .loc 2 605 0 is_stmt 0 discriminator 1
 2213 0068 3B6A     	 ldr r3,[r7,#32]
 2214 006a B3F5803F 	 cmp r3,#65536
 2215 006e 44D2     	 bcs .L81
 606:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       {
 607:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         /*Calculate the current duty cycle in no-timer concatenation mode*/
 608:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         compare_ch1 = ((period * (PWM_CCU8_DUTY_FULL_SCALE - duty_ch1)) / PWM_CCU8_DUTY_FULL_SCALE)
 2216              	 .loc 2 608 0 is_stmt 1
 2217 0070 7B68     	 ldr r3,[r7,#4]
 2218 0072 C3F51C53 	 rsb r3,r3,#9984
 2219 0076 1033     	 adds r3,r3,#16
 2220 0078 3A6A     	 ldr r2,[r7,#32]
 2221 007a 02FB03F3 	 mul r3,r2,r3
 2222 007e 224A     	 ldr r2,.L84
 2223 0080 A2FB0323 	 umull r2,r3,r2,r3
 2224 0084 5B0B     	 lsrs r3,r3,#13
 2225 0086 BB61     	 str r3,[r7,#24]
 609:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         compare_ch2 = ((period * (PWM_CCU8_DUTY_FULL_SCALE - duty_ch2)) / PWM_CCU8_DUTY_FULL_SCALE)
 2226              	 .loc 2 609 0
 2227 0088 3B68     	 ldr r3,[r7]
 2228 008a C3F51C53 	 rsb r3,r3,#9984
 2229 008e 1033     	 adds r3,r3,#16
 2230 0090 3A6A     	 ldr r2,[r7,#32]
 2231 0092 02FB03F3 	 mul r3,r2,r3
 2232 0096 1C4A     	 ldr r2,.L84
 2233 0098 A2FB0323 	 umull r2,r3,r2,r3
 2234 009c 5B0B     	 lsrs r3,r3,#13
 2235 009e 7B61     	 str r3,[r7,#20]
 610:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 611:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         XMC_CCU8_SLICE_SetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr, (uint16_t)(period - 1U));
 2236              	 .loc 2 611 0
 2237 00a0 FB68     	 ldr r3,[r7,#12]
 2238 00a2 9A68     	 ldr r2,[r3,#8]
 2239 00a4 3B6A     	 ldr r3,[r7,#32]
 2240 00a6 9BB2     	 uxth r3,r3
 2241 00a8 013B     	 subs r3,r3,#1
 2242 00aa 9BB2     	 uxth r3,r3
 2243 00ac 1046     	 mov r0,r2
 2244 00ae 1946     	 mov r1,r3
 2245 00b0 FFF7FEFF 	 bl XMC_CCU8_SLICE_SetTimerPeriodMatch
 612:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHAN
 2246              	 .loc 2 612 0
 2247 00b4 FB68     	 ldr r3,[r7,#12]
 2248 00b6 9A68     	 ldr r2,[r3,#8]
 2249 00b8 BB69     	 ldr r3,[r7,#24]
 2250 00ba 9BB2     	 uxth r3,r3
 2251 00bc 1046     	 mov r0,r2
 2252 00be 0021     	 movs r1,#0
 2253 00c0 1A46     	 mov r2,r3
 2254 00c2 FFF7FEFF 	 bl XMC_CCU8_SLICE_SetTimerCompareMatch
 613:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                                             (uint16_t) compare_ch1);
 614:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHAN
 2255              	 .loc 2 614 0
 2256 00c6 FB68     	 ldr r3,[r7,#12]
 2257 00c8 9A68     	 ldr r2,[r3,#8]
 2258 00ca 7B69     	 ldr r3,[r7,#20]
 2259 00cc 9BB2     	 uxth r3,r3
 2260 00ce 1046     	 mov r0,r2
 2261 00d0 0121     	 movs r1,#1
 2262 00d2 1A46     	 mov r2,r3
 2263 00d4 FFF7FEFF 	 bl XMC_CCU8_SLICE_SetTimerCompareMatch
 615:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                                             (uint16_t) compare_ch2);
 616:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         XMC_CCU8_EnableShadowTransfer(handle_ptr->ccu8_module_ptr, handle_ptr->shadow_txfr_msk);
 2264              	 .loc 2 616 0
 2265 00d8 FB68     	 ldr r3,[r7,#12]
 2266 00da 5A68     	 ldr r2,[r3,#4]
 2267 00dc FB68     	 ldr r3,[r7,#12]
 2268 00de 1B69     	 ldr r3,[r3,#16]
 2269 00e0 1046     	 mov r0,r2
 2270 00e2 1946     	 mov r1,r3
 2271 00e4 FFF7FEFF 	 bl XMC_CCU8_EnableShadowTransfer
 617:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 618:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         handle_ptr->sym_duty1 = duty_ch1;
 2272              	 .loc 2 618 0
 2273 00e8 FB68     	 ldr r3,[r7,#12]
 2274 00ea 7A68     	 ldr r2,[r7,#4]
 2275 00ec 5A62     	 str r2,[r3,#36]
 619:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         handle_ptr->sym_duty2 = duty_ch2;
 2276              	 .loc 2 619 0
 2277 00ee FB68     	 ldr r3,[r7,#12]
 2278 00f0 3A68     	 ldr r2,[r7]
 2279 00f2 9A62     	 str r2,[r3,#40]
 620:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 621:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         XMC_DEBUG("PWM_CCU8_SetFreqAndDutyCycleSymmetric:frequency set");
 622:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         status = PWM_CCU8_STATUS_SUCCESS;
 2280              	 .loc 2 622 0
 2281 00f4 0023     	 movs r3,#0
 2282 00f6 87F82730 	 strb r3,[r7,#39]
 2283              	.L81:
 623:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       }
 624:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     }
 625:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   }
 626:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   return (status);
 2284              	 .loc 2 626 0
 2285 00fa 97F82730 	 ldrb r3,[r7,#39]
 627:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 628:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** }/* end of PWM_CCU8_SetFreqAndDutyCycleSymmetric() api */
 2286              	 .loc 2 628 0
 2287 00fe 1846     	 mov r0,r3
 2288 0100 2837     	 adds r7,r7,#40
 2289              	.LCFI137:
 2290              	 .cfi_def_cfa_offset 8
 2291 0102 BD46     	 mov sp,r7
 2292              	.LCFI138:
 2293              	 .cfi_def_cfa_register 13
 2294              	 
 2295 0104 80BD     	 pop {r7,pc}
 2296              	.L85:
 2297 0106 00BF     	 .align 2
 2298              	.L84:
 2299 0108 5917B7D1 	 .word -776530087
 2300              	 .cfi_endproc
 2301              	.LFE219:
 2303              	 .section .text.PWM_CCU8_SetFreqAsymmetric,"ax",%progbits
 2304              	 .align 2
 2305              	 .global PWM_CCU8_SetFreqAsymmetric
 2306              	 .thumb
 2307              	 .thumb_func
 2309              	PWM_CCU8_SetFreqAsymmetric:
 2310              	.LFB220:
 629:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 630:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** /**************************************************************************************************
 631:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 632:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** /*Sets the frequency for CCU8_CC8 slice Asymmetric Mode. */
 633:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** PWM_CCU8_STATUS_t PWM_CCU8_SetFreqAsymmetric(PWM_CCU8_t* handle_ptr, uint32_t pwm_freq_hz)
 634:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** {
 2311              	 .loc 2 634 0
 2312              	 .cfi_startproc
 2313              	 
 2314              	 
 2315 0000 80B5     	 push {r7,lr}
 2316              	.LCFI139:
 2317              	 .cfi_def_cfa_offset 8
 2318              	 .cfi_offset 7,-8
 2319              	 .cfi_offset 14,-4
 2320 0002 8AB0     	 sub sp,sp,#40
 2321              	.LCFI140:
 2322              	 .cfi_def_cfa_offset 48
 2323 0004 00AF     	 add r7,sp,#0
 2324              	.LCFI141:
 2325              	 .cfi_def_cfa_register 7
 2326 0006 7860     	 str r0,[r7,#4]
 2327 0008 3960     	 str r1,[r7]
 635:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   PWM_CCU8_STATUS_t status;
 636:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   uint32_t frequency_tclk;
 637:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   uint32_t period;
 638:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   uint32_t duty_cycle;
 639:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   uint32_t shift;
 640:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   uint32_t compare_ch1;
 641:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   uint32_t compare_ch2;
 642:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 643:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   status = PWM_CCU8_STATUS_FAILURE;
 2328              	 .loc 2 643 0
 2329 000a 0123     	 movs r3,#1
 2330 000c 87F82730 	 strb r3,[r7,#39]
 644:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   frequency_tclk = 0U;
 2331              	 .loc 2 644 0
 2332 0010 0023     	 movs r3,#0
 2333 0012 3B62     	 str r3,[r7,#32]
 645:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   XMC_ASSERT("PWM_CCU8_SetFreqAsymmetric:handle_ptr NULL", (handle_ptr != NULL));
 646:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   if (PWM_CCU8_STATE_UNINITIALIZED != handle_ptr->state)
 2334              	 .loc 2 646 0
 2335 0014 7B68     	 ldr r3,[r7,#4]
 2336 0016 1B7F     	 ldrb r3,[r3,#28]
 2337 0018 002B     	 cmp r3,#0
 2338 001a 00F0AF80 	 beq .L87
 647:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   {
 648:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     if (0U == pwm_freq_hz)
 2339              	 .loc 2 648 0
 2340 001e 3B68     	 ldr r3,[r7]
 2341 0020 002B     	 cmp r3,#0
 2342 0022 00F0AB80 	 beq .L87
 649:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     {
 650:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       XMC_DEBUG("PWM_CCU8_SetPwmFreq:cannot set frequency 0Hz");
 651:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     }
 652:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     else
 653:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     {
 654:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       frequency_tclk = handle_ptr->frequency_tclk;
 2343              	 .loc 2 654 0
 2344 0026 7B68     	 ldr r3,[r7,#4]
 2345 0028 1B6A     	 ldr r3,[r3,#32]
 2346 002a 3B62     	 str r3,[r7,#32]
 655:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       period = frequency_tclk / pwm_freq_hz;
 2347              	 .loc 2 655 0
 2348 002c 3A6A     	 ldr r2,[r7,#32]
 2349 002e 3B68     	 ldr r3,[r7]
 2350 0030 B2FBF3F3 	 udiv r3,r2,r3
 2351 0034 FB61     	 str r3,[r7,#28]
 656:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 657:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       duty_cycle = handle_ptr->asym_duty;
 2352              	 .loc 2 657 0
 2353 0036 7B68     	 ldr r3,[r7,#4]
 2354 0038 DB6A     	 ldr r3,[r3,#44]
 2355 003a BB61     	 str r3,[r7,#24]
 658:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       shift = handle_ptr->asym_shift;
 2356              	 .loc 2 658 0
 2357 003c 7B68     	 ldr r3,[r7,#4]
 2358 003e 1B6B     	 ldr r3,[r3,#48]
 2359 0040 7B61     	 str r3,[r7,#20]
 659:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 660:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       if ((uint32_t) XMC_CCU8_SLICE_TIMER_COUNT_MODE_CA == handle_ptr->config_ptr->ccu8_cc8_slice_t
 2360              	 .loc 2 660 0
 2361 0042 7B68     	 ldr r3,[r7,#4]
 2362 0044 1B68     	 ldr r3,[r3]
 2363 0046 5B6C     	 ldr r3,[r3,#68]
 2364 0048 1B78     	 ldrb r3,[r3]
 2365 004a 03F00103 	 and r3,r3,#1
 2366 004e DBB2     	 uxtb r3,r3
 2367 0050 002B     	 cmp r3,#0
 2368 0052 50D0     	 beq .L88
 661:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       {
 662:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         period = period >> 1U;/*divide by 2*/
 2369              	 .loc 2 662 0
 2370 0054 FB69     	 ldr r3,[r7,#28]
 2371 0056 5B08     	 lsrs r3,r3,#1
 2372 0058 FB61     	 str r3,[r7,#28]
 663:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 664:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         if ((period != 0U) && (period <= PWM_CCU8_MAX_TIMER_COUNT))
 2373              	 .loc 2 664 0
 2374 005a FB69     	 ldr r3,[r7,#28]
 2375 005c 002B     	 cmp r3,#0
 2376 005e 00F08D80 	 beq .L87
 2377              	 .loc 2 664 0 is_stmt 0 discriminator 1
 2378 0062 FB69     	 ldr r3,[r7,#28]
 2379 0064 B3F5803F 	 cmp r3,#65536
 2380 0068 80F08880 	 bcs .L87
 665:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         {
 666:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****           compare_ch1 = (2U * period * shift);
 2381              	 .loc 2 666 0 is_stmt 1
 2382 006c FB69     	 ldr r3,[r7,#28]
 2383 006e 7A69     	 ldr r2,[r7,#20]
 2384 0070 02FB03F3 	 mul r3,r2,r3
 2385 0074 5B00     	 lsls r3,r3,#1
 2386 0076 3B61     	 str r3,[r7,#16]
 667:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****           compare_ch1 = compare_ch1 / PWM_CCU8_DUTY_FULL_SCALE;
 2387              	 .loc 2 667 0
 2388 0078 3B69     	 ldr r3,[r7,#16]
 2389 007a 434A     	 ldr r2,.L91
 2390 007c A2FB0323 	 umull r2,r3,r2,r3
 2391 0080 5B0B     	 lsrs r3,r3,#13
 2392 0082 3B61     	 str r3,[r7,#16]
 668:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****           compare_ch2 = (2U * period * (PWM_CCU8_DUTY_FULL_SCALE - (shift + duty_cycle)));
 2393              	 .loc 2 668 0
 2394 0084 7A69     	 ldr r2,[r7,#20]
 2395 0086 BB69     	 ldr r3,[r7,#24]
 2396 0088 1344     	 add r3,r3,r2
 2397 008a C3F51C53 	 rsb r3,r3,#9984
 2398 008e 1033     	 adds r3,r3,#16
 2399 0090 FA69     	 ldr r2,[r7,#28]
 2400 0092 02FB03F3 	 mul r3,r2,r3
 2401 0096 5B00     	 lsls r3,r3,#1
 2402 0098 FB60     	 str r3,[r7,#12]
 669:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****           compare_ch2 = compare_ch2 / PWM_CCU8_DUTY_FULL_SCALE;
 2403              	 .loc 2 669 0
 2404 009a FB68     	 ldr r3,[r7,#12]
 2405 009c 3A4A     	 ldr r2,.L91
 2406 009e A2FB0323 	 umull r2,r3,r2,r3
 2407 00a2 5B0B     	 lsrs r3,r3,#13
 2408 00a4 FB60     	 str r3,[r7,#12]
 670:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 671:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****           XMC_CCU8_SLICE_SetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr, (uint16_t)(period - 1U));
 2409              	 .loc 2 671 0
 2410 00a6 7B68     	 ldr r3,[r7,#4]
 2411 00a8 9A68     	 ldr r2,[r3,#8]
 2412 00aa FB69     	 ldr r3,[r7,#28]
 2413 00ac 9BB2     	 uxth r3,r3
 2414 00ae 013B     	 subs r3,r3,#1
 2415 00b0 9BB2     	 uxth r3,r3
 2416 00b2 1046     	 mov r0,r2
 2417 00b4 1946     	 mov r1,r3
 2418 00b6 FFF7FEFF 	 bl XMC_CCU8_SLICE_SetTimerPeriodMatch
 672:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****           XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CH
 2419              	 .loc 2 672 0
 2420 00ba 7B68     	 ldr r3,[r7,#4]
 2421 00bc 9A68     	 ldr r2,[r3,#8]
 2422 00be 3B69     	 ldr r3,[r7,#16]
 2423 00c0 9BB2     	 uxth r3,r3
 2424 00c2 1046     	 mov r0,r2
 2425 00c4 0021     	 movs r1,#0
 2426 00c6 1A46     	 mov r2,r3
 2427 00c8 FFF7FEFF 	 bl XMC_CCU8_SLICE_SetTimerCompareMatch
 673:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                                               (uint16_t) compare_ch1);
 674:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****           XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CH
 2428              	 .loc 2 674 0
 2429 00cc 7B68     	 ldr r3,[r7,#4]
 2430 00ce 9A68     	 ldr r2,[r3,#8]
 2431 00d0 FB68     	 ldr r3,[r7,#12]
 2432 00d2 9BB2     	 uxth r3,r3
 2433 00d4 1046     	 mov r0,r2
 2434 00d6 0121     	 movs r1,#1
 2435 00d8 1A46     	 mov r2,r3
 2436 00da FFF7FEFF 	 bl XMC_CCU8_SLICE_SetTimerCompareMatch
 675:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                                               (uint16_t) compare_ch2);
 676:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****           XMC_CCU8_EnableShadowTransfer(handle_ptr->ccu8_module_ptr, handle_ptr->shadow_txfr_msk);
 2437              	 .loc 2 676 0
 2438 00de 7B68     	 ldr r3,[r7,#4]
 2439 00e0 5A68     	 ldr r2,[r3,#4]
 2440 00e2 7B68     	 ldr r3,[r7,#4]
 2441 00e4 1B69     	 ldr r3,[r3,#16]
 2442 00e6 1046     	 mov r0,r2
 2443 00e8 1946     	 mov r1,r3
 2444 00ea FFF7FEFF 	 bl XMC_CCU8_EnableShadowTransfer
 677:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****           XMC_DEBUG("PWM_CCU8_SetPwmFreq:frequency set center aligned mode");
 678:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****           status = PWM_CCU8_STATUS_SUCCESS;
 2445              	 .loc 2 678 0
 2446 00ee 0023     	 movs r3,#0
 2447 00f0 87F82730 	 strb r3,[r7,#39]
 2448 00f4 42E0     	 b .L87
 2449              	.L88:
 679:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         }
 680:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       }
 681:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       else
 682:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       {
 683:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         if (period <= PWM_CCU8_MAX_TIMER_COUNT)
 2450              	 .loc 2 683 0
 2451 00f6 FB69     	 ldr r3,[r7,#28]
 2452 00f8 B3F5803F 	 cmp r3,#65536
 2453 00fc 3ED2     	 bcs .L87
 684:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         {
 685:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****           compare_ch1 = period * shift;
 2454              	 .loc 2 685 0
 2455 00fe FB69     	 ldr r3,[r7,#28]
 2456 0100 7A69     	 ldr r2,[r7,#20]
 2457 0102 02FB03F3 	 mul r3,r2,r3
 2458 0106 3B61     	 str r3,[r7,#16]
 686:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****           compare_ch1 = compare_ch1 / PWM_CCU8_DUTY_FULL_SCALE;
 2459              	 .loc 2 686 0
 2460 0108 3B69     	 ldr r3,[r7,#16]
 2461 010a 1F4A     	 ldr r2,.L91
 2462 010c A2FB0323 	 umull r2,r3,r2,r3
 2463 0110 5B0B     	 lsrs r3,r3,#13
 2464 0112 3B61     	 str r3,[r7,#16]
 687:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****           compare_ch2 = period * (shift + duty_cycle);
 2465              	 .loc 2 687 0
 2466 0114 7A69     	 ldr r2,[r7,#20]
 2467 0116 BB69     	 ldr r3,[r7,#24]
 2468 0118 1344     	 add r3,r3,r2
 2469 011a FA69     	 ldr r2,[r7,#28]
 2470 011c 02FB03F3 	 mul r3,r2,r3
 2471 0120 FB60     	 str r3,[r7,#12]
 688:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****           compare_ch2 = compare_ch2 / PWM_CCU8_DUTY_FULL_SCALE;
 2472              	 .loc 2 688 0
 2473 0122 FB68     	 ldr r3,[r7,#12]
 2474 0124 184A     	 ldr r2,.L91
 2475 0126 A2FB0323 	 umull r2,r3,r2,r3
 2476 012a 5B0B     	 lsrs r3,r3,#13
 2477 012c FB60     	 str r3,[r7,#12]
 689:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 690:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****           XMC_CCU8_SLICE_SetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr, (uint16_t)(period - 1U));
 2478              	 .loc 2 690 0
 2479 012e 7B68     	 ldr r3,[r7,#4]
 2480 0130 9A68     	 ldr r2,[r3,#8]
 2481 0132 FB69     	 ldr r3,[r7,#28]
 2482 0134 9BB2     	 uxth r3,r3
 2483 0136 013B     	 subs r3,r3,#1
 2484 0138 9BB2     	 uxth r3,r3
 2485 013a 1046     	 mov r0,r2
 2486 013c 1946     	 mov r1,r3
 2487 013e FFF7FEFF 	 bl XMC_CCU8_SLICE_SetTimerPeriodMatch
 691:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****           XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CH
 2488              	 .loc 2 691 0
 2489 0142 7B68     	 ldr r3,[r7,#4]
 2490 0144 9A68     	 ldr r2,[r3,#8]
 2491 0146 3B69     	 ldr r3,[r7,#16]
 2492 0148 9BB2     	 uxth r3,r3
 2493 014a 1046     	 mov r0,r2
 2494 014c 0021     	 movs r1,#0
 2495 014e 1A46     	 mov r2,r3
 2496 0150 FFF7FEFF 	 bl XMC_CCU8_SLICE_SetTimerCompareMatch
 692:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                                               (uint16_t) compare_ch1);
 693:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****           XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CH
 2497              	 .loc 2 693 0
 2498 0154 7B68     	 ldr r3,[r7,#4]
 2499 0156 9A68     	 ldr r2,[r3,#8]
 2500 0158 FB68     	 ldr r3,[r7,#12]
 2501 015a 9BB2     	 uxth r3,r3
 2502 015c 1046     	 mov r0,r2
 2503 015e 0121     	 movs r1,#1
 2504 0160 1A46     	 mov r2,r3
 2505 0162 FFF7FEFF 	 bl XMC_CCU8_SLICE_SetTimerCompareMatch
 694:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                                               (uint16_t) compare_ch2);
 695:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****           XMC_CCU8_EnableShadowTransfer(handle_ptr->ccu8_module_ptr, handle_ptr->shadow_txfr_msk);
 2506              	 .loc 2 695 0
 2507 0166 7B68     	 ldr r3,[r7,#4]
 2508 0168 5A68     	 ldr r2,[r3,#4]
 2509 016a 7B68     	 ldr r3,[r7,#4]
 2510 016c 1B69     	 ldr r3,[r3,#16]
 2511 016e 1046     	 mov r0,r2
 2512 0170 1946     	 mov r1,r3
 2513 0172 FFF7FEFF 	 bl XMC_CCU8_EnableShadowTransfer
 696:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****           XMC_DEBUG("PWM_CCU8_SetPwmFreq:frequency set edge aligned mode");
 697:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****           status = PWM_CCU8_STATUS_SUCCESS;
 2514              	 .loc 2 697 0
 2515 0176 0023     	 movs r3,#0
 2516 0178 87F82730 	 strb r3,[r7,#39]
 2517              	.L87:
 698:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         }
 699:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       }
 700:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     }
 701:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   }
 702:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   return (status);
 2518              	 .loc 2 702 0
 2519 017c 97F82730 	 ldrb r3,[r7,#39]
 703:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** }/* end of PWM_CCU8_SetFreqAsymmetric() api */
 2520              	 .loc 2 703 0
 2521 0180 1846     	 mov r0,r3
 2522 0182 2837     	 adds r7,r7,#40
 2523              	.LCFI142:
 2524              	 .cfi_def_cfa_offset 8
 2525 0184 BD46     	 mov sp,r7
 2526              	.LCFI143:
 2527              	 .cfi_def_cfa_register 13
 2528              	 
 2529 0186 80BD     	 pop {r7,pc}
 2530              	.L92:
 2531              	 .align 2
 2532              	.L91:
 2533 0188 5917B7D1 	 .word -776530087
 2534              	 .cfi_endproc
 2535              	.LFE220:
 2537              	 .section .text.PWM_CCU8_SetDutyCycleAsymmetric,"ax",%progbits
 2538              	 .align 2
 2539              	 .global PWM_CCU8_SetDutyCycleAsymmetric
 2540              	 .thumb
 2541              	 .thumb_func
 2543              	PWM_CCU8_SetDutyCycleAsymmetric:
 2544              	.LFB221:
 704:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 705:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** /**************************************************************************************************
 706:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 707:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** /*Sets the duty cycle and shift (uint32_t) for CCU8_CC8 slice in Asymmetric mode. */
 708:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** /*(shift + duty_cycle <= 100)  and (shift + duty_cycle >= 50) */
 709:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** PWM_CCU8_STATUS_t PWM_CCU8_SetDutyCycleAsymmetric(PWM_CCU8_t* handle_ptr, uint32_t shift, uint32_t 
 710:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** {
 2545              	 .loc 2 710 0
 2546              	 .cfi_startproc
 2547              	 
 2548              	 
 2549 0000 80B5     	 push {r7,lr}
 2550              	.LCFI144:
 2551              	 .cfi_def_cfa_offset 8
 2552              	 .cfi_offset 7,-8
 2553              	 .cfi_offset 14,-4
 2554 0002 88B0     	 sub sp,sp,#32
 2555              	.LCFI145:
 2556              	 .cfi_def_cfa_offset 40
 2557 0004 00AF     	 add r7,sp,#0
 2558              	.LCFI146:
 2559              	 .cfi_def_cfa_register 7
 2560 0006 F860     	 str r0,[r7,#12]
 2561 0008 B960     	 str r1,[r7,#8]
 2562 000a 7A60     	 str r2,[r7,#4]
 711:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   PWM_CCU8_STATUS_t status;
 712:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   uint32_t period;
 713:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   uint32_t compare_ch1;
 714:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   uint32_t compare_ch2;
 715:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 716:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   status = PWM_CCU8_STATUS_FAILURE;
 2563              	 .loc 2 716 0
 2564 000c 0123     	 movs r3,#1
 2565 000e FB77     	 strb r3,[r7,#31]
 717:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   XMC_ASSERT("PWM_CCU8_SetDutyCycleAsymmetric:handle_ptr NULL", (handle_ptr != NULL));
 718:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   if (PWM_CCU8_STATE_UNINITIALIZED != handle_ptr->state)
 2566              	 .loc 2 718 0
 2567 0010 FB68     	 ldr r3,[r7,#12]
 2568 0012 1B7F     	 ldrb r3,[r3,#28]
 2569 0014 002B     	 cmp r3,#0
 2570 0016 00F0A680 	 beq .L94
 719:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   {
 720:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     if ((uint32_t) XMC_CCU8_SLICE_TIMER_COUNT_MODE_CA == handle_ptr->config_ptr->ccu8_cc8_slice_tim
 2571              	 .loc 2 720 0
 2572 001a FB68     	 ldr r3,[r7,#12]
 2573 001c 1B68     	 ldr r3,[r3]
 2574 001e 5B6C     	 ldr r3,[r3,#68]
 2575 0020 1B78     	 ldrb r3,[r3]
 2576 0022 03F00103 	 and r3,r3,#1
 2577 0026 DBB2     	 uxtb r3,r3
 2578 0028 002B     	 cmp r3,#0
 2579 002a 58D0     	 beq .L95
 721:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     {
 722:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       /*center aligned mode*/
 723:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       if (((shift + duty_cycle) > PWM_CCU8_ASYM_CA_MAX) || ((shift + duty_cycle) < PWM_CCU8_ASYM_CA
 2580              	 .loc 2 723 0
 2581 002c BA68     	 ldr r2,[r7,#8]
 2582 002e 7B68     	 ldr r3,[r7,#4]
 2583 0030 1344     	 add r3,r3,r2
 2584 0032 42F21072 	 movw r2,#10000
 2585 0036 9342     	 cmp r3,r2
 2586 0038 00F29580 	 bhi .L94
 2587              	 .loc 2 723 0 is_stmt 0 discriminator 1
 2588 003c BA68     	 ldr r2,[r7,#8]
 2589 003e 7B68     	 ldr r3,[r7,#4]
 2590 0040 1344     	 add r3,r3,r2
 2591 0042 41F28732 	 movw r2,#4999
 2592 0046 9342     	 cmp r3,r2
 2593 0048 40F28D80 	 bls .L94
 724:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       {
 725:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         XMC_DEBUG("PWM_CCU8_SetDutyCycleAsymmetric:Cannot set center aligned mode 50% < (shift + du
 726:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       }
 727:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       else if (shift >= PWM_CCU8_ASYM_CA_SHIFT_MAX)
 2594              	 .loc 2 727 0 is_stmt 1
 2595 004c BB68     	 ldr r3,[r7,#8]
 2596 004e 41F28732 	 movw r2,#4999
 2597 0052 9342     	 cmp r3,r2
 2598 0054 00F28780 	 bhi .L94
 728:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       {
 729:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         XMC_DEBUG("PWM_CCU8_SetDutyCycleAsymmetric:Cannot set center aligned mode shift > 50%");
 730:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       }
 731:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       else
 732:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       {
 733:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         period = (uint32_t) XMC_CCU8_SLICE_GetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr);
 2599              	 .loc 2 733 0
 2600 0058 FB68     	 ldr r3,[r7,#12]
 2601 005a 9B68     	 ldr r3,[r3,#8]
 2602 005c 1846     	 mov r0,r3
 2603 005e FFF7FEFF 	 bl XMC_CCU8_SLICE_GetTimerPeriodMatch
 2604 0062 0346     	 mov r3,r0
 2605 0064 BB61     	 str r3,[r7,#24]
 734:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 735:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         compare_ch1 = ((2U * period * shift) / PWM_CCU8_DUTY_FULL_SCALE);
 2606              	 .loc 2 735 0
 2607 0066 BB69     	 ldr r3,[r7,#24]
 2608 0068 BA68     	 ldr r2,[r7,#8]
 2609 006a 02FB03F3 	 mul r3,r2,r3
 2610 006e 5B00     	 lsls r3,r3,#1
 2611 0070 3F4A     	 ldr r2,.L98
 2612 0072 A2FB0323 	 umull r2,r3,r2,r3
 2613 0076 5B0B     	 lsrs r3,r3,#13
 2614 0078 7B61     	 str r3,[r7,#20]
 736:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         compare_ch2 = ((2U * period * (PWM_CCU8_DUTY_FULL_SCALE - (shift + duty_cycle))) / PWM_CCU8
 2615              	 .loc 2 736 0
 2616 007a BA68     	 ldr r2,[r7,#8]
 2617 007c 7B68     	 ldr r3,[r7,#4]
 2618 007e 1344     	 add r3,r3,r2
 2619 0080 C3F51C53 	 rsb r3,r3,#9984
 2620 0084 1033     	 adds r3,r3,#16
 2621 0086 BA69     	 ldr r2,[r7,#24]
 2622 0088 02FB03F3 	 mul r3,r2,r3
 2623 008c 5B00     	 lsls r3,r3,#1
 2624 008e 384A     	 ldr r2,.L98
 2625 0090 A2FB0323 	 umull r2,r3,r2,r3
 2626 0094 5B0B     	 lsrs r3,r3,#13
 2627 0096 3B61     	 str r3,[r7,#16]
 737:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 738:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHAN
 2628              	 .loc 2 738 0
 2629 0098 FB68     	 ldr r3,[r7,#12]
 2630 009a 9A68     	 ldr r2,[r3,#8]
 2631 009c 7B69     	 ldr r3,[r7,#20]
 2632 009e 9BB2     	 uxth r3,r3
 2633 00a0 1046     	 mov r0,r2
 2634 00a2 0021     	 movs r1,#0
 2635 00a4 1A46     	 mov r2,r3
 2636 00a6 FFF7FEFF 	 bl XMC_CCU8_SLICE_SetTimerCompareMatch
 739:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                                             (uint16_t) compare_ch1);
 740:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHAN
 2637              	 .loc 2 740 0
 2638 00aa FB68     	 ldr r3,[r7,#12]
 2639 00ac 9A68     	 ldr r2,[r3,#8]
 2640 00ae 3B69     	 ldr r3,[r7,#16]
 2641 00b0 9BB2     	 uxth r3,r3
 2642 00b2 1046     	 mov r0,r2
 2643 00b4 0121     	 movs r1,#1
 2644 00b6 1A46     	 mov r2,r3
 2645 00b8 FFF7FEFF 	 bl XMC_CCU8_SLICE_SetTimerCompareMatch
 741:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                                             (uint16_t) compare_ch2);
 742:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         XMC_CCU8_EnableShadowTransfer(handle_ptr->ccu8_module_ptr, handle_ptr->shadow_txfr_msk);
 2646              	 .loc 2 742 0
 2647 00bc FB68     	 ldr r3,[r7,#12]
 2648 00be 5A68     	 ldr r2,[r3,#4]
 2649 00c0 FB68     	 ldr r3,[r7,#12]
 2650 00c2 1B69     	 ldr r3,[r3,#16]
 2651 00c4 1046     	 mov r0,r2
 2652 00c6 1946     	 mov r1,r3
 2653 00c8 FFF7FEFF 	 bl XMC_CCU8_EnableShadowTransfer
 743:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 744:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         handle_ptr->asym_duty = duty_cycle;
 2654              	 .loc 2 744 0
 2655 00cc FB68     	 ldr r3,[r7,#12]
 2656 00ce 7A68     	 ldr r2,[r7,#4]
 2657 00d0 DA62     	 str r2,[r3,#44]
 745:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         handle_ptr->asym_shift = shift;
 2658              	 .loc 2 745 0
 2659 00d2 FB68     	 ldr r3,[r7,#12]
 2660 00d4 BA68     	 ldr r2,[r7,#8]
 2661 00d6 1A63     	 str r2,[r3,#48]
 746:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 747:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         XMC_DEBUG("PWM_CCU8_SetDutyCycleAsymmetric:dutycycle set center aligned mode");
 748:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         status = PWM_CCU8_STATUS_SUCCESS;
 2662              	 .loc 2 748 0
 2663 00d8 0023     	 movs r3,#0
 2664 00da FB77     	 strb r3,[r7,#31]
 2665 00dc 43E0     	 b .L94
 2666              	.L95:
 749:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       }
 750:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 751:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     }
 752:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     else
 753:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     {
 754:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       /*edge aligned mode*/
 755:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       if (((shift + duty_cycle) > PWM_CCU8_ASYM_EA_MAX))
 2667              	 .loc 2 755 0
 2668 00de BA68     	 ldr r2,[r7,#8]
 2669 00e0 7B68     	 ldr r3,[r7,#4]
 2670 00e2 1344     	 add r3,r3,r2
 2671 00e4 42F21072 	 movw r2,#10000
 2672 00e8 9342     	 cmp r3,r2
 2673 00ea 3CD8     	 bhi .L94
 756:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       {
 757:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         XMC_DEBUG("PWM_CCU8_SetDutyCycleAsymmetric:Cannot set edge aligned mode (shift + duty_cycle
 758:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       }
 759:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       else
 760:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       {
 761:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         period = (uint32_t) XMC_CCU8_SLICE_GetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr);
 2674              	 .loc 2 761 0
 2675 00ec FB68     	 ldr r3,[r7,#12]
 2676 00ee 9B68     	 ldr r3,[r3,#8]
 2677 00f0 1846     	 mov r0,r3
 2678 00f2 FFF7FEFF 	 bl XMC_CCU8_SLICE_GetTimerPeriodMatch
 2679 00f6 0346     	 mov r3,r0
 2680 00f8 BB61     	 str r3,[r7,#24]
 762:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 763:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         compare_ch1 = ((period * shift) / PWM_CCU8_DUTY_FULL_SCALE);
 2681              	 .loc 2 763 0
 2682 00fa BB69     	 ldr r3,[r7,#24]
 2683 00fc BA68     	 ldr r2,[r7,#8]
 2684 00fe 02FB03F3 	 mul r3,r2,r3
 2685 0102 1B4A     	 ldr r2,.L98
 2686 0104 A2FB0323 	 umull r2,r3,r2,r3
 2687 0108 5B0B     	 lsrs r3,r3,#13
 2688 010a 7B61     	 str r3,[r7,#20]
 764:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         compare_ch2 = ((period * (shift + duty_cycle)) / PWM_CCU8_DUTY_FULL_SCALE);
 2689              	 .loc 2 764 0
 2690 010c BA68     	 ldr r2,[r7,#8]
 2691 010e 7B68     	 ldr r3,[r7,#4]
 2692 0110 1344     	 add r3,r3,r2
 2693 0112 BA69     	 ldr r2,[r7,#24]
 2694 0114 02FB03F3 	 mul r3,r2,r3
 2695 0118 154A     	 ldr r2,.L98
 2696 011a A2FB0323 	 umull r2,r3,r2,r3
 2697 011e 5B0B     	 lsrs r3,r3,#13
 2698 0120 3B61     	 str r3,[r7,#16]
 765:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 766:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHAN
 2699              	 .loc 2 766 0
 2700 0122 FB68     	 ldr r3,[r7,#12]
 2701 0124 9A68     	 ldr r2,[r3,#8]
 2702 0126 7B69     	 ldr r3,[r7,#20]
 2703 0128 9BB2     	 uxth r3,r3
 2704 012a 1046     	 mov r0,r2
 2705 012c 0021     	 movs r1,#0
 2706 012e 1A46     	 mov r2,r3
 2707 0130 FFF7FEFF 	 bl XMC_CCU8_SLICE_SetTimerCompareMatch
 767:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                                             (uint16_t) compare_ch1);
 768:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHAN
 2708              	 .loc 2 768 0
 2709 0134 FB68     	 ldr r3,[r7,#12]
 2710 0136 9A68     	 ldr r2,[r3,#8]
 2711 0138 3B69     	 ldr r3,[r7,#16]
 2712 013a 9BB2     	 uxth r3,r3
 2713 013c 1046     	 mov r0,r2
 2714 013e 0121     	 movs r1,#1
 2715 0140 1A46     	 mov r2,r3
 2716 0142 FFF7FEFF 	 bl XMC_CCU8_SLICE_SetTimerCompareMatch
 769:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                                             (uint16_t) compare_ch2);
 770:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         XMC_CCU8_EnableShadowTransfer(handle_ptr->ccu8_module_ptr, handle_ptr->shadow_txfr_msk);
 2717              	 .loc 2 770 0
 2718 0146 FB68     	 ldr r3,[r7,#12]
 2719 0148 5A68     	 ldr r2,[r3,#4]
 2720 014a FB68     	 ldr r3,[r7,#12]
 2721 014c 1B69     	 ldr r3,[r3,#16]
 2722 014e 1046     	 mov r0,r2
 2723 0150 1946     	 mov r1,r3
 2724 0152 FFF7FEFF 	 bl XMC_CCU8_EnableShadowTransfer
 771:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 772:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         handle_ptr->asym_duty = duty_cycle;
 2725              	 .loc 2 772 0
 2726 0156 FB68     	 ldr r3,[r7,#12]
 2727 0158 7A68     	 ldr r2,[r7,#4]
 2728 015a DA62     	 str r2,[r3,#44]
 773:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         handle_ptr->asym_shift = shift;
 2729              	 .loc 2 773 0
 2730 015c FB68     	 ldr r3,[r7,#12]
 2731 015e BA68     	 ldr r2,[r7,#8]
 2732 0160 1A63     	 str r2,[r3,#48]
 774:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 775:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         XMC_DEBUG("PWM_CCU8_SetDutyCycleAsymmetric:dutycycle set edge aligned mode");
 776:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         status = PWM_CCU8_STATUS_SUCCESS;
 2733              	 .loc 2 776 0
 2734 0162 0023     	 movs r3,#0
 2735 0164 FB77     	 strb r3,[r7,#31]
 2736              	.L94:
 777:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       }
 778:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     }
 779:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   }
 780:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   return (status);
 2737              	 .loc 2 780 0
 2738 0166 FB7F     	 ldrb r3,[r7,#31]
 781:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** }/* end of PWM_CCU8_SetDutyCycleAsymmetric() api */
 2739              	 .loc 2 781 0
 2740 0168 1846     	 mov r0,r3
 2741 016a 2037     	 adds r7,r7,#32
 2742              	.LCFI147:
 2743              	 .cfi_def_cfa_offset 8
 2744 016c BD46     	 mov sp,r7
 2745              	.LCFI148:
 2746              	 .cfi_def_cfa_register 13
 2747              	 
 2748 016e 80BD     	 pop {r7,pc}
 2749              	.L99:
 2750              	 .align 2
 2751              	.L98:
 2752 0170 5917B7D1 	 .word -776530087
 2753              	 .cfi_endproc
 2754              	.LFE221:
 2756              	 .section .text.PWM_CCU8_SetFreqAndDutyCycleAsymmetric,"ax",%progbits
 2757              	 .align 2
 2758              	 .global PWM_CCU8_SetFreqAndDutyCycleAsymmetric
 2759              	 .thumb
 2760              	 .thumb_func
 2762              	PWM_CCU8_SetFreqAndDutyCycleAsymmetric:
 2763              	.LFB222:
 782:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 783:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** /**************************************************************************************************
 784:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 785:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** /*Sets the frequency, (uint32_t)shift and (uint32_t)duty cycle for CCU8_CC8 slice Asymmetric Mode. 
 786:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** PWM_CCU8_STATUS_t PWM_CCU8_SetFreqAndDutyCycleAsymmetric(PWM_CCU8_t* handle_ptr, uint32_t pwm_freq_
 787:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                                                          uint32_t duty_cycle)
 788:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** {
 2764              	 .loc 2 788 0
 2765              	 .cfi_startproc
 2766              	 
 2767              	 
 2768 0000 80B5     	 push {r7,lr}
 2769              	.LCFI149:
 2770              	 .cfi_def_cfa_offset 8
 2771              	 .cfi_offset 7,-8
 2772              	 .cfi_offset 14,-4
 2773 0002 8AB0     	 sub sp,sp,#40
 2774              	.LCFI150:
 2775              	 .cfi_def_cfa_offset 48
 2776 0004 00AF     	 add r7,sp,#0
 2777              	.LCFI151:
 2778              	 .cfi_def_cfa_register 7
 2779 0006 F860     	 str r0,[r7,#12]
 2780 0008 B960     	 str r1,[r7,#8]
 2781 000a 7A60     	 str r2,[r7,#4]
 2782 000c 3B60     	 str r3,[r7]
 789:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   PWM_CCU8_STATUS_t status;
 790:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   uint32_t frequency_tclk;
 791:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   uint32_t period;
 792:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   uint32_t compare_ch1;
 793:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   uint32_t compare_ch2;
 794:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 795:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   status = PWM_CCU8_STATUS_FAILURE;
 2783              	 .loc 2 795 0
 2784 000e 0123     	 movs r3,#1
 2785 0010 87F82730 	 strb r3,[r7,#39]
 796:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   frequency_tclk = 0U;
 2786              	 .loc 2 796 0
 2787 0014 0023     	 movs r3,#0
 2788 0016 3B62     	 str r3,[r7,#32]
 797:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   XMC_ASSERT("PWM_CCU8_SetFreqAndDutyCycleAsymmetric:handle_ptr NULL", (handle_ptr != NULL));
 798:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   if (PWM_CCU8_STATE_UNINITIALIZED != handle_ptr->state)
 2789              	 .loc 2 798 0
 2790 0018 FB68     	 ldr r3,[r7,#12]
 2791 001a 1B7F     	 ldrb r3,[r3,#28]
 2792 001c 002B     	 cmp r3,#0
 2793 001e 00F0CA80 	 beq .L101
 799:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   {
 800:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     if (0U == pwm_freq_hz)
 2794              	 .loc 2 800 0
 2795 0022 BB68     	 ldr r3,[r7,#8]
 2796 0024 002B     	 cmp r3,#0
 2797 0026 00F0C680 	 beq .L101
 801:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     {
 802:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       XMC_DEBUG("PWM_CCU8_SetFreqAndDutyCycleAsymmetric:cannot set frequency 0Hz");
 803:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     }
 804:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     else
 805:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     {
 806:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       frequency_tclk = handle_ptr->frequency_tclk;
 2798              	 .loc 2 806 0
 2799 002a FB68     	 ldr r3,[r7,#12]
 2800 002c 1B6A     	 ldr r3,[r3,#32]
 2801 002e 3B62     	 str r3,[r7,#32]
 807:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       period = frequency_tclk / pwm_freq_hz;
 2802              	 .loc 2 807 0
 2803 0030 3A6A     	 ldr r2,[r7,#32]
 2804 0032 BB68     	 ldr r3,[r7,#8]
 2805 0034 B2FBF3F3 	 udiv r3,r2,r3
 2806 0038 FB61     	 str r3,[r7,#28]
 808:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 809:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       if ((uint32_t) XMC_CCU8_SLICE_TIMER_COUNT_MODE_CA == handle_ptr->config_ptr->ccu8_cc8_slice_t
 2807              	 .loc 2 809 0
 2808 003a FB68     	 ldr r3,[r7,#12]
 2809 003c 1B68     	 ldr r3,[r3]
 2810 003e 5B6C     	 ldr r3,[r3,#68]
 2811 0040 1B78     	 ldrb r3,[r3]
 2812 0042 03F00103 	 and r3,r3,#1
 2813 0046 DBB2     	 uxtb r3,r3
 2814 0048 002B     	 cmp r3,#0
 2815 004a 68D0     	 beq .L102
 810:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       {
 811:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         if (((shift + duty_cycle) > PWM_CCU8_ASYM_CA_MAX) || ((shift + duty_cycle) < PWM_CCU8_ASYM_
 2816              	 .loc 2 811 0
 2817 004c 7A68     	 ldr r2,[r7,#4]
 2818 004e 3B68     	 ldr r3,[r7]
 2819 0050 1344     	 add r3,r3,r2
 2820 0052 42F21072 	 movw r2,#10000
 2821 0056 9342     	 cmp r3,r2
 2822 0058 00F2AD80 	 bhi .L101
 2823              	 .loc 2 811 0 is_stmt 0 discriminator 1
 2824 005c 7A68     	 ldr r2,[r7,#4]
 2825 005e 3B68     	 ldr r3,[r7]
 2826 0060 1344     	 add r3,r3,r2
 2827 0062 41F28732 	 movw r2,#4999
 2828 0066 9342     	 cmp r3,r2
 2829 0068 40F2A580 	 bls .L101
 812:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         {
 813:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****           XMC_DEBUG("PWM_CCU8_SetDutyCycleAsymmetric:Cannot set center aligned mode 50% < (shift + 
 814:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         }
 815:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         else if (shift >= PWM_CCU8_ASYM_CA_SHIFT_MAX)
 2830              	 .loc 2 815 0 is_stmt 1
 2831 006c 7B68     	 ldr r3,[r7,#4]
 2832 006e 41F28732 	 movw r2,#4999
 2833 0072 9342     	 cmp r3,r2
 2834 0074 00F29F80 	 bhi .L101
 816:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         {
 817:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****           XMC_DEBUG("PWM_CCU8_SetDutyCycleAsymmetric:Cannot set center aligned mode shift > 50%");
 818:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         }
 819:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         else
 820:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         {
 821:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****           period = period >> 1U;/*divide by 2*/
 2835              	 .loc 2 821 0
 2836 0078 FB69     	 ldr r3,[r7,#28]
 2837 007a 5B08     	 lsrs r3,r3,#1
 2838 007c FB61     	 str r3,[r7,#28]
 822:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 823:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****           if ((period != 0U) && (period <= PWM_CCU8_MAX_TIMER_COUNT))
 2839              	 .loc 2 823 0
 2840 007e FB69     	 ldr r3,[r7,#28]
 2841 0080 002B     	 cmp r3,#0
 2842 0082 00F09880 	 beq .L101
 2843              	 .loc 2 823 0 is_stmt 0 discriminator 1
 2844 0086 FB69     	 ldr r3,[r7,#28]
 2845 0088 B3F5803F 	 cmp r3,#65536
 2846 008c 80F09380 	 bcs .L101
 824:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****           {
 825:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****             compare_ch1 = ((2U * period * shift) / PWM_CCU8_DUTY_FULL_SCALE);
 2847              	 .loc 2 825 0 is_stmt 1
 2848 0090 FB69     	 ldr r3,[r7,#28]
 2849 0092 7A68     	 ldr r2,[r7,#4]
 2850 0094 02FB03F3 	 mul r3,r2,r3
 2851 0098 5B00     	 lsls r3,r3,#1
 2852 009a 4A4A     	 ldr r2,.L105
 2853 009c A2FB0323 	 umull r2,r3,r2,r3
 2854 00a0 5B0B     	 lsrs r3,r3,#13
 2855 00a2 BB61     	 str r3,[r7,#24]
 826:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****             compare_ch2 =
 827:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                 ((2U * period * (PWM_CCU8_DUTY_FULL_SCALE - (shift + duty_cycle))) / PWM_CCU8_DUTY_
 2856              	 .loc 2 827 0
 2857 00a4 7A68     	 ldr r2,[r7,#4]
 2858 00a6 3B68     	 ldr r3,[r7]
 2859 00a8 1344     	 add r3,r3,r2
 2860 00aa C3F51C53 	 rsb r3,r3,#9984
 2861 00ae 1033     	 adds r3,r3,#16
 2862 00b0 FA69     	 ldr r2,[r7,#28]
 2863 00b2 02FB03F3 	 mul r3,r2,r3
 2864 00b6 5B00     	 lsls r3,r3,#1
 826:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****             compare_ch2 =
 2865              	 .loc 2 826 0
 2866 00b8 424A     	 ldr r2,.L105
 2867 00ba A2FB0323 	 umull r2,r3,r2,r3
 2868 00be 5B0B     	 lsrs r3,r3,#13
 2869 00c0 7B61     	 str r3,[r7,#20]
 828:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 829:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****             XMC_CCU8_SLICE_SetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr, (uint16_t)(period - 1U))
 2870              	 .loc 2 829 0
 2871 00c2 FB68     	 ldr r3,[r7,#12]
 2872 00c4 9A68     	 ldr r2,[r3,#8]
 2873 00c6 FB69     	 ldr r3,[r7,#28]
 2874 00c8 9BB2     	 uxth r3,r3
 2875 00ca 013B     	 subs r3,r3,#1
 2876 00cc 9BB2     	 uxth r3,r3
 2877 00ce 1046     	 mov r0,r2
 2878 00d0 1946     	 mov r1,r3
 2879 00d2 FFF7FEFF 	 bl XMC_CCU8_SLICE_SetTimerPeriodMatch
 830:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****             XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_
 2880              	 .loc 2 830 0
 2881 00d6 FB68     	 ldr r3,[r7,#12]
 2882 00d8 9A68     	 ldr r2,[r3,#8]
 2883 00da BB69     	 ldr r3,[r7,#24]
 2884 00dc 9BB2     	 uxth r3,r3
 2885 00de 1046     	 mov r0,r2
 2886 00e0 0021     	 movs r1,#0
 2887 00e2 1A46     	 mov r2,r3
 2888 00e4 FFF7FEFF 	 bl XMC_CCU8_SLICE_SetTimerCompareMatch
 831:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                                                 (uint16_t) compare_ch1);
 832:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****             XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_
 2889              	 .loc 2 832 0
 2890 00e8 FB68     	 ldr r3,[r7,#12]
 2891 00ea 9A68     	 ldr r2,[r3,#8]
 2892 00ec 7B69     	 ldr r3,[r7,#20]
 2893 00ee 9BB2     	 uxth r3,r3
 2894 00f0 1046     	 mov r0,r2
 2895 00f2 0121     	 movs r1,#1
 2896 00f4 1A46     	 mov r2,r3
 2897 00f6 FFF7FEFF 	 bl XMC_CCU8_SLICE_SetTimerCompareMatch
 833:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                                                 (uint16_t) compare_ch2);
 834:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****             XMC_CCU8_EnableShadowTransfer(handle_ptr->ccu8_module_ptr, handle_ptr->shadow_txfr_msk)
 2898              	 .loc 2 834 0
 2899 00fa FB68     	 ldr r3,[r7,#12]
 2900 00fc 5A68     	 ldr r2,[r3,#4]
 2901 00fe FB68     	 ldr r3,[r7,#12]
 2902 0100 1B69     	 ldr r3,[r3,#16]
 2903 0102 1046     	 mov r0,r2
 2904 0104 1946     	 mov r1,r3
 2905 0106 FFF7FEFF 	 bl XMC_CCU8_EnableShadowTransfer
 835:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 836:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****             handle_ptr->asym_duty = duty_cycle;
 2906              	 .loc 2 836 0
 2907 010a FB68     	 ldr r3,[r7,#12]
 2908 010c 3A68     	 ldr r2,[r7]
 2909 010e DA62     	 str r2,[r3,#44]
 837:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****             handle_ptr->asym_shift = shift;
 2910              	 .loc 2 837 0
 2911 0110 FB68     	 ldr r3,[r7,#12]
 2912 0112 7A68     	 ldr r2,[r7,#4]
 2913 0114 1A63     	 str r2,[r3,#48]
 838:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 839:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****             XMC_DEBUG("PWM_CCU8_SetFreqAndDutyCycleAsymmetric:frequency and duty set center aligned
 840:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****             status = PWM_CCU8_STATUS_SUCCESS;
 2914              	 .loc 2 840 0
 2915 0116 0023     	 movs r3,#0
 2916 0118 87F82730 	 strb r3,[r7,#39]
 2917 011c 4BE0     	 b .L101
 2918              	.L102:
 841:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****           }
 842:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         }
 843:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       }
 844:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       else
 845:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       {
 846:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         if (period <= PWM_CCU8_MAX_TIMER_COUNT)
 2919              	 .loc 2 846 0
 2920 011e FB69     	 ldr r3,[r7,#28]
 2921 0120 B3F5803F 	 cmp r3,#65536
 2922 0124 47D2     	 bcs .L101
 847:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         {
 848:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****           if (((shift + duty_cycle) > PWM_CCU8_ASYM_EA_MAX))
 2923              	 .loc 2 848 0
 2924 0126 7A68     	 ldr r2,[r7,#4]
 2925 0128 3B68     	 ldr r3,[r7]
 2926 012a 1344     	 add r3,r3,r2
 2927 012c 42F21072 	 movw r2,#10000
 2928 0130 9342     	 cmp r3,r2
 2929 0132 40D8     	 bhi .L101
 849:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****           {
 850:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****             XMC_DEBUG("PWM_CCU8_SetDutyCycleAsymmetric:Cannot set edge aligned mode (shift + duty_c
 851:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****           }
 852:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****           else
 853:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****           {
 854:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****             compare_ch1 = ((period * shift) / PWM_CCU8_DUTY_FULL_SCALE);
 2930              	 .loc 2 854 0
 2931 0134 FB69     	 ldr r3,[r7,#28]
 2932 0136 7A68     	 ldr r2,[r7,#4]
 2933 0138 02FB03F3 	 mul r3,r2,r3
 2934 013c 214A     	 ldr r2,.L105
 2935 013e A2FB0323 	 umull r2,r3,r2,r3
 2936 0142 5B0B     	 lsrs r3,r3,#13
 2937 0144 BB61     	 str r3,[r7,#24]
 855:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****             compare_ch2 = ((period * (shift + duty_cycle)) / PWM_CCU8_DUTY_FULL_SCALE);
 2938              	 .loc 2 855 0
 2939 0146 7A68     	 ldr r2,[r7,#4]
 2940 0148 3B68     	 ldr r3,[r7]
 2941 014a 1344     	 add r3,r3,r2
 2942 014c FA69     	 ldr r2,[r7,#28]
 2943 014e 02FB03F3 	 mul r3,r2,r3
 2944 0152 1C4A     	 ldr r2,.L105
 2945 0154 A2FB0323 	 umull r2,r3,r2,r3
 2946 0158 5B0B     	 lsrs r3,r3,#13
 2947 015a 7B61     	 str r3,[r7,#20]
 856:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 857:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****             XMC_CCU8_SLICE_SetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr, (uint16_t)(period - 1U))
 2948              	 .loc 2 857 0
 2949 015c FB68     	 ldr r3,[r7,#12]
 2950 015e 9A68     	 ldr r2,[r3,#8]
 2951 0160 FB69     	 ldr r3,[r7,#28]
 2952 0162 9BB2     	 uxth r3,r3
 2953 0164 013B     	 subs r3,r3,#1
 2954 0166 9BB2     	 uxth r3,r3
 2955 0168 1046     	 mov r0,r2
 2956 016a 1946     	 mov r1,r3
 2957 016c FFF7FEFF 	 bl XMC_CCU8_SLICE_SetTimerPeriodMatch
 858:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****             XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_
 2958              	 .loc 2 858 0
 2959 0170 FB68     	 ldr r3,[r7,#12]
 2960 0172 9A68     	 ldr r2,[r3,#8]
 2961 0174 BB69     	 ldr r3,[r7,#24]
 2962 0176 9BB2     	 uxth r3,r3
 2963 0178 1046     	 mov r0,r2
 2964 017a 0021     	 movs r1,#0
 2965 017c 1A46     	 mov r2,r3
 2966 017e FFF7FEFF 	 bl XMC_CCU8_SLICE_SetTimerCompareMatch
 859:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                                                 (uint16_t) compare_ch1);
 860:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****             XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_
 2967              	 .loc 2 860 0
 2968 0182 FB68     	 ldr r3,[r7,#12]
 2969 0184 9A68     	 ldr r2,[r3,#8]
 2970 0186 7B69     	 ldr r3,[r7,#20]
 2971 0188 9BB2     	 uxth r3,r3
 2972 018a 1046     	 mov r0,r2
 2973 018c 0121     	 movs r1,#1
 2974 018e 1A46     	 mov r2,r3
 2975 0190 FFF7FEFF 	 bl XMC_CCU8_SLICE_SetTimerCompareMatch
 861:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                                                 (uint16_t) compare_ch2);
 862:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****             XMC_CCU8_EnableShadowTransfer(handle_ptr->ccu8_module_ptr, handle_ptr->shadow_txfr_msk)
 2976              	 .loc 2 862 0
 2977 0194 FB68     	 ldr r3,[r7,#12]
 2978 0196 5A68     	 ldr r2,[r3,#4]
 2979 0198 FB68     	 ldr r3,[r7,#12]
 2980 019a 1B69     	 ldr r3,[r3,#16]
 2981 019c 1046     	 mov r0,r2
 2982 019e 1946     	 mov r1,r3
 2983 01a0 FFF7FEFF 	 bl XMC_CCU8_EnableShadowTransfer
 863:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 864:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****             handle_ptr->asym_duty = duty_cycle;
 2984              	 .loc 2 864 0
 2985 01a4 FB68     	 ldr r3,[r7,#12]
 2986 01a6 3A68     	 ldr r2,[r7]
 2987 01a8 DA62     	 str r2,[r3,#44]
 865:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****             handle_ptr->asym_shift = shift;
 2988              	 .loc 2 865 0
 2989 01aa FB68     	 ldr r3,[r7,#12]
 2990 01ac 7A68     	 ldr r2,[r7,#4]
 2991 01ae 1A63     	 str r2,[r3,#48]
 866:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 867:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****             XMC_DEBUG("PWM_CCU8_SetFreqAndDutyCycleAsymmetric:frequency and duty set edge aligned m
 868:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****             status = PWM_CCU8_STATUS_SUCCESS;
 2992              	 .loc 2 868 0
 2993 01b0 0023     	 movs r3,#0
 2994 01b2 87F82730 	 strb r3,[r7,#39]
 2995              	.L101:
 869:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****           }
 870:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 871:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****         }
 872:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****       }
 873:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****     }
 874:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   }
 875:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   return (status);
 2996              	 .loc 2 875 0
 2997 01b6 97F82730 	 ldrb r3,[r7,#39]
 876:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** }/* end of PWM_CCU8_SetFreqAndDutyCycleAsymmetric() api */
 2998              	 .loc 2 876 0
 2999 01ba 1846     	 mov r0,r3
 3000 01bc 2837     	 adds r7,r7,#40
 3001              	.LCFI152:
 3002              	 .cfi_def_cfa_offset 8
 3003 01be BD46     	 mov sp,r7
 3004              	.LCFI153:
 3005              	 .cfi_def_cfa_register 13
 3006              	 
 3007 01c0 80BD     	 pop {r7,pc}
 3008              	.L106:
 3009 01c2 00BF     	 .align 2
 3010              	.L105:
 3011 01c4 5917B7D1 	 .word -776530087
 3012              	 .cfi_endproc
 3013              	.LFE222:
 3015              	 .section .text.PWM_CCU8_SetDither,"ax",%progbits
 3016              	 .align 2
 3017              	 .global PWM_CCU8_SetDither
 3018              	 .thumb
 3019              	 .thumb_func
 3021              	PWM_CCU8_SetDither:
 3022              	.LFB223:
 877:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 878:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** /**************************************************************************************************
 879:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 880:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** /*Sets the dither value, enables the dither. */
 881:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** void PWM_CCU8_SetDither(PWM_CCU8_t* handle_ptr, bool dither_period, bool dither_comp, uint8_t dithe
 882:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** {
 3023              	 .loc 2 882 0
 3024              	 .cfi_startproc
 3025              	 
 3026              	 
 3027 0000 80B5     	 push {r7,lr}
 3028              	.LCFI154:
 3029              	 .cfi_def_cfa_offset 8
 3030              	 .cfi_offset 7,-8
 3031              	 .cfi_offset 14,-4
 3032 0002 82B0     	 sub sp,sp,#8
 3033              	.LCFI155:
 3034              	 .cfi_def_cfa_offset 16
 3035 0004 00AF     	 add r7,sp,#0
 3036              	.LCFI156:
 3037              	 .cfi_def_cfa_register 7
 3038 0006 7860     	 str r0,[r7,#4]
 3039 0008 0846     	 mov r0,r1
 3040 000a 1146     	 mov r1,r2
 3041 000c 1A46     	 mov r2,r3
 3042 000e 0346     	 mov r3,r0
 3043 0010 FB70     	 strb r3,[r7,#3]
 3044 0012 0B46     	 mov r3,r1
 3045 0014 BB70     	 strb r3,[r7,#2]
 3046 0016 1346     	 mov r3,r2
 3047 0018 7B70     	 strb r3,[r7,#1]
 883:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 884:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   XMC_ASSERT("PWM_CCU8_SetDither:handle_ptr NULL", (handle_ptr != NULL));
 885:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   XMC_CCU8_SLICE_EnableDithering(handle_ptr->ccu8_slice_ptr, dither_period, dither_comp, dither_val
 3048              	 .loc 2 885 0
 3049 001a 7B68     	 ldr r3,[r7,#4]
 3050 001c 9868     	 ldr r0,[r3,#8]
 3051 001e F978     	 ldrb r1,[r7,#3]
 3052 0020 BA78     	 ldrb r2,[r7,#2]
 3053 0022 7B78     	 ldrb r3,[r7,#1]
 3054 0024 FFF7FEFF 	 bl XMC_CCU8_SLICE_EnableDithering
 886:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   XMC_CCU8_EnableShadowTransfer(handle_ptr->ccu8_module_ptr, handle_ptr->dither_shadow_txfr_msk);
 3055              	 .loc 2 886 0
 3056 0028 7B68     	 ldr r3,[r7,#4]
 3057 002a 5A68     	 ldr r2,[r3,#4]
 3058 002c 7B68     	 ldr r3,[r7,#4]
 3059 002e 5B69     	 ldr r3,[r3,#20]
 3060 0030 1046     	 mov r0,r2
 3061 0032 1946     	 mov r1,r3
 3062 0034 FFF7FEFF 	 bl XMC_CCU8_EnableShadowTransfer
 887:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   XMC_DEBUG("PWM_CCU8_SetDither:dither compare value set");
 888:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 889:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** }/* end of PWM_CCU8_SetDither() api */
 3063              	 .loc 2 889 0
 3064 0038 0837     	 adds r7,r7,#8
 3065              	.LCFI157:
 3066              	 .cfi_def_cfa_offset 8
 3067 003a BD46     	 mov sp,r7
 3068              	.LCFI158:
 3069              	 .cfi_def_cfa_register 13
 3070              	 
 3071 003c 80BD     	 pop {r7,pc}
 3072              	 .cfi_endproc
 3073              	.LFE223:
 3075 003e 00BF     	 .section .text.PWM_CCU8_ClearTrap,"ax",%progbits
 3076              	 .align 2
 3077              	 .global PWM_CCU8_ClearTrap
 3078              	 .thumb
 3079              	 .thumb_func
 3081              	PWM_CCU8_ClearTrap:
 3082              	.LFB224:
 890:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 891:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** /*exits trap condition if trap signal is inactive */
 892:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** void PWM_CCU8_ClearTrap(PWM_CCU8_t* handle_ptr)
 893:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** {
 3083              	 .loc 2 893 0
 3084              	 .cfi_startproc
 3085              	 
 3086              	 
 3087 0000 80B5     	 push {r7,lr}
 3088              	.LCFI159:
 3089              	 .cfi_def_cfa_offset 8
 3090              	 .cfi_offset 7,-8
 3091              	 .cfi_offset 14,-4
 3092 0002 82B0     	 sub sp,sp,#8
 3093              	.LCFI160:
 3094              	 .cfi_def_cfa_offset 16
 3095 0004 00AF     	 add r7,sp,#0
 3096              	.LCFI161:
 3097              	 .cfi_def_cfa_register 7
 3098 0006 7860     	 str r0,[r7,#4]
 894:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 895:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   XMC_ASSERT("PWM_CCU8_ClearTrap:handle_ptr NULL", (handle_ptr != NULL));
 896:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   XMC_CCU8_SLICE_ClearEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT2);
 3099              	 .loc 2 896 0
 3100 0008 7B68     	 ldr r3,[r7,#4]
 3101 000a 9B68     	 ldr r3,[r3,#8]
 3102 000c 1846     	 mov r0,r3
 3103 000e 0A21     	 movs r1,#10
 3104 0010 FFF7FEFF 	 bl XMC_CCU8_SLICE_ClearEvent
 897:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   XMC_DEBUG("PWM_CCU8_ClearTrap:trap event cleared");
 898:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 899:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** }/* end of PWM_CCU8_ClearTrap() api */
 3105              	 .loc 2 899 0
 3106 0014 0837     	 adds r7,r7,#8
 3107              	.LCFI162:
 3108              	 .cfi_def_cfa_offset 8
 3109 0016 BD46     	 mov sp,r7
 3110              	.LCFI163:
 3111              	 .cfi_def_cfa_register 13
 3112              	 
 3113 0018 80BD     	 pop {r7,pc}
 3114              	 .cfi_endproc
 3115              	.LFE224:
 3117 001a 00BF     	 .section .text.PWM_CCU8_SetDeadTime,"ax",%progbits
 3118              	 .align 2
 3119              	 .global PWM_CCU8_SetDeadTime
 3120              	 .thumb
 3121              	 .thumb_func
 3123              	PWM_CCU8_SetDeadTime:
 3124              	.LFB225:
 900:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 901:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** /*Sets the dead time*/
 902:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** void PWM_CCU8_SetDeadTime(PWM_CCU8_t* handle_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel, uint8_t
 903:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****                           uint8_t fall_value)
 904:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** {
 3125              	 .loc 2 904 0
 3126              	 .cfi_startproc
 3127              	 
 3128              	 
 3129 0000 80B5     	 push {r7,lr}
 3130              	.LCFI164:
 3131              	 .cfi_def_cfa_offset 8
 3132              	 .cfi_offset 7,-8
 3133              	 .cfi_offset 14,-4
 3134 0002 82B0     	 sub sp,sp,#8
 3135              	.LCFI165:
 3136              	 .cfi_def_cfa_offset 16
 3137 0004 00AF     	 add r7,sp,#0
 3138              	.LCFI166:
 3139              	 .cfi_def_cfa_register 7
 3140 0006 7860     	 str r0,[r7,#4]
 3141 0008 0846     	 mov r0,r1
 3142 000a 1146     	 mov r1,r2
 3143 000c 1A46     	 mov r2,r3
 3144 000e 0346     	 mov r3,r0
 3145 0010 FB70     	 strb r3,[r7,#3]
 3146 0012 0B46     	 mov r3,r1
 3147 0014 BB70     	 strb r3,[r7,#2]
 3148 0016 1346     	 mov r3,r2
 3149 0018 7B70     	 strb r3,[r7,#1]
 905:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   XMC_ASSERT("PWM_CCU8_SetDeadTime:handle_ptr NULL", (handle_ptr != NULL));
 906:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   XMC_CCU8_SLICE_SetDeadTimeValue(handle_ptr->ccu8_slice_ptr, channel, rise_value, fall_value);
 3150              	 .loc 2 906 0
 3151 001a 7B68     	 ldr r3,[r7,#4]
 3152 001c 9868     	 ldr r0,[r3,#8]
 3153 001e F978     	 ldrb r1,[r7,#3]
 3154 0020 BA78     	 ldrb r2,[r7,#2]
 3155 0022 7B78     	 ldrb r3,[r7,#1]
 3156 0024 FFF7FEFF 	 bl XMC_CCU8_SLICE_SetDeadTimeValue
 907:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   XMC_DEBUG("PWM_CCU8_SetDeadTime:dead time set");
 908:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** }/* end of PWM_CCU8_SetDeadTime() api */
 3157              	 .loc 2 908 0
 3158 0028 0837     	 adds r7,r7,#8
 3159              	.LCFI167:
 3160              	 .cfi_def_cfa_offset 8
 3161 002a BD46     	 mov sp,r7
 3162              	.LCFI168:
 3163              	 .cfi_def_cfa_register 13
 3164              	 
 3165 002c 80BD     	 pop {r7,pc}
 3166              	 .cfi_endproc
 3167              	.LFE225:
 3169 002e 00BF     	 .section .text.PWM_CCU8_GetInterruptStatus,"ax",%progbits
 3170              	 .align 2
 3171              	 .global PWM_CCU8_GetInterruptStatus
 3172              	 .thumb
 3173              	 .thumb_func
 3175              	PWM_CCU8_GetInterruptStatus:
 3176              	.LFB226:
 909:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 910:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** /*Gets the interrupt status of  CCU8_CC8 slice. */
 911:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** bool PWM_CCU8_GetInterruptStatus(PWM_CCU8_t* handle_ptr, XMC_CCU8_SLICE_IRQ_ID_t pwm_interrupt)
 912:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** {
 3177              	 .loc 2 912 0
 3178              	 .cfi_startproc
 3179              	 
 3180              	 
 3181 0000 80B5     	 push {r7,lr}
 3182              	.LCFI169:
 3183              	 .cfi_def_cfa_offset 8
 3184              	 .cfi_offset 7,-8
 3185              	 .cfi_offset 14,-4
 3186 0002 84B0     	 sub sp,sp,#16
 3187              	.LCFI170:
 3188              	 .cfi_def_cfa_offset 24
 3189 0004 00AF     	 add r7,sp,#0
 3190              	.LCFI171:
 3191              	 .cfi_def_cfa_register 7
 3192 0006 7860     	 str r0,[r7,#4]
 3193 0008 0B46     	 mov r3,r1
 3194 000a FB70     	 strb r3,[r7,#3]
 913:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   bool status = (bool) false;
 3195              	 .loc 2 913 0
 3196 000c 0023     	 movs r3,#0
 3197 000e FB73     	 strb r3,[r7,#15]
 914:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   XMC_ASSERT("PWM_CCU8_GetInterruptStatus:handle_ptr NULL", (handle_ptr != NULL));
 915:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   status = XMC_CCU8_SLICE_GetEvent(handle_ptr->ccu8_slice_ptr, pwm_interrupt);
 3198              	 .loc 2 915 0
 3199 0010 7B68     	 ldr r3,[r7,#4]
 3200 0012 9A68     	 ldr r2,[r3,#8]
 3201 0014 FB78     	 ldrb r3,[r7,#3]
 3202 0016 1046     	 mov r0,r2
 3203 0018 1946     	 mov r1,r3
 3204 001a FFF7FEFF 	 bl XMC_CCU8_SLICE_GetEvent
 3205 001e 0346     	 mov r3,r0
 3206 0020 FB73     	 strb r3,[r7,#15]
 916:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   return (status);
 3207              	 .loc 2 916 0
 3208 0022 FB7B     	 ldrb r3,[r7,#15]
 917:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** } /* end of PWM_CCU8_GetInterruptStatus() api */
 3209              	 .loc 2 917 0
 3210 0024 1846     	 mov r0,r3
 3211 0026 1037     	 adds r7,r7,#16
 3212              	.LCFI172:
 3213              	 .cfi_def_cfa_offset 8
 3214 0028 BD46     	 mov sp,r7
 3215              	.LCFI173:
 3216              	 .cfi_def_cfa_register 13
 3217              	 
 3218 002a 80BD     	 pop {r7,pc}
 3219              	 .cfi_endproc
 3220              	.LFE226:
 3222              	 .section .text.PWM_CCU8_ClearEvent,"ax",%progbits
 3223              	 .align 2
 3224              	 .global PWM_CCU8_ClearEvent
 3225              	 .thumb
 3226              	 .thumb_func
 3228              	PWM_CCU8_ClearEvent:
 3229              	.LFB227:
 918:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** 
 919:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** /*Acknowledges the interrupt of  CCU8_CC8 slice. */
 920:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** void PWM_CCU8_ClearEvent(PWM_CCU8_t* handle_ptr, XMC_CCU8_SLICE_IRQ_ID_t pwm_interrupt)
 921:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** {
 3230              	 .loc 2 921 0
 3231              	 .cfi_startproc
 3232              	 
 3233              	 
 3234 0000 80B5     	 push {r7,lr}
 3235              	.LCFI174:
 3236              	 .cfi_def_cfa_offset 8
 3237              	 .cfi_offset 7,-8
 3238              	 .cfi_offset 14,-4
 3239 0002 82B0     	 sub sp,sp,#8
 3240              	.LCFI175:
 3241              	 .cfi_def_cfa_offset 16
 3242 0004 00AF     	 add r7,sp,#0
 3243              	.LCFI176:
 3244              	 .cfi_def_cfa_register 7
 3245 0006 7860     	 str r0,[r7,#4]
 3246 0008 0B46     	 mov r3,r1
 3247 000a FB70     	 strb r3,[r7,#3]
 922:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   XMC_ASSERT("PWM_CCU8_ClearEvent:handle_ptr NULL", (handle_ptr != NULL));
 923:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   XMC_CCU8_SLICE_ClearEvent(handle_ptr->ccu8_slice_ptr, pwm_interrupt);
 3248              	 .loc 2 923 0
 3249 000c 7B68     	 ldr r3,[r7,#4]
 3250 000e 9A68     	 ldr r2,[r3,#8]
 3251 0010 FB78     	 ldrb r3,[r7,#3]
 3252 0012 1046     	 mov r0,r2
 3253 0014 1946     	 mov r1,r3
 3254 0016 FFF7FEFF 	 bl XMC_CCU8_SLICE_ClearEvent
 924:../Dave/Generated/PWM_CCU8/pwm_ccu8.c ****   XMC_DEBUG("PWM_CCU8_ClearEvent:Acknowledge Interrupt");
 925:../Dave/Generated/PWM_CCU8/pwm_ccu8.c **** } /* end of PWM_CCU8_ClearEvent() api */
 3255              	 .loc 2 925 0
 3256 001a 0837     	 adds r7,r7,#8
 3257              	.LCFI177:
 3258              	 .cfi_def_cfa_offset 8
 3259 001c BD46     	 mov sp,r7
 3260              	.LCFI178:
 3261              	 .cfi_def_cfa_register 13
 3262              	 
 3263 001e 80BD     	 pop {r7,pc}
 3264              	 .cfi_endproc
 3265              	.LFE227:
 3267              	 .text
 3268              	.Letext0:
 3269              	 .file 3 "d:\\dave-4.1.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 3270              	 .file 4 "d:\\dave-4.1.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 3271              	 .file 5 "D:\\Naukowe\\BLDC_workspace\\PWM_from_ex/Libraries/CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 3272              	 .file 6 "D:\\Naukowe\\BLDC_workspace\\PWM_from_ex\\Libraries\\XMCLib\\inc/xmc_gpio.h"
 3273              	 .file 7 "D:\\Naukowe\\BLDC_workspace\\PWM_from_ex\\Libraries\\XMCLib\\inc/xmc4_gpio.h"
 3274              	 .file 8 "D:\\Naukowe\\BLDC_workspace\\PWM_from_ex\\Libraries\\XMCLib\\inc/xmc4_scu.h"
 3275              	 .file 9 "D:\\Naukowe\\BLDC_workspace\\PWM_from_ex\\Dave\\Generated/DAVE_Common.h"
 3276              	 .file 10 "../Dave/Generated/PWM_CCU8/../GLOBAL_CCU8/global_ccu8.h"
 3277              	 .file 11 "../Dave/Generated/PWM_CCU8/pwm_ccu8.h"
 3278              	 .file 12 "D:\\Naukowe\\BLDC_workspace\\PWM_from_ex/Libraries/CMSIS/Include/core_cm4.h"
 3279              	 .file 13 "D:\\Naukowe\\BLDC_workspace\\PWM_from_ex/Libraries/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
DEFINED SYMBOLS
                            *ABS*:00000000 pwm_ccu8.c
    {standard input}:20     .text.XMC_CCU8_EnableClock:00000000 $t
    {standard input}:24     .text.XMC_CCU8_EnableClock:00000000 XMC_CCU8_EnableClock
    {standard input}:71     .text.XMC_CCU8_DisableClock:00000000 $t
    {standard input}:75     .text.XMC_CCU8_DisableClock:00000000 XMC_CCU8_DisableClock
    {standard input}:121    .text.XMC_CCU8_SLICE_EnableTrap:00000000 $t
    {standard input}:125    .text.XMC_CCU8_SLICE_EnableTrap:00000000 XMC_CCU8_SLICE_EnableTrap
    {standard input}:169    .text.XMC_CCU8_SLICE_IsTimerRunning:00000000 $t
    {standard input}:173    .text.XMC_CCU8_SLICE_IsTimerRunning:00000000 XMC_CCU8_SLICE_IsTimerRunning
    {standard input}:218    .text.XMC_CCU8_SLICE_StartTimer:00000000 $t
    {standard input}:222    .text.XMC_CCU8_SLICE_StartTimer:00000000 XMC_CCU8_SLICE_StartTimer
    {standard input}:261    .text.XMC_CCU8_SLICE_StopTimer:00000000 $t
    {standard input}:265    .text.XMC_CCU8_SLICE_StopTimer:00000000 XMC_CCU8_SLICE_StopTimer
    {standard input}:306    .text.XMC_CCU8_SLICE_ClearTimer:00000000 $t
    {standard input}:310    .text.XMC_CCU8_SLICE_ClearTimer:00000000 XMC_CCU8_SLICE_ClearTimer
    {standard input}:351    .text.XMC_CCU8_SLICE_GetTimerPeriodMatch:00000000 $t
    {standard input}:355    .text.XMC_CCU8_SLICE_GetTimerPeriodMatch:00000000 XMC_CCU8_SLICE_GetTimerPeriodMatch
    {standard input}:395    .text.XMC_CCU8_EnableShadowTransfer:00000000 $t
    {standard input}:399    .text.XMC_CCU8_EnableShadowTransfer:00000000 XMC_CCU8_EnableShadowTransfer
    {standard input}:442    .text.XMC_CCU8_SLICE_GetTimerValue:00000000 $t
    {standard input}:446    .text.XMC_CCU8_SLICE_GetTimerValue:00000000 XMC_CCU8_SLICE_GetTimerValue
    {standard input}:486    .text.XMC_CCU8_SLICE_EnableEvent:00000000 $t
    {standard input}:490    .text.XMC_CCU8_SLICE_EnableEvent:00000000 XMC_CCU8_SLICE_EnableEvent
    {standard input}:536    .text.XMC_CCU8_SLICE_ClearEvent:00000000 $t
    {standard input}:540    .text.XMC_CCU8_SLICE_ClearEvent:00000000 XMC_CCU8_SLICE_ClearEvent
    {standard input}:586    .text.XMC_CCU8_SLICE_GetEvent:00000000 $t
    {standard input}:590    .text.XMC_CCU8_SLICE_GetEvent:00000000 XMC_CCU8_SLICE_GetEvent
    {standard input}:639    .text.PWM_CCU8_GetAppVersion:00000000 $t
    {standard input}:644    .text.PWM_CCU8_GetAppVersion:00000000 PWM_CCU8_GetAppVersion
    {standard input}:705    .text.PWM_CCU8_Init:00000000 $t
    {standard input}:710    .text.PWM_CCU8_Init:00000000 PWM_CCU8_Init
    {standard input}:1319   .text.PWM_CCU8_lConfigure_Events:00000000 PWM_CCU8_lConfigure_Events
    {standard input}:932    .text.PWM_CCU8_lInit_Interrupt:00000000 PWM_CCU8_lInit_Interrupt
    {standard input}:1192   .text.PWM_CCU8_lInit_GPIO:00000000 PWM_CCU8_lInit_GPIO
    {standard input}:1605   .text.PWM_CCU8_Start:00000000 PWM_CCU8_Start
    {standard input}:928    .text.PWM_CCU8_lInit_Interrupt:00000000 $t
    {standard input}:1188   .text.PWM_CCU8_lInit_GPIO:00000000 $t
    {standard input}:1315   .text.PWM_CCU8_lConfigure_Events:00000000 $t
    {standard input}:1600   .text.PWM_CCU8_Start:00000000 $t
    {standard input}:1681   .text.PWM_CCU8_Stop:00000000 $t
    {standard input}:1686   .text.PWM_CCU8_Stop:00000000 PWM_CCU8_Stop
    {standard input}:1754   .text.PWM_CCU8_GetTimerValue:00000000 $t
    {standard input}:1759   .text.PWM_CCU8_GetTimerValue:00000000 PWM_CCU8_GetTimerValue
    {standard input}:1800   .text.PWM_CCU8_GetTimerStatus:00000000 $t
    {standard input}:1805   .text.PWM_CCU8_GetTimerStatus:00000000 PWM_CCU8_GetTimerStatus
    {standard input}:1846   .text.PWM_CCU8_SetFreqSymmetric:00000000 $t
    {standard input}:1851   .text.PWM_CCU8_SetFreqSymmetric:00000000 PWM_CCU8_SetFreqSymmetric
    {standard input}:2015   .text.PWM_CCU8_SetFreqSymmetric:000000fc $d
    {standard input}:2020   .text.PWM_CCU8_SetDutyCycleSymmetric:00000000 $t
    {standard input}:2025   .text.PWM_CCU8_SetDutyCycleSymmetric:00000000 PWM_CCU8_SetDutyCycleSymmetric
    {standard input}:2129   .text.PWM_CCU8_SetDutyCycleSymmetric:00000094 $d
    {standard input}:2134   .text.PWM_CCU8_SetFreqAndDutyCycleSymmetric:00000000 $t
    {standard input}:2139   .text.PWM_CCU8_SetFreqAndDutyCycleSymmetric:00000000 PWM_CCU8_SetFreqAndDutyCycleSymmetric
    {standard input}:2299   .text.PWM_CCU8_SetFreqAndDutyCycleSymmetric:00000108 $d
    {standard input}:2304   .text.PWM_CCU8_SetFreqAsymmetric:00000000 $t
    {standard input}:2309   .text.PWM_CCU8_SetFreqAsymmetric:00000000 PWM_CCU8_SetFreqAsymmetric
    {standard input}:2533   .text.PWM_CCU8_SetFreqAsymmetric:00000188 $d
    {standard input}:2538   .text.PWM_CCU8_SetDutyCycleAsymmetric:00000000 $t
    {standard input}:2543   .text.PWM_CCU8_SetDutyCycleAsymmetric:00000000 PWM_CCU8_SetDutyCycleAsymmetric
    {standard input}:2752   .text.PWM_CCU8_SetDutyCycleAsymmetric:00000170 $d
    {standard input}:2757   .text.PWM_CCU8_SetFreqAndDutyCycleAsymmetric:00000000 $t
    {standard input}:2762   .text.PWM_CCU8_SetFreqAndDutyCycleAsymmetric:00000000 PWM_CCU8_SetFreqAndDutyCycleAsymmetric
    {standard input}:3011   .text.PWM_CCU8_SetFreqAndDutyCycleAsymmetric:000001c4 $d
    {standard input}:3016   .text.PWM_CCU8_SetDither:00000000 $t
    {standard input}:3021   .text.PWM_CCU8_SetDither:00000000 PWM_CCU8_SetDither
    {standard input}:3076   .text.PWM_CCU8_ClearTrap:00000000 $t
    {standard input}:3081   .text.PWM_CCU8_ClearTrap:00000000 PWM_CCU8_ClearTrap
    {standard input}:3118   .text.PWM_CCU8_SetDeadTime:00000000 $t
    {standard input}:3123   .text.PWM_CCU8_SetDeadTime:00000000 PWM_CCU8_SetDeadTime
    {standard input}:3170   .text.PWM_CCU8_GetInterruptStatus:00000000 $t
    {standard input}:3175   .text.PWM_CCU8_GetInterruptStatus:00000000 PWM_CCU8_GetInterruptStatus
    {standard input}:3223   .text.PWM_CCU8_ClearEvent:00000000 $t
    {standard input}:3228   .text.PWM_CCU8_ClearEvent:00000000 PWM_CCU8_ClearEvent
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
GLOBAL_CCU8_Init
XMC_CCU8_SLICE_CompareInit
XMC_CCU8_SLICE_SetTimerPeriodMatch
XMC_CCU8_SLICE_SetTimerCompareMatch
XMC_CCU8_SetMultiChannelShadowTransferMode
XMC_CCU8_SLICE_DeadTimeInit
XMC_CCU8_SLICE_SetInterruptNode
XMC_GPIO_Init
XMC_CCU8_SLICE_ConfigureEvent
XMC_CCU8_SLICE_StartConfig
XMC_CCU8_SLICE_StopConfig
XMC_CCU8_SLICE_DirectionConfig
XMC_CCU8_SLICE_GateConfig
XMC_CCU8_SLICE_CountConfig
XMC_CCU8_SLICE_LoadConfig
XMC_CCU8_SLICE_LoadSelector
XMC_CCU8_SLICE_ModulationConfig
XMC_CCU8_SLICE_TrapConfig
XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent
XMC_CCU8_SLICE_StatusBitOverrideConfig
XMC_CCU8_SLICE_EnableDithering
XMC_CCU8_SLICE_SetDeadTimeValue
