
PWM_from_ex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003edc  08000000  0c000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000660  08003edc  0c003edc  0000bedc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 Stack         00000800  10000000  10000000  00018000  2**0
                  ALLOC
  3 .data         000000bc  20000000  0c004540  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000134  200000bc  0c0045fc  000100bc  2**2
                  ALLOC
  5 .no_init      00000014  2000ffc0  0c014500  00017fc0  2**2
                  ALLOC
  6 .debug_aranges 000009f8  00000000  00000000  000100c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000ed60  00000000  00000000  00010ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000207a  00000000  00000000  0001f818  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000417b  00000000  00000000  00021892  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00002a1c  00000000  00000000  00025a10  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00006c52  00000000  00000000  0002842c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005312  00000000  00000000  0002f07e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000878  00000000  00000000  00034390  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .build_attributes 000006cb  00000000  00000000  00034c08  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	85 18 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 71 29 00 08 b1 02 00 08 b1 02 00 08     ....q)..........
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */

 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>
	.align	1
    .thumb

 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)
/* Reset Handler */
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c004540 	.word	0x0c004540
 800024c:	20000000 	.word	0x20000000
 8000250:	000000bc 	.word	0x000000bc
 8000254:	0c0045fc 	.word	0x0c0045fc
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c004540 	.word	0x0c004540
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c004540 	.word	0x0c004540
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	200000bc 	.word	0x200000bc
 800027c:	00000134 	.word	0x00000134
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */

 8000290:	10000800 	.word	0x10000800
	.align	1
    .thumb

 8000294:	080002b5 	.word	0x080002b5
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 80002a8:	08003e91 	.word	0x08003e91
    blx  r0
#endif

    ldr  r0, =main
 80002ac:	08002439 	.word	0x08002439

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 80002b4:	b598      	push	{r3, r4, r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002b8:	4a05      	ldr	r2, [pc, #20]	; (80002d0 <SystemInit+0x1c>)
 80002ba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002be:	4614      	mov	r4, r2
 80002c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80002c6:	f001 ffc9 	bl	800225c <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80002ca:	f002 f821 	bl	8002310 <SystemCoreClockSetup>
}
 80002ce:	bd98      	pop	{r3, r4, r7, pc}
 80002d0:	2000ffc4 	.word	0x2000ffc4

080002d4 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002da:	4b2f      	ldr	r3, [pc, #188]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 80002dc:	68db      	ldr	r3, [r3, #12]
 80002de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d03e      	beq.n	8000364 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002e6:	4b2d      	ldr	r3, [pc, #180]	; (800039c <SystemCoreClockUpdate+0xc8>)
 80002e8:	68db      	ldr	r3, [r3, #12]
 80002ea:	f003 0301 	and.w	r3, r3, #1
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d002      	beq.n	80002f8 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002f2:	4b2b      	ldr	r3, [pc, #172]	; (80003a0 <SystemCoreClockUpdate+0xcc>)
 80002f4:	60fb      	str	r3, [r7, #12]
 80002f6:	e002      	b.n	80002fe <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002f8:	f002 f800 	bl	80022fc <OSCHP_GetFrequency>
 80002fc:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002fe:	4b27      	ldr	r3, [pc, #156]	; (800039c <SystemCoreClockUpdate+0xc8>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f003 0304 	and.w	r3, r3, #4
 8000306:	2b00      	cmp	r3, #0
 8000308:	d020      	beq.n	800034c <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 800030a:	4b24      	ldr	r3, [pc, #144]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800030c:	689b      	ldr	r3, [r3, #8]
 800030e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000312:	0e1b      	lsrs	r3, r3, #24
 8000314:	3301      	adds	r3, #1
 8000316:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000318:	4b20      	ldr	r3, [pc, #128]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000320:	0a1b      	lsrs	r3, r3, #8
 8000322:	3301      	adds	r3, #1
 8000324:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8000326:	4b1d      	ldr	r3, [pc, #116]	; (800039c <SystemCoreClockUpdate+0xc8>)
 8000328:	689b      	ldr	r3, [r3, #8]
 800032a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800032e:	0c1b      	lsrs	r3, r3, #16
 8000330:	3301      	adds	r3, #1
 8000332:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	683a      	ldr	r2, [r7, #0]
 8000338:	fb02 f303 	mul.w	r3, r2, r3
 800033c:	68fa      	ldr	r2, [r7, #12]
 800033e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	fb02 f303 	mul.w	r3, r2, r3
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	e00d      	b.n	8000368 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 800034c:	4b13      	ldr	r3, [pc, #76]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800034e:	689b      	ldr	r3, [r3, #8]
 8000350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000354:	3301      	adds	r3, #1
 8000356:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8000358:	68fa      	ldr	r2, [r7, #12]
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000360:	60fb      	str	r3, [r7, #12]
 8000362:	e001      	b.n	8000368 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8000364:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <SystemCoreClockUpdate+0xcc>)
 8000366:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000368:	4b0b      	ldr	r3, [pc, #44]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 800036a:	68db      	ldr	r3, [r3, #12]
 800036c:	b2db      	uxtb	r3, r3
 800036e:	3301      	adds	r3, #1
 8000370:	68fa      	ldr	r2, [r7, #12]
 8000372:	fbb2 f3f3 	udiv	r3, r2, r3
 8000376:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000378:	4b07      	ldr	r3, [pc, #28]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 800037a:	691b      	ldr	r3, [r3, #16]
 800037c:	f003 0301 	and.w	r3, r3, #1
 8000380:	3301      	adds	r3, #1
 8000382:	68fa      	ldr	r2, [r7, #12]
 8000384:	fbb2 f3f3 	udiv	r3, r2, r3
 8000388:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 800038a:	4a06      	ldr	r2, [pc, #24]	; (80003a4 <SystemCoreClockUpdate+0xd0>)
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	6013      	str	r3, [r2, #0]
}
 8000390:	3710      	adds	r7, #16
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	50004600 	.word	0x50004600
 800039c:	50004710 	.word	0x50004710
 80003a0:	016e3600 	.word	0x016e3600
 80003a4:	2000ffc0 	.word	0x2000ffc0

080003a8 <XMC_ERU_Enable>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* Enable the clock and De-assert the ERU module from the reset state. */
void XMC_ERU_Enable(XMC_ERU_t *const eru)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
#if defined(XMC_ERU1)
  if (eru == XMC_ERU1)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	4a05      	ldr	r2, [pc, #20]	; (80003c8 <XMC_ERU_Enable+0x20>)
 80003b4:	4293      	cmp	r3, r2
 80003b6:	d103      	bne.n	80003c0 <XMC_ERU_Enable+0x18>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_ERU1);
#endif
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_ERU1);
 80003b8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80003bc:	f000 f926 	bl	800060c <XMC_SCU_RESET_DeassertPeripheralReset>
  }
#else
  XMC_UNUSED_ARG(eru);
  #endif
}
 80003c0:	3708      	adds	r7, #8
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	40044000 	.word	0x40044000

080003cc <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b085      	sub	sp, #20
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	60f8      	str	r0, [r7, #12]
 80003d4:	460b      	mov	r3, r1
 80003d6:	607a      	str	r2, [r7, #4]
 80003d8:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 80003da:	7afb      	ldrb	r3, [r7, #11]
 80003dc:	089b      	lsrs	r3, r3, #2
 80003de:	b2db      	uxtb	r3, r3
 80003e0:	4618      	mov	r0, r3
 80003e2:	7afb      	ldrb	r3, [r7, #11]
 80003e4:	089b      	lsrs	r3, r3, #2
 80003e6:	b2db      	uxtb	r3, r3
 80003e8:	461a      	mov	r2, r3
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	3204      	adds	r2, #4
 80003ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003f2:	7afb      	ldrb	r3, [r7, #11]
 80003f4:	f003 0303 	and.w	r3, r3, #3
 80003f8:	00db      	lsls	r3, r3, #3
 80003fa:	4619      	mov	r1, r3
 80003fc:	23f8      	movs	r3, #248	; 0xf8
 80003fe:	408b      	lsls	r3, r1
 8000400:	43db      	mvns	r3, r3
 8000402:	ea02 0103 	and.w	r1, r2, r3
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	1d02      	adds	r2, r0, #4
 800040a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000412:	7afb      	ldrb	r3, [r7, #11]
 8000414:	005b      	lsls	r3, r3, #1
 8000416:	4619      	mov	r1, r3
 8000418:	2303      	movs	r3, #3
 800041a:	408b      	lsls	r3, r1
 800041c:	43db      	mvns	r3, r3
 800041e:	401a      	ands	r2, r3
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	4a37      	ldr	r2, [pc, #220]	; (8000504 <XMC_GPIO_Init+0x138>)
 8000428:	4293      	cmp	r3, r2
 800042a:	d003      	beq.n	8000434 <XMC_GPIO_Init+0x68>
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	4a36      	ldr	r2, [pc, #216]	; (8000508 <XMC_GPIO_Init+0x13c>)
 8000430:	4293      	cmp	r3, r2
 8000432:	d10a      	bne.n	800044a <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000438:	7afb      	ldrb	r3, [r7, #11]
 800043a:	2101      	movs	r1, #1
 800043c:	fa01 f303 	lsl.w	r3, r1, r3
 8000440:	43db      	mvns	r3, r3
 8000442:	401a      	ands	r2, r3
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	661a      	str	r2, [r3, #96]	; 0x60
 8000448:	e03c      	b.n	80004c4 <XMC_GPIO_Init+0xf8>
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	685a      	ldr	r2, [r3, #4]
 800044e:	7afb      	ldrb	r3, [r7, #11]
 8000450:	409a      	lsls	r2, r3
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	605a      	str	r2, [r3, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8000456:	7afb      	ldrb	r3, [r7, #11]
 8000458:	08db      	lsrs	r3, r3, #3
 800045a:	b2db      	uxtb	r3, r3
 800045c:	4618      	mov	r0, r3
 800045e:	7afb      	ldrb	r3, [r7, #11]
 8000460:	08db      	lsrs	r3, r3, #3
 8000462:	b2db      	uxtb	r3, r3
 8000464:	461a      	mov	r2, r3
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	3210      	adds	r2, #16
 800046a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800046e:	7afb      	ldrb	r3, [r7, #11]
 8000470:	f003 0307 	and.w	r3, r3, #7
 8000474:	009b      	lsls	r3, r3, #2
 8000476:	4619      	mov	r1, r3
 8000478:	2307      	movs	r3, #7
 800047a:	408b      	lsls	r3, r1
 800047c:	43db      	mvns	r3, r3
 800047e:	ea02 0103 	and.w	r1, r2, r3
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	f100 0210 	add.w	r2, r0, #16
 8000488:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 800048c:	7afb      	ldrb	r3, [r7, #11]
 800048e:	08db      	lsrs	r3, r3, #3
 8000490:	b2db      	uxtb	r3, r3
 8000492:	4618      	mov	r0, r3
 8000494:	7afb      	ldrb	r3, [r7, #11]
 8000496:	08db      	lsrs	r3, r3, #3
 8000498:	b2db      	uxtb	r3, r3
 800049a:	461a      	mov	r2, r3
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	3210      	adds	r2, #16
 80004a0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	7a1b      	ldrb	r3, [r3, #8]
 80004a8:	4619      	mov	r1, r3
 80004aa:	7afb      	ldrb	r3, [r7, #11]
 80004ac:	f003 0307 	and.w	r3, r3, #7
 80004b0:	009b      	lsls	r3, r3, #2
 80004b2:	fa01 f303 	lsl.w	r3, r1, r3
 80004b6:	ea42 0103 	orr.w	r1, r2, r3
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	f100 0210 	add.w	r2, r0, #16
 80004c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80004c4:	7afb      	ldrb	r3, [r7, #11]
 80004c6:	089b      	lsrs	r3, r3, #2
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	4618      	mov	r0, r3
 80004cc:	7afb      	ldrb	r3, [r7, #11]
 80004ce:	089b      	lsrs	r3, r3, #2
 80004d0:	b2db      	uxtb	r3, r3
 80004d2:	461a      	mov	r2, r3
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	3204      	adds	r2, #4
 80004d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	4619      	mov	r1, r3
 80004e2:	7afb      	ldrb	r3, [r7, #11]
 80004e4:	f003 0303 	and.w	r3, r3, #3
 80004e8:	00db      	lsls	r3, r3, #3
 80004ea:	fa01 f303 	lsl.w	r3, r1, r3
 80004ee:	ea42 0103 	orr.w	r1, r2, r3
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	1d02      	adds	r2, r0, #4
 80004f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80004fa:	3714      	adds	r7, #20
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr
 8000504:	48028e00 	.word	0x48028e00
 8000508:	48028f00 	.word	0x48028f00

0800050c <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_SCU_lDelay(uint32_t delay)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 8000514:	f7ff fede 	bl	80002d4 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8000518:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <XMC_SCU_lDelay+0x3c>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a0b      	ldr	r2, [pc, #44]	; (800054c <XMC_SCU_lDelay+0x40>)
 800051e:	fba2 2303 	umull	r2, r3, r2, r3
 8000522:	0c9a      	lsrs	r2, r3, #18
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	fb02 f303 	mul.w	r3, r2, r3
 800052a:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 800052c:	2300      	movs	r3, #0
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	e003      	b.n	800053a <XMC_SCU_lDelay+0x2e>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000532:	bf00      	nop
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	3301      	adds	r3, #1
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	68fa      	ldr	r2, [r7, #12]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	429a      	cmp	r2, r3
 8000540:	d3f7      	bcc.n	8000532 <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 8000542:	3710      	adds	r7, #16
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	2000ffc0 	.word	0x2000ffc0
 800054c:	431bde83 	.word	0x431bde83

08000550 <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 8000550:	b5b0      	push	{r4, r5, r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af02      	add	r7, sp, #8
 8000556:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 8000558:	2000      	movs	r0, #0
 800055a:	f000 f875 	bl	8000648 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 800055e:	f000 fa07 	bl	8000970 <XMC_SCU_HIB_EnableHibernateDomain>
  if (config->enable_osculp == true)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	79db      	ldrb	r3, [r3, #7]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <XMC_SCU_CLOCK_Init+0x1e>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 800056a:	f000 fa2b 	bl	80009c4 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
  }
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	7a5b      	ldrb	r3, [r3, #9]
 8000572:	4618      	mov	r0, r3
 8000574:	f000 f8e2 	bl	800073c <XMC_SCU_HIB_SetStandbyClockSource>

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	7a1b      	ldrb	r3, [r3, #8]
 800057c:	4618      	mov	r0, r3
 800057e:	f000 f9d1 	bl	8000924 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	7c1b      	ldrb	r3, [r3, #16]
 8000586:	4618      	mov	r0, r3
 8000588:	f000 f8f6 	bl	8000778 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	7c5b      	ldrb	r3, [r3, #17]
 8000590:	4618      	mov	r0, r3
 8000592:	f000 f919 	bl	80007c8 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	7c9b      	ldrb	r3, [r3, #18]
 800059a:	4618      	mov	r0, r3
 800059c:	f000 f900 	bl	80007a0 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	7cdb      	ldrb	r3, [r3, #19]
 80005a4:	4618      	mov	r0, r3
 80005a6:	f000 f923 	bl	80007f0 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	799b      	ldrb	r3, [r3, #6]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <XMC_SCU_CLOCK_Init+0x66>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 80005b2:	f000 fa41 	bl	8000a38 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	78db      	ldrb	r3, [r3, #3]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d102      	bne.n	80005c4 <XMC_SCU_CLOCK_Init+0x74>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 80005be:	f000 fa7b 	bl	8000ab8 <XMC_SCU_CLOCK_DisableSystemPll>
 80005c2:	e014      	b.n	80005ee <XMC_SCU_CLOCK_Init+0x9e>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 80005c4:	f000 fa68 	bl	8000a98 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	8899      	ldrh	r1, [r3, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80005d4:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80005da:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	4608      	mov	r0, r1
 80005e4:	4611      	mov	r1, r2
 80005e6:	462a      	mov	r2, r5
 80005e8:	4623      	mov	r3, r4
 80005ea:	f000 fa75 	bl	8000ad8 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	68db      	ldr	r3, [r3, #12]
 80005f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80005f6:	d103      	bne.n	8000600 <XMC_SCU_CLOCK_Init+0xb0>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 80005f8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80005fc:	f000 f824 	bl	8000648 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 8000600:	f7ff fe68 	bl	80002d4 <SystemCoreClockUpdate>
}
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bdb0      	pop	{r4, r5, r7, pc}
 800060a:	bf00      	nop

0800060c <XMC_SCU_RESET_DeassertPeripheralReset>:
  *set_peripheral_reset[index] |= (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	0f1b      	lsrs	r3, r3, #28
 8000618:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000620:	60bb      	str	r3, [r7, #8]
  static __O uint32_t *const clear_peripheral_reset[] = {&(SCU_RESET->PRCLR0),
                                                         &(SCU_RESET->PRCLR1),
                                                         &(SCU_RESET->PRCLR2)};
#endif

  *clear_peripheral_reset[index] |= (uint32_t)mask;
 8000622:	4a08      	ldr	r2, [pc, #32]	; (8000644 <XMC_SCU_RESET_DeassertPeripheralReset+0x38>)
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800062a:	4906      	ldr	r1, [pc, #24]	; (8000644 <XMC_SCU_RESET_DeassertPeripheralReset+0x38>)
 800062c:	68fa      	ldr	r2, [r7, #12]
 800062e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000632:	6811      	ldr	r1, [r2, #0]
 8000634:	68ba      	ldr	r2, [r7, #8]
 8000636:	430a      	orrs	r2, r1
 8000638:	601a      	str	r2, [r3, #0]
}
 800063a:	3714      	adds	r7, #20
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	08003edc 	.word	0x08003edc

08000648 <XMC_SCU_CLOCK_SetSystemClockSource>:
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8000650:	4906      	ldr	r1, [pc, #24]	; (800066c <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8000652:	4b06      	ldr	r3, [pc, #24]	; (800066c <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8000654:	68db      	ldr	r3, [r3, #12]
 8000656:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	4313      	orrs	r3, r2
 800065e:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 8000660:	370c      	adds	r7, #12
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	50004600 	.word	0x50004600

08000670 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 8000678:	4906      	ldr	r1, [pc, #24]	; (8000694 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 800067c:	699b      	ldr	r3, [r3, #24]
 800067e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4313      	orrs	r3, r2
 8000686:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	50004600 	.word	0x50004600

08000698 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 80006a0:	4906      	ldr	r1, [pc, #24]	; (80006bc <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 80006a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4313      	orrs	r3, r2
 80006ae:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 80006b0:	370c      	adds	r7, #12
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	50004600 	.word	0x50004600

080006c0 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 80006ca:	88fb      	ldrh	r3, [r7, #6]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d108      	bne.n	80006e2 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80006d0:	4a0a      	ldr	r2, [pc, #40]	; (80006fc <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80006d2:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80006d4:	68db      	ldr	r3, [r3, #12]
 80006d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80006da:	f023 0301 	bic.w	r3, r3, #1
 80006de:	60d3      	str	r3, [r2, #12]
 80006e0:	e007      	b.n	80006f2 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80006e2:	4a06      	ldr	r2, [pc, #24]	; (80006fc <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80006e4:	4b05      	ldr	r3, [pc, #20]	; (80006fc <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80006e6:	68db      	ldr	r3, [r3, #12]
 80006e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	60d3      	str	r3, [r2, #12]
  }
}
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	50004710 	.word	0x50004710

08000700 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800070a:	bf00      	nop
 800070c:	4b09      	ldr	r3, [pc, #36]	; (8000734 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 800070e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000712:	f003 0308 	and.w	r3, r3, #8
 8000716:	2b00      	cmp	r3, #0
 8000718:	d1f8      	bne.n	800070c <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 800071a:	4907      	ldr	r1, [pc, #28]	; (8000738 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 800071e:	68db      	ldr	r3, [r3, #12]
 8000720:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 8000724:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8000726:	4313      	orrs	r3, r2
 8000728:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr
 8000734:	50004000 	.word	0x50004000
 8000738:	50004300 	.word	0x50004300

0800073c <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8000746:	bf00      	nop
 8000748:	4b09      	ldr	r3, [pc, #36]	; (8000770 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 800074a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800074e:	f003 0308 	and.w	r3, r3, #8
 8000752:	2b00      	cmp	r3, #0
 8000754:	d1f8      	bne.n	8000748 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8000756:	4907      	ldr	r1, [pc, #28]	; (8000774 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 800075a:	68db      	ldr	r3, [r3, #12]
 800075c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 8000760:	79fb      	ldrb	r3, [r7, #7]
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8000762:	4313      	orrs	r3, r2
 8000764:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr
 8000770:	50004000 	.word	0x50004000
 8000774:	50004300 	.word	0x50004300

08000778 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000780:	4906      	ldr	r1, [pc, #24]	; (800079c <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8000782:	4b06      	ldr	r3, [pc, #24]	; (800079c <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8000784:	68db      	ldr	r3, [r3, #12]
 8000786:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 800078e:	4313      	orrs	r3, r2
 8000790:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	50004600 	.word	0x50004600

080007a0 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 80007a8:	4906      	ldr	r1, [pc, #24]	; (80007c4 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 80007aa:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 80007ac:	6a1b      	ldr	r3, [r3, #32]
 80007ae:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 80007b6:	4313      	orrs	r3, r2
 80007b8:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr
 80007c4:	50004600 	.word	0x50004600

080007c8 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 80007d0:	4906      	ldr	r1, [pc, #24]	; (80007ec <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 80007d2:	4b06      	ldr	r3, [pc, #24]	; (80007ec <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 80007d4:	691b      	ldr	r3, [r3, #16]
 80007d6:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 80007de:	4313      	orrs	r3, r2
 80007e0:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr
 80007ec:	50004600 	.word	0x50004600

080007f0 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 80007f8:	4906      	ldr	r1, [pc, #24]	; (8000814 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 80007fa:	4b06      	ldr	r3, [pc, #24]	; (8000814 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 80007fc:	695b      	ldr	r3, [r3, #20]
 80007fe:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000806:	4313      	orrs	r3, r2
 8000808:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr
 8000814:	50004600 	.word	0x50004600

08000818 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000820:	4906      	ldr	r1, [pc, #24]	; (800083c <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8000824:	699b      	ldr	r3, [r3, #24]
 8000826:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 800082e:	4313      	orrs	r3, r2
 8000830:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
}
 8000832:	370c      	adds	r7, #12
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	50004600 	.word	0x50004600

08000840 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8000848:	4906      	ldr	r1, [pc, #24]	; (8000864 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 800084c:	69db      	ldr	r3, [r3, #28]
 800084e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8000856:	4313      	orrs	r3, r2
 8000858:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr
 8000864:	50004600 	.word	0x50004600

08000868 <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8000870:	4906      	ldr	r1, [pc, #24]	; (800088c <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8000874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000876:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 800087e:	4313      	orrs	r3, r2
 8000880:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr
 800088c:	50004600 	.word	0x50004600

08000890 <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 800089a:	4a04      	ldr	r2, [pc, #16]	; (80008ac <XMC_SCU_CLOCK_EnableClock+0x1c>)
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	6053      	str	r3, [r2, #4]
}
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	50004600 	.word	0x50004600

080008b0 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 80008ba:	4a19      	ldr	r2, [pc, #100]	; (8000920 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80008bc:	4b18      	ldr	r3, [pc, #96]	; (8000920 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80008be:	695b      	ldr	r3, [r3, #20]
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 80008c6:	4a16      	ldr	r2, [pc, #88]	; (8000920 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80008c8:	4b15      	ldr	r3, [pc, #84]	; (8000920 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80008ca:	695b      	ldr	r3, [r3, #20]
 80008cc:	f043 0310 	orr.w	r3, r3, #16
 80008d0:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80008d2:	4913      	ldr	r1, [pc, #76]	; (8000920 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	3b01      	subs	r3, #1
 80008d8:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	3b01      	subs	r3, #1
 80008de:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80008e0:	4313      	orrs	r3, r2
 80008e2:	614b      	str	r3, [r1, #20]
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 80008e4:	4a0e      	ldr	r2, [pc, #56]	; (8000920 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80008e8:	695b      	ldr	r3, [r3, #20]
 80008ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008ee:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 80008f0:	4a0b      	ldr	r2, [pc, #44]	; (8000920 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80008f4:	695b      	ldr	r3, [r3, #20]
 80008f6:	f023 0310 	bic.w	r3, r3, #16
 80008fa:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 80008fc:	4a08      	ldr	r2, [pc, #32]	; (8000920 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80008fe:	4b08      	ldr	r3, [pc, #32]	; (8000920 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000900:	695b      	ldr	r3, [r3, #20]
 8000902:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000906:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8000908:	bf00      	nop
 800090a:	4b05      	ldr	r3, [pc, #20]	; (8000920 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800090c:	691b      	ldr	r3, [r3, #16]
 800090e:	f003 0304 	and.w	r3, r3, #4
 8000912:	2b00      	cmp	r3, #0
 8000914:	d0f9      	beq.n	800090a <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	50004710 	.word	0x50004710

08000924 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
  SCU_PLL->USBPLLCON = (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk |
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 800092e:	4a0f      	ldr	r2, [pc, #60]	; (800096c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000930:	4b0e      	ldr	r3, [pc, #56]	; (800096c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000938:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	2b01      	cmp	r3, #1
 800093e:	d10e      	bne.n	800095e <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8000940:	4a0a      	ldr	r2, [pc, #40]	; (800096c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000942:	4b0a      	ldr	r3, [pc, #40]	; (800096c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800094a:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 800094c:	2064      	movs	r0, #100	; 0x64
 800094e:	f7ff fddd 	bl	800050c <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8000952:	4a06      	ldr	r2, [pc, #24]	; (800096c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000954:	4b05      	ldr	r3, [pc, #20]	; (800096c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800095c:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 800095e:	2064      	movs	r0, #100	; 0x64
 8000960:	f7ff fdd4 	bl	800050c <XMC_SCU_lDelay>
}
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	50004710 	.word	0x50004710

08000970 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000974:	4b11      	ldr	r3, [pc, #68]	; (80009bc <XMC_SCU_HIB_EnableHibernateDomain+0x4c>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f003 0301 	and.w	r3, r3, #1
 800097c:	2b00      	cmp	r3, #0
 800097e:	d10c      	bne.n	800099a <XMC_SCU_HIB_EnableHibernateDomain+0x2a>
  {
    SCU_POWER->PWRSET |= (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8000980:	4a0e      	ldr	r2, [pc, #56]	; (80009bc <XMC_SCU_HIB_EnableHibernateDomain+0x4c>)
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <XMC_SCU_HIB_EnableHibernateDomain+0x4c>)
 8000984:	685b      	ldr	r3, [r3, #4]
 8000986:	f043 0301 	orr.w	r3, r3, #1
 800098a:	6053      	str	r3, [r2, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 800098c:	bf00      	nop
 800098e:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <XMC_SCU_HIB_EnableHibernateDomain+0x4c>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	2b00      	cmp	r3, #0
 8000998:	d0f9      	beq.n	800098e <XMC_SCU_HIB_EnableHibernateDomain+0x1e>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 800099a:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d008      	beq.n	80009b8 <XMC_SCU_HIB_EnableHibernateDomain+0x48>
  {
    SCU_RESET->RSTCLR |= (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 80009a6:	4a06      	ldr	r2, [pc, #24]	; (80009c0 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80009a8:	4b05      	ldr	r3, [pc, #20]	; (80009c0 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80009aa:	689b      	ldr	r3, [r3, #8]
 80009ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009b0:	6093      	str	r3, [r2, #8]
    XMC_SCU_lDelay(150U);
 80009b2:	2096      	movs	r0, #150	; 0x96
 80009b4:	f7ff fdaa 	bl	800050c <XMC_SCU_lDelay>
  }
}
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	50004200 	.word	0x50004200
 80009c0:	50004400 	.word	0x50004400

080009c4 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:
  }
}

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 80009c8:	bf00      	nop
 80009ca:	4b19      	ldr	r3, [pc, #100]	; (8000a30 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 80009cc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80009d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d1f8      	bne.n	80009ca <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6>
  {
    /* Wait until the update of OSCULCTRL register in hibernate domain is completed */
  }
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 80009d8:	4a16      	ldr	r2, [pc, #88]	; (8000a34 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x70>)
 80009da:	4b16      	ldr	r3, [pc, #88]	; (8000a34 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x70>)
 80009dc:	69db      	ldr	r3, [r3, #28]
 80009de:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80009e2:	61d3      	str	r3, [r2, #28]

  /* Check if the input clock is OK using OSCULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80009e4:	bf00      	nop
 80009e6:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 80009e8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80009ec:	f003 0308 	and.w	r3, r3, #8
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d1f8      	bne.n	80009e6 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x22>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 80009f4:	4a0f      	ldr	r2, [pc, #60]	; (8000a34 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x70>)
 80009f6:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x70>)
 80009f8:	68db      	ldr	r3, [r3, #12]
 80009fa:	f043 0308 	orr.w	r3, r3, #8
 80009fe:	60d3      	str	r3, [r2, #12]

  /* wait till clock is stable */
  do
  {
    while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCLR_Msk)
 8000a00:	bf00      	nop
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000a04:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000a08:	f003 0302 	and.w	r3, r3, #2
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d1f8      	bne.n	8000a02 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x3e>
    {
      /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
    }
    SCU_HIBERNATE->HDCLR |= (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 8000a10:	4a08      	ldr	r2, [pc, #32]	; (8000a34 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x70>)
 8000a12:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x70>)
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	f043 0308 	orr.w	r3, r3, #8
 8000a1a:	6053      	str	r3, [r2, #4]

    XMC_SCU_lDelay(50U);
 8000a1c:	2032      	movs	r0, #50	; 0x32
 8000a1e:	f7ff fd75 	bl	800050c <XMC_SCU_lDelay>

  } while ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) != 0UL);
 8000a22:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x70>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f003 0308 	and.w	r3, r3, #8
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d1e8      	bne.n	8000a00 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x3c>

}
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	50004000 	.word	0x50004000
 8000a34:	50004300 	.word	0x50004300

08000a38 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  }
}

/* API to configure High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8000a38:	b5b0      	push	{r4, r5, r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8000a3c:	4a13      	ldr	r2, [pc, #76]	; (8000a8c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x54>)
 8000a3e:	4b13      	ldr	r3, [pc, #76]	; (8000a8c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x54>)
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a46:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000a48:	4d11      	ldr	r5, [pc, #68]	; (8000a90 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x58>)
 8000a4a:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x58>)
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8000a52:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000a56:	f001 fc51 	bl	80022fc <OSCHP_GetFrequency>
 8000a5a:	4602      	mov	r2, r0
 8000a5c:	4b0d      	ldr	r3, [pc, #52]	; (8000a94 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x5c>)
 8000a5e:	fba3 2302 	umull	r2, r3, r3, r2
 8000a62:	0d1b      	lsrs	r3, r3, #20
 8000a64:	3b01      	subs	r3, #1
 8000a66:	041b      	lsls	r3, r3, #16
/* API to configure High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000a68:	4323      	orrs	r3, r4
 8000a6a:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000a6c:	4a07      	ldr	r2, [pc, #28]	; (8000a8c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x54>)
 8000a6e:	4b07      	ldr	r3, [pc, #28]	; (8000a8c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x54>)
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000a76:	6053      	str	r3, [r2, #4]

  while ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) != XMC_SCU_PLL_PLLSTAT_OSC_USABLE)
 8000a78:	bf00      	nop
 8000a7a:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x54>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000a82:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000a86:	d1f8      	bne.n	8000a7a <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x42>
  {
      /* wait till OSC_HP output frequency is usable */
  }
}
 8000a88:	bdb0      	pop	{r4, r5, r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	50004710 	.word	0x50004710
 8000a90:	50004700 	.word	0x50004700
 8000a94:	6b5fca6b 	.word	0x6b5fca6b

08000a98 <XMC_SCU_CLOCK_EnableSystemPll>:
{
  SCU_OSC->OSCHPCTRL |= (uint32_t)SCU_OSC_OSCHPCTRL_MODE_Msk;
}

void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000a9c:	4a05      	ldr	r2, [pc, #20]	; (8000ab4 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000a9e:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000aa6:	f023 0302 	bic.w	r3, r3, #2
 8000aaa:	6053      	str	r3, [r2, #4]
}
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	50004710 	.word	0x50004710

08000ab8 <XMC_SCU_CLOCK_DisableSystemPll>:

void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000abc:	4a05      	ldr	r2, [pc, #20]	; (8000ad4 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000abe:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ac6:	f043 0302 	orr.w	r3, r3, #2
 8000aca:	6053      	str	r3, [r2, #4]
}
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	50004710 	.word	0x50004710

08000ad8 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b086      	sub	sp, #24
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60ba      	str	r2, [r7, #8]
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	81fb      	strh	r3, [r7, #14]
 8000ae6:	460b      	mov	r3, r1
 8000ae8:	737b      	strb	r3, [r7, #13]

  float vco_frequency;
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8000aea:	89fb      	ldrh	r3, [r7, #14]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff fde7 	bl	80006c0 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000af2:	7b7b      	ldrb	r3, [r7, #13]
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	f040 8099 	bne.w	8000c2c <XMC_SCU_CLOCK_StartSystemPll+0x154>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8000afa:	89fb      	ldrh	r3, [r7, #14]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d108      	bne.n	8000b12 <XMC_SCU_CLOCK_StartSystemPll+0x3a>
    {
      vco_frequency = (float)OSCHP_GetFrequency();
 8000b00:	f001 fbfc 	bl	80022fc <OSCHP_GetFrequency>
 8000b04:	ee07 0a90 	vmov	s15, r0
 8000b08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b0c:	edc7 7a05 	vstr	s15, [r7, #20]
 8000b10:	e001      	b.n	8000b16 <XMC_SCU_CLOCK_StartSystemPll+0x3e>
    }
    else
    {
      vco_frequency = (float)OFI_FREQUENCY;
 8000b12:	4b53      	ldr	r3, [pc, #332]	; (8000c60 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000b14:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = (float)((vco_frequency * (float)ndiv) / (float)pdiv);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	ee07 3a90 	vmov	s15, r3
 8000b1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000b20:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	ee07 3a90 	vmov	s15, r3
 8000b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b32:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8000b36:	edc7 7a05 	vstr	s15, [r7, #20]
    kdiv_temp = (uint32_t)((uint32_t)vco_frequency / OFI_FREQUENCY);
 8000b3a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b42:	ee17 2a90 	vmov	r2, s15
 8000b46:	4b47      	ldr	r3, [pc, #284]	; (8000c64 <XMC_SCU_CLOCK_StartSystemPll+0x18c>)
 8000b48:	fba3 2302 	umull	r2, r3, r3, r2
 8000b4c:	0d5b      	lsrs	r3, r3, #21
 8000b4e:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000b50:	4a45      	ldr	r2, [pc, #276]	; (8000c68 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000b52:	4b45      	ldr	r3, [pc, #276]	; (8000c68 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	f043 0301 	orr.w	r3, r3, #1
 8000b5a:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8000b5c:	4a42      	ldr	r2, [pc, #264]	; (8000c68 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000b5e:	4b42      	ldr	r3, [pc, #264]	; (8000c68 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f043 0310 	orr.w	r3, r3, #16
 8000b66:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000b68:	493f      	ldr	r1, [pc, #252]	; (8000c68 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000b6a:	4b3f      	ldr	r3, [pc, #252]	; (8000c68 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000b6c:	689a      	ldr	r2, [r3, #8]
 8000b6e:	4b3f      	ldr	r3, [pc, #252]	; (8000c6c <XMC_SCU_CLOCK_StartSystemPll+0x194>)
 8000b70:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	3a01      	subs	r2, #1
 8000b76:	0212      	lsls	r2, r2, #8
 8000b78:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8000b7a:	693b      	ldr	r3, [r7, #16]
 8000b7c:	3b01      	subs	r3, #1
 8000b7e:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000b80:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 8000b82:	68bb      	ldr	r3, [r7, #8]
 8000b84:	3b01      	subs	r3, #1
 8000b86:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000b8c:	4a36      	ldr	r2, [pc, #216]	; (8000c68 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000b8e:	4b36      	ldr	r3, [pc, #216]	; (8000c68 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b96:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000b98:	4a33      	ldr	r2, [pc, #204]	; (8000c68 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000b9a:	4b33      	ldr	r3, [pc, #204]	; (8000c68 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	f023 0310 	bic.w	r3, r3, #16
 8000ba2:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8000ba4:	4a30      	ldr	r2, [pc, #192]	; (8000c68 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000ba6:	4b30      	ldr	r3, [pc, #192]	; (8000c68 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bae:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000bb0:	bf00      	nop
 8000bb2:	4b2d      	ldr	r3, [pc, #180]	; (8000c68 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f003 0304 	and.w	r3, r3, #4
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d0f9      	beq.n	8000bb2 <XMC_SCU_CLOCK_StartSystemPll+0xda>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000bbe:	4a2a      	ldr	r2, [pc, #168]	; (8000c68 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000bc0:	4b29      	ldr	r3, [pc, #164]	; (8000c68 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	f023 0301 	bic.w	r3, r3, #1
 8000bc8:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000bca:	bf00      	nop
 8000bcc:	4b26      	ldr	r3, [pc, #152]	; (8000c68 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f003 0301 	and.w	r3, r3, #1
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d1f9      	bne.n	8000bcc <XMC_SCU_CLOCK_StartSystemPll+0xf4>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (uint32_t)((uint32_t)vco_frequency / 60000000UL);
 8000bd8:	edd7 7a05 	vldr	s15, [r7, #20]
 8000bdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000be0:	ee17 3a90 	vmov	r3, s15
 8000be4:	0a1b      	lsrs	r3, r3, #8
 8000be6:	4a22      	ldr	r2, [pc, #136]	; (8000c70 <XMC_SCU_CLOCK_StartSystemPll+0x198>)
 8000be8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bec:	0a9b      	lsrs	r3, r3, #10
 8000bee:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000bf0:	6a3a      	ldr	r2, [r7, #32]
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d202      	bcs.n	8000bfe <XMC_SCU_CLOCK_StartSystemPll+0x126>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000bf8:	6938      	ldr	r0, [r7, #16]
 8000bfa:	f000 f83d 	bl	8000c78 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (uint32_t)((uint32_t)vco_frequency / 90000000UL);
 8000bfe:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c06:	ee17 3a90 	vmov	r3, s15
 8000c0a:	09db      	lsrs	r3, r3, #7
 8000c0c:	4a19      	ldr	r2, [pc, #100]	; (8000c74 <XMC_SCU_CLOCK_StartSystemPll+0x19c>)
 8000c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c12:	0adb      	lsrs	r3, r3, #11
 8000c14:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000c16:	6a3a      	ldr	r2, [r7, #32]
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	d202      	bcs.n	8000c24 <XMC_SCU_CLOCK_StartSystemPll+0x14c>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000c1e:	6938      	ldr	r0, [r7, #16]
 8000c20:	f000 f82a 	bl	8000c78 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000c24:	6a38      	ldr	r0, [r7, #32]
 8000c26:	f000 f827 	bl	8000c78 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8000c2a:	e015      	b.n	8000c58 <XMC_SCU_CLOCK_StartSystemPll+0x180>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000c2c:	490e      	ldr	r1, [pc, #56]	; (8000c68 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000c30:	689b      	ldr	r3, [r3, #8]
 8000c32:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000c36:	6a3b      	ldr	r3, [r7, #32]
 8000c38:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	608b      	str	r3, [r1, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000c3e:	4a0a      	ldr	r2, [pc, #40]	; (8000c68 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000c40:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000c4a:	bf00      	nop
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f003 0301 	and.w	r3, r3, #1
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d0f9      	beq.n	8000c4c <XMC_SCU_CLOCK_StartSystemPll+0x174>
    {
      /* wait for prescaler mode */
    }
  }
}
 8000c58:	3718      	adds	r7, #24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	4bb71b00 	.word	0x4bb71b00
 8000c64:	165e9f81 	.word	0x165e9f81
 8000c68:	50004710 	.word	0x50004710
 8000c6c:	f08080ff 	.word	0xf08080ff
 8000c70:	011e54c7 	.word	0x011e54c7
 8000c74:	00bee32f 	.word	0x00bee32f

08000c78 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
{
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000c80:	4907      	ldr	r1, [pc, #28]	; (8000ca0 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000c82:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000c84:	689b      	ldr	r3, [r3, #8]
 8000c86:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	3b01      	subs	r3, #1
 8000c8e:	041b      	lsls	r3, r3, #16
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000c90:	4313      	orrs	r3, r2
 8000c92:	608b      	str	r3, [r1, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  XMC_SCU_lDelay(50U);
 8000c94:	2032      	movs	r0, #50	; 0x32
 8000c96:	f7ff fc39 	bl	800050c <XMC_SCU_lDelay>
}
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	50004710 	.word	0x50004710

08000ca4 <XMC_CCU8_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR> 
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU8_GIDLC_SPRB_Msk;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	60da      	str	r2, [r3, #12]
}
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop

08000cc4 <XMC_CCU8_SLICE_StopTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StopTimer(XMC_CCU8_SLICE_t *const slice)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCCLR |= (uint32_t) CCU8_CC8_TCCLR_TRBC_Msk;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	691b      	ldr	r3, [r3, #16]
 8000cd0:	f043 0201 	orr.w	r2, r3, #1
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	611a      	str	r2, [r3, #16]
}
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop

08000ce4 <XMC_CCU8_lDeassertReset>:
      break;   
  }
}

__STATIC_INLINE void XMC_CCU8_lDeassertReset(const XMC_CCU8_MODULE_t *const module)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  switch ((uint32_t)module)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4a09      	ldr	r2, [pc, #36]	; (8000d14 <XMC_CCU8_lDeassertReset+0x30>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d003      	beq.n	8000cfc <XMC_CCU8_lDeassertReset+0x18>
 8000cf4:	4a08      	ldr	r2, [pc, #32]	; (8000d18 <XMC_CCU8_lDeassertReset+0x34>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d004      	beq.n	8000d04 <XMC_CCU8_lDeassertReset+0x20>
      break;
#endif

    default:
      XMC_ASSERT("XMC_CCU8_lDeassertReset:Invalid Module Pointer", 0);
      break;   
 8000cfa:	e008      	b.n	8000d0e <XMC_CCU8_lDeassertReset+0x2a>
__STATIC_INLINE void XMC_CCU8_lDeassertReset(const XMC_CCU8_MODULE_t *const module)
{
  switch ((uint32_t)module)
  {
    case (uint32_t)CCU80:
      XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU80);
 8000cfc:	2080      	movs	r0, #128	; 0x80
 8000cfe:	f7ff fc85 	bl	800060c <XMC_SCU_RESET_DeassertPeripheralReset>
      break;
 8000d02:	e004      	b.n	8000d0e <XMC_CCU8_lDeassertReset+0x2a>
      
#if defined(CCU81)
    case (uint32_t)CCU81:
      XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU81);
 8000d04:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000d08:	f7ff fc80 	bl	800060c <XMC_SCU_RESET_DeassertPeripheralReset>
      break;
 8000d0c:	bf00      	nop

    default:
      XMC_ASSERT("XMC_CCU8_lDeassertReset:Invalid Module Pointer", 0);
      break;   
  }
}
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40020000 	.word	0x40020000
 8000d18:	40024000 	.word	0x40024000

08000d1c <XMC_CCU8_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/* API to set the CCU8 module as active and enable the clock  */
void XMC_CCU8_EnableModule(XMC_CCU8_MODULE_t *const module)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_EnableModule:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));

#if (UC_FAMILY == XMC4)
  /* Enable CCU8 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8000d24:	2010      	movs	r0, #16
 8000d26:	f7ff fdb3 	bl	8000890 <XMC_SCU_CLOCK_EnableClock>
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU8_lUngateClock(module);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU8_lDeassertReset(module);
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f7ff ffda 	bl	8000ce4 <XMC_CCU8_lDeassertReset>
#endif
}
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop

08000d38 <XMC_CCU8_Init>:
#endif
}

/* API to initialize CCU8 global resources  */
void XMC_CCU8_Init(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_SLICE_MCMS_ACTION_t mcs_action)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	460b      	mov	r3, r1
 8000d42:	70fb      	strb	r3, [r7, #3]

  XMC_ASSERT("XMC_CCU8_Init:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_Init:Invalid mcs action", XMC_CCU8_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU8 module */
  XMC_CCU8_EnableModule(module);
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f7ff ffe9 	bl	8000d1c <XMC_CCU8_EnableModule>
  /* Start the prescaler */
  XMC_CCU8_StartPrescaler(module);
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f7ff ffaa 	bl	8000ca4 <XMC_CCU8_StartPrescaler>
  
  gctrl = module->GCTRL;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU8_GCTRL_MSDE_Msk);
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d5c:	60fb      	str	r3, [r7, #12]
  gctrl |= (uint32_t)mcs_action << CCU8_GCTRL_MSDE_Pos;
 8000d5e:	78fb      	ldrb	r3, [r7, #3]
 8000d60:	039b      	lsls	r3, r3, #14
 8000d62:	68fa      	ldr	r2, [r7, #12]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	68fa      	ldr	r2, [r7, #12]
 8000d6c:	601a      	str	r2, [r3, #0]
}
 8000d6e:	3710      	adds	r7, #16
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <XMC_CCU8_SLICE_CompareInit>:
}

/* API to configure CC8 Slice in Compare mode */
void XMC_CCU8_SLICE_CompareInit(XMC_CCU8_SLICE_t *const slice,
                                const XMC_CCU8_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Timer Init Pointer is NULL",
             (XMC_CCU8_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);
  /* Stops the timer */
  XMC_CCU8_SLICE_StopTimer(slice);
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f7ff ffa0 	bl	8000cc4 <XMC_CCU8_SLICE_StopTimer>
  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC =  (uint32_t)compare_init->timer_concatenation << CCU8_CC8_CMC_TCE_Pos;
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	7b5b      	ldrb	r3, [r3, #13]
 8000d90:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	051a      	lsls	r2, r3, #20
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	7b1b      	ldrb	r3, [r3, #12]
 8000da0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	461a      	mov	r2, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	7b1b      	ldrb	r3, [r3, #12]
 8000db0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	461a      	mov	r2, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	7b5b      	ldrb	r3, [r3, #13]
 8000dc0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->psl;
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685a      	ldr	r2, [r3, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	619a      	str	r2, [r3, #24]
  /* Asymmetric PWM and Slice output routing configuration */
#if defined(CCU8V3) /* Defined for XMC1400 devices only */
  slice->CHC = (uint32_t) compare_init->chc;
#else
  slice->CHC = (uint32_t)((uint32_t)compare_init->chc ^ XMC_CCU8_SLICE_CHC_CONFIG_MASK);
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	f083 0214 	eor.w	r2, r3, #20
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	649a      	str	r2, [r3, #72]	; 0x48
#endif
}
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop

08000de8 <XMC_CCU8_SetMultiChannelShadowTransferMode>:
  slice->CHC = chc;
}

/* API to configure the multichannel shadow transfer request via SW and via the CCU8x.MCSS input. */
void XMC_CCU8_SetMultiChannelShadowTransferMode(XMC_CCU8_MODULE_t *const module, const uint32_t slice_mode_msk)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
  uint32_t gctrl;

  XMC_ASSERT("XMC_CCU8_SetMultiChannelShadowTransferMode:Invalid module Pointer", XMC_CCU8_IsValidModule(module));
  
  gctrl = module->GCTRL;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t)slice_mode_msk >> 16U);
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	0c1b      	lsrs	r3, r3, #16
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	68fa      	ldr	r2, [r7, #12]
 8000e00:	4013      	ands	r3, r2
 8000e02:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t)slice_mode_msk & 0xFFFFU);
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	68fa      	ldr	r2, [r7, #12]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	60fb      	str	r3, [r7, #12]
  module->GCTRL = gctrl;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	68fa      	ldr	r2, [r7, #12]
 8000e12:	601a      	str	r2, [r3, #0]
}
 8000e14:	3714      	adds	r7, #20
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop

08000e20 <XMC_CCU8_SLICE_StartConfig>:

/* API to configure the Start trigger function of a slice*/
void XMC_CCU8_SLICE_StartConfig(XMC_CCU8_SLICE_t *const slice,
                                const XMC_CCU8_SLICE_EVENT_t event,
                                const XMC_CCU8_SLICE_START_MODE_t start_mode)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	460b      	mov	r3, r1
 8000e2a:	70fb      	strb	r3, [r7, #3]
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Start Mode", 
             ((start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START) ||\
              (start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR)));
  cmc = slice->CMC;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	60bb      	str	r3, [r7, #8]

  cmc &= ~((uint32_t) CCU8_CC8_CMC_STRTS_Msk);
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	f023 0303 	bic.w	r3, r3, #3
 8000e3c:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_STRTS_Pos;
 8000e3e:	78fb      	ldrb	r3, [r7, #3]
 8000e40:	68ba      	ldr	r2, [r7, #8]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	68ba      	ldr	r2, [r7, #8]
 8000e4a:	605a      	str	r2, [r3, #4]

  tc  = slice->TC;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	695b      	ldr	r3, [r3, #20]
 8000e50:	60fb      	str	r3, [r7, #12]

  if(start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR)
 8000e52:	78bb      	ldrb	r3, [r7, #2]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d104      	bne.n	8000e62 <XMC_CCU8_SLICE_StartConfig+0x42>
  {
    tc |= (uint32_t) CCU8_CC8_TC_STRM_Msk;
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	e003      	b.n	8000e6a <XMC_CCU8_SLICE_StartConfig+0x4a>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_STRM_Msk);
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000e68:	60fb      	str	r3, [r7, #12]
  }

  slice->TC = tc;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	68fa      	ldr	r2, [r7, #12]
 8000e6e:	615a      	str	r2, [r3, #20]
}
 8000e70:	3714      	adds	r7, #20
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop

08000e7c <XMC_CCU8_SLICE_StopConfig>:

/* API to configure the Stop trigger function of a slice */
void XMC_CCU8_SLICE_StopConfig(XMC_CCU8_SLICE_t *const slice,
                               const XMC_CCU8_SLICE_EVENT_t event,
                               const XMC_CCU8_SLICE_END_MODE_t end_mode)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	460b      	mov	r3, r1
 8000e86:	70fb      	strb	r3, [r7, #3]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU8_SLICE_StopConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_StopConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU8_SLICE_StopConfig:Invalid End Mode", XMC_CCU8_SLICE_CHECK_END_MODE(end_mode));

  cmc = slice->CMC;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	60fb      	str	r3, [r7, #12]
  /* First, Bind the event with the stop function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_ENDS_Msk);
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	f023 030c 	bic.w	r3, r3, #12
 8000e98:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_ENDS_Pos;
 8000e9a:	78fb      	ldrb	r3, [r7, #3]
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	68fa      	ldr	r2, [r7, #12]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	68fa      	ldr	r2, [r7, #12]
 8000ea8:	605a      	str	r2, [r3, #4]

  /* Configure the stop mode */
  tc = slice->TC;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	695b      	ldr	r3, [r3, #20]
 8000eae:	60bb      	str	r3, [r7, #8]
  tc &= ~((uint32_t) CCU8_CC8_TC_ENDM_Msk);
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000eb6:	60bb      	str	r3, [r7, #8]
  tc |= ((uint32_t) end_mode) << CCU8_CC8_TC_ENDM_Pos;
 8000eb8:	78bb      	ldrb	r3, [r7, #2]
 8000eba:	021b      	lsls	r3, r3, #8
 8000ebc:	68ba      	ldr	r2, [r7, #8]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	60bb      	str	r3, [r7, #8]

  slice->TC = tc;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	68ba      	ldr	r2, [r7, #8]
 8000ec6:	615a      	str	r2, [r3, #20]
}
 8000ec8:	3714      	adds	r7, #20
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <XMC_CCU8_SLICE_LoadConfig>:

/* API to configure the Load trigger function of a slice*/
void XMC_CCU8_SLICE_LoadConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	460b      	mov	r3, r1
 8000ede:	70fb      	strb	r3, [r7, #3]
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU8_SLICE_LoadConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_LoadConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));

  cmc = slice->CMC;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	60fb      	str	r3, [r7, #12]

  /* First, Bind the event with the load function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_LDS_Msk);
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000eec:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_LDS_Pos;
 8000eee:	78fb      	ldrb	r3, [r7, #3]
 8000ef0:	031b      	lsls	r3, r3, #12
 8000ef2:	68fa      	ldr	r2, [r7, #12]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	68fa      	ldr	r2, [r7, #12]
 8000efc:	605a      	str	r2, [r3, #4]
}
 8000efe:	3714      	adds	r7, #20
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <XMC_CCU8_SLICE_LoadSelector>:

/* API to configure, which compare register value has to be loaded during external load event */
void XMC_CCU8_SLICE_LoadSelector(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_COMPARE_CHANNEL_t ch_num)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	460b      	mov	r3, r1
 8000f12:	70fb      	strb	r3, [r7, #3]
  uint32_t tc;

  XMC_ASSERT("XMC_CCU8_SLICE_LoadSelector:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_LoadSelector:Invalid Channel number", XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(ch_num));

  tc = slice->TC;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	695b      	ldr	r3, [r3, #20]
 8000f18:	60fb      	str	r3, [r7, #12]

  /* First, Bind the event with the load function */
  tc &= ~((uint32_t) CCU8_CC8_TC_TLS_Msk);
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000f20:	60fb      	str	r3, [r7, #12]
  tc |= (uint32_t)ch_num << CCU8_CC8_TC_TLS_Pos;
 8000f22:	78fb      	ldrb	r3, [r7, #3]
 8000f24:	01db      	lsls	r3, r3, #7
 8000f26:	68fa      	ldr	r2, [r7, #12]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	60fb      	str	r3, [r7, #12]

  slice->TC = tc;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	68fa      	ldr	r2, [r7, #12]
 8000f30:	615a      	str	r2, [r3, #20]
}
 8000f32:	3714      	adds	r7, #20
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <XMC_CCU8_SLICE_ModulationConfig>:
void XMC_CCU8_SLICE_ModulationConfig(XMC_CCU8_SLICE_t *const slice,
                                     const XMC_CCU8_SLICE_EVENT_t event,
                                     const XMC_CCU8_SLICE_MODULATION_MODE_t mod_mode,
                                     const XMC_CCU8_SLICE_MODULATION_CHANNEL_t channel,
                                     const bool synch_with_pwm)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	4608      	mov	r0, r1
 8000f46:	4611      	mov	r1, r2
 8000f48:	461a      	mov	r2, r3
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	70fb      	strb	r3, [r7, #3]
 8000f4e:	460b      	mov	r3, r1
 8000f50:	70bb      	strb	r3, [r7, #2]
 8000f52:	4613      	mov	r3, r2
 8000f54:	707b      	strb	r3, [r7, #1]
             XMC_CCU8_SLICE_CHECK_MODULATION_CHANNEL(channel));
  XMC_ASSERT("XMC_CCU8_SLICE_ModulationConfig:Invalid Modulation Mode", 
             ((mod_mode == XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_ST_OUT) ||\
              (mod_mode == XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_OUT)));

  cmc = slice->CMC;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	60bb      	str	r3, [r7, #8]

  /* First, Bind the event with the modulation function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_MOS_Msk);
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000f62:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_MOS_Pos;
 8000f64:	78fb      	ldrb	r3, [r7, #3]
 8000f66:	049b      	lsls	r3, r3, #18
 8000f68:	68ba      	ldr	r2, [r7, #8]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	68ba      	ldr	r2, [r7, #8]
 8000f72:	605a      	str	r2, [r3, #4]

  tc  = slice->TC;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	695b      	ldr	r3, [r3, #20]
 8000f78:	60fb      	str	r3, [r7, #12]

  /* Next, Modulation mode */
  if(mod_mode == XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_OUT)
 8000f7a:	78bb      	ldrb	r3, [r7, #2]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d104      	bne.n	8000f8a <XMC_CCU8_SLICE_ModulationConfig+0x4e>
  {
    tc |= (uint32_t) CCU8_CC8_TC_EMT_Msk;
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	e003      	b.n	8000f92 <XMC_CCU8_SLICE_ModulationConfig+0x56>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_EMT_Msk);
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f90:	60fb      	str	r3, [r7, #12]
  }

  /* Synchronization of modulation effect with PWM cycle */
  if(synch_with_pwm == true)
 8000f92:	7e3b      	ldrb	r3, [r7, #24]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d004      	beq.n	8000fa2 <XMC_CCU8_SLICE_ModulationConfig+0x66>
  {
    tc |= (uint32_t) CCU8_CC8_TC_EMS_Msk;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	e003      	b.n	8000faa <XMC_CCU8_SLICE_ModulationConfig+0x6e>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_EMS_Msk);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000fa8:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure on which channel external modulation to be applied */
  tc &= ~((uint32_t) CCU8_CC8_TC_EME_Msk);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	f023 53c0 	bic.w	r3, r3, #402653184	; 0x18000000
 8000fb0:	60fb      	str	r3, [r7, #12]
  tc |= (uint32_t)channel << CCU8_CC8_TC_EME_Pos;
 8000fb2:	787b      	ldrb	r3, [r7, #1]
 8000fb4:	06db      	lsls	r3, r3, #27
 8000fb6:	68fa      	ldr	r2, [r7, #12]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	60fb      	str	r3, [r7, #12]

  slice->TC = tc;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	68fa      	ldr	r2, [r7, #12]
 8000fc0:	615a      	str	r2, [r3, #20]
}
 8000fc2:	3714      	adds	r7, #20
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <XMC_CCU8_SLICE_CountConfig>:

/* API to configure the slice count function */
void XMC_CCU8_SLICE_CountConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	70fb      	strb	r3, [r7, #3]
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU8_SLICE_CountConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_CountConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));

  cmc = slice->CMC;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	60fb      	str	r3, [r7, #12]

  /* First, Bind the event with the count function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_CNTS_Msk);
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fe4:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_CNTS_Pos;
 8000fe6:	78fb      	ldrb	r3, [r7, #3]
 8000fe8:	039b      	lsls	r3, r3, #14
 8000fea:	68fa      	ldr	r2, [r7, #12]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	68fa      	ldr	r2, [r7, #12]
 8000ff4:	605a      	str	r2, [r3, #4]
}
 8000ff6:	3714      	adds	r7, #20
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <XMC_CCU8_SLICE_GateConfig>:

/* API to configure slice gate function */
void XMC_CCU8_SLICE_GateConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	70fb      	strb	r3, [r7, #3]
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU8_SLICE_GateConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_GateConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));

  cmc = slice->CMC;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	60fb      	str	r3, [r7, #12]

  /* First, Bind the event with the gate function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_GATES_Msk);
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001018:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_GATES_Pos;
 800101a:	78fb      	ldrb	r3, [r7, #3]
 800101c:	021b      	lsls	r3, r3, #8
 800101e:	68fa      	ldr	r2, [r7, #12]
 8001020:	4313      	orrs	r3, r2
 8001022:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	68fa      	ldr	r2, [r7, #12]
 8001028:	605a      	str	r2, [r3, #4]
}
 800102a:	3714      	adds	r7, #20
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <XMC_CCU8_SLICE_DirectionConfig>:
  slice->CMC = cmc;
}

/* API to configure direction function */
void XMC_CCU8_SLICE_DirectionConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	460b      	mov	r3, r1
 800103e:	70fb      	strb	r3, [r7, #3]
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU8_SLICE_DirectionConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_DirectionConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));

  cmc = slice->CMC;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	60fb      	str	r3, [r7, #12]

  /* First, Bind the event with the direction function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_UDS_Msk);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800104c:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_UDS_Pos;
 800104e:	78fb      	ldrb	r3, [r7, #3]
 8001050:	029b      	lsls	r3, r3, #10
 8001052:	68fa      	ldr	r2, [r7, #12]
 8001054:	4313      	orrs	r3, r2
 8001056:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	605a      	str	r2, [r3, #4]
}
 800105e:	3714      	adds	r7, #20
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <XMC_CCU8_SLICE_StatusBitOverrideConfig>:

/* API to configure slice status bit override function */
void XMC_CCU8_SLICE_StatusBitOverrideConfig(XMC_CCU8_SLICE_t *const slice)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU8_SLICE_StatusBitOverrideConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));

  cmc = slice->CMC;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	60fb      	str	r3, [r7, #12]

  /* Map status bit trigger override to Event 1 &
         status bit value override to Event 2 */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_OFS_Msk);
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800107c:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) 1) << CCU8_CC8_CMC_OFS_Pos;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001084:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	68fa      	ldr	r2, [r7, #12]
 800108a:	605a      	str	r2, [r3, #4]
}
 800108c:	3714      	adds	r7, #20
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop

08001098 <XMC_CCU8_SLICE_TrapConfig>:

/* API to configure trap function*/
void XMC_CCU8_SLICE_TrapConfig(XMC_CCU8_SLICE_t *const slice,
                               const XMC_CCU8_SLICE_TRAP_EXIT_MODE_t exit_mode,
                               const bool synch_with_pwm)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	460b      	mov	r3, r1
 80010a2:	70fb      	strb	r3, [r7, #3]
 80010a4:	4613      	mov	r3, r2
 80010a6:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU8_SLICE_TrapConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_TrapConfig:Invalid Exit Mode", ((exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_AUTOMATIC) ||\
                                                             (exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_SW)));

  cmc = slice->CMC;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	60bb      	str	r3, [r7, #8]

  /* Map trap function to Event 2 */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_TS_Msk);
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80010b4:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) 1) << CCU8_CC8_CMC_TS_Pos;
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010bc:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	68ba      	ldr	r2, [r7, #8]
 80010c2:	605a      	str	r2, [r3, #4]

  tc = slice->TC;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	695b      	ldr	r3, [r3, #20]
 80010c8:	60fb      	str	r3, [r7, #12]

  /* Configure synchronization option */
  if(synch_with_pwm == true)
 80010ca:	78bb      	ldrb	r3, [r7, #2]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d004      	beq.n	80010da <XMC_CCU8_SLICE_TrapConfig+0x42>
  {
    tc |= (uint32_t) CCU8_CC8_TC_TRPSE_Msk;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	e003      	b.n	80010e2 <XMC_CCU8_SLICE_TrapConfig+0x4a>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_TRPSE_Msk);
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80010e0:	60fb      	str	r3, [r7, #12]
  }

  /* Configure exit mode */
  if(exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_SW)
 80010e2:	78fb      	ldrb	r3, [r7, #3]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d104      	bne.n	80010f2 <XMC_CCU8_SLICE_TrapConfig+0x5a>
  {
    tc |= (uint32_t) CCU8_CC8_TC_TRPSW_Msk;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	e003      	b.n	80010fa <XMC_CCU8_SLICE_TrapConfig+0x62>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_TRPSW_Msk);
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80010f8:	60fb      	str	r3, [r7, #12]
  }

  slice->TC = tc;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	68fa      	ldr	r2, [r7, #12]
 80010fe:	615a      	str	r2, [r3, #20]
}
 8001100:	3714      	adds	r7, #20
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop

0800110c <XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent>:

/* API to configure a slice Status Bit Override event */
void XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent(XMC_CCU8_SLICE_t *const slice,
                                                    const XMC_CCU8_SLICE_EVENT_CONFIG_t *const ev1_config,
                                                    const XMC_CCU8_SLICE_EVENT_CONFIG_t *const ev2_config)
{
 800110c:	b480      	push	{r7}
 800110e:	b087      	sub	sp, #28
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU8_CC8_INS1_EV2IS_Pos);
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU8_CC8_INS1_EV2IS_Pos;

  slice->INS1 = ins;  
#else
  ins = slice->INS;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	617b      	str	r3, [r7, #20]

  /* Configure the edge sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU8_CC8_INS_EV1EM_Pos);
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001124:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->edge) << CCU8_CC8_INS_EV1EM_Pos;
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	785b      	ldrb	r3, [r3, #1]
 800112a:	049b      	lsls	r3, r3, #18
 800112c:	697a      	ldr	r2, [r7, #20]
 800112e:	4313      	orrs	r3, r2
 8001130:	617b      	str	r3, [r7, #20]

  /* Configure the edge sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU8_CC8_INS_EV2EM_Pos);
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001138:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->edge) << CCU8_CC8_INS_EV2EM_Pos;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	785b      	ldrb	r3, [r3, #1]
 800113e:	051b      	lsls	r3, r3, #20
 8001140:	697a      	ldr	r2, [r7, #20]
 8001142:	4313      	orrs	r3, r2
 8001144:	617b      	str	r3, [r7, #20]

  /* Configure the level sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU8_CC8_INS_EV1LM_Pos);
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800114c:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->level) << CCU8_CC8_INS_EV1LM_Pos;
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	789b      	ldrb	r3, [r3, #2]
 8001152:	05db      	lsls	r3, r3, #23
 8001154:	697a      	ldr	r2, [r7, #20]
 8001156:	4313      	orrs	r3, r2
 8001158:	617b      	str	r3, [r7, #20]

  /* Configure the level sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU8_CC8_INS_EV2LM_Pos);
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001160:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->level) << CCU8_CC8_INS_EV2LM_Pos;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	789b      	ldrb	r3, [r3, #2]
 8001166:	061b      	lsls	r3, r3, #24
 8001168:	697a      	ldr	r2, [r7, #20]
 800116a:	4313      	orrs	r3, r2
 800116c:	617b      	str	r3, [r7, #20]

  /* Configure the debounce filter for event 1 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU8_CC8_INS_LPF1M_Pos);
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	f023 53c0 	bic.w	r3, r3, #402653184	; 0x18000000
 8001174:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->duration) << CCU8_CC8_INS_LPF1M_Pos;
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	78db      	ldrb	r3, [r3, #3]
 800117a:	06db      	lsls	r3, r3, #27
 800117c:	697a      	ldr	r2, [r7, #20]
 800117e:	4313      	orrs	r3, r2
 8001180:	617b      	str	r3, [r7, #20]

  /* Configure the debounce filter for event 2 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU8_CC8_INS_LPF2M_Pos);
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8001188:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->duration) << CCU8_CC8_INS_LPF2M_Pos;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	78db      	ldrb	r3, [r3, #3]
 800118e:	075b      	lsls	r3, r3, #29
 8001190:	697a      	ldr	r2, [r7, #20]
 8001192:	4313      	orrs	r3, r2
 8001194:	617b      	str	r3, [r7, #20]

  /* Next, the input for Event1 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU8_CC8_INS_EV1IS_Pos);
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800119c:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->mapped_input) << CCU8_CC8_INS_EV1IS_Pos;
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	011b      	lsls	r3, r3, #4
 80011a4:	697a      	ldr	r2, [r7, #20]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	617b      	str	r3, [r7, #20]

  /* Finally, the input for Event2 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU8_CC8_INS_EV2IS_Pos);
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80011b0:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU8_CC8_INS_EV2IS_Pos;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	021b      	lsls	r3, r3, #8
 80011b8:	697a      	ldr	r2, [r7, #20]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	617b      	str	r3, [r7, #20]

  slice->INS = ins;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	697a      	ldr	r2, [r7, #20]
 80011c2:	601a      	str	r2, [r3, #0]
#endif
}
 80011c4:	371c      	adds	r7, #28
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop

080011d0 <XMC_CCU8_SLICE_ConfigureEvent>:

/* API to configure a slice trigger event */
void XMC_CCU8_SLICE_ConfigureEvent(XMC_CCU8_SLICE_t *const slice,
                                   const XMC_CCU8_SLICE_EVENT_t event,
                                   const XMC_CCU8_SLICE_EVENT_CONFIG_t *const config)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b089      	sub	sp, #36	; 0x24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	460b      	mov	r3, r1
 80011da:	607a      	str	r2, [r7, #4]
 80011dc:	72fb      	strb	r3, [r7, #11]
              (config->level == XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureEvent:Invalid Debounce Period",
             XMC_CCU8_SLICE_CHECK_EVENT_FILTER(config->duration));

  /* Calculate offset with reference to event */
  offset = ((uint8_t) event) - 1U;
 80011de:	7afb      	ldrb	r3, [r7, #11]
 80011e0:	3b01      	subs	r3, #1
 80011e2:	77fb      	strb	r3, [r7, #31]
  ins |= ((uint32_t) config->mapped_input) << pos;

  slice->INS1 = ins;

#else
  ins = slice->INS;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	61bb      	str	r3, [r7, #24]

  /* First, configure the edge sensitivity */
  pos = ((uint8_t) CCU8_CC8_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
 80011ea:	7ffb      	ldrb	r3, [r7, #31]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	3310      	adds	r3, #16
 80011f2:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
 80011f4:	7dfb      	ldrb	r3, [r7, #23]
 80011f6:	2203      	movs	r2, #3
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4013      	ands	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->edge) << pos;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	785b      	ldrb	r3, [r3, #1]
 8001208:	461a      	mov	r2, r3
 800120a:	7dfb      	ldrb	r3, [r7, #23]
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]

  /* Next, the level */
  pos = ((uint8_t) CCU8_CC8_INS_EV0LM_Pos) + offset;
 8001216:	7ffb      	ldrb	r3, [r7, #31]
 8001218:	3316      	adds	r3, #22
 800121a:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
 800121c:	7dfb      	ldrb	r3, [r7, #23]
 800121e:	2201      	movs	r2, #1
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) (config->level)) << pos;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	789b      	ldrb	r3, [r3, #2]
 8001230:	461a      	mov	r2, r3
 8001232:	7dfb      	ldrb	r3, [r7, #23]
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4313      	orrs	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]

  /* Next, the debounce filter */
  pos = ((uint8_t) CCU8_CC8_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
 800123e:	7ffb      	ldrb	r3, [r7, #31]
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	b2db      	uxtb	r3, r3
 8001244:	3319      	adds	r3, #25
 8001246:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
 8001248:	7dfb      	ldrb	r3, [r7, #23]
 800124a:	2203      	movs	r2, #3
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4013      	ands	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->duration) << pos;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	78db      	ldrb	r3, [r3, #3]
 800125c:	461a      	mov	r2, r3
 800125e:	7dfb      	ldrb	r3, [r7, #23]
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]

  /* Finally the input */
  pos = ((uint8_t) CCU8_CC8_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
 800126a:	7ffb      	ldrb	r3, [r7, #31]
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 8001270:	7dfb      	ldrb	r3, [r7, #23]
 8001272:	220f      	movs	r2, #15
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	43db      	mvns	r3, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4013      	ands	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->mapped_input) << pos;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	461a      	mov	r2, r3
 8001286:	7dfb      	ldrb	r3, [r7, #23]
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4313      	orrs	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]

  slice->INS = ins;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	601a      	str	r2, [r3, #0]
#endif
}
 8001298:	3724      	adds	r7, #36	; 0x24
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop

080012a4 <XMC_CCU8_SLICE_SetTimerPeriodMatch>:
  slice->TC = tc;
}

/* Programs period match value of the timer  */
void XMC_CCU8_SLICE_SetTimerPeriodMatch(XMC_CCU8_SLICE_t *const slice, const uint16_t period_val)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 80012b0:	887a      	ldrh	r2, [r7, #2]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <XMC_CCU8_SLICE_SetTimerCompareMatch>:

/* Programs timer compare match value for channel 1 or 2 */
void XMC_CCU8_SLICE_SetTimerCompareMatch(XMC_CCU8_SLICE_t *const slice,
                                         const XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel,
                                         const uint16_t compare_val)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	460b      	mov	r3, r1
 80012ca:	70fb      	strb	r3, [r7, #3]
 80012cc:	4613      	mov	r3, r2
 80012ce:	803b      	strh	r3, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid channel", XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(channel));

  if (XMC_CCU8_SLICE_COMPARE_CHANNEL_1 == channel)
 80012d0:	78fb      	ldrb	r3, [r7, #3]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d103      	bne.n	80012de <XMC_CCU8_SLICE_SetTimerCompareMatch+0x1e>
  {
    slice->CR1S = (uint32_t) compare_val;
 80012d6:	883a      	ldrh	r2, [r7, #0]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	63da      	str	r2, [r3, #60]	; 0x3c
 80012dc:	e002      	b.n	80012e4 <XMC_CCU8_SLICE_SetTimerCompareMatch+0x24>
  }
  else
  {
    slice->CR2S = (uint32_t) compare_val;
 80012de:	883a      	ldrh	r2, [r7, #0]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop

080012f0 <XMC_CCU8_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU8_SLICE_SetInterruptNode(XMC_CCU8_SLICE_t *const slice,
                                     const XMC_CCU8_SLICE_IRQ_ID_t event,
                                     const XMC_CCU8_SLICE_SR_ID_t sr)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b087      	sub	sp, #28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	460b      	mov	r3, r1
 80012fa:	70fb      	strb	r3, [r7, #3]
 80012fc:	4613      	mov	r3, r2
 80012fe:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU8_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));

  srs = slice->SRS;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001306:	60fb      	str	r3, [r7, #12]

  switch(event)
 8001308:	78fb      	ldrb	r3, [r7, #3]
 800130a:	2b09      	cmp	r3, #9
 800130c:	d831      	bhi.n	8001372 <XMC_CCU8_SLICE_SetInterruptNode+0x82>
 800130e:	a201      	add	r2, pc, #4	; (adr r2, 8001314 <XMC_CCU8_SLICE_SetInterruptNode+0x24>)
 8001310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001314:	0800133d 	.word	0x0800133d
 8001318:	0800133d 	.word	0x0800133d
 800131c:	08001347 	.word	0x08001347
 8001320:	08001347 	.word	0x08001347
 8001324:	08001351 	.word	0x08001351
 8001328:	08001351 	.word	0x08001351
 800132c:	08001373 	.word	0x08001373
 8001330:	08001373 	.word	0x08001373
 8001334:	0800135b 	.word	0x0800135b
 8001338:	08001367 	.word	0x08001367
  {
    case XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU8_CC8_SRS_POSR_Msk);
 800133c:	2303      	movs	r3, #3
 800133e:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_POSR_Pos;
 8001340:	2300      	movs	r3, #0
 8001342:	613b      	str	r3, [r7, #16]
      break;
 8001344:	e01b      	b.n	800137e <XMC_CCU8_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1:
    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1:
      mask = ((uint32_t) CCU8_CC8_SRS_CM1SR_Msk);
 8001346:	230c      	movs	r3, #12
 8001348:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_CM1SR_Pos;
 800134a:	2302      	movs	r3, #2
 800134c:	613b      	str	r3, [r7, #16]
      break;
 800134e:	e016      	b.n	800137e <XMC_CCU8_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2:
    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2:
      mask = ((uint32_t) CCU8_CC8_SRS_CM2SR_Msk);
 8001350:	2330      	movs	r3, #48	; 0x30
 8001352:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_CM2SR_Pos;
 8001354:	2304      	movs	r3, #4
 8001356:	613b      	str	r3, [r7, #16]
      break;
 8001358:	e011      	b.n	800137e <XMC_CCU8_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU8_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU8_CC8_SRS_E0SR_Msk);
 800135a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800135e:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_E0SR_Pos;
 8001360:	2308      	movs	r3, #8
 8001362:	613b      	str	r3, [r7, #16]
      break;
 8001364:	e00b      	b.n	800137e <XMC_CCU8_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU8_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU8_CC8_SRS_E1SR_Msk);
 8001366:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800136a:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_E1SR_Pos;
 800136c:	230a      	movs	r3, #10
 800136e:	613b      	str	r3, [r7, #16]
      break;
 8001370:	e005      	b.n	800137e <XMC_CCU8_SLICE_SetInterruptNode+0x8e>

    default:
      mask = ((uint32_t) CCU8_CC8_SRS_E2SR_Msk);
 8001372:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001376:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_E2SR_Pos;
 8001378:	230c      	movs	r3, #12
 800137a:	613b      	str	r3, [r7, #16]
      break;
 800137c:	bf00      	nop
  }
  
  srs &= ~mask;
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	43db      	mvns	r3, r3
 8001382:	68fa      	ldr	r2, [r7, #12]
 8001384:	4013      	ands	r3, r2
 8001386:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
 8001388:	78ba      	ldrb	r2, [r7, #2]
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	68fa      	ldr	r2, [r7, #12]
 8001392:	4313      	orrs	r3, r2
 8001394:	60fb      	str	r3, [r7, #12]
  
  slice->SRS = srs;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	68fa      	ldr	r2, [r7, #12]
 800139a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 800139e:	371c      	adds	r7, #28
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <XMC_CCU8_SLICE_DeadTimeInit>:
}

/* Initializes Dead time configuration for the slice outputs */
void XMC_CCU8_SLICE_DeadTimeInit(XMC_CCU8_SLICE_t *const slice,
                                 const XMC_CCU8_SLICE_DEAD_TIME_CONFIG_t *const config)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureDeadTime:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));

  /* Program dead time value for channel 1 */
  slice->DC1R = config->dc1r;
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685a      	ldr	r2, [r3, #4]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	651a      	str	r2, [r3, #80]	; 0x50
  /* Program dead time value for channel 2 */
  slice->DC2R = config->dc2r;
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	689a      	ldr	r2, [r3, #8]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	655a      	str	r2, [r3, #84]	; 0x54
  /* Program dead time control configuration */
  slice->DTC = config->dtc;
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <XMC_ERU_ETL_Init>:
 ********************************************************************************************************************/
/* Initializes the selected ERU_ETLx channel with the config structure.  */
void XMC_ERU_ETL_Init(XMC_ERU_t *const eru,
                      const uint8_t channel,
                      const XMC_ERU_ETL_CONFIG_t *const config)
{ 
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	460b      	mov	r3, r1
 80013de:	607a      	str	r2, [r7, #4]
 80013e0:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);
 80013e2:	68f8      	ldr	r0, [r7, #12]
 80013e4:	f7fe ffe0 	bl	80003a8 <XMC_ERU_Enable>

  eru->EXISEL = (eru->EXISEL & 
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681a      	ldr	r2, [r3, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
 80013ec:	7afb      	ldrb	r3, [r7, #11]
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	4619      	mov	r1, r3
 80013f2:	230f      	movs	r3, #15
 80013f4:	408b      	lsls	r3, r1
 80013f6:	43db      	mvns	r3, r3
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
 80013f8:	401a      	ands	r2, r3
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	7af9      	ldrb	r1, [r7, #11]
 8001400:	0089      	lsls	r1, r1, #2
 8001402:	408b      	lsls	r3, r1
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
 8001404:	431a      	orrs	r2, r3
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	601a      	str	r2, [r3, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
  
  eru->EXICON[channel] = config->raw;
 800140a:	7afa      	ldrb	r2, [r7, #11]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6859      	ldr	r1, [r3, #4]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	3204      	adds	r2, #4
 8001414:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop

08001420 <_init>:
 while(1){}
}

/* Init */
__attribute__((weak)) void _init(void)
{}
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <NVIC_GetPriorityGrouping>:
  The function reads the priority grouping field from the NVIC Interrupt Controller.

    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001430:	4b04      	ldr	r3, [pc, #16]	; (8001444 <NVIC_GetPriorityGrouping+0x18>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001438:	0a1b      	lsrs	r3, r3, #8
}
 800143a:	4618      	mov	r0, r3
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	6039      	str	r1, [r7, #0]
 8001452:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001458:	2b00      	cmp	r3, #0
 800145a:	da0b      	bge.n	8001474 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145c:	490d      	ldr	r1, [pc, #52]	; (8001494 <NVIC_SetPriority+0x4c>)
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	f003 030f 	and.w	r3, r3, #15
 8001464:	3b04      	subs	r3, #4
 8001466:	683a      	ldr	r2, [r7, #0]
 8001468:	b2d2      	uxtb	r2, r2
 800146a:	0092      	lsls	r2, r2, #2
 800146c:	b2d2      	uxtb	r2, r2
 800146e:	440b      	add	r3, r1
 8001470:	761a      	strb	r2, [r3, #24]
 8001472:	e009      	b.n	8001488 <NVIC_SetPriority+0x40>
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001474:	4908      	ldr	r1, [pc, #32]	; (8001498 <NVIC_SetPriority+0x50>)
 8001476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147a:	683a      	ldr	r2, [r7, #0]
 800147c:	b2d2      	uxtb	r2, r2
 800147e:	0092      	lsls	r2, r2, #2
 8001480:	b2d2      	uxtb	r2, r2
 8001482:	440b      	add	r3, r1
 8001484:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	e000ed00 	.word	0xe000ed00
 8001498:	e000e100 	.word	0xe000e100

0800149c <NVIC_EncodePriority>:
    \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
    \param [in]       SubPriority  Subpriority value (starting from 0).
    \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800149c:	b480      	push	{r7}
 800149e:	b089      	sub	sp, #36	; 0x24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	f1c3 0307 	rsb	r3, r3, #7
 80014b6:	2b06      	cmp	r3, #6
 80014b8:	bf28      	it	cs
 80014ba:	2306      	movcs	r3, #6
 80014bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	3306      	adds	r3, #6
 80014c2:	2b06      	cmp	r3, #6
 80014c4:	d902      	bls.n	80014cc <NVIC_EncodePriority+0x30>
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	3b01      	subs	r3, #1
 80014ca:	e000      	b.n	80014ce <NVIC_EncodePriority+0x32>
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	2201      	movs	r2, #1
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	1e5a      	subs	r2, r3, #1
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	401a      	ands	r2, r3
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	2101      	movs	r1, #1
 80014e6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ea:	1e59      	subs	r1, r3, #1
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80014f0:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3724      	adds	r7, #36	; 0x24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop

08001500 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3b01      	subs	r3, #1
 800150c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001510:	d301      	bcc.n	8001516 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001512:	2301      	movs	r3, #1
 8001514:	e00f      	b.n	8001536 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001516:	4a0a      	ldr	r2, [pc, #40]	; (8001540 <SysTick_Config+0x40>)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3b01      	subs	r3, #1
 800151c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800151e:	f04f 30ff 	mov.w	r0, #4294967295
 8001522:	213f      	movs	r1, #63	; 0x3f
 8001524:	f7ff ff90 	bl	8001448 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001528:	4b05      	ldr	r3, [pc, #20]	; (8001540 <SysTick_Config+0x40>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800152e:	4b04      	ldr	r3, [pc, #16]	; (8001540 <SysTick_Config+0x40>)
 8001530:	2207      	movs	r2, #7
 8001532:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	e000e010 	.word	0xe000e010

08001544 <SYSTIMER_lInsertTimerList>:
**********************************************************************************************************************/
/*
 * This function is called to insert a timer into the timer list.
 */
static void SYSTIMER_lInsertTimerList(uint32_t tbl_index)
{
 8001544:	b490      	push	{r4, r7}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  int32_t delta_ticks;
  int32_t timer_count;
  bool found_flag = false;
 800154c:	2300      	movs	r3, #0
 800154e:	73fb      	strb	r3, [r7, #15]
   /* Get timer time */
  timer_count = (int32_t)g_timer_tbl[tbl_index].count;
 8001550:	496b      	ldr	r1, [pc, #428]	; (8001700 <SYSTIMER_lInsertTimerList+0x1bc>)
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	4613      	mov	r3, r2
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	4413      	add	r3, r2
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	440b      	add	r3, r1
 800155e:	3318      	adds	r3, #24
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	60bb      	str	r3, [r7, #8]
  /* Check if Timer list is NULL */
  if (NULL == g_timer_list)
 8001564:	4b67      	ldr	r3, [pc, #412]	; (8001704 <SYSTIMER_lInsertTimerList+0x1c0>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d109      	bne.n	8001580 <SYSTIMER_lInsertTimerList+0x3c>
  {
    /* Set this as first Timer */
    g_timer_list = &g_timer_tbl[tbl_index];
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	4613      	mov	r3, r2
 8001570:	00db      	lsls	r3, r3, #3
 8001572:	4413      	add	r3, r2
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	4a62      	ldr	r2, [pc, #392]	; (8001700 <SYSTIMER_lInsertTimerList+0x1bc>)
 8001578:	4413      	add	r3, r2
 800157a:	4a62      	ldr	r2, [pc, #392]	; (8001704 <SYSTIMER_lInsertTimerList+0x1c0>)
 800157c:	6013      	str	r3, [r2, #0]
 800157e:	e0bb      	b.n	80016f8 <SYSTIMER_lInsertTimerList+0x1b4>
  }
  /* If not, find the correct place, and insert the specified timer */
  else
  {
    object_ptr = g_timer_list;
 8001580:	4b60      	ldr	r3, [pc, #384]	; (8001704 <SYSTIMER_lInsertTimerList+0x1c0>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	617b      	str	r3, [r7, #20]
    /* Get timer tick */
    delta_ticks = timer_count;
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	613b      	str	r3, [r7, #16]
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
 800158a:	e0ab      	b.n	80016e4 <SYSTIMER_lInsertTimerList+0x1a0>
    {
      /* Get timer Count Difference */
      delta_ticks -= (int32_t)object_ptr->count;
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	461a      	mov	r2, r3
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1a9b      	subs	r3, r3, r2
 8001596:	613b      	str	r3, [r7, #16]
      /* Check for delta ticks < 0 */
      if (delta_ticks <= 0)
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	2b00      	cmp	r3, #0
 800159c:	dc7a      	bgt.n	8001694 <SYSTIMER_lInsertTimerList+0x150>
      {
        /* Check If head item */
        if (NULL != object_ptr->prev)
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d026      	beq.n	80015f4 <SYSTIMER_lInsertTimerList+0xb0>
        {
          /* If Insert to list */
          object_ptr->prev->next = &g_timer_tbl[tbl_index];
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	6859      	ldr	r1, [r3, #4]
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	4613      	mov	r3, r2
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	4413      	add	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	4a52      	ldr	r2, [pc, #328]	; (8001700 <SYSTIMER_lInsertTimerList+0x1bc>)
 80015b6:	4413      	add	r3, r2
 80015b8:	600b      	str	r3, [r1, #0]
          g_timer_tbl[tbl_index].prev = object_ptr->prev;
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	6859      	ldr	r1, [r3, #4]
 80015be:	4850      	ldr	r0, [pc, #320]	; (8001700 <SYSTIMER_lInsertTimerList+0x1bc>)
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	4613      	mov	r3, r2
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	4413      	add	r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	4403      	add	r3, r0
 80015cc:	6059      	str	r1, [r3, #4]
          g_timer_tbl[tbl_index].next = object_ptr;
 80015ce:	494c      	ldr	r1, [pc, #304]	; (8001700 <SYSTIMER_lInsertTimerList+0x1bc>)
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	4613      	mov	r3, r2
 80015d4:	00db      	lsls	r3, r3, #3
 80015d6:	4413      	add	r3, r2
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	440b      	add	r3, r1
 80015dc:	697a      	ldr	r2, [r7, #20]
 80015de:	601a      	str	r2, [r3, #0]
          object_ptr->prev = &g_timer_tbl[tbl_index];
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	4613      	mov	r3, r2
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	4413      	add	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	4a45      	ldr	r2, [pc, #276]	; (8001700 <SYSTIMER_lInsertTimerList+0x1bc>)
 80015ec:	441a      	add	r2, r3
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	e01c      	b.n	800162e <SYSTIMER_lInsertTimerList+0xea>
        }
        else
        {
          /* Set Timer as first item */
          g_timer_tbl[tbl_index].next = g_timer_list;
 80015f4:	4b43      	ldr	r3, [pc, #268]	; (8001704 <SYSTIMER_lInsertTimerList+0x1c0>)
 80015f6:	6819      	ldr	r1, [r3, #0]
 80015f8:	4841      	ldr	r0, [pc, #260]	; (8001700 <SYSTIMER_lInsertTimerList+0x1bc>)
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	4613      	mov	r3, r2
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	4413      	add	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	4403      	add	r3, r0
 8001606:	6019      	str	r1, [r3, #0]
          g_timer_list->prev = &g_timer_tbl[tbl_index];
 8001608:	4b3e      	ldr	r3, [pc, #248]	; (8001704 <SYSTIMER_lInsertTimerList+0x1c0>)
 800160a:	6819      	ldr	r1, [r3, #0]
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	4613      	mov	r3, r2
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	4413      	add	r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	4a3a      	ldr	r2, [pc, #232]	; (8001700 <SYSTIMER_lInsertTimerList+0x1bc>)
 8001618:	4413      	add	r3, r2
 800161a:	604b      	str	r3, [r1, #4]
          g_timer_list = &g_timer_tbl[tbl_index];
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	4613      	mov	r3, r2
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	4413      	add	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	4a36      	ldr	r2, [pc, #216]	; (8001700 <SYSTIMER_lInsertTimerList+0x1bc>)
 8001628:	4413      	add	r3, r2
 800162a:	4a36      	ldr	r2, [pc, #216]	; (8001704 <SYSTIMER_lInsertTimerList+0x1c0>)
 800162c:	6013      	str	r3, [r2, #0]
        }
        g_timer_tbl[tbl_index].count = g_timer_tbl[tbl_index].next->count + (uint32_t)delta_ticks;
 800162e:	4934      	ldr	r1, [pc, #208]	; (8001700 <SYSTIMER_lInsertTimerList+0x1bc>)
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	4613      	mov	r3, r2
 8001634:	00db      	lsls	r3, r3, #3
 8001636:	4413      	add	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	440b      	add	r3, r1
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	699a      	ldr	r2, [r3, #24]
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	18d1      	adds	r1, r2, r3
 8001644:	482e      	ldr	r0, [pc, #184]	; (8001700 <SYSTIMER_lInsertTimerList+0x1bc>)
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	4613      	mov	r3, r2
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	4413      	add	r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4403      	add	r3, r0
 8001652:	3318      	adds	r3, #24
 8001654:	6019      	str	r1, [r3, #0]
        g_timer_tbl[tbl_index].next->count  -= g_timer_tbl[tbl_index].count;
 8001656:	492a      	ldr	r1, [pc, #168]	; (8001700 <SYSTIMER_lInsertTimerList+0x1bc>)
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	4613      	mov	r3, r2
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	4413      	add	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	440b      	add	r3, r1
 8001664:	6819      	ldr	r1, [r3, #0]
 8001666:	4826      	ldr	r0, [pc, #152]	; (8001700 <SYSTIMER_lInsertTimerList+0x1bc>)
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	4613      	mov	r3, r2
 800166c:	00db      	lsls	r3, r3, #3
 800166e:	4413      	add	r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	4403      	add	r3, r0
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	6998      	ldr	r0, [r3, #24]
 8001678:	4c21      	ldr	r4, [pc, #132]	; (8001700 <SYSTIMER_lInsertTimerList+0x1bc>)
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	4613      	mov	r3, r2
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	4413      	add	r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4423      	add	r3, r4
 8001686:	3318      	adds	r3, #24
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	1ac3      	subs	r3, r0, r3
 800168c:	618b      	str	r3, [r1, #24]
        found_flag = true;
 800168e:	2301      	movs	r3, #1
 8001690:	73fb      	strb	r3, [r7, #15]
 8001692:	e024      	b.n	80016de <SYSTIMER_lInsertTimerList+0x19a>
      }
      /* Check for last item in list */
      else
      {
        if ((delta_ticks > 0) && (NULL == object_ptr->next))
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	2b00      	cmp	r3, #0
 8001698:	dd21      	ble.n	80016de <SYSTIMER_lInsertTimerList+0x19a>
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d11d      	bne.n	80016de <SYSTIMER_lInsertTimerList+0x19a>
        {
          /* Yes, insert into */
          g_timer_tbl[tbl_index].prev = object_ptr;
 80016a2:	4917      	ldr	r1, [pc, #92]	; (8001700 <SYSTIMER_lInsertTimerList+0x1bc>)
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	4613      	mov	r3, r2
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	4413      	add	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	440b      	add	r3, r1
 80016b0:	697a      	ldr	r2, [r7, #20]
 80016b2:	605a      	str	r2, [r3, #4]
          object_ptr->next = &g_timer_tbl[tbl_index];
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	4613      	mov	r3, r2
 80016b8:	00db      	lsls	r3, r3, #3
 80016ba:	4413      	add	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	4a10      	ldr	r2, [pc, #64]	; (8001700 <SYSTIMER_lInsertTimerList+0x1bc>)
 80016c0:	441a      	add	r2, r3
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	601a      	str	r2, [r3, #0]
          g_timer_tbl[tbl_index].count = (uint32_t)delta_ticks;
 80016c6:	6939      	ldr	r1, [r7, #16]
 80016c8:	480d      	ldr	r0, [pc, #52]	; (8001700 <SYSTIMER_lInsertTimerList+0x1bc>)
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	4613      	mov	r3, r2
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	4413      	add	r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	4403      	add	r3, r0
 80016d6:	3318      	adds	r3, #24
 80016d8:	6019      	str	r1, [r3, #0]
          found_flag = true;
 80016da:	2301      	movs	r3, #1
 80016dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	617b      	str	r3, [r7, #20]
  {
    object_ptr = g_timer_list;
    /* Get timer tick */
    delta_ticks = timer_count;
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d006      	beq.n	80016f8 <SYSTIMER_lInsertTimerList+0x1b4>
 80016ea:	7bfb      	ldrb	r3, [r7, #15]
 80016ec:	f083 0301 	eor.w	r3, r3, #1
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f47f af4a 	bne.w	800158c <SYSTIMER_lInsertTimerList+0x48>
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
    }
  }
}
 80016f8:	3718      	adds	r7, #24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc90      	pop	{r4, r7}
 80016fe:	4770      	bx	lr
 8001700:	200000d0 	.word	0x200000d0
 8001704:	200000bc 	.word	0x200000bc

08001708 <SYSTIMER_lRemoveTimerList>:

/*
 * This function is called to remove a timer from the timer list. 
 */
static void SYSTIMER_lRemoveTimerList(uint32_t tbl_index)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = &g_timer_tbl[tbl_index];
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	4613      	mov	r3, r2
 8001714:	00db      	lsls	r3, r3, #3
 8001716:	4413      	add	r3, r2
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	4a29      	ldr	r2, [pc, #164]	; (80017c0 <SYSTIMER_lRemoveTimerList+0xb8>)
 800171c:	4413      	add	r3, r2
 800171e:	60fb      	str	r3, [r7, #12]
  /* Check whether only one timer available */
  if ((NULL == object_ptr->prev) && (NULL == object_ptr->next ))
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d107      	bne.n	8001738 <SYSTIMER_lRemoveTimerList+0x30>
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d103      	bne.n	8001738 <SYSTIMER_lRemoveTimerList+0x30>
  {
    /* set timer list as NULL */ 
    g_timer_list = NULL;                  
 8001730:	4b24      	ldr	r3, [pc, #144]	; (80017c4 <SYSTIMER_lRemoveTimerList+0xbc>)
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	e03d      	b.n	80017b4 <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the first item in timer list */
  else if (NULL == object_ptr->prev)
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d114      	bne.n	800176a <SYSTIMER_lRemoveTimerList+0x62>
  {
    /* Remove timer from list, and reset timer list */
    g_timer_list  = object_ptr->next;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a1f      	ldr	r2, [pc, #124]	; (80017c4 <SYSTIMER_lRemoveTimerList+0xbc>)
 8001746:	6013      	str	r3, [r2, #0]
    g_timer_list->prev = NULL;
 8001748:	4b1e      	ldr	r3, [pc, #120]	; (80017c4 <SYSTIMER_lRemoveTimerList+0xbc>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2200      	movs	r2, #0
 800174e:	605a      	str	r2, [r3, #4]
    g_timer_list->count += object_ptr->count;
 8001750:	4b1c      	ldr	r3, [pc, #112]	; (80017c4 <SYSTIMER_lRemoveTimerList+0xbc>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a1b      	ldr	r2, [pc, #108]	; (80017c4 <SYSTIMER_lRemoveTimerList+0xbc>)
 8001756:	6812      	ldr	r2, [r2, #0]
 8001758:	6991      	ldr	r1, [r2, #24]
 800175a:	68fa      	ldr	r2, [r7, #12]
 800175c:	6992      	ldr	r2, [r2, #24]
 800175e:	440a      	add	r2, r1
 8001760:	619a      	str	r2, [r3, #24]
    object_ptr->next    = NULL;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	e024      	b.n	80017b4 <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the last item in timer list */
  else if (NULL == object_ptr->next)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d107      	bne.n	8001782 <SYSTIMER_lRemoveTimerList+0x7a>
  {
    /* Remove timer from list */
    object_ptr->prev->next = NULL;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2200      	movs	r2, #0
 800177e:	605a      	str	r2, [r3, #4]
 8001780:	e018      	b.n	80017b4 <SYSTIMER_lRemoveTimerList+0xac>
  }
  else                       
  {
    /* Remove timer from list */
    object_ptr->prev->next  =  object_ptr->next;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	68fa      	ldr	r2, [r7, #12]
 8001788:	6812      	ldr	r2, [r2, #0]
 800178a:	601a      	str	r2, [r3, #0]
    object_ptr->next->prev  =  object_ptr->prev;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	68fa      	ldr	r2, [r7, #12]
 8001792:	6852      	ldr	r2, [r2, #4]
 8001794:	605a      	str	r2, [r3, #4]
    object_ptr->next->count += object_ptr->count;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	6812      	ldr	r2, [r2, #0]
 800179e:	6991      	ldr	r1, [r2, #24]
 80017a0:	68fa      	ldr	r2, [r7, #12]
 80017a2:	6992      	ldr	r2, [r2, #24]
 80017a4:	440a      	add	r2, r1
 80017a6:	619a      	str	r2, [r3, #24]
    object_ptr->next = NULL;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2200      	movs	r2, #0
 80017b2:	605a      	str	r2, [r3, #4]
  }
}
 80017b4:	3714      	adds	r7, #20
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	200000d0 	.word	0x200000d0
 80017c4:	200000bc 	.word	0x200000bc

080017c8 <SYSTIMER_lTimerHandler>:

/*
 * Handler function called from SysTick event handler.
 */
static void SYSTIMER_lTimerHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
 80017ce:	4b2b      	ldr	r3, [pc, #172]	; (800187c <SYSTIMER_lTimerHandler+0xb4>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	607b      	str	r3, [r7, #4]
  while ((NULL != object_ptr) && (0U == object_ptr->count))
 80017d4:	e048      	b.n	8001868 <SYSTIMER_lTimerHandler+0xa0>
  {
    if (true == object_ptr->delete_swtmr)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d013      	beq.n	8001808 <SYSTIMER_lTimerHandler+0x40>
    {
      /* Yes, remove this timer from timer list */
      SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	695b      	ldr	r3, [r3, #20]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff ff8f 	bl	8001708 <SYSTIMER_lRemoveTimerList>
      /* Set timer status as SYSTIMER_STATE_NOT_INITIALIZED */
      object_ptr->state = SYSTIMER_STATE_NOT_INITIALIZED;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	735a      	strb	r2, [r3, #13]
      /* Release resource which are hold by this timer */
      g_timer_tracker &= ~(1U << object_ptr->id);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	695b      	ldr	r3, [r3, #20]
 80017f4:	461a      	mov	r2, r3
 80017f6:	2301      	movs	r3, #1
 80017f8:	4093      	lsls	r3, r2
 80017fa:	43da      	mvns	r2, r3
 80017fc:	4b20      	ldr	r3, [pc, #128]	; (8001880 <SYSTIMER_lTimerHandler+0xb8>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4013      	ands	r3, r2
 8001802:	4a1f      	ldr	r2, [pc, #124]	; (8001880 <SYSTIMER_lTimerHandler+0xb8>)
 8001804:	6013      	str	r3, [r2, #0]
 8001806:	e02c      	b.n	8001862 <SYSTIMER_lTimerHandler+0x9a>
    }
    /* Check whether timer is a one shot timer */
    else if (SYSTIMER_MODE_ONE_SHOT == object_ptr->mode)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	7b1b      	ldrb	r3, [r3, #12]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d10e      	bne.n	800182e <SYSTIMER_lTimerHandler+0x66>
    {
      /* Yes, remove this timer from timer list */
      SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	695b      	ldr	r3, [r3, #20]
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff ff77 	bl	8001708 <SYSTIMER_lRemoveTimerList>
      /* Set timer status as SYSTIMER_STATE_STOPPED */
      object_ptr->state = SYSTIMER_STATE_STOPPED;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2202      	movs	r2, #2
 800181e:	735a      	strb	r2, [r3, #13]
      /* Call timer callback function */
      (object_ptr->callback)(object_ptr->args);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	6912      	ldr	r2, [r2, #16]
 8001828:	4610      	mov	r0, r2
 800182a:	4798      	blx	r3
 800182c:	e019      	b.n	8001862 <SYSTIMER_lTimerHandler+0x9a>
    }
    /* Check whether timer is periodic timer */
    else if (SYSTIMER_MODE_PERIODIC == object_ptr->mode)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	7b1b      	ldrb	r3, [r3, #12]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d114      	bne.n	8001860 <SYSTIMER_lTimerHandler+0x98>
    {
      /* Yes, remove this timer from timer list */
      SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff ff64 	bl	8001708 <SYSTIMER_lRemoveTimerList>
      /* Reset timer tick */
      object_ptr->count = object_ptr->reload;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	69da      	ldr	r2, [r3, #28]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	619a      	str	r2, [r3, #24]
      /* Insert timer into timer list */
      SYSTIMER_lInsertTimerList((uint32_t)object_ptr->id);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	695b      	ldr	r3, [r3, #20]
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff fe79 	bl	8001544 <SYSTIMER_lInsertTimerList>
      /* Call timer callback function */
      (object_ptr->callback)(object_ptr->args);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	6912      	ldr	r2, [r2, #16]
 800185a:	4610      	mov	r0, r2
 800185c:	4798      	blx	r3
 800185e:	e000      	b.n	8001862 <SYSTIMER_lTimerHandler+0x9a>
    }
    else
    {
      break;
 8001860:	e009      	b.n	8001876 <SYSTIMER_lTimerHandler+0xae>
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
 8001862:	4b06      	ldr	r3, [pc, #24]	; (800187c <SYSTIMER_lTimerHandler+0xb4>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	607b      	str	r3, [r7, #4]
static void SYSTIMER_lTimerHandler(void)
{
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
  while ((NULL != object_ptr) && (0U == object_ptr->count))
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <SYSTIMER_lTimerHandler+0xae>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	699b      	ldr	r3, [r3, #24]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d0af      	beq.n	80017d6 <SYSTIMER_lTimerHandler+0xe>
      break;
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
  }
}
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	200000bc 	.word	0x200000bc
 8001880:	200000c0 	.word	0x200000c0

08001884 <SysTick_Handler>:

/*
 *  SysTick Event Handler.
 */
void SysTick_Handler(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = g_timer_list;
 800188a:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <SysTick_Handler+0x40>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	607b      	str	r3, [r7, #4]
  g_systick_count++;
 8001890:	4b0d      	ldr	r3, [pc, #52]	; (80018c8 <SysTick_Handler+0x44>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	3301      	adds	r3, #1
 8001896:	4a0c      	ldr	r2, [pc, #48]	; (80018c8 <SysTick_Handler+0x44>)
 8001898:	6013      	str	r3, [r2, #0]

  if (NULL != object_ptr)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d00e      	beq.n	80018be <SysTick_Handler+0x3a>
  {
    if (object_ptr->count > 1UL)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d905      	bls.n	80018b4 <SysTick_Handler+0x30>
    {
      object_ptr->count--;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	1e5a      	subs	r2, r3, #1
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	619a      	str	r2, [r3, #24]
 80018b2:	e004      	b.n	80018be <SysTick_Handler+0x3a>
    }
    else
    {
      object_ptr->count = 0U;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	619a      	str	r2, [r3, #24]
      SYSTIMER_lTimerHandler();
 80018ba:	f7ff ff85 	bl	80017c8 <SYSTIMER_lTimerHandler>
    }
  }
}
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	200000bc 	.word	0x200000bc
 80018c8:	200000c4 	.word	0x200000c4

080018cc <SYSTIMER_Init>:

/*
 * Initialization function which initializes the SYSTIMER APP, configures SysTick timer and SysTick exception.
 */
SYSTIMER_STATUS_t SYSTIMER_Init(SYSTIMER_t *handle)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status = SYSTIMER_STATUS_SUCCESS;
 80018d4:	2300      	movs	r3, #0
 80018d6:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("SYSTIMER_Init: SYSTIMER APP handle pointer uninitialized", (handle != NULL));

  /* Check APP initialization status to ensure whether SYSTIMER_Init called or not, initialize SYSTIMER if
   * SYSTIMER_Init called first time.
   */
  if (false == handle->init_status)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	f083 0301 	eor.w	r3, r3, #1
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d020      	beq.n	8001928 <SYSTIMER_Init+0x5c>
  {
    /* Initialize the header of the list */
    g_timer_list = NULL;
 80018e6:	4b13      	ldr	r3, [pc, #76]	; (8001934 <SYSTIMER_Init+0x68>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
    /* Initialize SysTick timer */
    status = (SYSTIMER_STATUS_t)SysTick_Config((uint32_t)(SYSTIMER_SYSTICK_CLOCK * SYSTIMER_TICK_PERIOD));
 80018ec:	4812      	ldr	r0, [pc, #72]	; (8001938 <SYSTIMER_Init+0x6c>)
 80018ee:	f7ff fe07 	bl	8001500 <SysTick_Config>
 80018f2:	4603      	mov	r3, r0
 80018f4:	73fb      	strb	r3, [r7, #15]

    if (SYSTIMER_STATUS_FAILURE == status)
 80018f6:	7bfb      	ldrb	r3, [r7, #15]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d015      	beq.n	8001928 <SYSTIMER_Init+0x5c>
    }
    else
    {
#if (UC_FAMILY == XMC4)
      /* setting of First SW Timer period is always and subpriority value for XMC4000 devices */
      NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(
 80018fc:	f7ff fd96 	bl	800142c <NVIC_GetPriorityGrouping>
 8001900:	4603      	mov	r3, r0
 8001902:	4618      	mov	r0, r3
 8001904:	213f      	movs	r1, #63	; 0x3f
 8001906:	2200      	movs	r2, #0
 8001908:	f7ff fdc8 	bl	800149c <NVIC_EncodePriority>
 800190c:	4603      	mov	r3, r0
 800190e:	f04f 30ff 	mov.w	r0, #4294967295
 8001912:	4619      	mov	r1, r3
 8001914:	f7ff fd98 	bl	8001448 <NVIC_SetPriority>
      NVIC_GetPriorityGrouping(), SYSTIMER_PRIORITY, SYSTIMER_SUBPRIORITY));
#elif (UC_FAMILY == XMC1)
      /* setting of priority value for XMC1000 devices */
      NVIC_SetPriority(SysTick_IRQn, SYSTIMER_PRIORITY);
#endif      
      g_timer_tracker = 0U;
 8001918:	4b08      	ldr	r3, [pc, #32]	; (800193c <SYSTIMER_Init+0x70>)
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
      /* Update the Initialization status of the SYSTIMER APP instance */
      handle->init_status = true;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2201      	movs	r2, #1
 8001922:	701a      	strb	r2, [r3, #0]
      status = SYSTIMER_STATUS_SUCCESS;
 8001924:	2300      	movs	r3, #0
 8001926:	73fb      	strb	r3, [r7, #15]
    }
  }

  return (status);
 8001928:	7bfb      	ldrb	r3, [r7, #15]
}
 800192a:	4618      	mov	r0, r3
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	200000bc 	.word	0x200000bc
 8001938:	0001d4c0 	.word	0x0001d4c0
 800193c:	200000c0 	.word	0x200000c0

08001940 <XMC_CCU8_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_DisableClock()<BR>  XMC_CCU8_EnableMultipleClocks()<BR>  XMC_CCU8_StartPrescaler()<BR>  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_EnableClock(XMC_CCU8_MODULE_t *const module, const uint8_t slice_number)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	460b      	mov	r3, r1
 800194a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1 << slice_number);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	68da      	ldr	r2, [r3, #12]
 8001950:	78fb      	ldrb	r3, [r7, #3]
 8001952:	2101      	movs	r1, #1
 8001954:	fa01 f303 	lsl.w	r3, r1, r3
 8001958:	431a      	orrs	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	60da      	str	r2, [r3, #12]
}
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <XMC_CCU8_SLICE_EnableTrap>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_TrapConfig()<BR>  XMC_CCU8_SLICE_DisableTrap()<BR>  XMC_CCU8_SLICE_ConfigureEvent()<BR> 
 *  XMC_CCU8_SLICE_SetInput().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_EnableTrap(XMC_CCU8_SLICE_t *const slice, const uint32_t out_mask)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_EnableTrap:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TC |= (uint32_t)out_mask << CCU8_CC8_TC_TRAPE0_Pos;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	695a      	ldr	r2, [r3, #20]
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	045b      	lsls	r3, r3, #17
 800197a:	431a      	orrs	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	615a      	str	r2, [r3, #20]
}
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop

0800198c <XMC_CCU8_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StartTimer(XMC_CCU8_SLICE_t *const slice)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCSET = CCU8_CC8_TCSET_TRBS_Msk;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	60da      	str	r2, [r3, #12]
}
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <XMC_CCU8_SLICE_GetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_SetTimerPeriodMatch().
 */
__STATIC_INLINE uint16_t XMC_CCU8_SLICE_GetTimerPeriodMatch(const XMC_CCU8_SLICE_t *const slice)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_GetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  return((uint16_t) slice->PR);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b0:	b29b      	uxth	r3, r3
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop

080019c0 <XMC_CCU8_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU8_EnableShadowTransfer(XMC_CCU8_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_EnableShadowTransfer:Invalid module Pointer", XMC_CCU8_IsValidModule(module));
  module->GCSS |= (uint32_t)shadow_transfer_msk;  
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	691a      	ldr	r2, [r3, #16]
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	431a      	orrs	r2, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	611a      	str	r2, [r3, #16]
}
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <XMC_CCU8_SLICE_EnableEvent>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_SetInterruptNode()<BR>  XMC_CCU8_SLICE_EnableMultipleEvents()<BR>  XMC_CCU8_SLICE_DisableEvent()<BR> 
 *  XMC_CCU8_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_EnableEvent(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_IRQ_ID_t event)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	460b      	mov	r3, r1
 80019ea:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));

  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80019f2:	78fb      	ldrb	r3, [r7, #3]
 80019f4:	2101      	movs	r1, #1
 80019f6:	fa01 f303 	lsl.w	r3, r1, r3
 80019fa:	431a      	orrs	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <PWM_CCU8_Init>:
  return version;
}

/* This function initializes the app */
PWM_CCU8_STATUS_t PWM_CCU8_Init(PWM_CCU8_t* handle_ptr)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  PWM_CCU8_STATUS_t status;
  GLOBAL_CCU8_STATUS_t status_ccu8_global;
  uint32_t frequency_module;
  uint32_t prescalar;

  status = PWM_CCU8_STATUS_FAILURE;
 8001a14:	2301      	movs	r3, #1
 8001a16:	75fb      	strb	r3, [r7, #23]
  status_ccu8_global = GLOBAL_CCU8_STATUS_FAILURE;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	75bb      	strb	r3, [r7, #22]
  XMC_ASSERT("PWM_CCU8_Init:handle_ptr is NULL", (handle_ptr != NULL));

  if (PWM_CCU8_STATE_UNINITIALIZED == handle_ptr->state)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	7f1b      	ldrb	r3, [r3, #28]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	f040 809a 	bne.w	8001b5a <PWM_CCU8_Init+0x14e>
  {
    /* Initialize consumed Apps */
    status_ccu8_global = GLOBAL_CCU8_Init(handle_ptr->config_ptr->global_ccu8_handle);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f000 fbb2 	bl	8002198 <GLOBAL_CCU8_Init>
 8001a34:	4603      	mov	r3, r0
 8001a36:	75bb      	strb	r3, [r7, #22]

    /* Initialize CCU8x_CC8y slice */
    if (GLOBAL_CCU8_STATUS_SUCCESS == status_ccu8_global)
 8001a38:	7dbb      	ldrb	r3, [r7, #22]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f040 8089 	bne.w	8001b52 <PWM_CCU8_Init+0x146>
    {
      XMC_DEBUG("PWM_CCU8_Init:Initilizing slice");

      /* Configure CCU8x_CC8y slice as timer */
      XMC_CCU8_SLICE_CompareInit(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689a      	ldr	r2, [r3, #8]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4a:	4610      	mov	r0, r2
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	f7ff f991 	bl	8000d74 <XMC_CCU8_SLICE_CompareInit>
      /* Set period match value of the timer  */
      XMC_CCU8_SLICE_SetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->period_value);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	689a      	ldr	r2, [r3, #8]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	885b      	ldrh	r3, [r3, #2]
 8001a5c:	4610      	mov	r0, r2
 8001a5e:	4619      	mov	r1, r3
 8001a60:	f7ff fc20 	bl	80012a4 <XMC_CCU8_SLICE_SetTimerPeriodMatch>

      /* Set timer compare match value for channel 1 */
      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689a      	ldr	r2, [r3, #8]
                                          (uint16_t) handle_ptr->config_ptr->compare1_value);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
      XMC_CCU8_SLICE_CompareInit(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr);
      /* Set period match value of the timer  */
      XMC_CCU8_SLICE_SetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->period_value);

      /* Set timer compare match value for channel 1 */
      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
 8001a6c:	889b      	ldrh	r3, [r3, #4]
 8001a6e:	4610      	mov	r0, r2
 8001a70:	2100      	movs	r1, #0
 8001a72:	461a      	mov	r2, r3
 8001a74:	f7ff fc24 	bl	80012c0 <XMC_CCU8_SLICE_SetTimerCompareMatch>
                                          (uint16_t) handle_ptr->config_ptr->compare1_value);
      /* Set timer compare match value for channel 2 */
      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_2,
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689a      	ldr	r2, [r3, #8]
                                          (uint16_t) handle_ptr->config_ptr->compare2_value);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]

      /* Set timer compare match value for channel 1 */
      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
                                          (uint16_t) handle_ptr->config_ptr->compare1_value);
      /* Set timer compare match value for channel 2 */
      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_2,
 8001a80:	88db      	ldrh	r3, [r3, #6]
 8001a82:	4610      	mov	r0, r2
 8001a84:	2101      	movs	r1, #1
 8001a86:	461a      	mov	r2, r3
 8001a88:	f7ff fc1a 	bl	80012c0 <XMC_CCU8_SLICE_SetTimerCompareMatch>
                                          (uint16_t) handle_ptr->config_ptr->compare2_value);

      if ((1U == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch1_enable) || (1U
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a92:	78db      	ldrb	r3, [r3, #3]
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d108      	bne.n	8001ab0 <PWM_CCU8_Init+0xa4>
          == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch2_enable))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa4:	78db      	ldrb	r3, [r3, #3]
 8001aa6:	f003 0304 	and.w	r3, r3, #4
 8001aaa:	b2db      	uxtb	r3, r3
                                          (uint16_t) handle_ptr->config_ptr->compare1_value);
      /* Set timer compare match value for channel 2 */
      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_2,
                                          (uint16_t) handle_ptr->config_ptr->compare2_value);

      if ((1U == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch1_enable) || (1U
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d008      	beq.n	8001ac2 <PWM_CCU8_Init+0xb6>
          == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch2_enable))
      {
        XMC_CCU8_SetMultiChannelShadowTransferMode(handle_ptr->ccu8_module_ptr,
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685a      	ldr	r2, [r3, #4]
                                                   (uint32_t) handle_ptr->config_ptr->mcm_shadow_txfr_mode);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          (uint16_t) handle_ptr->config_ptr->compare2_value);

      if ((1U == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch1_enable) || (1U
          == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch2_enable))
      {
        XMC_CCU8_SetMultiChannelShadowTransferMode(handle_ptr->ccu8_module_ptr,
 8001aba:	4610      	mov	r0, r2
 8001abc:	4619      	mov	r1, r3
 8001abe:	f7ff f993 	bl	8000de8 <XMC_CCU8_SetMultiChannelShadowTransferMode>
        XMC_CCU8_SLICE_EnableCascadedShadowTransfer(handle_ptr->ccu8_slice_ptr);
      }
#endif

      /* Transfer value from shadow timer registers to actual timer registers */
      XMC_CCU8_EnableShadowTransfer(handle_ptr->ccu8_module_ptr, handle_ptr->shadow_txfr_msk);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685a      	ldr	r2, [r3, #4]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	4610      	mov	r0, r2
 8001acc:	4619      	mov	r1, r3
 8001ace:	f7ff ff77 	bl	80019c0 <XMC_CCU8_EnableShadowTransfer>
      XMC_CCU8_EnableShadowTransfer(handle_ptr->ccu8_module_ptr, handle_ptr->dither_shadow_txfr_msk);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685a      	ldr	r2, [r3, #4]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	695b      	ldr	r3, [r3, #20]
 8001ada:	4610      	mov	r0, r2
 8001adc:	4619      	mov	r1, r3
 8001ade:	f7ff ff6f 	bl	80019c0 <XMC_CCU8_EnableShadowTransfer>

      XMC_CCU8_SLICE_DeadTimeInit(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->dt_config_ptr);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	689a      	ldr	r2, [r3, #8]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aec:	4610      	mov	r0, r2
 8001aee:	4619      	mov	r1, r3
 8001af0:	f7ff fc5a 	bl	80013a8 <XMC_CCU8_SLICE_DeadTimeInit>

      /* Configure events */
      PWM_CCU8_lConfigure_Events(handle_ptr);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f000 f957 	bl	8001da8 <PWM_CCU8_lConfigure_Events>

      /* Enable the interrupts */
      PWM_CCU8_lInit_Interrupt(handle_ptr);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 f834 	bl	8001b68 <PWM_CCU8_lInit_Interrupt>

      /*Initializes the GPIO*/
      PWM_CCU8_lInit_GPIO(handle_ptr);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f000 f8f5 	bl	8001cf0 <PWM_CCU8_lInit_GPIO>

      frequency_module = handle_ptr->config_ptr->global_ccu8_handle->module_frequency;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	613b      	str	r3, [r7, #16]
      prescalar = (uint32_t) handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->prescaler_initval;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b18:	7b1b      	ldrb	r3, [r3, #12]
 8001b1a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	60fb      	str	r3, [r7, #12]
      frequency_module = frequency_module / ((uint32_t) 1 << prescalar);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	fa22 f303 	lsr.w	r3, r2, r3
 8001b2a:	613b      	str	r3, [r7, #16]
      handle_ptr->frequency_tclk = frequency_module;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	621a      	str	r2, [r3, #32]

      handle_ptr->state = PWM_CCU8_STATE_INITIALIZED;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2201      	movs	r2, #1
 8001b36:	771a      	strb	r2, [r3, #28]
      status = PWM_CCU8_STATUS_SUCCESS;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	75fb      	strb	r3, [r7, #23]

      /* Start the PWM generation if start at initialization is enabled */
      if ((bool) true == handle_ptr->config_ptr->start_control)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d00b      	beq.n	8001b5e <PWM_CCU8_Init+0x152>
      {
        status = PWM_CCU8_Start(handle_ptr);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 fa1e 	bl	8001f88 <PWM_CCU8_Start>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	75fb      	strb	r3, [r7, #23]
 8001b50:	e005      	b.n	8001b5e <PWM_CCU8_Init+0x152>
      }

    }
    else
    {
      handle_ptr->state = PWM_CCU8_STATE_UNINITIALIZED;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	771a      	strb	r2, [r3, #28]
 8001b58:	e001      	b.n	8001b5e <PWM_CCU8_Init+0x152>
    }

  }
  else
  {
    status = PWM_CCU8_STATUS_ALREADY_INITIALIZED;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	75fb      	strb	r3, [r7, #23]
    XMC_DEBUG("PWM_CCU8_Init:PWM_CCU8_STATUS_ALREADY_INITIALIZED");
  }

  return (status);
 8001b5e:	7dfb      	ldrb	r3, [r7, #23]
} /* end of PWM_CCU8_Init() api */
 8001b60:	4618      	mov	r0, r3
 8001b62:	3718      	adds	r7, #24
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <PWM_CCU8_lInit_Interrupt>:

static void PWM_CCU8_lInit_Interrupt(PWM_CCU8_t* handle_ptr)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]

  /* Enable events. Bind event to corresponding service request node. */

  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH,
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_per_match);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
static void PWM_CCU8_lInit_Interrupt(PWM_CCU8_t* handle_ptr)
{

  /* Enable events. Bind event to corresponding service request node. */

  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH,
 8001b78:	7c5b      	ldrb	r3, [r3, #17]
 8001b7a:	4610      	mov	r0, r2
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	461a      	mov	r2, r3
 8001b80:	f7ff fbb6 	bl	80012f0 <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_per_match);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1,
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_cmp1_match_up);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]

  /* Enable events. Bind event to corresponding service request node. */

  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH,
                                  handle_ptr->config_ptr->sr_per_match);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1,
 8001b8c:	7c9b      	ldrb	r3, [r3, #18]
 8001b8e:	4610      	mov	r0, r2
 8001b90:	2102      	movs	r1, #2
 8001b92:	461a      	mov	r2, r3
 8001b94:	f7ff fbac 	bl	80012f0 <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_cmp1_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1,
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_cmp1_match_down);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]

  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH,
                                  handle_ptr->config_ptr->sr_per_match);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1,
                                  handle_ptr->config_ptr->sr_cmp1_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1,
 8001ba0:	7cdb      	ldrb	r3, [r3, #19]
 8001ba2:	4610      	mov	r0, r2
 8001ba4:	2103      	movs	r1, #3
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	f7ff fba2 	bl	80012f0 <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_cmp1_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2,
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_cmp2_match_up);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
                                  handle_ptr->config_ptr->sr_per_match);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1,
                                  handle_ptr->config_ptr->sr_cmp1_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1,
                                  handle_ptr->config_ptr->sr_cmp1_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2,
 8001bb4:	7d1b      	ldrb	r3, [r3, #20]
 8001bb6:	4610      	mov	r0, r2
 8001bb8:	2104      	movs	r1, #4
 8001bba:	461a      	mov	r2, r3
 8001bbc:	f7ff fb98 	bl	80012f0 <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_cmp2_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2,
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_cmp2_match_down);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
                                  handle_ptr->config_ptr->sr_cmp1_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1,
                                  handle_ptr->config_ptr->sr_cmp1_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2,
                                  handle_ptr->config_ptr->sr_cmp2_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2,
 8001bc8:	7d5b      	ldrb	r3, [r3, #21]
 8001bca:	4610      	mov	r0, r2
 8001bcc:	2105      	movs	r1, #5
 8001bce:	461a      	mov	r2, r3
 8001bd0:	f7ff fb8e 	bl	80012f0 <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_cmp2_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH,
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_one_match_down);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
                                  handle_ptr->config_ptr->sr_cmp1_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2,
                                  handle_ptr->config_ptr->sr_cmp2_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2,
                                  handle_ptr->config_ptr->sr_cmp2_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH,
 8001bdc:	7d9b      	ldrb	r3, [r3, #22]
 8001bde:	4610      	mov	r0, r2
 8001be0:	2101      	movs	r1, #1
 8001be2:	461a      	mov	r2, r3
 8001be4:	f7ff fb84 	bl	80012f0 <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_one_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT0,
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_e0);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
                                  handle_ptr->config_ptr->sr_cmp2_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2,
                                  handle_ptr->config_ptr->sr_cmp2_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH,
                                  handle_ptr->config_ptr->sr_one_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT0,
 8001bf0:	7ddb      	ldrb	r3, [r3, #23]
 8001bf2:	4610      	mov	r0, r2
 8001bf4:	2108      	movs	r1, #8
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	f7ff fb7a 	bl	80012f0 <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_e0);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT1,
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_e1);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
                                  handle_ptr->config_ptr->sr_cmp2_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH,
                                  handle_ptr->config_ptr->sr_one_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT0,
                                  handle_ptr->config_ptr->sr_e0);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT1,
 8001c04:	7e1b      	ldrb	r3, [r3, #24]
 8001c06:	4610      	mov	r0, r2
 8001c08:	2109      	movs	r1, #9
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	f7ff fb70 	bl	80012f0 <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_e1);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT2,
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_e2);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
                                  handle_ptr->config_ptr->sr_one_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT0,
                                  handle_ptr->config_ptr->sr_e0);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT1,
                                  handle_ptr->config_ptr->sr_e1);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT2,
 8001c18:	7e5b      	ldrb	r3, [r3, #25]
 8001c1a:	4610      	mov	r0, r2
 8001c1c:	210a      	movs	r1, #10
 8001c1e:	461a      	mov	r2, r3
 8001c20:	f7ff fb66 	bl	80012f0 <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_e2);

  if ((bool) true == handle_ptr->config_ptr->int_per_match)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	7a1b      	ldrb	r3, [r3, #8]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d005      	beq.n	8001c3a <PWM_CCU8_lInit_Interrupt+0xd2>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt period match enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	4618      	mov	r0, r3
 8001c34:	2100      	movs	r1, #0
 8001c36:	f7ff fed3 	bl	80019e0 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp1_match_up)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	7a5b      	ldrb	r3, [r3, #9]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d005      	beq.n	8001c50 <PWM_CCU8_lInit_Interrupt+0xe8>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt compare match ch1 up enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	2102      	movs	r1, #2
 8001c4c:	f7ff fec8 	bl	80019e0 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp1_match_down)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	7a9b      	ldrb	r3, [r3, #10]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d005      	beq.n	8001c66 <PWM_CCU8_lInit_Interrupt+0xfe>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt compare match ch1 down enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	2103      	movs	r1, #3
 8001c62:	f7ff febd 	bl	80019e0 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp2_match_up)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	7adb      	ldrb	r3, [r3, #11]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d005      	beq.n	8001c7c <PWM_CCU8_lInit_Interrupt+0x114>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt compare match ch2 up enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	4618      	mov	r0, r3
 8001c76:	2104      	movs	r1, #4
 8001c78:	f7ff feb2 	bl	80019e0 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp2_match_down)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	7b1b      	ldrb	r3, [r3, #12]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d005      	beq.n	8001c92 <PWM_CCU8_lInit_Interrupt+0x12a>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt compare match ch2 down enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	2105      	movs	r1, #5
 8001c8e:	f7ff fea7 	bl	80019e0 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_one_match_down)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	7b5b      	ldrb	r3, [r3, #13]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d005      	beq.n	8001ca8 <PWM_CCU8_lInit_Interrupt+0x140>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt one match enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	f7ff fe9c 	bl	80019e0 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_e0)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	7b9b      	ldrb	r3, [r3, #14]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d005      	beq.n	8001cbe <PWM_CCU8_lInit_Interrupt+0x156>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt event 0 enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT0);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	2108      	movs	r1, #8
 8001cba:	f7ff fe91 	bl	80019e0 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_e1)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	7bdb      	ldrb	r3, [r3, #15]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d005      	beq.n	8001cd4 <PWM_CCU8_lInit_Interrupt+0x16c>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt event 1 enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT1);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	2109      	movs	r1, #9
 8001cd0:	f7ff fe86 	bl	80019e0 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_e2)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	7c1b      	ldrb	r3, [r3, #16]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d005      	beq.n	8001cea <PWM_CCU8_lInit_Interrupt+0x182>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt event 2 enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT2);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	210a      	movs	r1, #10
 8001ce6:	f7ff fe7b 	bl	80019e0 <XMC_CCU8_SLICE_EnableEvent>
  }
}
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <PWM_CCU8_lInit_GPIO>:
static void PWM_CCU8_lInit_GPIO(PWM_CCU8_t* handle_ptr)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  if ((bool) true == handle_ptr->config_ptr->gpio_ch1_out0_enable)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d00e      	beq.n	8001d22 <PWM_CCU8_lInit_GPIO+0x32>
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch1_out0_ptr, handle_ptr->config_ptr->gpio_ch1_out0_pin,
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
                  handle_ptr->config_ptr->gpio_ch1_out0_config_ptr);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
}
static void PWM_CCU8_lInit_GPIO(PWM_CCU8_t* handle_ptr)
{
  if ((bool) true == handle_ptr->config_ptr->gpio_ch1_out0_enable)
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch1_out0_ptr, handle_ptr->config_ptr->gpio_ch1_out0_pin,
 8001d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d18:	4608      	mov	r0, r1
 8001d1a:	4611      	mov	r1, r2
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	f7fe fb55 	bl	80003cc <XMC_GPIO_Init>
                  handle_ptr->config_ptr->gpio_ch1_out0_config_ptr);
  }

  if ((bool) true == handle_ptr->config_ptr->gpio_ch1_out1_enable)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d00e      	beq.n	8001d4c <PWM_CCU8_lInit_GPIO+0x5c>
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch1_out1_ptr, handle_ptr->config_ptr->gpio_ch1_out1_pin,
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
                  handle_ptr->config_ptr->gpio_ch1_out1_config_ptr);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
                  handle_ptr->config_ptr->gpio_ch1_out0_config_ptr);
  }

  if ((bool) true == handle_ptr->config_ptr->gpio_ch1_out1_enable)
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch1_out1_ptr, handle_ptr->config_ptr->gpio_ch1_out1_pin,
 8001d40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d42:	4608      	mov	r0, r1
 8001d44:	4611      	mov	r1, r2
 8001d46:	461a      	mov	r2, r3
 8001d48:	f7fe fb40 	bl	80003cc <XMC_GPIO_Init>
                  handle_ptr->config_ptr->gpio_ch1_out1_config_ptr);
  }

  if ((bool) true == handle_ptr->config_ptr->gpio_ch2_out2_enable)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d00e      	beq.n	8001d76 <PWM_CCU8_lInit_GPIO+0x86>
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch2_out2_ptr, handle_ptr->config_ptr->gpio_ch2_out2_pin,
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
                  handle_ptr->config_ptr->gpio_ch2_out2_config_ptr);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
                  handle_ptr->config_ptr->gpio_ch1_out1_config_ptr);
  }

  if ((bool) true == handle_ptr->config_ptr->gpio_ch2_out2_enable)
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch2_out2_ptr, handle_ptr->config_ptr->gpio_ch2_out2_pin,
 8001d6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d6c:	4608      	mov	r0, r1
 8001d6e:	4611      	mov	r1, r2
 8001d70:	461a      	mov	r2, r3
 8001d72:	f7fe fb2b 	bl	80003cc <XMC_GPIO_Init>
                  handle_ptr->config_ptr->gpio_ch2_out2_config_ptr);
  }

  if ((bool) true == handle_ptr->config_ptr->gpio_ch2_out3_enable)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d00f      	beq.n	8001da2 <PWM_CCU8_lInit_GPIO+0xb2>
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch2_out3_ptr, handle_ptr->config_ptr->gpio_ch2_out3_pin,
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
                  handle_ptr->config_ptr->gpio_ch2_out3_config_ptr);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
                  handle_ptr->config_ptr->gpio_ch2_out2_config_ptr);
  }

  if ((bool) true == handle_ptr->config_ptr->gpio_ch2_out3_enable)
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch2_out3_ptr, handle_ptr->config_ptr->gpio_ch2_out3_pin,
 8001d94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d98:	4608      	mov	r0, r1
 8001d9a:	4611      	mov	r1, r2
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	f7fe fb15 	bl	80003cc <XMC_GPIO_Init>
                  handle_ptr->config_ptr->gpio_ch2_out3_config_ptr);
  }
}
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <PWM_CCU8_lConfigure_Events>:

static void PWM_CCU8_lConfigure_Events(PWM_CCU8_t* handle_ptr)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af02      	add	r7, sp, #8
 8001dae:	6078      	str	r0, [r7, #4]
  /* Configure slice to a external event 0 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_0,
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689a      	ldr	r2, [r3, #8]
                                handle_ptr->config_ptr->event0_config_ptr);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
}

static void PWM_CCU8_lConfigure_Events(PWM_CCU8_t* handle_ptr)
{
  /* Configure slice to a external event 0 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_0,
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	4610      	mov	r0, r2
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	f7ff fa06 	bl	80011d0 <XMC_CCU8_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event0_config_ptr);

  /* Configure slice to a external event 1 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_1,
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689a      	ldr	r2, [r3, #8]
                                handle_ptr->config_ptr->event1_config_ptr);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
  /* Configure slice to a external event 0 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_0,
                                handle_ptr->config_ptr->event0_config_ptr);

  /* Configure slice to a external event 1 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_1,
 8001dcc:	6a1b      	ldr	r3, [r3, #32]
 8001dce:	4610      	mov	r0, r2
 8001dd0:	2102      	movs	r1, #2
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	f7ff f9fc 	bl	80011d0 <XMC_CCU8_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event1_config_ptr);

  /* Configure slice to a external event 2 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_2,
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689a      	ldr	r2, [r3, #8]
                                handle_ptr->config_ptr->event2_config_ptr);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
  /* Configure slice to a external event 1 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_1,
                                handle_ptr->config_ptr->event1_config_ptr);

  /* Configure slice to a external event 2 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_2,
 8001de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de2:	4610      	mov	r0, r2
 8001de4:	2103      	movs	r1, #3
 8001de6:	461a      	mov	r2, r3
 8001de8:	f7ff f9f2 	bl	80011d0 <XMC_CCU8_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event2_config_ptr);

  /* External signal controls start of the timer */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_start_event)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d00e      	beq.n	8001e16 <PWM_CCU8_lConfigure_Events+0x6e>
  {
    XMC_CCU8_SLICE_StartConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_start_event,
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6899      	ldr	r1, [r3, #8]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
                               handle_ptr->config_ptr->ext_start_mode);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
                                handle_ptr->config_ptr->event2_config_ptr);

  /* External signal controls start of the timer */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_start_event)
  {
    XMC_CCU8_SLICE_StartConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_start_event,
 8001e08:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001e0c:	4608      	mov	r0, r1
 8001e0e:	4611      	mov	r1, r2
 8001e10:	461a      	mov	r2, r3
 8001e12:	f7ff f805 	bl	8000e20 <XMC_CCU8_SLICE_StartConfig>
                               handle_ptr->config_ptr->ext_start_mode);
  }

  /* External signal can stop the timer */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_stop_event)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d00e      	beq.n	8001e40 <PWM_CCU8_lConfigure_Events+0x98>
  {
    XMC_CCU8_SLICE_StopConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_stop_event,
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6899      	ldr	r1, [r3, #8]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
                              handle_ptr->config_ptr->ext_stop_mode);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
  }

  /* External signal can stop the timer */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_stop_event)
  {
    XMC_CCU8_SLICE_StopConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_stop_event,
 8001e32:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001e36:	4608      	mov	r0, r1
 8001e38:	4611      	mov	r1, r2
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	f7ff f81e 	bl	8000e7c <XMC_CCU8_SLICE_StopConfig>
                              handle_ptr->config_ptr->ext_stop_mode);
  }

  /* External signal can change the timer counting direction */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_count_dir_event)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d009      	beq.n	8001e60 <PWM_CCU8_lConfigure_Events+0xb8>
  {
    XMC_CCU8_SLICE_DirectionConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_count_dir_event);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001e58:	4610      	mov	r0, r2
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	f7ff f8ea 	bl	8001034 <XMC_CCU8_SLICE_DirectionConfig>
  }
  /* External signal can stop the timer and the timer value remains same */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_gate_event)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d009      	beq.n	8001e80 <PWM_CCU8_lConfigure_Events+0xd8>
  {
    XMC_CCU8_SLICE_GateConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_gate_event);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001e78:	4610      	mov	r0, r2
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	f7ff f8c0 	bl	8001000 <XMC_CCU8_SLICE_GateConfig>
  }
  /* Timer increments on external signal */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_count_event)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d009      	beq.n	8001ea0 <PWM_CCU8_lConfigure_Events+0xf8>
  {
    XMC_CCU8_SLICE_CountConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_count_event);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001e98:	4610      	mov	r0, r2
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	f7ff f896 	bl	8000fcc <XMC_CCU8_SLICE_CountConfig>
  }
  /* Timer gets loaded with compare register value or period register value on external signal */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_load_event)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d013      	beq.n	8001ed4 <PWM_CCU8_lConfigure_Events+0x12c>
  {
    XMC_CCU8_SLICE_LoadConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_load_event);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001eb8:	4610      	mov	r0, r2
 8001eba:	4619      	mov	r1, r3
 8001ebc:	f7ff f80a 	bl	8000ed4 <XMC_CCU8_SLICE_LoadConfig>
    XMC_CCU8_SLICE_LoadSelector(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_load_selector);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689a      	ldr	r2, [r3, #8]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ecc:	4610      	mov	r0, r2
 8001ece:	4619      	mov	r1, r3
 8001ed0:	f7ff f81a 	bl	8000f08 <XMC_CCU8_SLICE_LoadSelector>
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d011      	beq.n	8001f04 <PWM_CCU8_lConfigure_Events+0x15c>
  {
    XMC_CCU8_SLICE_ModulationConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6898      	ldr	r0, [r3, #8]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
                                    handle_ptr->config_ptr->ext_mod_mode, XMC_CCU8_SLICE_MODULATION_CHANNEL_1_AND_2,
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
    XMC_CCU8_SLICE_LoadSelector(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_load_selector);
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
  {
    XMC_CCU8_SLICE_ModulationConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
 8001ef0:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
                                    handle_ptr->config_ptr->ext_mod_mode, XMC_CCU8_SLICE_MODULATION_CHANNEL_1_AND_2,
                                    handle_ptr->config_ptr->ext_mod_sync);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
    XMC_CCU8_SLICE_LoadSelector(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_load_selector);
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
  {
    XMC_CCU8_SLICE_ModulationConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
 8001ef8:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001efc:	9300      	str	r3, [sp, #0]
 8001efe:	2303      	movs	r3, #3
 8001f00:	f7ff f81c 	bl	8000f3c <XMC_CCU8_SLICE_ModulationConfig>
                                    handle_ptr->config_ptr->ext_mod_mode, XMC_CCU8_SLICE_MODULATION_CHANNEL_1_AND_2,
                                    handle_ptr->config_ptr->ext_mod_sync);
  }

  /* PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU8_SLICE_EVENT_2 == handle_ptr->config_ptr->ext_trap_event)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8001f0c:	2b03      	cmp	r3, #3
 8001f0e:	d11a      	bne.n	8001f46 <PWM_CCU8_lConfigure_Events+0x19e>
  {
    XMC_CCU8_SLICE_TrapConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_trap_exit,
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6899      	ldr	r1, [r3, #8]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
                              handle_ptr->config_ptr->ext_trap_sync);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
  }

  /* PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU8_SLICE_EVENT_2 == handle_ptr->config_ptr->ext_trap_event)
  {
    XMC_CCU8_SLICE_TrapConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_trap_exit,
 8001f20:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f24:	4608      	mov	r0, r1
 8001f26:	4611      	mov	r1, r2
 8001f28:	461a      	mov	r2, r3
 8001f2a:	f7ff f8b5 	bl	8001098 <XMC_CCU8_SLICE_TrapConfig>
                              handle_ptr->config_ptr->ext_trap_sync);
    if ((bool) true == handle_ptr->config_ptr->ext_trap_enable)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d005      	beq.n	8001f46 <PWM_CCU8_lConfigure_Events+0x19e>
    {
      XMC_CCU8_SLICE_EnableTrap(
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	2101      	movs	r1, #1
 8001f42:	f7ff fd11 	bl	8001968 <XMC_CCU8_SLICE_EnableTrap>
              XMC_CCU8_SLICE_OUTPUT_0 || XMC_CCU8_SLICE_OUTPUT_1 || XMC_CCU8_SLICE_OUTPUT_2
              || XMC_CCU8_SLICE_OUTPUT_3));
    }

  }
  if ((XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_override_edge_event) || (XMC_CCU8_SLICE_EVENT_NONE
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d105      	bne.n	8001f5e <PWM_CCU8_lConfigure_Events+0x1b6>
      != handle_ptr->config_ptr->ext_override_level_event))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
              XMC_CCU8_SLICE_OUTPUT_0 || XMC_CCU8_SLICE_OUTPUT_1 || XMC_CCU8_SLICE_OUTPUT_2
              || XMC_CCU8_SLICE_OUTPUT_3));
    }

  }
  if ((XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_override_edge_event) || (XMC_CCU8_SLICE_EVENT_NONE
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d011      	beq.n	8001f82 <PWM_CCU8_lConfigure_Events+0x1da>
      != handle_ptr->config_ptr->ext_override_level_event))
  {
    XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu8_slice_ptr,
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6899      	ldr	r1, [r3, #8]
                                                   handle_ptr->config_ptr->event1_config_ptr,
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]

  }
  if ((XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_override_edge_event) || (XMC_CCU8_SLICE_EVENT_NONE
      != handle_ptr->config_ptr->ext_override_level_event))
  {
    XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu8_slice_ptr,
 8001f66:	6a1a      	ldr	r2, [r3, #32]
                                                   handle_ptr->config_ptr->event1_config_ptr,
                                                   handle_ptr->config_ptr->event2_config_ptr);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]

  }
  if ((XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_override_edge_event) || (XMC_CCU8_SLICE_EVENT_NONE
      != handle_ptr->config_ptr->ext_override_level_event))
  {
    XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu8_slice_ptr,
 8001f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6e:	4608      	mov	r0, r1
 8001f70:	4611      	mov	r1, r2
 8001f72:	461a      	mov	r2, r3
 8001f74:	f7ff f8ca 	bl	800110c <XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent>
                                                   handle_ptr->config_ptr->event1_config_ptr,
                                                   handle_ptr->config_ptr->event2_config_ptr);
    XMC_CCU8_SLICE_StatusBitOverrideConfig(handle_ptr->ccu8_slice_ptr);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff f873 	bl	8001068 <XMC_CCU8_SLICE_StatusBitOverrideConfig>
  }

}
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <PWM_CCU8_Start>:
/**********************************************************************************************************/
/*Starts the CCU8_CC8 slice. This needs to be called even if external start is configured.*/
PWM_CCU8_STATUS_t PWM_CCU8_Start(PWM_CCU8_t* handle_ptr)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  PWM_CCU8_STATUS_t status;

  status = PWM_CCU8_STATUS_FAILURE;
 8001f90:	2301      	movs	r3, #1
 8001f92:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("PWM_CCU8_Start:handle_ptr NULL", (handle_ptr != NULL));
  if ((PWM_CCU8_STATE_INITIALIZED == handle_ptr->state) || (PWM_CCU8_STATE_STOPPED == handle_ptr->state))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	7f1b      	ldrb	r3, [r3, #28]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d003      	beq.n	8001fa4 <PWM_CCU8_Start+0x1c>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	7f1b      	ldrb	r3, [r3, #28]
 8001fa0:	2b03      	cmp	r3, #3
 8001fa2:	d117      	bne.n	8001fd4 <PWM_CCU8_Start+0x4c>
  {
    /* clear IDLE mode for the slice; Start timer */
    XMC_CCU8_EnableClock(handle_ptr->ccu8_module_ptr, handle_ptr->slice_number);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	7b5b      	ldrb	r3, [r3, #13]
 8001fac:	4610      	mov	r0, r2
 8001fae:	4619      	mov	r1, r3
 8001fb0:	f7ff fcc6 	bl	8001940 <XMC_CCU8_EnableClock>

    if (XMC_CCU8_SLICE_EVENT_NONE == handle_ptr->config_ptr->ext_start_event)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d104      	bne.n	8001fca <PWM_CCU8_Start+0x42>
    {
      XMC_CCU8_SLICE_StartTimer(handle_ptr->ccu8_slice_ptr);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff fce1 	bl	800198c <XMC_CCU8_SLICE_StartTimer>
    }

    handle_ptr->state = PWM_CCU8_STATE_RUNNING;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2202      	movs	r2, #2
 8001fce:	771a      	strb	r2, [r3, #28]
    status = PWM_CCU8_STATUS_SUCCESS;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	73fb      	strb	r3, [r7, #15]
    XMC_DEBUG("PWM_CCU8_Start:start PWM");
  }
  return (status);
 8001fd4:	7bfb      	ldrb	r3, [r7, #15]
} /* end of PWM_CCU8_Start() api */
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop

08001fe0 <PWM_CCU8_SetFreqSymmetric>:
} /* end of PWM_CCU8_GetStatus() api */
/**********************************************************************************************************/

/*Sets the frequency for CCU8_CC8 slice Symmetric Mode. */
PWM_CCU8_STATUS_t PWM_CCU8_SetFreqSymmetric(PWM_CCU8_t* handle_ptr, uint32_t pwm_freq_hz)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b088      	sub	sp, #32
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  uint32_t duty_ch1;
  uint32_t duty_ch2;
  uint16_t compare_ch1;
  uint16_t compare_ch2;

  status = PWM_CCU8_STATUS_FAILURE;
 8001fea:	2301      	movs	r3, #1
 8001fec:	77fb      	strb	r3, [r7, #31]
  frequency_tclk = 0U;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	617b      	str	r3, [r7, #20]
  XMC_ASSERT("PWM_CCU8_SetFreqSymmetric:handle_ptr NULL", (handle_ptr != NULL));
  if (PWM_CCU8_STATE_UNINITIALIZED != handle_ptr->state)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	7f1b      	ldrb	r3, [r3, #28]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d06b      	beq.n	80020d2 <PWM_CCU8_SetFreqSymmetric+0xf2>
  {
    if (0U == pwm_freq_hz)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d068      	beq.n	80020d2 <PWM_CCU8_SetFreqSymmetric+0xf2>
    {
      XMC_DEBUG("PWM_CCU8_SetPwmFreq:cannot set frequency 0Hz");
    }
    else
    {
      frequency_tclk = handle_ptr->frequency_tclk;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	617b      	str	r3, [r7, #20]
      period = frequency_tclk / pwm_freq_hz;
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	fbb2 f3f3 	udiv	r3, r2, r3
 800200e:	61bb      	str	r3, [r7, #24]

      if ((uint32_t) XMC_CCU8_SLICE_TIMER_COUNT_MODE_CA == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->timer_mode)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d002      	beq.n	8002028 <PWM_CCU8_SetFreqSymmetric+0x48>
      {
        period = period >> 1U;/*divide by 2*/
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	085b      	lsrs	r3, r3, #1
 8002026:	61bb      	str	r3, [r7, #24]
      }

      if ((period != 0U) && (period <= PWM_CCU8_MAX_TIMER_COUNT))
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d051      	beq.n	80020d2 <PWM_CCU8_SetFreqSymmetric+0xf2>
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002034:	d24d      	bcs.n	80020d2 <PWM_CCU8_SetFreqSymmetric+0xf2>
      {
        /*Calculate the current duty cycle in no-timer concatenation mode*/
        duty_ch1 = handle_ptr->sym_duty1;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203a:	613b      	str	r3, [r7, #16]
        duty_ch2 = handle_ptr->sym_duty2;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002040:	60fb      	str	r3, [r7, #12]

        duty_ch1 = (PWM_CCU8_DUTY_FULL_SCALE - duty_ch1);
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 8002048:	3310      	adds	r3, #16
 800204a:	613b      	str	r3, [r7, #16]
        duty_ch1 = duty_ch1 * period;
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	fb02 f303 	mul.w	r3, r2, r3
 8002054:	613b      	str	r3, [r7, #16]
        duty_ch1 = duty_ch1 / PWM_CCU8_DUTY_FULL_SCALE;
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	4a20      	ldr	r2, [pc, #128]	; (80020dc <PWM_CCU8_SetFreqSymmetric+0xfc>)
 800205a:	fba2 2303 	umull	r2, r3, r2, r3
 800205e:	0b5b      	lsrs	r3, r3, #13
 8002060:	613b      	str	r3, [r7, #16]

        duty_ch2 = (PWM_CCU8_DUTY_FULL_SCALE - duty_ch2);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 8002068:	3310      	adds	r3, #16
 800206a:	60fb      	str	r3, [r7, #12]
        duty_ch2 = duty_ch2 * period;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	fb02 f303 	mul.w	r3, r2, r3
 8002074:	60fb      	str	r3, [r7, #12]
        duty_ch2 = duty_ch2 / PWM_CCU8_DUTY_FULL_SCALE;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	4a18      	ldr	r2, [pc, #96]	; (80020dc <PWM_CCU8_SetFreqSymmetric+0xfc>)
 800207a:	fba2 2303 	umull	r2, r3, r2, r3
 800207e:	0b5b      	lsrs	r3, r3, #13
 8002080:	60fb      	str	r3, [r7, #12]

        compare_ch1 = (uint16_t) duty_ch1;
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	817b      	strh	r3, [r7, #10]
        compare_ch2 = (uint16_t) duty_ch2;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	813b      	strh	r3, [r7, #8]

        XMC_CCU8_SLICE_SetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr, (uint16_t)(period - 1U));
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689a      	ldr	r2, [r3, #8]
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	b29b      	uxth	r3, r3
 8002092:	3b01      	subs	r3, #1
 8002094:	b29b      	uxth	r3, r3
 8002096:	4610      	mov	r0, r2
 8002098:	4619      	mov	r1, r3
 800209a:	f7ff f903 	bl	80012a4 <XMC_CCU8_SLICE_SetTimerPeriodMatch>
        XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_1, compare_ch1);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	689a      	ldr	r2, [r3, #8]
 80020a2:	897b      	ldrh	r3, [r7, #10]
 80020a4:	4610      	mov	r0, r2
 80020a6:	2100      	movs	r1, #0
 80020a8:	461a      	mov	r2, r3
 80020aa:	f7ff f909 	bl	80012c0 <XMC_CCU8_SLICE_SetTimerCompareMatch>
        XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_2, compare_ch2);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689a      	ldr	r2, [r3, #8]
 80020b2:	893b      	ldrh	r3, [r7, #8]
 80020b4:	4610      	mov	r0, r2
 80020b6:	2101      	movs	r1, #1
 80020b8:	461a      	mov	r2, r3
 80020ba:	f7ff f901 	bl	80012c0 <XMC_CCU8_SLICE_SetTimerCompareMatch>
        XMC_CCU8_EnableShadowTransfer(handle_ptr->ccu8_module_ptr, handle_ptr->shadow_txfr_msk);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	4610      	mov	r0, r2
 80020c8:	4619      	mov	r1, r3
 80020ca:	f7ff fc79 	bl	80019c0 <XMC_CCU8_EnableShadowTransfer>
        XMC_DEBUG("PWM_CCU8_SetPwmFreq:frequency set");
        status = PWM_CCU8_STATUS_SUCCESS;
 80020ce:	2300      	movs	r3, #0
 80020d0:	77fb      	strb	r3, [r7, #31]
      }
    }
  }
  return (status);
 80020d2:	7ffb      	ldrb	r3, [r7, #31]

} /* end of PWM_CCU8_SetFreqSymmetric() api */
 80020d4:	4618      	mov	r0, r3
 80020d6:	3720      	adds	r7, #32
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	d1b71759 	.word	0xd1b71759

080020e0 <PWM_CCU8_SetDutyCycleSymmetric>:
/**********************************************************************************************************/

/*Sets the duty cycle (uint32_t) for CCU8_CC8 slice. */
PWM_CCU8_STATUS_t PWM_CCU8_SetDutyCycleSymmetric(PWM_CCU8_t* handle_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel,
                                                 uint32_t duty_cycle)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b088      	sub	sp, #32
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	460b      	mov	r3, r1
 80020ea:	607a      	str	r2, [r7, #4]
 80020ec:	72fb      	strb	r3, [r7, #11]
  PWM_CCU8_STATUS_t status;
  uint32_t period;
  uint32_t compare;

  status = PWM_CCU8_STATUS_FAILURE;
 80020ee:	2301      	movs	r3, #1
 80020f0:	77fb      	strb	r3, [r7, #31]
  XMC_ASSERT("PWM_CCU8_SetDutyCycleSymmetric:handle_ptr NULL", (handle_ptr != NULL));
  if (PWM_CCU8_STATE_UNINITIALIZED != handle_ptr->state)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	7f1b      	ldrb	r3, [r3, #28]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d036      	beq.n	8002168 <PWM_CCU8_SetDutyCycleSymmetric+0x88>
  {
    /* duty cycle has to be in between 0 and 100 */
    if ((duty_cycle > PWM_CCU8_SYM_DUTY_MAX))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f242 7210 	movw	r2, #10000	; 0x2710
 8002100:	4293      	cmp	r3, r2
 8002102:	d831      	bhi.n	8002168 <PWM_CCU8_SetDutyCycleSymmetric+0x88>
    {
      XMC_DEBUG("PWM_CCU8_SetDutyCycleSymmetric:Cannot set duty cycle > 100%");
    }
    else
    {
      period = (uint32_t) XMC_CCU8_SLICE_GetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr) + 1U;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff fc4b 	bl	80019a4 <XMC_CCU8_SLICE_GetTimerPeriodMatch>
 800210e:	4603      	mov	r3, r0
 8002110:	3301      	adds	r3, #1
 8002112:	61bb      	str	r3, [r7, #24]

      /* Duty Cycle(symmetric) = ((PR + 1)- CR) / (PR + 1) */
      compare = ((period * (PWM_CCU8_DUTY_FULL_SCALE - duty_cycle)) / PWM_CCU8_DUTY_FULL_SCALE);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 800211a:	3310      	adds	r3, #16
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	fb02 f303 	mul.w	r3, r2, r3
 8002122:	4a14      	ldr	r2, [pc, #80]	; (8002174 <PWM_CCU8_SetDutyCycleSymmetric+0x94>)
 8002124:	fba2 2303 	umull	r2, r3, r2, r3
 8002128:	0b5b      	lsrs	r3, r3, #13
 800212a:	617b      	str	r3, [r7, #20]

      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, channel, (uint16_t) compare);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6899      	ldr	r1, [r3, #8]
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	b29b      	uxth	r3, r3
 8002134:	7afa      	ldrb	r2, [r7, #11]
 8002136:	4608      	mov	r0, r1
 8002138:	4611      	mov	r1, r2
 800213a:	461a      	mov	r2, r3
 800213c:	f7ff f8c0 	bl	80012c0 <XMC_CCU8_SLICE_SetTimerCompareMatch>
      XMC_CCU8_EnableShadowTransfer(handle_ptr->ccu8_module_ptr, handle_ptr->shadow_txfr_msk);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	685a      	ldr	r2, [r3, #4]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	4610      	mov	r0, r2
 800214a:	4619      	mov	r1, r3
 800214c:	f7ff fc38 	bl	80019c0 <XMC_CCU8_EnableShadowTransfer>

      if (XMC_CCU8_SLICE_COMPARE_CHANNEL_1 == channel)
 8002150:	7afb      	ldrb	r3, [r7, #11]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d103      	bne.n	800215e <PWM_CCU8_SetDutyCycleSymmetric+0x7e>
      {
        handle_ptr->sym_duty1 = duty_cycle;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	625a      	str	r2, [r3, #36]	; 0x24
 800215c:	e002      	b.n	8002164 <PWM_CCU8_SetDutyCycleSymmetric+0x84>
      }
      else
      {
        handle_ptr->sym_duty2 = duty_cycle;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	629a      	str	r2, [r3, #40]	; 0x28
      }

      XMC_DEBUG("PWM_CCU8_SetDutyCycleSymmetric:dutycycle set");
      status = PWM_CCU8_STATUS_SUCCESS;
 8002164:	2300      	movs	r3, #0
 8002166:	77fb      	strb	r3, [r7, #31]
    }
  }
  return (status);
 8002168:	7ffb      	ldrb	r3, [r7, #31]
} /* end of PWM_CCU8_SetDutyCycleSymmetric() api */
 800216a:	4618      	mov	r0, r3
 800216c:	3720      	adds	r7, #32
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	d1b71759 	.word	0xd1b71759

08002178 <XMC_CCU8_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR> 
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU8_GIDLC_SPRB_Msk;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	60da      	str	r2, [r3, #12]
}
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop

08002198 <GLOBAL_CCU8_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU8_STATUS_t GLOBAL_CCU8_Init(GLOBAL_CCU8_t* handle)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU8_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	7b5b      	ldrb	r3, [r3, #13]
 80021a4:	f083 0301 	eor.w	r3, r3, #1
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00f      	beq.n	80021ce <GLOBAL_CCU8_Init+0x36>
  {
    /* Enable CCU8 module */
    XMC_CCU8_Init(handle->module_ptr,handle->mcs_action);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	689a      	ldr	r2, [r3, #8]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	7b1b      	ldrb	r3, [r3, #12]
 80021b6:	4610      	mov	r0, r2
 80021b8:	4619      	mov	r1, r3
 80021ba:	f7fe fdbd 	bl	8000d38 <XMC_CCU8_Init>
    /* Start the prescaler */
    XMC_CCU8_StartPrescaler(handle->module_ptr);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff ffd8 	bl	8002178 <XMC_CCU8_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU8_STATUS_SUCCESS);
 80021ce:	2300      	movs	r3, #0
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <EVENT_DETECTOR_Init>:

/*
 * This function Initializes a EVENT_DETECTOR APP instances (ERSx+ETLx) based on user configuration.
 */
EVENT_DETECTOR_STATUS_t EVENT_DETECTOR_Init(EVENT_DETECTOR_t *const handle)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* Checking for null handle */
  XMC_ASSERT("EVENT_DETECTOR_Init:handle NULL" , (handle != NULL));

  /* Checking for initialization state of the instance */
  if (false == handle->init_status)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	7b1b      	ldrb	r3, [r3, #12]
 80021e4:	f083 0301 	eor.w	r3, r3, #1
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00d      	beq.n	800220a <EVENT_DETECTOR_Init+0x32>
  {
    /* Hardware initialization based on UI */
    XMC_ERU_ETL_Init(handle->eru, handle->channel, handle->config);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6819      	ldr	r1, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	791a      	ldrb	r2, [r3, #4]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	4608      	mov	r0, r1
 80021fc:	4611      	mov	r1, r2
 80021fe:	461a      	mov	r2, r3
 8002200:	f7ff f8e8 	bl	80013d4 <XMC_ERU_ETL_Init>
    /* Update the init status of the instance */
    handle->init_status = true;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	731a      	strb	r2, [r3, #12]
  }
  
  return EVENT_DETECTOR_STATUS_SUCCESS;
 800220a:	2300      	movs	r3, #0
}
 800220c:	4618      	mov	r0, r3
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002224:	4b0c      	ldr	r3, [pc, #48]	; (8002258 <NVIC_SetPriorityGrouping+0x44>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800222a:	68ba      	ldr	r2, [r7, #8]
 800222c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002230:	4013      	ands	r3, r2
 8002232:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 800223c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002240:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002244:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8002246:	4a04      	ldr	r2, [pc, #16]	; (8002258 <NVIC_SetPriorityGrouping+0x44>)
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	60d3      	str	r3, [r2, #12]
}
 800224c:	3714      	adds	r7, #20
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	e000ed00 	.word	0xe000ed00

0800225c <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 8002262:	2001      	movs	r0, #1
 8002264:	f7ff ffd6 	bl	8002214 <NVIC_SetPriorityGrouping>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002268:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 800226a:	4b21      	ldr	r3, [pc, #132]	; (80022f0 <SystemCoreSetup+0x94>)
 800226c:	4a21      	ldr	r2, [pc, #132]	; (80022f4 <SystemCoreSetup+0x98>)
 800226e:	609a      	str	r2, [r3, #8]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002270:	f3bf 8f4f 	dsb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8002274:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8002276:	4a1e      	ldr	r2, [pc, #120]	; (80022f0 <SystemCoreSetup+0x94>)
 8002278:	4b1d      	ldr	r3, [pc, #116]	; (80022f0 <SystemCoreSetup+0x94>)
 800227a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800227e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002282:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 8002286:	4b1c      	ldr	r3, [pc, #112]	; (80022f8 <SystemCoreSetup+0x9c>)
 8002288:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800228c:	3314      	adds	r3, #20
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f023 030f 	bic.w	r3, r3, #15
 8002298:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f043 0303 	orr.w	r3, r3, #3
 80022a0:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 80022a2:	4b15      	ldr	r3, [pc, #84]	; (80022f8 <SystemCoreSetup+0x9c>)
 80022a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022a8:	3314      	adds	r3, #20
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 80022ae:	4a10      	ldr	r2, [pc, #64]	; (80022f0 <SystemCoreSetup+0x94>)
 80022b0:	4b0f      	ldr	r3, [pc, #60]	; (80022f0 <SystemCoreSetup+0x94>)
 80022b2:	695b      	ldr	r3, [r3, #20]
 80022b4:	f023 0310 	bic.w	r3, r3, #16
 80022b8:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 80022ba:	4a0d      	ldr	r2, [pc, #52]	; (80022f0 <SystemCoreSetup+0x94>)
 80022bc:	4b0c      	ldr	r3, [pc, #48]	; (80022f0 <SystemCoreSetup+0x94>)
 80022be:	695b      	ldr	r3, [r3, #20]
 80022c0:	f023 0308 	bic.w	r3, r3, #8
 80022c4:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80022c6:	4a0a      	ldr	r2, [pc, #40]	; (80022f0 <SystemCoreSetup+0x94>)
 80022c8:	4b09      	ldr	r3, [pc, #36]	; (80022f0 <SystemCoreSetup+0x94>)
 80022ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022d0:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 80022d2:	4a07      	ldr	r2, [pc, #28]	; (80022f0 <SystemCoreSetup+0x94>)
 80022d4:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <SystemCoreSetup+0x94>)
 80022d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80022dc:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 80022de:	4a04      	ldr	r2, [pc, #16]	; (80022f0 <SystemCoreSetup+0x94>)
 80022e0:	4b03      	ldr	r3, [pc, #12]	; (80022f0 <SystemCoreSetup+0x94>)
 80022e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022e8:	6253      	str	r3, [r2, #36]	; 0x24
}
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	e000ed00 	.word	0xe000ed00
 80022f4:	08000000 	.word	0x08000000
 80022f8:	58001000 	.word	0x58001000

080022fc <OSCHP_GetFrequency>:
}


/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 8002300:	4b02      	ldr	r3, [pc, #8]	; (800230c <OSCHP_GetFrequency+0x10>)
}
 8002302:	4618      	mov	r0, r3
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	00b71b00 	.word	0x00b71b00

08002310 <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 8002310:	b5b0      	push	{r4, r5, r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 8002316:	4b12      	ldr	r3, [pc, #72]	; (8002360 <SystemCoreClockSetup+0x50>)
 8002318:	1d3c      	adds	r4, r7, #4
 800231a:	461d      	mov	r5, r3
 800231c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800231e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002320:	682b      	ldr	r3, [r5, #0]
 8002322:	6023      	str	r3, [r4, #0]
    .fcpu_clkdiv = 1U,
    .fccu_clkdiv = 1U,
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 8002324:	1d3b      	adds	r3, r7, #4
 8002326:	4618      	mov	r0, r3
 8002328:	f7fe f912 	bl	8000550 <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 800232c:	2000      	movs	r0, #0
 800232e:	f7fe f9e7 	bl	8000700 <XMC_SCU_HIB_SetRtcClockSource>
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 8002332:	2000      	movs	r0, #0
 8002334:	f7fe f99c 	bl	8000670 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 8002338:	2004      	movs	r0, #4
 800233a:	f7fe fa6d 	bl	8000818 <XMC_SCU_CLOCK_SetUsbClockDivider>
  /* Start USB PLL */
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 800233e:	2001      	movs	r0, #1
 8002340:	2120      	movs	r1, #32
 8002342:	f7fe fab5 	bl	80008b0 <XMC_SCU_CLOCK_StartUsbPll>
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 8002346:	2000      	movs	r0, #0
 8002348:	f7fe f9a6 	bl	8000698 <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 800234c:	2001      	movs	r0, #1
 800234e:	f7fe fa8b 	bl	8000868 <XMC_SCU_CLOCK_SetWdtClockDivider>
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 8002352:	2001      	movs	r0, #1
 8002354:	f7fe fa74 	bl	8000840 <XMC_SCU_CLOCK_SetEbuClockDivider>

}
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bdb0      	pop	{r4, r5, r7, pc}
 800235e:	bf00      	nop
 8002360:	08004158 	.word	0x08004158

08002364 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
DAVE_STATUS_t DAVE_Init(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 800236a:	2300      	movs	r3, #0
 800236c:	71fb      	strb	r3, [r7, #7]
  if (init_status == DAVE_STATUS_SUCCESS)
 800236e:	79fb      	ldrb	r3, [r7, #7]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d104      	bne.n	800237e <DAVE_Init+0x1a>
  {
	 /**  Initialization of PWM_CCU8 APP instance PWM_CCU8_0 */
	 init_status = (DAVE_STATUS_t)PWM_CCU8_Init(&PWM_CCU8_0); 
 8002374:	4814      	ldr	r0, [pc, #80]	; (80023c8 <DAVE_Init+0x64>)
 8002376:	f7ff fb49 	bl	8001a0c <PWM_CCU8_Init>
 800237a:	4603      	mov	r3, r0
 800237c:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800237e:	79fb      	ldrb	r3, [r7, #7]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d104      	bne.n	800238e <DAVE_Init+0x2a>
  {
	 /**  Initialization of PWM_CCU8 APP instance PWM_CCU8_1 */
	 init_status = (DAVE_STATUS_t)PWM_CCU8_Init(&PWM_CCU8_1); 
 8002384:	4811      	ldr	r0, [pc, #68]	; (80023cc <DAVE_Init+0x68>)
 8002386:	f7ff fb41 	bl	8001a0c <PWM_CCU8_Init>
 800238a:	4603      	mov	r3, r0
 800238c:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800238e:	79fb      	ldrb	r3, [r7, #7]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d104      	bne.n	800239e <DAVE_Init+0x3a>
  {
	 /**  Initialization of PWM_CCU8 APP instance PWM_CCU8_2 */
	 init_status = (DAVE_STATUS_t)PWM_CCU8_Init(&PWM_CCU8_2); 
 8002394:	480e      	ldr	r0, [pc, #56]	; (80023d0 <DAVE_Init+0x6c>)
 8002396:	f7ff fb39 	bl	8001a0c <PWM_CCU8_Init>
 800239a:	4603      	mov	r3, r0
 800239c:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800239e:	79fb      	ldrb	r3, [r7, #7]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d104      	bne.n	80023ae <DAVE_Init+0x4a>
  {
	 /**  Initialization of SYSTIMER APP instance SYSTIMER_0 */
	 init_status = (DAVE_STATUS_t)SYSTIMER_Init(&SYSTIMER_0); 
 80023a4:	480b      	ldr	r0, [pc, #44]	; (80023d4 <DAVE_Init+0x70>)
 80023a6:	f7ff fa91 	bl	80018cc <SYSTIMER_Init>
 80023aa:	4603      	mov	r3, r0
 80023ac:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80023ae:	79fb      	ldrb	r3, [r7, #7]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d104      	bne.n	80023be <DAVE_Init+0x5a>
  {
	 /**  Initialization of EVENT_DETECTOR APP instance EVENT_DETECTOR_0 */
	 init_status = (DAVE_STATUS_t)EVENT_DETECTOR_Init(&EVENT_DETECTOR_0); 
 80023b4:	4808      	ldr	r0, [pc, #32]	; (80023d8 <DAVE_Init+0x74>)
 80023b6:	f7ff ff0f 	bl	80021d8 <EVENT_DETECTOR_Init>
 80023ba:	4603      	mov	r3, r0
 80023bc:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 80023be:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 80023c0:	4618      	mov	r0, r3
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	20000000 	.word	0x20000000
 80023cc:	20000034 	.word	0x20000034
 80023d0:	20000068 	.word	0x20000068
 80023d4:	200000c8 	.word	0x200000c8
 80023d8:	200000ac 	.word	0x200000ac

080023dc <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80023e6:	4908      	ldr	r1, [pc, #32]	; (8002408 <NVIC_EnableIRQ+0x2c>)
 80023e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ec:	095b      	lsrs	r3, r3, #5
 80023ee:	79fa      	ldrb	r2, [r7, #7]
 80023f0:	f002 021f 	and.w	r2, r2, #31
 80023f4:	2001      	movs	r0, #1
 80023f6:	fa00 f202 	lsl.w	r2, r0, r2
 80023fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	e000e100 	.word	0xe000e100

0800240c <XMC_CCU8_SLICE_EnableEvent>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_SetInterruptNode()<BR>  XMC_CCU8_SLICE_EnableMultipleEvents()<BR>  XMC_CCU8_SLICE_DisableEvent()<BR> 
 *  XMC_CCU8_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_EnableEvent(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_IRQ_ID_t event)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	460b      	mov	r3, r1
 8002416:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));

  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800241e:	78fb      	ldrb	r3, [r7, #3]
 8002420:	2101      	movs	r1, #1
 8002422:	fa01 f303 	lsl.w	r3, r1, r3
 8002426:	431a      	orrs	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <main>:
void SYSTICK_Init();

void SYSTIMER_Irq(void);

int main(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
  DAVE_STATUS_t status;
  status = DAVE_Init();           /* Initialization of DAVE APPs  */
 800243e:	f7ff ff91 	bl	8002364 <DAVE_Init>
 8002442:	4603      	mov	r3, r0
 8002444:	71fb      	strb	r3, [r7, #7]
  PWM_set_interrupt();
 8002446:	f000 fa81 	bl	800294c <PWM_set_interrupt>




  if(status == DAVE_STATUS_FAILURE)
 800244a:	79fb      	ldrb	r3, [r7, #7]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d100      	bne.n	8002452 <main+0x1a>
    XMC_DEBUG("DAVE APPs initialization failed\n");

    while(1U)
    {

    }
 8002450:	e7fe      	b.n	8002450 <main+0x18>
  }

  PWM_CCU8_Start(&PWM_CCU8_0);
 8002452:	4807      	ldr	r0, [pc, #28]	; (8002470 <main+0x38>)
 8002454:	f7ff fd98 	bl	8001f88 <PWM_CCU8_Start>
  PWM_CCU8_Start(&PWM_CCU8_1);
 8002458:	4806      	ldr	r0, [pc, #24]	; (8002474 <main+0x3c>)
 800245a:	f7ff fd95 	bl	8001f88 <PWM_CCU8_Start>
  PWM_CCU8_Start(&PWM_CCU8_2);
 800245e:	4806      	ldr	r0, [pc, #24]	; (8002478 <main+0x40>)
 8002460:	f7ff fd92 	bl	8001f88 <PWM_CCU8_Start>


  // freq to 10khz
  // TODO:: set it here
  PWM_set_freq(PWM_FREQ_HZ);
 8002464:	f242 7010 	movw	r0, #10000	; 0x2710
 8002468:	f000 fa1a 	bl	80028a0 <PWM_set_freq>
  //GLOBAL_CCU8_SyncStartTriggerHigh(GLOBAL_CCU8_CCUCON_Msk);

  /* Placeholder for user application code. The while loop below can be replaced with user application code. */
  while(1U)
  {
  }
 800246c:	e7fe      	b.n	800246c <main+0x34>
 800246e:	bf00      	nop
 8002470:	20000000 	.word	0x20000000
 8002474:	20000034 	.word	0x20000034
 8002478:	20000068 	.word	0x20000068
 800247c:	00000000 	.word	0x00000000

08002480 <ZSM_update>:
}



void ZSM_update(float amplitude, float phase, uint32_t frequency)
{
 8002480:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002484:	b08a      	sub	sp, #40	; 0x28
 8002486:	af00      	add	r7, sp, #0
 8002488:	60f8      	str	r0, [r7, #12]
 800248a:	60b9      	str	r1, [r7, #8]
 800248c:	607a      	str	r2, [r7, #4]
	// this function is documented by MATLAB "plot_3f.m" file
	if (amplitude > 1.0)
 800248e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002492:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 8002496:	eef4 7ac7 	vcmpe.f32	s15, s14
 800249a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800249e:	dd02      	ble.n	80024a6 <ZSM_update+0x26>
		amplitude = 1.0;
 80024a0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80024a4:	60fb      	str	r3, [r7, #12]
	if (amplitude < 0)
 80024a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80024aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b2:	d502      	bpl.n	80024ba <ZSM_update+0x3a>
		amplitude = 0;
 80024b4:	f04f 0300 	mov.w	r3, #0
 80024b8:	60fb      	str	r3, [r7, #12]
	float z0;
	float max_duty, min_duty;

	static float time = 0;

	duty_A = 2*amplitude*(0.5*sinf(6.2832*frequency*time + phase)+0.5)/SQRT_3;
 80024ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80024be:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80024c2:	ee17 0a90 	vmov	r0, s15
 80024c6:	f001 fa2d 	bl	8003924 <__aeabi_f2d>
 80024ca:	4604      	mov	r4, r0
 80024cc:	460d      	mov	r5, r1
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f001 fa06 	bl	80038e0 <__aeabi_ui2d>
 80024d4:	4602      	mov	r2, r0
 80024d6:	460b      	mov	r3, r1
 80024d8:	4610      	mov	r0, r2
 80024da:	4619      	mov	r1, r3
 80024dc:	a3b2      	add	r3, pc, #712	; (adr r3, 80027a8 <ZSM_update+0x328>)
 80024de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e2:	f001 fa73 	bl	80039cc <__aeabi_dmul>
 80024e6:	4602      	mov	r2, r0
 80024e8:	460b      	mov	r3, r1
 80024ea:	4690      	mov	r8, r2
 80024ec:	4699      	mov	r9, r3
 80024ee:	4bb2      	ldr	r3, [pc, #712]	; (80027b8 <ZSM_update+0x338>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f001 fa16 	bl	8003924 <__aeabi_f2d>
 80024f8:	4602      	mov	r2, r0
 80024fa:	460b      	mov	r3, r1
 80024fc:	4640      	mov	r0, r8
 80024fe:	4649      	mov	r1, r9
 8002500:	f001 fa64 	bl	80039cc <__aeabi_dmul>
 8002504:	4602      	mov	r2, r0
 8002506:	460b      	mov	r3, r1
 8002508:	4690      	mov	r8, r2
 800250a:	4699      	mov	r9, r3
 800250c:	68b8      	ldr	r0, [r7, #8]
 800250e:	f001 fa09 	bl	8003924 <__aeabi_f2d>
 8002512:	4602      	mov	r2, r0
 8002514:	460b      	mov	r3, r1
 8002516:	4640      	mov	r0, r8
 8002518:	4649      	mov	r1, r9
 800251a:	f001 f8a5 	bl	8003668 <__adddf3>
 800251e:	4602      	mov	r2, r0
 8002520:	460b      	mov	r3, r1
 8002522:	4610      	mov	r0, r2
 8002524:	4619      	mov	r1, r3
 8002526:	f001 fc63 	bl	8003df0 <__aeabi_d2f>
 800252a:	4603      	mov	r3, r0
 800252c:	4618      	mov	r0, r3
 800252e:	f000 fa2b 	bl	8002988 <sinf>
 8002532:	4603      	mov	r3, r0
 8002534:	4618      	mov	r0, r3
 8002536:	f001 f9f5 	bl	8003924 <__aeabi_f2d>
 800253a:	4602      	mov	r2, r0
 800253c:	460b      	mov	r3, r1
 800253e:	4610      	mov	r0, r2
 8002540:	4619      	mov	r1, r3
 8002542:	f04f 0200 	mov.w	r2, #0
 8002546:	4b9d      	ldr	r3, [pc, #628]	; (80027bc <ZSM_update+0x33c>)
 8002548:	f001 fa40 	bl	80039cc <__aeabi_dmul>
 800254c:	4602      	mov	r2, r0
 800254e:	460b      	mov	r3, r1
 8002550:	4610      	mov	r0, r2
 8002552:	4619      	mov	r1, r3
 8002554:	f04f 0200 	mov.w	r2, #0
 8002558:	4b98      	ldr	r3, [pc, #608]	; (80027bc <ZSM_update+0x33c>)
 800255a:	f001 f885 	bl	8003668 <__adddf3>
 800255e:	4602      	mov	r2, r0
 8002560:	460b      	mov	r3, r1
 8002562:	4620      	mov	r0, r4
 8002564:	4629      	mov	r1, r5
 8002566:	f001 fa31 	bl	80039cc <__aeabi_dmul>
 800256a:	4602      	mov	r2, r0
 800256c:	460b      	mov	r3, r1
 800256e:	4610      	mov	r0, r2
 8002570:	4619      	mov	r1, r3
 8002572:	a38b      	add	r3, pc, #556	; (adr r3, 80027a0 <ZSM_update+0x320>)
 8002574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002578:	f001 fb52 	bl	8003c20 <__aeabi_ddiv>
 800257c:	4602      	mov	r2, r0
 800257e:	460b      	mov	r3, r1
 8002580:	4610      	mov	r0, r2
 8002582:	4619      	mov	r1, r3
 8002584:	f001 fc34 	bl	8003df0 <__aeabi_d2f>
 8002588:	4603      	mov	r3, r0
 800258a:	61fb      	str	r3, [r7, #28]
	duty_B = 2*amplitude*(0.5*sinf(6.2832*frequency*time + phase + 2.0944)+0.5)/SQRT_3;
 800258c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002590:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002594:	ee17 0a90 	vmov	r0, s15
 8002598:	f001 f9c4 	bl	8003924 <__aeabi_f2d>
 800259c:	4604      	mov	r4, r0
 800259e:	460d      	mov	r5, r1
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f001 f99d 	bl	80038e0 <__aeabi_ui2d>
 80025a6:	4602      	mov	r2, r0
 80025a8:	460b      	mov	r3, r1
 80025aa:	4610      	mov	r0, r2
 80025ac:	4619      	mov	r1, r3
 80025ae:	a37e      	add	r3, pc, #504	; (adr r3, 80027a8 <ZSM_update+0x328>)
 80025b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b4:	f001 fa0a 	bl	80039cc <__aeabi_dmul>
 80025b8:	4602      	mov	r2, r0
 80025ba:	460b      	mov	r3, r1
 80025bc:	4690      	mov	r8, r2
 80025be:	4699      	mov	r9, r3
 80025c0:	4b7d      	ldr	r3, [pc, #500]	; (80027b8 <ZSM_update+0x338>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f001 f9ad 	bl	8003924 <__aeabi_f2d>
 80025ca:	4602      	mov	r2, r0
 80025cc:	460b      	mov	r3, r1
 80025ce:	4640      	mov	r0, r8
 80025d0:	4649      	mov	r1, r9
 80025d2:	f001 f9fb 	bl	80039cc <__aeabi_dmul>
 80025d6:	4602      	mov	r2, r0
 80025d8:	460b      	mov	r3, r1
 80025da:	4690      	mov	r8, r2
 80025dc:	4699      	mov	r9, r3
 80025de:	68b8      	ldr	r0, [r7, #8]
 80025e0:	f001 f9a0 	bl	8003924 <__aeabi_f2d>
 80025e4:	4602      	mov	r2, r0
 80025e6:	460b      	mov	r3, r1
 80025e8:	4640      	mov	r0, r8
 80025ea:	4649      	mov	r1, r9
 80025ec:	f001 f83c 	bl	8003668 <__adddf3>
 80025f0:	4602      	mov	r2, r0
 80025f2:	460b      	mov	r3, r1
 80025f4:	4610      	mov	r0, r2
 80025f6:	4619      	mov	r1, r3
 80025f8:	a36d      	add	r3, pc, #436	; (adr r3, 80027b0 <ZSM_update+0x330>)
 80025fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025fe:	f001 f833 	bl	8003668 <__adddf3>
 8002602:	4602      	mov	r2, r0
 8002604:	460b      	mov	r3, r1
 8002606:	4610      	mov	r0, r2
 8002608:	4619      	mov	r1, r3
 800260a:	f001 fbf1 	bl	8003df0 <__aeabi_d2f>
 800260e:	4603      	mov	r3, r0
 8002610:	4618      	mov	r0, r3
 8002612:	f000 f9b9 	bl	8002988 <sinf>
 8002616:	4603      	mov	r3, r0
 8002618:	4618      	mov	r0, r3
 800261a:	f001 f983 	bl	8003924 <__aeabi_f2d>
 800261e:	4602      	mov	r2, r0
 8002620:	460b      	mov	r3, r1
 8002622:	4610      	mov	r0, r2
 8002624:	4619      	mov	r1, r3
 8002626:	f04f 0200 	mov.w	r2, #0
 800262a:	4b64      	ldr	r3, [pc, #400]	; (80027bc <ZSM_update+0x33c>)
 800262c:	f001 f9ce 	bl	80039cc <__aeabi_dmul>
 8002630:	4602      	mov	r2, r0
 8002632:	460b      	mov	r3, r1
 8002634:	4610      	mov	r0, r2
 8002636:	4619      	mov	r1, r3
 8002638:	f04f 0200 	mov.w	r2, #0
 800263c:	4b5f      	ldr	r3, [pc, #380]	; (80027bc <ZSM_update+0x33c>)
 800263e:	f001 f813 	bl	8003668 <__adddf3>
 8002642:	4602      	mov	r2, r0
 8002644:	460b      	mov	r3, r1
 8002646:	4620      	mov	r0, r4
 8002648:	4629      	mov	r1, r5
 800264a:	f001 f9bf 	bl	80039cc <__aeabi_dmul>
 800264e:	4602      	mov	r2, r0
 8002650:	460b      	mov	r3, r1
 8002652:	4610      	mov	r0, r2
 8002654:	4619      	mov	r1, r3
 8002656:	a352      	add	r3, pc, #328	; (adr r3, 80027a0 <ZSM_update+0x320>)
 8002658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800265c:	f001 fae0 	bl	8003c20 <__aeabi_ddiv>
 8002660:	4602      	mov	r2, r0
 8002662:	460b      	mov	r3, r1
 8002664:	4610      	mov	r0, r2
 8002666:	4619      	mov	r1, r3
 8002668:	f001 fbc2 	bl	8003df0 <__aeabi_d2f>
 800266c:	4603      	mov	r3, r0
 800266e:	61bb      	str	r3, [r7, #24]
	duty_C = 2*amplitude*(0.5*sinf(6.2832*frequency*time + phase - 2.0944)+0.5)/SQRT_3;
 8002670:	edd7 7a03 	vldr	s15, [r7, #12]
 8002674:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002678:	ee17 0a90 	vmov	r0, s15
 800267c:	f001 f952 	bl	8003924 <__aeabi_f2d>
 8002680:	4604      	mov	r4, r0
 8002682:	460d      	mov	r5, r1
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f001 f92b 	bl	80038e0 <__aeabi_ui2d>
 800268a:	4602      	mov	r2, r0
 800268c:	460b      	mov	r3, r1
 800268e:	4610      	mov	r0, r2
 8002690:	4619      	mov	r1, r3
 8002692:	a345      	add	r3, pc, #276	; (adr r3, 80027a8 <ZSM_update+0x328>)
 8002694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002698:	f001 f998 	bl	80039cc <__aeabi_dmul>
 800269c:	4602      	mov	r2, r0
 800269e:	460b      	mov	r3, r1
 80026a0:	4690      	mov	r8, r2
 80026a2:	4699      	mov	r9, r3
 80026a4:	4b44      	ldr	r3, [pc, #272]	; (80027b8 <ZSM_update+0x338>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f001 f93b 	bl	8003924 <__aeabi_f2d>
 80026ae:	4602      	mov	r2, r0
 80026b0:	460b      	mov	r3, r1
 80026b2:	4640      	mov	r0, r8
 80026b4:	4649      	mov	r1, r9
 80026b6:	f001 f989 	bl	80039cc <__aeabi_dmul>
 80026ba:	4602      	mov	r2, r0
 80026bc:	460b      	mov	r3, r1
 80026be:	4690      	mov	r8, r2
 80026c0:	4699      	mov	r9, r3
 80026c2:	68b8      	ldr	r0, [r7, #8]
 80026c4:	f001 f92e 	bl	8003924 <__aeabi_f2d>
 80026c8:	4602      	mov	r2, r0
 80026ca:	460b      	mov	r3, r1
 80026cc:	4640      	mov	r0, r8
 80026ce:	4649      	mov	r1, r9
 80026d0:	f000 ffca 	bl	8003668 <__adddf3>
 80026d4:	4602      	mov	r2, r0
 80026d6:	460b      	mov	r3, r1
 80026d8:	4610      	mov	r0, r2
 80026da:	4619      	mov	r1, r3
 80026dc:	a334      	add	r3, pc, #208	; (adr r3, 80027b0 <ZSM_update+0x330>)
 80026de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e2:	f000 ffbf 	bl	8003664 <__aeabi_dsub>
 80026e6:	4602      	mov	r2, r0
 80026e8:	460b      	mov	r3, r1
 80026ea:	4610      	mov	r0, r2
 80026ec:	4619      	mov	r1, r3
 80026ee:	f001 fb7f 	bl	8003df0 <__aeabi_d2f>
 80026f2:	4603      	mov	r3, r0
 80026f4:	4618      	mov	r0, r3
 80026f6:	f000 f947 	bl	8002988 <sinf>
 80026fa:	4603      	mov	r3, r0
 80026fc:	4618      	mov	r0, r3
 80026fe:	f001 f911 	bl	8003924 <__aeabi_f2d>
 8002702:	4602      	mov	r2, r0
 8002704:	460b      	mov	r3, r1
 8002706:	4610      	mov	r0, r2
 8002708:	4619      	mov	r1, r3
 800270a:	f04f 0200 	mov.w	r2, #0
 800270e:	4b2b      	ldr	r3, [pc, #172]	; (80027bc <ZSM_update+0x33c>)
 8002710:	f001 f95c 	bl	80039cc <__aeabi_dmul>
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
 8002718:	4610      	mov	r0, r2
 800271a:	4619      	mov	r1, r3
 800271c:	f04f 0200 	mov.w	r2, #0
 8002720:	4b26      	ldr	r3, [pc, #152]	; (80027bc <ZSM_update+0x33c>)
 8002722:	f000 ffa1 	bl	8003668 <__adddf3>
 8002726:	4602      	mov	r2, r0
 8002728:	460b      	mov	r3, r1
 800272a:	4620      	mov	r0, r4
 800272c:	4629      	mov	r1, r5
 800272e:	f001 f94d 	bl	80039cc <__aeabi_dmul>
 8002732:	4602      	mov	r2, r0
 8002734:	460b      	mov	r3, r1
 8002736:	4610      	mov	r0, r2
 8002738:	4619      	mov	r1, r3
 800273a:	a319      	add	r3, pc, #100	; (adr r3, 80027a0 <ZSM_update+0x320>)
 800273c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002740:	f001 fa6e 	bl	8003c20 <__aeabi_ddiv>
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	4610      	mov	r0, r2
 800274a:	4619      	mov	r1, r3
 800274c:	f001 fb50 	bl	8003df0 <__aeabi_d2f>
 8002750:	4603      	mov	r3, r0
 8002752:	617b      	str	r3, [r7, #20]

	max_duty = ( (duty_A > duty_B) ? duty_A : duty_B );
 8002754:	ed97 7a07 	vldr	s14, [r7, #28]
 8002758:	edd7 7a06 	vldr	s15, [r7, #24]
 800275c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002764:	dd01      	ble.n	800276a <ZSM_update+0x2ea>
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	e000      	b.n	800276c <ZSM_update+0x2ec>
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	627b      	str	r3, [r7, #36]	; 0x24
	if(duty_C > max_duty)
 800276e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002772:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002776:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800277a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800277e:	dd01      	ble.n	8002784 <ZSM_update+0x304>
		max_duty = duty_C;
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	627b      	str	r3, [r7, #36]	; 0x24

	min_duty = ( (duty_A < duty_B) ? duty_A : duty_B );
 8002784:	ed97 7a07 	vldr	s14, [r7, #28]
 8002788:	edd7 7a06 	vldr	s15, [r7, #24]
 800278c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002794:	d514      	bpl.n	80027c0 <ZSM_update+0x340>
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	e013      	b.n	80027c2 <ZSM_update+0x342>
 800279a:	bf00      	nop
 800279c:	f3af 8000 	nop.w
 80027a0:	0f9096bc 	.word	0x0f9096bc
 80027a4:	3ffbb67a 	.word	0x3ffbb67a
 80027a8:	2e48e8a7 	.word	0x2e48e8a7
 80027ac:	401921ff 	.word	0x401921ff
 80027b0:	c985f06f 	.word	0xc985f06f
 80027b4:	4000c154 	.word	0x4000c154
 80027b8:	200000cc 	.word	0x200000cc
 80027bc:	3fe00000 	.word	0x3fe00000
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	623b      	str	r3, [r7, #32]
	if(duty_C < min_duty)
 80027c4:	ed97 7a05 	vldr	s14, [r7, #20]
 80027c8:	edd7 7a08 	vldr	s15, [r7, #32]
 80027cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027d4:	d501      	bpl.n	80027da <ZSM_update+0x35a>
			min_duty = duty_C;
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	623b      	str	r3, [r7, #32]

	z0 = 0.5 - 0.5*(max_duty + min_duty);
 80027da:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80027de:	edd7 7a08 	vldr	s15, [r7, #32]
 80027e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027e6:	ee17 0a90 	vmov	r0, s15
 80027ea:	f001 f89b 	bl	8003924 <__aeabi_f2d>
 80027ee:	4602      	mov	r2, r0
 80027f0:	460b      	mov	r3, r1
 80027f2:	4610      	mov	r0, r2
 80027f4:	4619      	mov	r1, r3
 80027f6:	f04f 0200 	mov.w	r2, #0
 80027fa:	4b27      	ldr	r3, [pc, #156]	; (8002898 <ZSM_update+0x418>)
 80027fc:	f001 f8e6 	bl	80039cc <__aeabi_dmul>
 8002800:	4602      	mov	r2, r0
 8002802:	460b      	mov	r3, r1
 8002804:	f04f 0000 	mov.w	r0, #0
 8002808:	4923      	ldr	r1, [pc, #140]	; (8002898 <ZSM_update+0x418>)
 800280a:	f000 ff2b 	bl	8003664 <__aeabi_dsub>
 800280e:	4602      	mov	r2, r0
 8002810:	460b      	mov	r3, r1
 8002812:	4610      	mov	r0, r2
 8002814:	4619      	mov	r1, r3
 8002816:	f001 faeb 	bl	8003df0 <__aeabi_d2f>
 800281a:	4603      	mov	r3, r0
 800281c:	613b      	str	r3, [r7, #16]

	duty_A += z0;
 800281e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002822:	edd7 7a04 	vldr	s15, [r7, #16]
 8002826:	ee77 7a27 	vadd.f32	s15, s14, s15
 800282a:	edc7 7a07 	vstr	s15, [r7, #28]
	duty_B += z0;
 800282e:	ed97 7a06 	vldr	s14, [r7, #24]
 8002832:	edd7 7a04 	vldr	s15, [r7, #16]
 8002836:	ee77 7a27 	vadd.f32	s15, s14, s15
 800283a:	edc7 7a06 	vstr	s15, [r7, #24]
	duty_C += z0;
 800283e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002842:	edd7 7a04 	vldr	s15, [r7, #16]
 8002846:	ee77 7a27 	vadd.f32	s15, s14, s15
 800284a:	edc7 7a05 	vstr	s15, [r7, #20]

	PWM_set_duty(duty_A, duty_B, duty_C);
 800284e:	69f8      	ldr	r0, [r7, #28]
 8002850:	69b9      	ldr	r1, [r7, #24]
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	f000 f83e 	bl	80028d4 <PWM_set_duty>

	time += PWM_PERIOD_SEC;
 8002858:	4b10      	ldr	r3, [pc, #64]	; (800289c <ZSM_update+0x41c>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4618      	mov	r0, r3
 800285e:	f001 f861 	bl	8003924 <__aeabi_f2d>
 8002862:	4602      	mov	r2, r0
 8002864:	460b      	mov	r3, r1
 8002866:	4610      	mov	r0, r2
 8002868:	4619      	mov	r1, r3
 800286a:	a309      	add	r3, pc, #36	; (adr r3, 8002890 <ZSM_update+0x410>)
 800286c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002870:	f000 fefa 	bl	8003668 <__adddf3>
 8002874:	4602      	mov	r2, r0
 8002876:	460b      	mov	r3, r1
 8002878:	4610      	mov	r0, r2
 800287a:	4619      	mov	r1, r3
 800287c:	f001 fab8 	bl	8003df0 <__aeabi_d2f>
 8002880:	4602      	mov	r2, r0
 8002882:	4b06      	ldr	r3, [pc, #24]	; (800289c <ZSM_update+0x41c>)
 8002884:	601a      	str	r2, [r3, #0]
}
 8002886:	3728      	adds	r7, #40	; 0x28
 8002888:	46bd      	mov	sp, r7
 800288a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800288e:	bf00      	nop
 8002890:	eb1c432d 	.word	0xeb1c432d
 8002894:	3f1a36e2 	.word	0x3f1a36e2
 8002898:	3fe00000 	.word	0x3fe00000
 800289c:	200000cc 	.word	0x200000cc

080028a0 <PWM_set_freq>:



void PWM_set_freq(uint32_t freq_hz)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
	  PWM_CCU8_SetFreqSymmetric(&PWM_CCU8_0, freq_hz);
 80028a8:	4807      	ldr	r0, [pc, #28]	; (80028c8 <PWM_set_freq+0x28>)
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	f7ff fb98 	bl	8001fe0 <PWM_CCU8_SetFreqSymmetric>
	  PWM_CCU8_SetFreqSymmetric(&PWM_CCU8_1, freq_hz);
 80028b0:	4806      	ldr	r0, [pc, #24]	; (80028cc <PWM_set_freq+0x2c>)
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	f7ff fb94 	bl	8001fe0 <PWM_CCU8_SetFreqSymmetric>
	  PWM_CCU8_SetFreqSymmetric(&PWM_CCU8_2, freq_hz);
 80028b8:	4805      	ldr	r0, [pc, #20]	; (80028d0 <PWM_set_freq+0x30>)
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	f7ff fb90 	bl	8001fe0 <PWM_CCU8_SetFreqSymmetric>
}
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	20000000 	.word	0x20000000
 80028cc:	20000034 	.word	0x20000034
 80028d0:	20000068 	.word	0x20000068

080028d4 <PWM_set_duty>:

void PWM_set_duty (float duty_A, float duty_B, float duty_C)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
	PWM_CCU8_SetDutyCycleSymmetric(&PWM_CCU8_0, XMC_CCU8_SLICE_COMPARE_CHANNEL_1, (uint32_t)10000*duty_A);
 80028e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80028e4:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800293c <PWM_set_duty+0x68>
 80028e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028f0:	4813      	ldr	r0, [pc, #76]	; (8002940 <PWM_set_duty+0x6c>)
 80028f2:	2100      	movs	r1, #0
 80028f4:	ee17 2a90 	vmov	r2, s15
 80028f8:	f7ff fbf2 	bl	80020e0 <PWM_CCU8_SetDutyCycleSymmetric>

	PWM_CCU8_SetDutyCycleSymmetric(&PWM_CCU8_1, XMC_CCU8_SLICE_COMPARE_CHANNEL_1, (uint32_t)10000*duty_B);
 80028fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002900:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800293c <PWM_set_duty+0x68>
 8002904:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002908:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800290c:	480d      	ldr	r0, [pc, #52]	; (8002944 <PWM_set_duty+0x70>)
 800290e:	2100      	movs	r1, #0
 8002910:	ee17 2a90 	vmov	r2, s15
 8002914:	f7ff fbe4 	bl	80020e0 <PWM_CCU8_SetDutyCycleSymmetric>

	PWM_CCU8_SetDutyCycleSymmetric(&PWM_CCU8_2, XMC_CCU8_SLICE_COMPARE_CHANNEL_1, (uint32_t)10000*duty_C);
 8002918:	edd7 7a01 	vldr	s15, [r7, #4]
 800291c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800293c <PWM_set_duty+0x68>
 8002920:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002924:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002928:	4807      	ldr	r0, [pc, #28]	; (8002948 <PWM_set_duty+0x74>)
 800292a:	2100      	movs	r1, #0
 800292c:	ee17 2a90 	vmov	r2, s15
 8002930:	f7ff fbd6 	bl	80020e0 <PWM_CCU8_SetDutyCycleSymmetric>
}
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	461c4000 	.word	0x461c4000
 8002940:	20000000 	.word	0x20000000
 8002944:	20000034 	.word	0x20000034
 8002948:	20000068 	.word	0x20000068

0800294c <PWM_set_interrupt>:

void PWM_set_interrupt (void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
	XMC_CCU8_SLICE_EnableEvent(CCU80_CC80, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH);
 8002950:	4806      	ldr	r0, [pc, #24]	; (800296c <PWM_set_interrupt+0x20>)
 8002952:	2100      	movs	r1, #0
 8002954:	f7ff fd5a 	bl	800240c <XMC_CCU8_SLICE_EnableEvent>
	XMC_CCU8_SLICE_SetInterruptNode(CCU80_CC80, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH, XMC_CCU8_SLICE_SR_ID_0);
 8002958:	4804      	ldr	r0, [pc, #16]	; (800296c <PWM_set_interrupt+0x20>)
 800295a:	2100      	movs	r1, #0
 800295c:	2200      	movs	r2, #0
 800295e:	f7fe fcc7 	bl	80012f0 <XMC_CCU8_SLICE_SetInterruptNode>
	NVIC_EnableIRQ(CCU80_0_IRQn);
 8002962:	203c      	movs	r0, #60	; 0x3c
 8002964:	f7ff fd3a 	bl	80023dc <NVIC_EnableIRQ>
}
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	40020100 	.word	0x40020100

08002970 <CCU80_0_IRQHandler>:

void
CCU80_0_IRQHandler()
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
	ZSM_update(0.86, 0, 1);
 8002974:	4803      	ldr	r0, [pc, #12]	; (8002984 <CCU80_0_IRQHandler+0x14>)
 8002976:	f04f 0100 	mov.w	r1, #0
 800297a:	2201      	movs	r2, #1
 800297c:	f7ff fd80 	bl	8002480 <ZSM_update>
}
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	3f5c28f6 	.word	0x3f5c28f6

08002988 <sinf>:
 8002988:	b500      	push	{lr}
 800298a:	b085      	sub	sp, #20
 800298c:	4a24      	ldr	r2, [pc, #144]	; (8002a20 <sinf+0x98>)
 800298e:	9001      	str	r0, [sp, #4]
 8002990:	9b01      	ldr	r3, [sp, #4]
 8002992:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002996:	4293      	cmp	r3, r2
 8002998:	dd1e      	ble.n	80029d8 <sinf+0x50>
 800299a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800299e:	db08      	blt.n	80029b2 <sinf+0x2a>
 80029a0:	eddd 7a01 	vldr	s15, [sp, #4]
 80029a4:	ee77 7ae7 	vsub.f32	s15, s15, s15
 80029a8:	ee17 0a90 	vmov	r0, s15
 80029ac:	b005      	add	sp, #20
 80029ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80029b2:	a902      	add	r1, sp, #8
 80029b4:	f000 f836 	bl	8002a24 <__ieee754_rem_pio2f>
 80029b8:	f000 0003 	and.w	r0, r0, #3
 80029bc:	2801      	cmp	r0, #1
 80029be:	d020      	beq.n	8002a02 <sinf+0x7a>
 80029c0:	2802      	cmp	r0, #2
 80029c2:	d014      	beq.n	80029ee <sinf+0x66>
 80029c4:	b320      	cbz	r0, 8002a10 <sinf+0x88>
 80029c6:	9802      	ldr	r0, [sp, #8]
 80029c8:	9903      	ldr	r1, [sp, #12]
 80029ca:	f000 f977 	bl	8002cbc <__kernel_cosf>
 80029ce:	ee07 0a90 	vmov	s15, r0
 80029d2:	eef1 7a67 	vneg.f32	s15, s15
 80029d6:	e7e7      	b.n	80029a8 <sinf+0x20>
 80029d8:	2100      	movs	r1, #0
 80029da:	2200      	movs	r2, #0
 80029dc:	f000 fd0c 	bl	80033f8 <__kernel_sinf>
 80029e0:	ee07 0a90 	vmov	s15, r0
 80029e4:	ee17 0a90 	vmov	r0, s15
 80029e8:	b005      	add	sp, #20
 80029ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80029ee:	9802      	ldr	r0, [sp, #8]
 80029f0:	9903      	ldr	r1, [sp, #12]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f000 fd00 	bl	80033f8 <__kernel_sinf>
 80029f8:	ee07 0a90 	vmov	s15, r0
 80029fc:	eef1 7a67 	vneg.f32	s15, s15
 8002a00:	e7d2      	b.n	80029a8 <sinf+0x20>
 8002a02:	9802      	ldr	r0, [sp, #8]
 8002a04:	9903      	ldr	r1, [sp, #12]
 8002a06:	f000 f959 	bl	8002cbc <__kernel_cosf>
 8002a0a:	ee07 0a90 	vmov	s15, r0
 8002a0e:	e7cb      	b.n	80029a8 <sinf+0x20>
 8002a10:	9802      	ldr	r0, [sp, #8]
 8002a12:	9903      	ldr	r1, [sp, #12]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f000 fcef 	bl	80033f8 <__kernel_sinf>
 8002a1a:	ee07 0a90 	vmov	s15, r0
 8002a1e:	e7c3      	b.n	80029a8 <sinf+0x20>
 8002a20:	3f490fd8 	.word	0x3f490fd8

08002a24 <__ieee754_rem_pio2f>:
 8002a24:	b570      	push	{r4, r5, r6, lr}
 8002a26:	4a97      	ldr	r2, [pc, #604]	; (8002c84 <__ieee754_rem_pio2f+0x260>)
 8002a28:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8002a2c:	4294      	cmp	r4, r2
 8002a2e:	b086      	sub	sp, #24
 8002a30:	4606      	mov	r6, r0
 8002a32:	460d      	mov	r5, r1
 8002a34:	dd68      	ble.n	8002b08 <__ieee754_rem_pio2f+0xe4>
 8002a36:	4a94      	ldr	r2, [pc, #592]	; (8002c88 <__ieee754_rem_pio2f+0x264>)
 8002a38:	4294      	cmp	r4, r2
 8002a3a:	dc1c      	bgt.n	8002a76 <__ieee754_rem_pio2f+0x52>
 8002a3c:	2800      	cmp	r0, #0
 8002a3e:	eddf 7a93 	vldr	s15, [pc, #588]	; 8002c8c <__ieee754_rem_pio2f+0x268>
 8002a42:	4a93      	ldr	r2, [pc, #588]	; (8002c90 <__ieee754_rem_pio2f+0x26c>)
 8002a44:	f024 040f 	bic.w	r4, r4, #15
 8002a48:	ee07 0a10 	vmov	s14, r0
 8002a4c:	f340 80e2 	ble.w	8002c14 <__ieee754_rem_pio2f+0x1f0>
 8002a50:	4294      	cmp	r4, r2
 8002a52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a56:	d067      	beq.n	8002b28 <__ieee754_rem_pio2f+0x104>
 8002a58:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8002c94 <__ieee754_rem_pio2f+0x270>
 8002a5c:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8002a60:	2001      	movs	r0, #1
 8002a62:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002a66:	edc1 6a00 	vstr	s13, [r1]
 8002a6a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a6e:	edc1 7a01 	vstr	s15, [r1, #4]
 8002a72:	b006      	add	sp, #24
 8002a74:	bd70      	pop	{r4, r5, r6, pc}
 8002a76:	4a88      	ldr	r2, [pc, #544]	; (8002c98 <__ieee754_rem_pio2f+0x274>)
 8002a78:	4294      	cmp	r4, r2
 8002a7a:	dd67      	ble.n	8002b4c <__ieee754_rem_pio2f+0x128>
 8002a7c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8002a80:	da48      	bge.n	8002b14 <__ieee754_rem_pio2f+0xf0>
 8002a82:	15e2      	asrs	r2, r4, #23
 8002a84:	3a86      	subs	r2, #134	; 0x86
 8002a86:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8002a8a:	ee07 3a10 	vmov	s14, r3
 8002a8e:	eefd 6ac7 	vcvt.s32.f32	s13, s14
 8002a92:	eddf 7a82 	vldr	s15, [pc, #520]	; 8002c9c <__ieee754_rem_pio2f+0x278>
 8002a96:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8002a9a:	ee37 7a66 	vsub.f32	s14, s14, s13
 8002a9e:	edcd 6a03 	vstr	s13, [sp, #12]
 8002aa2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002aa6:	eefd 6ac7 	vcvt.s32.f32	s13, s14
 8002aaa:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8002aae:	ee37 7a66 	vsub.f32	s14, s14, s13
 8002ab2:	edcd 6a04 	vstr	s13, [sp, #16]
 8002ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aba:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ac2:	edcd 7a05 	vstr	s15, [sp, #20]
 8002ac6:	f040 80b8 	bne.w	8002c3a <__ieee754_rem_pio2f+0x216>
 8002aca:	eef5 6a40 	vcmp.f32	s13, #0.0
 8002ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ad2:	bf14      	ite	ne
 8002ad4:	2302      	movne	r3, #2
 8002ad6:	2301      	moveq	r3, #1
 8002ad8:	4971      	ldr	r1, [pc, #452]	; (8002ca0 <__ieee754_rem_pio2f+0x27c>)
 8002ada:	2002      	movs	r0, #2
 8002adc:	e88d 0003 	stmia.w	sp, {r0, r1}
 8002ae0:	a803      	add	r0, sp, #12
 8002ae2:	4629      	mov	r1, r5
 8002ae4:	f000 f974 	bl	8002dd0 <__kernel_rem_pio2f>
 8002ae8:	2e00      	cmp	r6, #0
 8002aea:	da11      	bge.n	8002b10 <__ieee754_rem_pio2f+0xec>
 8002aec:	ed95 7a00 	vldr	s14, [r5]
 8002af0:	edd5 7a01 	vldr	s15, [r5, #4]
 8002af4:	eeb1 7a47 	vneg.f32	s14, s14
 8002af8:	eef1 7a67 	vneg.f32	s15, s15
 8002afc:	4240      	negs	r0, r0
 8002afe:	ed85 7a00 	vstr	s14, [r5]
 8002b02:	edc5 7a01 	vstr	s15, [r5, #4]
 8002b06:	e003      	b.n	8002b10 <__ieee754_rem_pio2f+0xec>
 8002b08:	2200      	movs	r2, #0
 8002b0a:	6028      	str	r0, [r5, #0]
 8002b0c:	604a      	str	r2, [r1, #4]
 8002b0e:	2000      	movs	r0, #0
 8002b10:	b006      	add	sp, #24
 8002b12:	bd70      	pop	{r4, r5, r6, pc}
 8002b14:	ee07 0a90 	vmov	s15, r0
 8002b18:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8002b1c:	2000      	movs	r0, #0
 8002b1e:	edc1 7a01 	vstr	s15, [r1, #4]
 8002b22:	edc1 7a00 	vstr	s15, [r1]
 8002b26:	e7f3      	b.n	8002b10 <__ieee754_rem_pio2f+0xec>
 8002b28:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8002ca4 <__ieee754_rem_pio2f+0x280>
 8002b2c:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8002ca8 <__ieee754_rem_pio2f+0x284>
 8002b30:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002b34:	2001      	movs	r0, #1
 8002b36:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8002b3a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002b3e:	edc1 6a00 	vstr	s13, [r1]
 8002b42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b46:	edc1 7a01 	vstr	s15, [r1, #4]
 8002b4a:	e7e1      	b.n	8002b10 <__ieee754_rem_pio2f+0xec>
 8002b4c:	f000 fca2 	bl	8003494 <fabsf>
 8002b50:	ed9f 6a56 	vldr	s12, [pc, #344]	; 8002cac <__ieee754_rem_pio2f+0x288>
 8002b54:	ed9f 5a4d 	vldr	s10, [pc, #308]	; 8002c8c <__ieee754_rem_pio2f+0x268>
 8002b58:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8002c94 <__ieee754_rem_pio2f+0x270>
 8002b5c:	ee07 0a10 	vmov	s14, r0
 8002b60:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 8002b64:	eee7 7a06 	vfma.f32	s15, s14, s12
 8002b68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b6c:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8002b70:	ee17 0a90 	vmov	r0, s15
 8002b74:	eef1 5a46 	vneg.f32	s11, s12
 8002b78:	eef0 7a47 	vmov.f32	s15, s14
 8002b7c:	281f      	cmp	r0, #31
 8002b7e:	eee5 7a85 	vfma.f32	s15, s11, s10
 8002b82:	ee26 7a26 	vmul.f32	s14, s12, s13
 8002b86:	dc1d      	bgt.n	8002bc4 <__ieee754_rem_pio2f+0x1a0>
 8002b88:	4a49      	ldr	r2, [pc, #292]	; (8002cb0 <__ieee754_rem_pio2f+0x28c>)
 8002b8a:	1e41      	subs	r1, r0, #1
 8002b8c:	f024 03ff 	bic.w	r3, r4, #255	; 0xff
 8002b90:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d015      	beq.n	8002bc4 <__ieee754_rem_pio2f+0x1a0>
 8002b98:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8002b9c:	edc5 6a00 	vstr	s13, [r5]
 8002ba0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002ba4:	2e00      	cmp	r6, #0
 8002ba6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002baa:	edc5 7a01 	vstr	s15, [r5, #4]
 8002bae:	daaf      	bge.n	8002b10 <__ieee754_rem_pio2f+0xec>
 8002bb0:	eef1 6a66 	vneg.f32	s13, s13
 8002bb4:	eef1 7a67 	vneg.f32	s15, s15
 8002bb8:	edc5 6a00 	vstr	s13, [r5]
 8002bbc:	edc5 7a01 	vstr	s15, [r5, #4]
 8002bc0:	4240      	negs	r0, r0
 8002bc2:	e7a5      	b.n	8002b10 <__ieee754_rem_pio2f+0xec>
 8002bc4:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8002bc8:	15e4      	asrs	r4, r4, #23
 8002bca:	ee16 3a90 	vmov	r3, s13
 8002bce:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8002bd2:	1ae3      	subs	r3, r4, r3
 8002bd4:	2b08      	cmp	r3, #8
 8002bd6:	dde1      	ble.n	8002b9c <__ieee754_rem_pio2f+0x178>
 8002bd8:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8002ca4 <__ieee754_rem_pio2f+0x280>
 8002bdc:	eddf 6a32 	vldr	s13, [pc, #200]	; 8002ca8 <__ieee754_rem_pio2f+0x284>
 8002be0:	eeb0 5a67 	vmov.f32	s10, s15
 8002be4:	eea5 5a87 	vfma.f32	s10, s11, s14
 8002be8:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8002bec:	eee5 7a87 	vfma.f32	s15, s11, s14
 8002bf0:	eed6 7a26 	vfnms.f32	s15, s12, s13
 8002bf4:	ee75 6a67 	vsub.f32	s13, s10, s15
 8002bf8:	eeb0 7a67 	vmov.f32	s14, s15
 8002bfc:	ee16 3a90 	vmov	r3, s13
 8002c00:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8002c04:	1ae4      	subs	r4, r4, r3
 8002c06:	2c19      	cmp	r4, #25
 8002c08:	dc2c      	bgt.n	8002c64 <__ieee754_rem_pio2f+0x240>
 8002c0a:	edc5 6a00 	vstr	s13, [r5]
 8002c0e:	eef0 7a45 	vmov.f32	s15, s10
 8002c12:	e7c5      	b.n	8002ba0 <__ieee754_rem_pio2f+0x17c>
 8002c14:	4294      	cmp	r4, r2
 8002c16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c1a:	d010      	beq.n	8002c3e <__ieee754_rem_pio2f+0x21a>
 8002c1c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002c94 <__ieee754_rem_pio2f+0x270>
 8002c20:	ee77 6a87 	vadd.f32	s13, s15, s14
 8002c24:	f04f 30ff 	mov.w	r0, #4294967295
 8002c28:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002c2c:	edc1 6a00 	vstr	s13, [r1]
 8002c30:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c34:	edc1 7a01 	vstr	s15, [r1, #4]
 8002c38:	e76a      	b.n	8002b10 <__ieee754_rem_pio2f+0xec>
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e74c      	b.n	8002ad8 <__ieee754_rem_pio2f+0xb4>
 8002c3e:	eddf 6a19 	vldr	s13, [pc, #100]	; 8002ca4 <__ieee754_rem_pio2f+0x280>
 8002c42:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8002ca8 <__ieee754_rem_pio2f+0x284>
 8002c46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8002c4e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8002c52:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002c56:	edc1 6a00 	vstr	s13, [r1]
 8002c5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c5e:	edc1 7a01 	vstr	s15, [r1, #4]
 8002c62:	e755      	b.n	8002b10 <__ieee754_rem_pio2f+0xec>
 8002c64:	eddf 6a13 	vldr	s13, [pc, #76]	; 8002cb4 <__ieee754_rem_pio2f+0x290>
 8002c68:	eddf 4a13 	vldr	s9, [pc, #76]	; 8002cb8 <__ieee754_rem_pio2f+0x294>
 8002c6c:	eef0 7a45 	vmov.f32	s15, s10
 8002c70:	eee5 7aa6 	vfma.f32	s15, s11, s13
 8002c74:	ee35 7a67 	vsub.f32	s14, s10, s15
 8002c78:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8002c7c:	ee96 7a24 	vfnms.f32	s14, s12, s9
 8002c80:	e78a      	b.n	8002b98 <__ieee754_rem_pio2f+0x174>
 8002c82:	bf00      	nop
 8002c84:	3f490fd8 	.word	0x3f490fd8
 8002c88:	4016cbe3 	.word	0x4016cbe3
 8002c8c:	3fc90f80 	.word	0x3fc90f80
 8002c90:	3fc90fd0 	.word	0x3fc90fd0
 8002c94:	37354443 	.word	0x37354443
 8002c98:	43490f80 	.word	0x43490f80
 8002c9c:	43800000 	.word	0x43800000
 8002ca0:	080041ec 	.word	0x080041ec
 8002ca4:	37354400 	.word	0x37354400
 8002ca8:	2e85a308 	.word	0x2e85a308
 8002cac:	3f22f984 	.word	0x3f22f984
 8002cb0:	0800416c 	.word	0x0800416c
 8002cb4:	2e85a300 	.word	0x2e85a300
 8002cb8:	248d3132 	.word	0x248d3132

08002cbc <__kernel_cosf>:
 8002cbc:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8002cc0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8002cc4:	ee06 0a10 	vmov	s12, r0
 8002cc8:	ee06 1a90 	vmov	s13, r1
 8002ccc:	da2e      	bge.n	8002d2c <__kernel_cosf+0x70>
 8002cce:	eefd 7ac6 	vcvt.s32.f32	s15, s12
 8002cd2:	ee17 3a90 	vmov	r3, s15
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d064      	beq.n	8002da4 <__kernel_cosf+0xe8>
 8002cda:	ee26 7a06 	vmul.f32	s14, s12, s12
 8002cde:	eddf 3a34 	vldr	s7, [pc, #208]	; 8002db0 <__kernel_cosf+0xf4>
 8002ce2:	ed9f 4a34 	vldr	s8, [pc, #208]	; 8002db4 <__kernel_cosf+0xf8>
 8002ce6:	eddf 4a34 	vldr	s9, [pc, #208]	; 8002db8 <__kernel_cosf+0xfc>
 8002cea:	ed9f 5a34 	vldr	s10, [pc, #208]	; 8002dbc <__kernel_cosf+0x100>
 8002cee:	eddf 7a34 	vldr	s15, [pc, #208]	; 8002dc0 <__kernel_cosf+0x104>
 8002cf2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8002dc4 <__kernel_cosf+0x108>
 8002cf6:	eea7 4a23 	vfma.f32	s8, s14, s7
 8002cfa:	eee4 4a07 	vfma.f32	s9, s8, s14
 8002cfe:	eea4 5a87 	vfma.f32	s10, s9, s14
 8002d02:	eee5 7a07 	vfma.f32	s15, s10, s14
 8002d06:	eee7 5a87 	vfma.f32	s11, s15, s14
 8002d0a:	ee65 5a87 	vmul.f32	s11, s11, s14
 8002d0e:	ee66 6ac6 	vnmul.f32	s13, s13, s12
 8002d12:	eeb6 6a00 	vmov.f32	s12, #96	; 0x60
 8002d16:	eee7 6a25 	vfma.f32	s13, s14, s11
 8002d1a:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 8002d1e:	eed7 6a06 	vfnms.f32	s13, s14, s12
 8002d22:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002d26:	ee17 0a90 	vmov	r0, s15
 8002d2a:	4770      	bx	lr
 8002d2c:	ee26 7a06 	vmul.f32	s14, s12, s12
 8002d30:	eddf 3a1f 	vldr	s7, [pc, #124]	; 8002db0 <__kernel_cosf+0xf4>
 8002d34:	ed9f 4a1f 	vldr	s8, [pc, #124]	; 8002db4 <__kernel_cosf+0xf8>
 8002d38:	eddf 4a1f 	vldr	s9, [pc, #124]	; 8002db8 <__kernel_cosf+0xfc>
 8002d3c:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 8002dbc <__kernel_cosf+0x100>
 8002d40:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8002dc0 <__kernel_cosf+0x104>
 8002d44:	eddf 5a1f 	vldr	s11, [pc, #124]	; 8002dc4 <__kernel_cosf+0x108>
 8002d48:	4a1f      	ldr	r2, [pc, #124]	; (8002dc8 <__kernel_cosf+0x10c>)
 8002d4a:	eea7 4a23 	vfma.f32	s8, s14, s7
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	eee4 4a07 	vfma.f32	s9, s8, s14
 8002d54:	eea4 5a87 	vfma.f32	s10, s9, s14
 8002d58:	eee5 7a07 	vfma.f32	s15, s10, s14
 8002d5c:	eee7 5a87 	vfma.f32	s11, s15, s14
 8002d60:	ee65 5a87 	vmul.f32	s11, s11, s14
 8002d64:	ddd3      	ble.n	8002d0e <__kernel_cosf+0x52>
 8002d66:	4a19      	ldr	r2, [pc, #100]	; (8002dcc <__kernel_cosf+0x110>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	dc16      	bgt.n	8002d9a <__kernel_cosf+0xde>
 8002d6c:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 8002d70:	ee07 3a90 	vmov	s15, r3
 8002d74:	eeb7 5a00 	vmov.f32	s10, #112	; 0x70
 8002d78:	ee35 5a67 	vsub.f32	s10, s10, s15
 8002d7c:	ee66 6ac6 	vnmul.f32	s13, s13, s12
 8002d80:	eeb6 6a00 	vmov.f32	s12, #96	; 0x60
 8002d84:	eee7 6a25 	vfma.f32	s13, s14, s11
 8002d88:	eed7 7a06 	vfnms.f32	s15, s14, s12
 8002d8c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002d90:	ee75 7a67 	vsub.f32	s15, s10, s15
 8002d94:	ee17 0a90 	vmov	r0, s15
 8002d98:	4770      	bx	lr
 8002d9a:	eeb6 5a07 	vmov.f32	s10, #103	; 0x67
 8002d9e:	eef5 7a02 	vmov.f32	s15, #82	; 0x52
 8002da2:	e7eb      	b.n	8002d7c <__kernel_cosf+0xc0>
 8002da4:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 8002da8:	ee17 0a90 	vmov	r0, s15
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	ad47d74e 	.word	0xad47d74e
 8002db4:	310f74f6 	.word	0x310f74f6
 8002db8:	b493f27c 	.word	0xb493f27c
 8002dbc:	37d00d01 	.word	0x37d00d01
 8002dc0:	bab60b61 	.word	0xbab60b61
 8002dc4:	3d2aaaab 	.word	0x3d2aaaab
 8002dc8:	3e999999 	.word	0x3e999999
 8002dcc:	3f480000 	.word	0x3f480000

08002dd0 <__kernel_rem_pio2f>:
 8002dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dd4:	ed2d 8b04 	vpush	{d8-d9}
 8002dd8:	b0d7      	sub	sp, #348	; 0x15c
 8002dda:	1e5e      	subs	r6, r3, #1
 8002ddc:	4ca5      	ldr	r4, [pc, #660]	; (8003074 <__kernel_rem_pio2f+0x2a4>)
 8002dde:	9d64      	ldr	r5, [sp, #400]	; 0x190
 8002de0:	9302      	str	r3, [sp, #8]
 8002de2:	1ed3      	subs	r3, r2, #3
 8002de4:	bf48      	it	mi
 8002de6:	1d13      	addmi	r3, r2, #4
 8002de8:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 8002dec:	9101      	str	r1, [sp, #4]
 8002dee:	10db      	asrs	r3, r3, #3
 8002df0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002df4:	ea6f 0a03 	mvn.w	sl, r3
 8002df8:	1971      	adds	r1, r6, r5
 8002dfa:	9303      	str	r3, [sp, #12]
 8002dfc:	4681      	mov	r9, r0
 8002dfe:	eb02 0aca 	add.w	sl, r2, sl, lsl #3
 8002e02:	eba3 0306 	sub.w	r3, r3, r6
 8002e06:	d414      	bmi.n	8002e32 <__kernel_rem_pio2f+0x62>
 8002e08:	4419      	add	r1, r3
 8002e0a:	9865      	ldr	r0, [sp, #404]	; 0x194
 8002e0c:	3101      	adds	r1, #1
 8002e0e:	aa1a      	add	r2, sp, #104	; 0x68
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	bfaa      	itet	ge
 8002e14:	f850 4023 	ldrge.w	r4, [r0, r3, lsl #2]
 8002e18:	eddf 7a97 	vldrlt	s15, [pc, #604]	; 8003078 <__kernel_rem_pio2f+0x2a8>
 8002e1c:	ee07 4a90 	vmovge	s15, r4
 8002e20:	f103 0301 	add.w	r3, r3, #1
 8002e24:	bfa8      	it	ge
 8002e26:	eef8 7ae7 	vcvtge.f32.s32	s15, s15
 8002e2a:	428b      	cmp	r3, r1
 8002e2c:	ece2 7a01 	vstmia	r2!, {s15}
 8002e30:	d1ee      	bne.n	8002e10 <__kernel_rem_pio2f+0x40>
 8002e32:	2d00      	cmp	r5, #0
 8002e34:	db1a      	blt.n	8002e6c <__kernel_rem_pio2f+0x9c>
 8002e36:	9b02      	ldr	r3, [sp, #8]
 8002e38:	a91a      	add	r1, sp, #104	; 0x68
 8002e3a:	1c6c      	adds	r4, r5, #1
 8002e3c:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8002e40:	a842      	add	r0, sp, #264	; 0x108
 8002e42:	009f      	lsls	r7, r3, #2
 8002e44:	2e00      	cmp	r6, #0
 8002e46:	f2c0 81ce 	blt.w	80031e6 <__kernel_rem_pio2f+0x416>
 8002e4a:	eddf 7a8b 	vldr	s15, [pc, #556]	; 8003078 <__kernel_rem_pio2f+0x2a8>
 8002e4e:	464a      	mov	r2, r9
 8002e50:	19cb      	adds	r3, r1, r7
 8002e52:	ed33 7a01 	vldmdb	r3!, {s14}
 8002e56:	ecf2 6a01 	vldmia	r2!, {s13}
 8002e5a:	4299      	cmp	r1, r3
 8002e5c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8002e60:	d1f7      	bne.n	8002e52 <__kernel_rem_pio2f+0x82>
 8002e62:	3104      	adds	r1, #4
 8002e64:	42a1      	cmp	r1, r4
 8002e66:	ece0 7a01 	vstmia	r0!, {s15}
 8002e6a:	d1eb      	bne.n	8002e44 <__kernel_rem_pio2f+0x74>
 8002e6c:	9a02      	ldr	r2, [sp, #8]
 8002e6e:	eddf 8a84 	vldr	s17, [pc, #528]	; 8003080 <__kernel_rem_pio2f+0x2b0>
 8002e72:	ed9f 8a82 	vldr	s16, [pc, #520]	; 800307c <__kernel_rem_pio2f+0x2ac>
 8002e76:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	ebc2 7882 	rsb	r8, r2, r2, lsl #30
 8002e82:	aa06      	add	r2, sp, #24
 8002e84:	1d1f      	adds	r7, r3, #4
 8002e86:	4413      	add	r3, r2
 8002e88:	4417      	add	r7, r2
 8002e8a:	9304      	str	r3, [sp, #16]
 8002e8c:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8002e90:	462c      	mov	r4, r5
 8002e92:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8002e96:	ab56      	add	r3, sp, #344	; 0x158
 8002e98:	445b      	add	r3, fp
 8002e9a:	2c00      	cmp	r4, #0
 8002e9c:	ed53 6a14 	vldr	s13, [r3, #-80]	; 0xffffffb0
 8002ea0:	dd19      	ble.n	8002ed6 <__kernel_rem_pio2f+0x106>
 8002ea2:	a942      	add	r1, sp, #264	; 0x108
 8002ea4:	eb01 030b 	add.w	r3, r1, fp
 8002ea8:	aa05      	add	r2, sp, #20
 8002eaa:	ee66 7aa8 	vmul.f32	s15, s13, s17
 8002eae:	eeb0 7a66 	vmov.f32	s14, s13
 8002eb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002eb6:	ed33 6a01 	vldmdb	r3!, {s12}
 8002eba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ebe:	428b      	cmp	r3, r1
 8002ec0:	eea7 7ac8 	vfms.f32	s14, s15, s16
 8002ec4:	ee77 6a86 	vadd.f32	s13, s15, s12
 8002ec8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8002ecc:	ee17 0a10 	vmov	r0, s14
 8002ed0:	f842 0f04 	str.w	r0, [r2, #4]!
 8002ed4:	d1e9      	bne.n	8002eaa <__kernel_rem_pio2f+0xda>
 8002ed6:	ee16 0a90 	vmov	r0, s13
 8002eda:	4651      	mov	r1, sl
 8002edc:	f000 fb38 	bl	8003550 <scalbnf>
 8002ee0:	ee09 0a10 	vmov	s18, r0
 8002ee4:	eef4 7a00 	vmov.f32	s15, #64	; 0x40
 8002ee8:	ee69 7a27 	vmul.f32	s15, s18, s15
 8002eec:	ee17 0a90 	vmov	r0, s15
 8002ef0:	f000 fad4 	bl	800349c <floorf>
 8002ef4:	ee07 0a10 	vmov	s14, r0
 8002ef8:	eef2 7a00 	vmov.f32	s15, #32
 8002efc:	eea7 9a67 	vfms.f32	s18, s14, s15
 8002f00:	f1ba 0f00 	cmp.w	sl, #0
 8002f04:	eefd 9ac9 	vcvt.s32.f32	s19, s18
 8002f08:	eef8 7ae9 	vcvt.f32.s32	s15, s19
 8002f0c:	ee39 9a67 	vsub.f32	s18, s18, s15
 8002f10:	f340 814d 	ble.w	80031ae <__kernel_rem_pio2f+0x3de>
 8002f14:	1e61      	subs	r1, r4, #1
 8002f16:	aa06      	add	r2, sp, #24
 8002f18:	f1ca 0308 	rsb	r3, sl, #8
 8002f1c:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8002f20:	fa40 f203 	asr.w	r2, r0, r3
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	f10d 0e18 	add.w	lr, sp, #24
 8002f2c:	1ac3      	subs	r3, r0, r3
 8002f2e:	f84e 3021 	str.w	r3, [lr, r1, lsl #2]
 8002f32:	ee19 1a90 	vmov	r1, s19
 8002f36:	4411      	add	r1, r2
 8002f38:	f1ca 0007 	rsb	r0, sl, #7
 8002f3c:	ee09 1a90 	vmov	s19, r1
 8002f40:	fa43 fc00 	asr.w	ip, r3, r0
 8002f44:	f1bc 0f00 	cmp.w	ip, #0
 8002f48:	dd37      	ble.n	8002fba <__kernel_rem_pio2f+0x1ea>
 8002f4a:	ee19 3a90 	vmov	r3, s19
 8002f4e:	2c00      	cmp	r4, #0
 8002f50:	f103 0301 	add.w	r3, r3, #1
 8002f54:	ee09 3a90 	vmov	s19, r3
 8002f58:	f340 81de 	ble.w	8003318 <__kernel_rem_pio2f+0x548>
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	4610      	mov	r0, r2
 8002f60:	a905      	add	r1, sp, #20
 8002f62:	e008      	b.n	8002f76 <__kernel_rem_pio2f+0x1a6>
 8002f64:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8002f68:	b113      	cbz	r3, 8002f70 <__kernel_rem_pio2f+0x1a0>
 8002f6a:	f8c1 e000 	str.w	lr, [r1]
 8002f6e:	2001      	movs	r0, #1
 8002f70:	3201      	adds	r2, #1
 8002f72:	4294      	cmp	r4, r2
 8002f74:	dd0b      	ble.n	8002f8e <__kernel_rem_pio2f+0x1be>
 8002f76:	f851 3f04 	ldr.w	r3, [r1, #4]!
 8002f7a:	2800      	cmp	r0, #0
 8002f7c:	d0f2      	beq.n	8002f64 <__kernel_rem_pio2f+0x194>
 8002f7e:	3201      	adds	r2, #1
 8002f80:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8002f84:	4294      	cmp	r4, r2
 8002f86:	600b      	str	r3, [r1, #0]
 8002f88:	f04f 0001 	mov.w	r0, #1
 8002f8c:	dcf3      	bgt.n	8002f76 <__kernel_rem_pio2f+0x1a6>
 8002f8e:	f1ba 0f00 	cmp.w	sl, #0
 8002f92:	dd0f      	ble.n	8002fb4 <__kernel_rem_pio2f+0x1e4>
 8002f94:	f1ba 0f01 	cmp.w	sl, #1
 8002f98:	f000 8111 	beq.w	80031be <__kernel_rem_pio2f+0x3ee>
 8002f9c:	f1ba 0f02 	cmp.w	sl, #2
 8002fa0:	d108      	bne.n	8002fb4 <__kernel_rem_pio2f+0x1e4>
 8002fa2:	1e62      	subs	r2, r4, #1
 8002fa4:	ab06      	add	r3, sp, #24
 8002fa6:	a906      	add	r1, sp, #24
 8002fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fb0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8002fb4:	f1bc 0f02 	cmp.w	ip, #2
 8002fb8:	d064      	beq.n	8003084 <__kernel_rem_pio2f+0x2b4>
 8002fba:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8002fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fc2:	d177      	bne.n	80030b4 <__kernel_rem_pio2f+0x2e4>
 8002fc4:	1e63      	subs	r3, r4, #1
 8002fc6:	429d      	cmp	r5, r3
 8002fc8:	dc0b      	bgt.n	8002fe2 <__kernel_rem_pio2f+0x212>
 8002fca:	aa06      	add	r2, sp, #24
 8002fcc:	4493      	add	fp, r2
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
 8002fd4:	45bb      	cmp	fp, r7
 8002fd6:	ea42 0201 	orr.w	r2, r2, r1
 8002fda:	d1f9      	bne.n	8002fd0 <__kernel_rem_pio2f+0x200>
 8002fdc:	2a00      	cmp	r2, #0
 8002fde:	f040 8185 	bne.w	80032ec <__kernel_rem_pio2f+0x51c>
 8002fe2:	1e6b      	subs	r3, r5, #1
 8002fe4:	aa06      	add	r2, sp, #24
 8002fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f040 8191 	bne.w	8003312 <__kernel_rem_pio2f+0x542>
 8002ff0:	9b04      	ldr	r3, [sp, #16]
 8002ff2:	f04f 0c01 	mov.w	ip, #1
 8002ff6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8002ffa:	f10c 0c01 	add.w	ip, ip, #1
 8002ffe:	2a00      	cmp	r2, #0
 8003000:	d0f9      	beq.n	8002ff6 <__kernel_rem_pio2f+0x226>
 8003002:	44a4      	add	ip, r4
 8003004:	1c63      	adds	r3, r4, #1
 8003006:	4563      	cmp	r3, ip
 8003008:	dc31      	bgt.n	800306e <__kernel_rem_pio2f+0x29e>
 800300a:	9a03      	ldr	r2, [sp, #12]
 800300c:	eb03 0e02 	add.w	lr, r3, r2
 8003010:	9a02      	ldr	r2, [sp, #8]
 8003012:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 8003016:	18a0      	adds	r0, r4, r2
 8003018:	eb0c 0b02 	add.w	fp, ip, r2
 800301c:	9a65      	ldr	r2, [sp, #404]	; 0x194
 800301e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8003022:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 8003026:	aa1a      	add	r2, sp, #104	; 0x68
 8003028:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800302c:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8003030:	aa42      	add	r2, sp, #264	; 0x108
 8003032:	eb02 0483 	add.w	r4, r2, r3, lsl #2
 8003036:	f85e 3f04 	ldr.w	r3, [lr, #4]!
 800303a:	ee07 3a90 	vmov	s15, r3
 800303e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003042:	2e00      	cmp	r6, #0
 8003044:	ece0 7a01 	vstmia	r0!, {s15}
 8003048:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8003078 <__kernel_rem_pio2f+0x2a8>
 800304c:	db0b      	blt.n	8003066 <__kernel_rem_pio2f+0x296>
 800304e:	464a      	mov	r2, r9
 8003050:	eb00 0108 	add.w	r1, r0, r8
 8003054:	4603      	mov	r3, r0
 8003056:	ed33 7a01 	vldmdb	r3!, {s14}
 800305a:	ecf2 6a01 	vldmia	r2!, {s13}
 800305e:	428b      	cmp	r3, r1
 8003060:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003064:	d1f7      	bne.n	8003056 <__kernel_rem_pio2f+0x286>
 8003066:	4558      	cmp	r0, fp
 8003068:	ece4 7a01 	vstmia	r4!, {s15}
 800306c:	d1e3      	bne.n	8003036 <__kernel_rem_pio2f+0x266>
 800306e:	4664      	mov	r4, ip
 8003070:	e70f      	b.n	8002e92 <__kernel_rem_pio2f+0xc2>
 8003072:	bf00      	nop
 8003074:	08004504 	.word	0x08004504
 8003078:	00000000 	.word	0x00000000
 800307c:	43800000 	.word	0x43800000
 8003080:	3b800000 	.word	0x3b800000
 8003084:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 8003088:	ee37 9ac9 	vsub.f32	s18, s15, s18
 800308c:	2800      	cmp	r0, #0
 800308e:	d094      	beq.n	8002fba <__kernel_rem_pio2f+0x1ea>
 8003090:	ee17 0a90 	vmov	r0, s15
 8003094:	4651      	mov	r1, sl
 8003096:	f8cd c014 	str.w	ip, [sp, #20]
 800309a:	f000 fa59 	bl	8003550 <scalbnf>
 800309e:	ee07 0a90 	vmov	s15, r0
 80030a2:	ee39 9a67 	vsub.f32	s18, s18, s15
 80030a6:	f8dd c014 	ldr.w	ip, [sp, #20]
 80030aa:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80030ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030b2:	d087      	beq.n	8002fc4 <__kernel_rem_pio2f+0x1f4>
 80030b4:	ee19 0a10 	vmov	r0, s18
 80030b8:	f1ca 0100 	rsb	r1, sl, #0
 80030bc:	f8cd c008 	str.w	ip, [sp, #8]
 80030c0:	f000 fa46 	bl	8003550 <scalbnf>
 80030c4:	ed5f 6a13 	vldr	s13, [pc, #-76]	; 800307c <__kernel_rem_pio2f+0x2ac>
 80030c8:	f8dd c008 	ldr.w	ip, [sp, #8]
 80030cc:	ee07 0a10 	vmov	s14, r0
 80030d0:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80030d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030d8:	f2c0 8181 	blt.w	80033de <__kernel_rem_pio2f+0x60e>
 80030dc:	ed5f 7a18 	vldr	s15, [pc, #-96]	; 8003080 <__kernel_rem_pio2f+0x2b0>
 80030e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030e4:	a906      	add	r1, sp, #24
 80030e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030ea:	1c63      	adds	r3, r4, #1
 80030ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030f0:	f10a 0a08 	add.w	sl, sl, #8
 80030f4:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80030f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030fc:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8003100:	ee17 2a10 	vmov	r2, s14
 8003104:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 8003108:	ee17 2a90 	vmov	r2, s15
 800310c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003110:	4651      	mov	r1, sl
 8003112:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003116:	9303      	str	r3, [sp, #12]
 8003118:	f8cd c008 	str.w	ip, [sp, #8]
 800311c:	f000 fa18 	bl	8003550 <scalbnf>
 8003120:	9b03      	ldr	r3, [sp, #12]
 8003122:	f8dd c008 	ldr.w	ip, [sp, #8]
 8003126:	2b00      	cmp	r3, #0
 8003128:	ee07 0a10 	vmov	s14, r0
 800312c:	f2c0 80c2 	blt.w	80032b4 <__kernel_rem_pio2f+0x4e4>
 8003130:	1c5f      	adds	r7, r3, #1
 8003132:	00ba      	lsls	r2, r7, #2
 8003134:	a842      	add	r0, sp, #264	; 0x108
 8003136:	a906      	add	r1, sp, #24
 8003138:	ed5f 6a2f 	vldr	s13, [pc, #-188]	; 8003080 <__kernel_rem_pio2f+0x2b0>
 800313c:	4411      	add	r1, r2
 800313e:	1886      	adds	r6, r0, r2
 8003140:	ed71 7a01 	vldmdb	r1!, {s15}
 8003144:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003148:	ee67 7a87 	vmul.f32	s15, s15, s14
 800314c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003150:	ed66 7a01 	vstmdb	r6!, {s15}
 8003154:	4286      	cmp	r6, r0
 8003156:	d1f3      	bne.n	8003140 <__kernel_rem_pio2f+0x370>
 8003158:	3a04      	subs	r2, #4
 800315a:	4416      	add	r6, r2
 800315c:	2400      	movs	r4, #0
 800315e:	2d00      	cmp	r5, #0
 8003160:	f2c0 80a5 	blt.w	80032ae <__kernel_rem_pio2f+0x4de>
 8003164:	2c00      	cmp	r4, #0
 8003166:	f2c0 80a2 	blt.w	80032ae <__kernel_rem_pio2f+0x4de>
 800316a:	48a1      	ldr	r0, [pc, #644]	; (80033f0 <__kernel_rem_pio2f+0x620>)
 800316c:	eddf 7aa1 	vldr	s15, [pc, #644]	; 80033f4 <__kernel_rem_pio2f+0x624>
 8003170:	4631      	mov	r1, r6
 8003172:	2200      	movs	r2, #0
 8003174:	e001      	b.n	800317a <__kernel_rem_pio2f+0x3aa>
 8003176:	42a2      	cmp	r2, r4
 8003178:	dc08      	bgt.n	800318c <__kernel_rem_pio2f+0x3bc>
 800317a:	ecf0 6a01 	vldmia	r0!, {s13}
 800317e:	ecb1 7a01 	vldmia	r1!, {s14}
 8003182:	3201      	adds	r2, #1
 8003184:	4295      	cmp	r5, r2
 8003186:	eee6 7a87 	vfma.f32	s15, s13, s14
 800318a:	daf4      	bge.n	8003176 <__kernel_rem_pio2f+0x3a6>
 800318c:	aa56      	add	r2, sp, #344	; 0x158
 800318e:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8003192:	3401      	adds	r4, #1
 8003194:	42bc      	cmp	r4, r7
 8003196:	f1a6 0604 	sub.w	r6, r6, #4
 800319a:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 800319e:	d1de      	bne.n	800315e <__kernel_rem_pio2f+0x38e>
 80031a0:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80031a2:	2a03      	cmp	r2, #3
 80031a4:	d865      	bhi.n	8003272 <__kernel_rem_pio2f+0x4a2>
 80031a6:	e8df f002 	tbb	[pc, r2]
 80031aa:	3a6d      	.short	0x3a6d
 80031ac:	b93a      	.short	0xb93a
 80031ae:	d110      	bne.n	80031d2 <__kernel_rem_pio2f+0x402>
 80031b0:	1e63      	subs	r3, r4, #1
 80031b2:	aa06      	add	r2, sp, #24
 80031b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031b8:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80031bc:	e6c2      	b.n	8002f44 <__kernel_rem_pio2f+0x174>
 80031be:	1e62      	subs	r2, r4, #1
 80031c0:	ab06      	add	r3, sp, #24
 80031c2:	a906      	add	r1, sp, #24
 80031c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031cc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80031d0:	e6f0      	b.n	8002fb4 <__kernel_rem_pio2f+0x1e4>
 80031d2:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 80031d6:	eeb4 9ae7 	vcmpe.f32	s18, s15
 80031da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031de:	da0b      	bge.n	80031f8 <__kernel_rem_pio2f+0x428>
 80031e0:	f04f 0c00 	mov.w	ip, #0
 80031e4:	e6e9      	b.n	8002fba <__kernel_rem_pio2f+0x1ea>
 80031e6:	eddf 7a83 	vldr	s15, [pc, #524]	; 80033f4 <__kernel_rem_pio2f+0x624>
 80031ea:	3104      	adds	r1, #4
 80031ec:	42a1      	cmp	r1, r4
 80031ee:	ece0 7a01 	vstmia	r0!, {s15}
 80031f2:	f47f ae27 	bne.w	8002e44 <__kernel_rem_pio2f+0x74>
 80031f6:	e639      	b.n	8002e6c <__kernel_rem_pio2f+0x9c>
 80031f8:	ee19 3a90 	vmov	r3, s19
 80031fc:	2c00      	cmp	r4, #0
 80031fe:	f103 0301 	add.w	r3, r3, #1
 8003202:	ee09 3a90 	vmov	s19, r3
 8003206:	bfc8      	it	gt
 8003208:	f04f 0c02 	movgt.w	ip, #2
 800320c:	f73f aea6 	bgt.w	8002f5c <__kernel_rem_pio2f+0x18c>
 8003210:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 8003214:	ee37 9ac9 	vsub.f32	s18, s15, s18
 8003218:	f04f 0c02 	mov.w	ip, #2
 800321c:	e6cd      	b.n	8002fba <__kernel_rem_pio2f+0x1ea>
 800321e:	aa2e      	add	r2, sp, #184	; 0xb8
 8003220:	eddf 7a74 	vldr	s15, [pc, #464]	; 80033f4 <__kernel_rem_pio2f+0x624>
 8003224:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8003228:	ed37 7a01 	vldmdb	r7!, {s14}
 800322c:	4297      	cmp	r7, r2
 800322e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003232:	d1f9      	bne.n	8003228 <__kernel_rem_pio2f+0x458>
 8003234:	f1bc 0f00 	cmp.w	ip, #0
 8003238:	d048      	beq.n	80032cc <__kernel_rem_pio2f+0x4fc>
 800323a:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800323e:	9a01      	ldr	r2, [sp, #4]
 8003240:	eeb1 7a67 	vneg.f32	s14, s15
 8003244:	2b00      	cmp	r3, #0
 8003246:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800324a:	ed82 7a00 	vstr	s14, [r2]
 800324e:	dd0b      	ble.n	8003268 <__kernel_rem_pio2f+0x498>
 8003250:	a92f      	add	r1, sp, #188	; 0xbc
 8003252:	2201      	movs	r2, #1
 8003254:	ecb1 7a01 	vldmia	r1!, {s14}
 8003258:	3201      	adds	r2, #1
 800325a:	4293      	cmp	r3, r2
 800325c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003260:	daf8      	bge.n	8003254 <__kernel_rem_pio2f+0x484>
 8003262:	f1bc 0f00 	cmp.w	ip, #0
 8003266:	d001      	beq.n	800326c <__kernel_rem_pio2f+0x49c>
 8003268:	eef1 7a67 	vneg.f32	s15, s15
 800326c:	9b01      	ldr	r3, [sp, #4]
 800326e:	edc3 7a01 	vstr	s15, [r3, #4]
 8003272:	ee19 3a90 	vmov	r3, s19
 8003276:	f003 0007 	and.w	r0, r3, #7
 800327a:	b057      	add	sp, #348	; 0x15c
 800327c:	ecbd 8b04 	vpop	{d8-d9}
 8003280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003284:	aa2e      	add	r2, sp, #184	; 0xb8
 8003286:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80033f4 <__kernel_rem_pio2f+0x624>
 800328a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800328e:	ed37 7a01 	vldmdb	r7!, {s14}
 8003292:	3b01      	subs	r3, #1
 8003294:	1c5a      	adds	r2, r3, #1
 8003296:	ee77 7a87 	vadd.f32	s15, s15, s14
 800329a:	d1f8      	bne.n	800328e <__kernel_rem_pio2f+0x4be>
 800329c:	f1bc 0f00 	cmp.w	ip, #0
 80032a0:	d001      	beq.n	80032a6 <__kernel_rem_pio2f+0x4d6>
 80032a2:	eef1 7a67 	vneg.f32	s15, s15
 80032a6:	9b01      	ldr	r3, [sp, #4]
 80032a8:	edc3 7a00 	vstr	s15, [r3]
 80032ac:	e7e1      	b.n	8003272 <__kernel_rem_pio2f+0x4a2>
 80032ae:	eddf 7a51 	vldr	s15, [pc, #324]	; 80033f4 <__kernel_rem_pio2f+0x624>
 80032b2:	e76b      	b.n	800318c <__kernel_rem_pio2f+0x3bc>
 80032b4:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80032b6:	2a03      	cmp	r2, #3
 80032b8:	d8db      	bhi.n	8003272 <__kernel_rem_pio2f+0x4a2>
 80032ba:	e8df f002 	tbb	[pc, r2]
 80032be:	0214      	.short	0x0214
 80032c0:	8302      	.short	0x8302
 80032c2:	eddf 7a4c 	vldr	s15, [pc, #304]	; 80033f4 <__kernel_rem_pio2f+0x624>
 80032c6:	f1bc 0f00 	cmp.w	ip, #0
 80032ca:	d1b6      	bne.n	800323a <__kernel_rem_pio2f+0x46a>
 80032cc:	ed9d 7a2e 	vldr	s14, [sp, #184]	; 0xb8
 80032d0:	9a01      	ldr	r2, [sp, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	edc2 7a00 	vstr	s15, [r2]
 80032d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032dc:	dcb8      	bgt.n	8003250 <__kernel_rem_pio2f+0x480>
 80032de:	9b01      	ldr	r3, [sp, #4]
 80032e0:	edc3 7a01 	vstr	s15, [r3, #4]
 80032e4:	e7c5      	b.n	8003272 <__kernel_rem_pio2f+0x4a2>
 80032e6:	eddf 7a43 	vldr	s15, [pc, #268]	; 80033f4 <__kernel_rem_pio2f+0x624>
 80032ea:	e7d7      	b.n	800329c <__kernel_rem_pio2f+0x4cc>
 80032ec:	aa06      	add	r2, sp, #24
 80032ee:	f1aa 0a08 	sub.w	sl, sl, #8
 80032f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80032f6:	2a00      	cmp	r2, #0
 80032f8:	f47f af0a 	bne.w	8003110 <__kernel_rem_pio2f+0x340>
 80032fc:	aa06      	add	r2, sp, #24
 80032fe:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8003302:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8003306:	3b01      	subs	r3, #1
 8003308:	f1aa 0a08 	sub.w	sl, sl, #8
 800330c:	2900      	cmp	r1, #0
 800330e:	d0f8      	beq.n	8003302 <__kernel_rem_pio2f+0x532>
 8003310:	e6fe      	b.n	8003110 <__kernel_rem_pio2f+0x340>
 8003312:	f04f 0c01 	mov.w	ip, #1
 8003316:	e674      	b.n	8003002 <__kernel_rem_pio2f+0x232>
 8003318:	2000      	movs	r0, #0
 800331a:	e638      	b.n	8002f8e <__kernel_rem_pio2f+0x1be>
 800331c:	2b00      	cmp	r3, #0
 800331e:	dd51      	ble.n	80033c4 <__kernel_rem_pio2f+0x5f4>
 8003320:	009a      	lsls	r2, r3, #2
 8003322:	a956      	add	r1, sp, #344	; 0x158
 8003324:	4411      	add	r1, r2
 8003326:	ac2e      	add	r4, sp, #184	; 0xb8
 8003328:	1d10      	adds	r0, r2, #4
 800332a:	ed11 7a28 	vldr	s14, [r1, #-160]	; 0xffffff60
 800332e:	4420      	add	r0, r4
 8003330:	18a1      	adds	r1, r4, r2
 8003332:	ed71 7a01 	vldmdb	r1!, {s15}
 8003336:	ee77 6a27 	vadd.f32	s13, s14, s15
 800333a:	42a1      	cmp	r1, r4
 800333c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003340:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003344:	eeb0 7a66 	vmov.f32	s14, s13
 8003348:	ed60 7a01 	vstmdb	r0!, {s15}
 800334c:	edc1 6a00 	vstr	s13, [r1]
 8003350:	d1ef      	bne.n	8003332 <__kernel_rem_pio2f+0x562>
 8003352:	2b01      	cmp	r3, #1
 8003354:	dd36      	ble.n	80033c4 <__kernel_rem_pio2f+0x5f4>
 8003356:	1d13      	adds	r3, r2, #4
 8003358:	a856      	add	r0, sp, #344	; 0x158
 800335a:	4410      	add	r0, r2
 800335c:	440b      	add	r3, r1
 800335e:	ed10 7a28 	vldr	s14, [r0, #-160]	; 0xffffff60
 8003362:	440a      	add	r2, r1
 8003364:	a82f      	add	r0, sp, #188	; 0xbc
 8003366:	4619      	mov	r1, r3
 8003368:	ed72 7a01 	vldmdb	r2!, {s15}
 800336c:	ee77 6a87 	vadd.f32	s13, s15, s14
 8003370:	4282      	cmp	r2, r0
 8003372:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003376:	ee77 7a87 	vadd.f32	s15, s15, s14
 800337a:	eeb0 7a66 	vmov.f32	s14, s13
 800337e:	ed61 7a01 	vstmdb	r1!, {s15}
 8003382:	edc2 6a00 	vstr	s13, [r2]
 8003386:	d1ef      	bne.n	8003368 <__kernel_rem_pio2f+0x598>
 8003388:	eddf 7a1a 	vldr	s15, [pc, #104]	; 80033f4 <__kernel_rem_pio2f+0x624>
 800338c:	aa30      	add	r2, sp, #192	; 0xc0
 800338e:	ed33 7a01 	vldmdb	r3!, {s14}
 8003392:	4293      	cmp	r3, r2
 8003394:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003398:	d1f9      	bne.n	800338e <__kernel_rem_pio2f+0x5be>
 800339a:	f1bc 0f00 	cmp.w	ip, #0
 800339e:	d016      	beq.n	80033ce <__kernel_rem_pio2f+0x5fe>
 80033a0:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80033a4:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 80033a8:	9a01      	ldr	r2, [sp, #4]
 80033aa:	eef1 7a67 	vneg.f32	s15, s15
 80033ae:	eef1 6a66 	vneg.f32	s13, s13
 80033b2:	eeb1 7a47 	vneg.f32	s14, s14
 80033b6:	edc2 7a02 	vstr	s15, [r2, #8]
 80033ba:	edc2 6a00 	vstr	s13, [r2]
 80033be:	ed82 7a01 	vstr	s14, [r2, #4]
 80033c2:	e756      	b.n	8003272 <__kernel_rem_pio2f+0x4a2>
 80033c4:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80033f4 <__kernel_rem_pio2f+0x624>
 80033c8:	f1bc 0f00 	cmp.w	ip, #0
 80033cc:	d1e8      	bne.n	80033a0 <__kernel_rem_pio2f+0x5d0>
 80033ce:	9801      	ldr	r0, [sp, #4]
 80033d0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80033d2:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80033d4:	edc0 7a02 	vstr	s15, [r0, #8]
 80033d8:	6002      	str	r2, [r0, #0]
 80033da:	6043      	str	r3, [r0, #4]
 80033dc:	e749      	b.n	8003272 <__kernel_rem_pio2f+0x4a2>
 80033de:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80033e2:	a906      	add	r1, sp, #24
 80033e4:	ee17 2a10 	vmov	r2, s14
 80033e8:	4623      	mov	r3, r4
 80033ea:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 80033ee:	e68f      	b.n	8003110 <__kernel_rem_pio2f+0x340>
 80033f0:	08004510 	.word	0x08004510
 80033f4:	00000000 	.word	0x00000000

080033f8 <__kernel_sinf>:
 80033f8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80033fc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8003400:	ee07 0a90 	vmov	s15, r0
 8003404:	ee06 1a10 	vmov	s12, r1
 8003408:	da04      	bge.n	8003414 <__kernel_sinf+0x1c>
 800340a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800340e:	ee17 3a10 	vmov	r3, s14
 8003412:	b323      	cbz	r3, 800345e <__kernel_sinf+0x66>
 8003414:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003418:	ed9f 4a17 	vldr	s8, [pc, #92]	; 8003478 <__kernel_sinf+0x80>
 800341c:	eddf 4a17 	vldr	s9, [pc, #92]	; 800347c <__kernel_sinf+0x84>
 8003420:	ed9f 5a17 	vldr	s10, [pc, #92]	; 8003480 <__kernel_sinf+0x88>
 8003424:	eddf 5a17 	vldr	s11, [pc, #92]	; 8003484 <__kernel_sinf+0x8c>
 8003428:	eddf 6a17 	vldr	s13, [pc, #92]	; 8003488 <__kernel_sinf+0x90>
 800342c:	eee7 4a04 	vfma.f32	s9, s14, s8
 8003430:	ee27 4a27 	vmul.f32	s8, s14, s15
 8003434:	eea4 5a87 	vfma.f32	s10, s9, s14
 8003438:	eee5 5a07 	vfma.f32	s11, s10, s14
 800343c:	eee5 6a87 	vfma.f32	s13, s11, s14
 8003440:	b182      	cbz	r2, 8003464 <__kernel_sinf+0x6c>
 8003442:	ee66 6ac4 	vnmul.f32	s13, s13, s8
 8003446:	eef6 5a00 	vmov.f32	s11, #96	; 0x60
 800344a:	eee6 6a25 	vfma.f32	s13, s12, s11
 800344e:	eddf 5a0f 	vldr	s11, [pc, #60]	; 800348c <__kernel_sinf+0x94>
 8003452:	ee96 6a87 	vfnms.f32	s12, s13, s14
 8003456:	eea4 6a25 	vfma.f32	s12, s8, s11
 800345a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800345e:	ee17 0a90 	vmov	r0, s15
 8003462:	4770      	bx	lr
 8003464:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 8003490 <__kernel_sinf+0x98>
 8003468:	eea7 6a26 	vfma.f32	s12, s14, s13
 800346c:	eee6 7a04 	vfma.f32	s15, s12, s8
 8003470:	ee17 0a90 	vmov	r0, s15
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	2f2ec9d3 	.word	0x2f2ec9d3
 800347c:	b2d72f34 	.word	0xb2d72f34
 8003480:	3638ef1b 	.word	0x3638ef1b
 8003484:	b9500d01 	.word	0xb9500d01
 8003488:	3c088889 	.word	0x3c088889
 800348c:	3e2aaaab 	.word	0x3e2aaaab
 8003490:	be2aaaab 	.word	0xbe2aaaab

08003494 <fabsf>:
 8003494:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop

0800349c <floorf>:
 800349c:	b410      	push	{r4}
 800349e:	b083      	sub	sp, #12
 80034a0:	9001      	str	r0, [sp, #4]
 80034a2:	9a01      	ldr	r2, [sp, #4]
 80034a4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80034a8:	0dcb      	lsrs	r3, r1, #23
 80034aa:	3b7f      	subs	r3, #127	; 0x7f
 80034ac:	2b16      	cmp	r3, #22
 80034ae:	dc19      	bgt.n	80034e4 <floorf+0x48>
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	4614      	mov	r4, r2
 80034b4:	db28      	blt.n	8003508 <floorf+0x6c>
 80034b6:	4824      	ldr	r0, [pc, #144]	; (8003548 <floorf+0xac>)
 80034b8:	4118      	asrs	r0, r3
 80034ba:	4210      	tst	r0, r2
 80034bc:	d015      	beq.n	80034ea <floorf+0x4e>
 80034be:	eddf 7a23 	vldr	s15, [pc, #140]	; 800354c <floorf+0xb0>
 80034c2:	ed9d 7a01 	vldr	s14, [sp, #4]
 80034c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034d2:	dd28      	ble.n	8003526 <floorf+0x8a>
 80034d4:	2a00      	cmp	r2, #0
 80034d6:	db29      	blt.n	800352c <floorf+0x90>
 80034d8:	ea24 0000 	bic.w	r0, r4, r0
 80034dc:	b003      	add	sp, #12
 80034de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80034e2:	4770      	bx	lr
 80034e4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80034e8:	d204      	bcs.n	80034f4 <floorf+0x58>
 80034ea:	9801      	ldr	r0, [sp, #4]
 80034ec:	b003      	add	sp, #12
 80034ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80034f2:	4770      	bx	lr
 80034f4:	eddd 7a01 	vldr	s15, [sp, #4]
 80034f8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80034fc:	ee17 0a90 	vmov	r0, s15
 8003500:	b003      	add	sp, #12
 8003502:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003506:	4770      	bx	lr
 8003508:	eddf 7a10 	vldr	s15, [pc, #64]	; 800354c <floorf+0xb0>
 800350c:	ee07 0a10 	vmov	s14, r0
 8003510:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003514:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800351c:	dde5      	ble.n	80034ea <floorf+0x4e>
 800351e:	2a00      	cmp	r2, #0
 8003520:	db0a      	blt.n	8003538 <floorf+0x9c>
 8003522:	2000      	movs	r0, #0
 8003524:	e7e2      	b.n	80034ec <floorf+0x50>
 8003526:	ee17 0a10 	vmov	r0, s14
 800352a:	e7df      	b.n	80034ec <floorf+0x50>
 800352c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003530:	fa42 f303 	asr.w	r3, r2, r3
 8003534:	441c      	add	r4, r3
 8003536:	e7cf      	b.n	80034d8 <floorf+0x3c>
 8003538:	2900      	cmp	r1, #0
 800353a:	eeff 7a00 	vmov.f32	s15, #240	; 0xf0
 800353e:	bf18      	it	ne
 8003540:	ee17 0a90 	vmovne	r0, s15
 8003544:	e7d2      	b.n	80034ec <floorf+0x50>
 8003546:	bf00      	nop
 8003548:	007fffff 	.word	0x007fffff
 800354c:	7149f2ca 	.word	0x7149f2ca

08003550 <scalbnf>:
 8003550:	b500      	push	{lr}
 8003552:	ed2d 8b02 	vpush	{d8}
 8003556:	b083      	sub	sp, #12
 8003558:	9001      	str	r0, [sp, #4]
 800355a:	9b01      	ldr	r3, [sp, #4]
 800355c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8003560:	d023      	beq.n	80035aa <scalbnf+0x5a>
 8003562:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8003566:	d215      	bcs.n	8003594 <scalbnf+0x44>
 8003568:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800356c:	d326      	bcc.n	80035bc <scalbnf+0x6c>
 800356e:	0dd2      	lsrs	r2, r2, #23
 8003570:	440a      	add	r2, r1
 8003572:	2afe      	cmp	r2, #254	; 0xfe
 8003574:	dc3c      	bgt.n	80035f0 <scalbnf+0xa0>
 8003576:	2a00      	cmp	r2, #0
 8003578:	dd30      	ble.n	80035dc <scalbnf+0x8c>
 800357a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800357e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8003582:	ee07 3a90 	vmov	s15, r3
 8003586:	ee17 0a90 	vmov	r0, s15
 800358a:	b003      	add	sp, #12
 800358c:	ecbd 8b02 	vpop	{d8}
 8003590:	f85d fb04 	ldr.w	pc, [sp], #4
 8003594:	ee07 0a90 	vmov	s15, r0
 8003598:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800359c:	ee17 0a90 	vmov	r0, s15
 80035a0:	b003      	add	sp, #12
 80035a2:	ecbd 8b02 	vpop	{d8}
 80035a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80035aa:	eddd 7a01 	vldr	s15, [sp, #4]
 80035ae:	ee17 0a90 	vmov	r0, s15
 80035b2:	b003      	add	sp, #12
 80035b4:	ecbd 8b02 	vpop	{d8}
 80035b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80035bc:	ed9d 7a01 	vldr	s14, [sp, #4]
 80035c0:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800363c <scalbnf+0xec>
 80035c4:	4b1e      	ldr	r3, [pc, #120]	; (8003640 <scalbnf+0xf0>)
 80035c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ca:	4299      	cmp	r1, r3
 80035cc:	edcd 7a01 	vstr	s15, [sp, #4]
 80035d0:	db20      	blt.n	8003614 <scalbnf+0xc4>
 80035d2:	9b01      	ldr	r3, [sp, #4]
 80035d4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80035d8:	3a19      	subs	r2, #25
 80035da:	e7c9      	b.n	8003570 <scalbnf+0x20>
 80035dc:	f112 0f16 	cmn.w	r2, #22
 80035e0:	da1f      	bge.n	8003622 <scalbnf+0xd2>
 80035e2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80035e6:	4299      	cmp	r1, r3
 80035e8:	dc02      	bgt.n	80035f0 <scalbnf+0xa0>
 80035ea:	ed9f 8a16 	vldr	s16, [pc, #88]	; 8003644 <scalbnf+0xf4>
 80035ee:	e001      	b.n	80035f4 <scalbnf+0xa4>
 80035f0:	ed9f 8a15 	vldr	s16, [pc, #84]	; 8003648 <scalbnf+0xf8>
 80035f4:	9901      	ldr	r1, [sp, #4]
 80035f6:	ee18 0a10 	vmov	r0, s16
 80035fa:	f000 f829 	bl	8003650 <copysignf>
 80035fe:	ee07 0a90 	vmov	s15, r0
 8003602:	ee67 7a88 	vmul.f32	s15, s15, s16
 8003606:	ee17 0a90 	vmov	r0, s15
 800360a:	b003      	add	sp, #12
 800360c:	ecbd 8b02 	vpop	{d8}
 8003610:	f85d fb04 	ldr.w	pc, [sp], #4
 8003614:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8003644 <scalbnf+0xf4>
 8003618:	ed9d 7a01 	vldr	s14, [sp, #4]
 800361c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003620:	e7bc      	b.n	800359c <scalbnf+0x4c>
 8003622:	3219      	adds	r2, #25
 8003624:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003628:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800362c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800364c <scalbnf+0xfc>
 8003630:	ee07 3a90 	vmov	s15, r3
 8003634:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003638:	e7b0      	b.n	800359c <scalbnf+0x4c>
 800363a:	bf00      	nop
 800363c:	4c000000 	.word	0x4c000000
 8003640:	ffff3cb0 	.word	0xffff3cb0
 8003644:	0da24260 	.word	0x0da24260
 8003648:	7149f2ca 	.word	0x7149f2ca
 800364c:	33000000 	.word	0x33000000

08003650 <copysignf>:
 8003650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003654:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003658:	4308      	orrs	r0, r1
 800365a:	4770      	bx	lr

0800365c <__aeabi_drsub>:
 800365c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8003660:	e002      	b.n	8003668 <__adddf3>
 8003662:	bf00      	nop

08003664 <__aeabi_dsub>:
 8003664:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08003668 <__adddf3>:
 8003668:	b530      	push	{r4, r5, lr}
 800366a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800366e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8003672:	ea94 0f05 	teq	r4, r5
 8003676:	bf08      	it	eq
 8003678:	ea90 0f02 	teqeq	r0, r2
 800367c:	bf1f      	itttt	ne
 800367e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8003682:	ea55 0c02 	orrsne.w	ip, r5, r2
 8003686:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800368a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800368e:	f000 80e2 	beq.w	8003856 <__adddf3+0x1ee>
 8003692:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8003696:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800369a:	bfb8      	it	lt
 800369c:	426d      	neglt	r5, r5
 800369e:	dd0c      	ble.n	80036ba <__adddf3+0x52>
 80036a0:	442c      	add	r4, r5
 80036a2:	ea80 0202 	eor.w	r2, r0, r2
 80036a6:	ea81 0303 	eor.w	r3, r1, r3
 80036aa:	ea82 0000 	eor.w	r0, r2, r0
 80036ae:	ea83 0101 	eor.w	r1, r3, r1
 80036b2:	ea80 0202 	eor.w	r2, r0, r2
 80036b6:	ea81 0303 	eor.w	r3, r1, r3
 80036ba:	2d36      	cmp	r5, #54	; 0x36
 80036bc:	bf88      	it	hi
 80036be:	bd30      	pophi	{r4, r5, pc}
 80036c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80036c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80036c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80036cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80036d0:	d002      	beq.n	80036d8 <__adddf3+0x70>
 80036d2:	4240      	negs	r0, r0
 80036d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80036d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80036dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80036e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80036e4:	d002      	beq.n	80036ec <__adddf3+0x84>
 80036e6:	4252      	negs	r2, r2
 80036e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80036ec:	ea94 0f05 	teq	r4, r5
 80036f0:	f000 80a7 	beq.w	8003842 <__adddf3+0x1da>
 80036f4:	f1a4 0401 	sub.w	r4, r4, #1
 80036f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80036fc:	db0d      	blt.n	800371a <__adddf3+0xb2>
 80036fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8003702:	fa22 f205 	lsr.w	r2, r2, r5
 8003706:	1880      	adds	r0, r0, r2
 8003708:	f141 0100 	adc.w	r1, r1, #0
 800370c:	fa03 f20e 	lsl.w	r2, r3, lr
 8003710:	1880      	adds	r0, r0, r2
 8003712:	fa43 f305 	asr.w	r3, r3, r5
 8003716:	4159      	adcs	r1, r3
 8003718:	e00e      	b.n	8003738 <__adddf3+0xd0>
 800371a:	f1a5 0520 	sub.w	r5, r5, #32
 800371e:	f10e 0e20 	add.w	lr, lr, #32
 8003722:	2a01      	cmp	r2, #1
 8003724:	fa03 fc0e 	lsl.w	ip, r3, lr
 8003728:	bf28      	it	cs
 800372a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800372e:	fa43 f305 	asr.w	r3, r3, r5
 8003732:	18c0      	adds	r0, r0, r3
 8003734:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8003738:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800373c:	d507      	bpl.n	800374e <__adddf3+0xe6>
 800373e:	f04f 0e00 	mov.w	lr, #0
 8003742:	f1dc 0c00 	rsbs	ip, ip, #0
 8003746:	eb7e 0000 	sbcs.w	r0, lr, r0
 800374a:	eb6e 0101 	sbc.w	r1, lr, r1
 800374e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8003752:	d31b      	bcc.n	800378c <__adddf3+0x124>
 8003754:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8003758:	d30c      	bcc.n	8003774 <__adddf3+0x10c>
 800375a:	0849      	lsrs	r1, r1, #1
 800375c:	ea5f 0030 	movs.w	r0, r0, rrx
 8003760:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8003764:	f104 0401 	add.w	r4, r4, #1
 8003768:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800376c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8003770:	f080 809a 	bcs.w	80038a8 <__adddf3+0x240>
 8003774:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8003778:	bf08      	it	eq
 800377a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800377e:	f150 0000 	adcs.w	r0, r0, #0
 8003782:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8003786:	ea41 0105 	orr.w	r1, r1, r5
 800378a:	bd30      	pop	{r4, r5, pc}
 800378c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8003790:	4140      	adcs	r0, r0
 8003792:	eb41 0101 	adc.w	r1, r1, r1
 8003796:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800379a:	f1a4 0401 	sub.w	r4, r4, #1
 800379e:	d1e9      	bne.n	8003774 <__adddf3+0x10c>
 80037a0:	f091 0f00 	teq	r1, #0
 80037a4:	bf04      	itt	eq
 80037a6:	4601      	moveq	r1, r0
 80037a8:	2000      	moveq	r0, #0
 80037aa:	fab1 f381 	clz	r3, r1
 80037ae:	bf08      	it	eq
 80037b0:	3320      	addeq	r3, #32
 80037b2:	f1a3 030b 	sub.w	r3, r3, #11
 80037b6:	f1b3 0220 	subs.w	r2, r3, #32
 80037ba:	da0c      	bge.n	80037d6 <__adddf3+0x16e>
 80037bc:	320c      	adds	r2, #12
 80037be:	dd08      	ble.n	80037d2 <__adddf3+0x16a>
 80037c0:	f102 0c14 	add.w	ip, r2, #20
 80037c4:	f1c2 020c 	rsb	r2, r2, #12
 80037c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80037cc:	fa21 f102 	lsr.w	r1, r1, r2
 80037d0:	e00c      	b.n	80037ec <__adddf3+0x184>
 80037d2:	f102 0214 	add.w	r2, r2, #20
 80037d6:	bfd8      	it	le
 80037d8:	f1c2 0c20 	rsble	ip, r2, #32
 80037dc:	fa01 f102 	lsl.w	r1, r1, r2
 80037e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80037e4:	bfdc      	itt	le
 80037e6:	ea41 010c 	orrle.w	r1, r1, ip
 80037ea:	4090      	lslle	r0, r2
 80037ec:	1ae4      	subs	r4, r4, r3
 80037ee:	bfa2      	ittt	ge
 80037f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80037f4:	4329      	orrge	r1, r5
 80037f6:	bd30      	popge	{r4, r5, pc}
 80037f8:	ea6f 0404 	mvn.w	r4, r4
 80037fc:	3c1f      	subs	r4, #31
 80037fe:	da1c      	bge.n	800383a <__adddf3+0x1d2>
 8003800:	340c      	adds	r4, #12
 8003802:	dc0e      	bgt.n	8003822 <__adddf3+0x1ba>
 8003804:	f104 0414 	add.w	r4, r4, #20
 8003808:	f1c4 0220 	rsb	r2, r4, #32
 800380c:	fa20 f004 	lsr.w	r0, r0, r4
 8003810:	fa01 f302 	lsl.w	r3, r1, r2
 8003814:	ea40 0003 	orr.w	r0, r0, r3
 8003818:	fa21 f304 	lsr.w	r3, r1, r4
 800381c:	ea45 0103 	orr.w	r1, r5, r3
 8003820:	bd30      	pop	{r4, r5, pc}
 8003822:	f1c4 040c 	rsb	r4, r4, #12
 8003826:	f1c4 0220 	rsb	r2, r4, #32
 800382a:	fa20 f002 	lsr.w	r0, r0, r2
 800382e:	fa01 f304 	lsl.w	r3, r1, r4
 8003832:	ea40 0003 	orr.w	r0, r0, r3
 8003836:	4629      	mov	r1, r5
 8003838:	bd30      	pop	{r4, r5, pc}
 800383a:	fa21 f004 	lsr.w	r0, r1, r4
 800383e:	4629      	mov	r1, r5
 8003840:	bd30      	pop	{r4, r5, pc}
 8003842:	f094 0f00 	teq	r4, #0
 8003846:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800384a:	bf06      	itte	eq
 800384c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8003850:	3401      	addeq	r4, #1
 8003852:	3d01      	subne	r5, #1
 8003854:	e74e      	b.n	80036f4 <__adddf3+0x8c>
 8003856:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800385a:	bf18      	it	ne
 800385c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8003860:	d029      	beq.n	80038b6 <__adddf3+0x24e>
 8003862:	ea94 0f05 	teq	r4, r5
 8003866:	bf08      	it	eq
 8003868:	ea90 0f02 	teqeq	r0, r2
 800386c:	d005      	beq.n	800387a <__adddf3+0x212>
 800386e:	ea54 0c00 	orrs.w	ip, r4, r0
 8003872:	bf04      	itt	eq
 8003874:	4619      	moveq	r1, r3
 8003876:	4610      	moveq	r0, r2
 8003878:	bd30      	pop	{r4, r5, pc}
 800387a:	ea91 0f03 	teq	r1, r3
 800387e:	bf1e      	ittt	ne
 8003880:	2100      	movne	r1, #0
 8003882:	2000      	movne	r0, #0
 8003884:	bd30      	popne	{r4, r5, pc}
 8003886:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800388a:	d105      	bne.n	8003898 <__adddf3+0x230>
 800388c:	0040      	lsls	r0, r0, #1
 800388e:	4149      	adcs	r1, r1
 8003890:	bf28      	it	cs
 8003892:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8003896:	bd30      	pop	{r4, r5, pc}
 8003898:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800389c:	bf3c      	itt	cc
 800389e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80038a2:	bd30      	popcc	{r4, r5, pc}
 80038a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80038a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80038ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80038b0:	f04f 0000 	mov.w	r0, #0
 80038b4:	bd30      	pop	{r4, r5, pc}
 80038b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80038ba:	bf1a      	itte	ne
 80038bc:	4619      	movne	r1, r3
 80038be:	4610      	movne	r0, r2
 80038c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80038c4:	bf1c      	itt	ne
 80038c6:	460b      	movne	r3, r1
 80038c8:	4602      	movne	r2, r0
 80038ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80038ce:	bf06      	itte	eq
 80038d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80038d4:	ea91 0f03 	teqeq	r1, r3
 80038d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80038dc:	bd30      	pop	{r4, r5, pc}
 80038de:	bf00      	nop

080038e0 <__aeabi_ui2d>:
 80038e0:	f090 0f00 	teq	r0, #0
 80038e4:	bf04      	itt	eq
 80038e6:	2100      	moveq	r1, #0
 80038e8:	4770      	bxeq	lr
 80038ea:	b530      	push	{r4, r5, lr}
 80038ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80038f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80038f4:	f04f 0500 	mov.w	r5, #0
 80038f8:	f04f 0100 	mov.w	r1, #0
 80038fc:	e750      	b.n	80037a0 <__adddf3+0x138>
 80038fe:	bf00      	nop

08003900 <__aeabi_i2d>:
 8003900:	f090 0f00 	teq	r0, #0
 8003904:	bf04      	itt	eq
 8003906:	2100      	moveq	r1, #0
 8003908:	4770      	bxeq	lr
 800390a:	b530      	push	{r4, r5, lr}
 800390c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003910:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003914:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8003918:	bf48      	it	mi
 800391a:	4240      	negmi	r0, r0
 800391c:	f04f 0100 	mov.w	r1, #0
 8003920:	e73e      	b.n	80037a0 <__adddf3+0x138>
 8003922:	bf00      	nop

08003924 <__aeabi_f2d>:
 8003924:	0042      	lsls	r2, r0, #1
 8003926:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800392a:	ea4f 0131 	mov.w	r1, r1, rrx
 800392e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8003932:	bf1f      	itttt	ne
 8003934:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8003938:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800393c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8003940:	4770      	bxne	lr
 8003942:	f092 0f00 	teq	r2, #0
 8003946:	bf14      	ite	ne
 8003948:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800394c:	4770      	bxeq	lr
 800394e:	b530      	push	{r4, r5, lr}
 8003950:	f44f 7460 	mov.w	r4, #896	; 0x380
 8003954:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003958:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800395c:	e720      	b.n	80037a0 <__adddf3+0x138>
 800395e:	bf00      	nop

08003960 <__aeabi_ul2d>:
 8003960:	ea50 0201 	orrs.w	r2, r0, r1
 8003964:	bf08      	it	eq
 8003966:	4770      	bxeq	lr
 8003968:	b530      	push	{r4, r5, lr}
 800396a:	f04f 0500 	mov.w	r5, #0
 800396e:	e00a      	b.n	8003986 <__aeabi_l2d+0x16>

08003970 <__aeabi_l2d>:
 8003970:	ea50 0201 	orrs.w	r2, r0, r1
 8003974:	bf08      	it	eq
 8003976:	4770      	bxeq	lr
 8003978:	b530      	push	{r4, r5, lr}
 800397a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800397e:	d502      	bpl.n	8003986 <__aeabi_l2d+0x16>
 8003980:	4240      	negs	r0, r0
 8003982:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003986:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800398a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800398e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8003992:	f43f aedc 	beq.w	800374e <__adddf3+0xe6>
 8003996:	f04f 0203 	mov.w	r2, #3
 800399a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800399e:	bf18      	it	ne
 80039a0:	3203      	addne	r2, #3
 80039a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80039a6:	bf18      	it	ne
 80039a8:	3203      	addne	r2, #3
 80039aa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80039ae:	f1c2 0320 	rsb	r3, r2, #32
 80039b2:	fa00 fc03 	lsl.w	ip, r0, r3
 80039b6:	fa20 f002 	lsr.w	r0, r0, r2
 80039ba:	fa01 fe03 	lsl.w	lr, r1, r3
 80039be:	ea40 000e 	orr.w	r0, r0, lr
 80039c2:	fa21 f102 	lsr.w	r1, r1, r2
 80039c6:	4414      	add	r4, r2
 80039c8:	e6c1      	b.n	800374e <__adddf3+0xe6>
 80039ca:	bf00      	nop

080039cc <__aeabi_dmul>:
 80039cc:	b570      	push	{r4, r5, r6, lr}
 80039ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80039d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80039d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80039da:	bf1d      	ittte	ne
 80039dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80039e0:	ea94 0f0c 	teqne	r4, ip
 80039e4:	ea95 0f0c 	teqne	r5, ip
 80039e8:	f000 f8de 	bleq	8003ba8 <__aeabi_dmul+0x1dc>
 80039ec:	442c      	add	r4, r5
 80039ee:	ea81 0603 	eor.w	r6, r1, r3
 80039f2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80039f6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80039fa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80039fe:	bf18      	it	ne
 8003a00:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8003a04:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003a08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a0c:	d038      	beq.n	8003a80 <__aeabi_dmul+0xb4>
 8003a0e:	fba0 ce02 	umull	ip, lr, r0, r2
 8003a12:	f04f 0500 	mov.w	r5, #0
 8003a16:	fbe1 e502 	umlal	lr, r5, r1, r2
 8003a1a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8003a1e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8003a22:	f04f 0600 	mov.w	r6, #0
 8003a26:	fbe1 5603 	umlal	r5, r6, r1, r3
 8003a2a:	f09c 0f00 	teq	ip, #0
 8003a2e:	bf18      	it	ne
 8003a30:	f04e 0e01 	orrne.w	lr, lr, #1
 8003a34:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8003a38:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8003a3c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8003a40:	d204      	bcs.n	8003a4c <__aeabi_dmul+0x80>
 8003a42:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8003a46:	416d      	adcs	r5, r5
 8003a48:	eb46 0606 	adc.w	r6, r6, r6
 8003a4c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8003a50:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8003a54:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8003a58:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8003a5c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8003a60:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8003a64:	bf88      	it	hi
 8003a66:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8003a6a:	d81e      	bhi.n	8003aaa <__aeabi_dmul+0xde>
 8003a6c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8003a70:	bf08      	it	eq
 8003a72:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8003a76:	f150 0000 	adcs.w	r0, r0, #0
 8003a7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8003a7e:	bd70      	pop	{r4, r5, r6, pc}
 8003a80:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8003a84:	ea46 0101 	orr.w	r1, r6, r1
 8003a88:	ea40 0002 	orr.w	r0, r0, r2
 8003a8c:	ea81 0103 	eor.w	r1, r1, r3
 8003a90:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8003a94:	bfc2      	ittt	gt
 8003a96:	ebd4 050c 	rsbsgt	r5, r4, ip
 8003a9a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8003a9e:	bd70      	popgt	{r4, r5, r6, pc}
 8003aa0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003aa4:	f04f 0e00 	mov.w	lr, #0
 8003aa8:	3c01      	subs	r4, #1
 8003aaa:	f300 80ab 	bgt.w	8003c04 <__aeabi_dmul+0x238>
 8003aae:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8003ab2:	bfde      	ittt	le
 8003ab4:	2000      	movle	r0, #0
 8003ab6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8003aba:	bd70      	pople	{r4, r5, r6, pc}
 8003abc:	f1c4 0400 	rsb	r4, r4, #0
 8003ac0:	3c20      	subs	r4, #32
 8003ac2:	da35      	bge.n	8003b30 <__aeabi_dmul+0x164>
 8003ac4:	340c      	adds	r4, #12
 8003ac6:	dc1b      	bgt.n	8003b00 <__aeabi_dmul+0x134>
 8003ac8:	f104 0414 	add.w	r4, r4, #20
 8003acc:	f1c4 0520 	rsb	r5, r4, #32
 8003ad0:	fa00 f305 	lsl.w	r3, r0, r5
 8003ad4:	fa20 f004 	lsr.w	r0, r0, r4
 8003ad8:	fa01 f205 	lsl.w	r2, r1, r5
 8003adc:	ea40 0002 	orr.w	r0, r0, r2
 8003ae0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8003ae4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003ae8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8003aec:	fa21 f604 	lsr.w	r6, r1, r4
 8003af0:	eb42 0106 	adc.w	r1, r2, r6
 8003af4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8003af8:	bf08      	it	eq
 8003afa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8003afe:	bd70      	pop	{r4, r5, r6, pc}
 8003b00:	f1c4 040c 	rsb	r4, r4, #12
 8003b04:	f1c4 0520 	rsb	r5, r4, #32
 8003b08:	fa00 f304 	lsl.w	r3, r0, r4
 8003b0c:	fa20 f005 	lsr.w	r0, r0, r5
 8003b10:	fa01 f204 	lsl.w	r2, r1, r4
 8003b14:	ea40 0002 	orr.w	r0, r0, r2
 8003b18:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003b1c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8003b20:	f141 0100 	adc.w	r1, r1, #0
 8003b24:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8003b28:	bf08      	it	eq
 8003b2a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8003b2e:	bd70      	pop	{r4, r5, r6, pc}
 8003b30:	f1c4 0520 	rsb	r5, r4, #32
 8003b34:	fa00 f205 	lsl.w	r2, r0, r5
 8003b38:	ea4e 0e02 	orr.w	lr, lr, r2
 8003b3c:	fa20 f304 	lsr.w	r3, r0, r4
 8003b40:	fa01 f205 	lsl.w	r2, r1, r5
 8003b44:	ea43 0302 	orr.w	r3, r3, r2
 8003b48:	fa21 f004 	lsr.w	r0, r1, r4
 8003b4c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003b50:	fa21 f204 	lsr.w	r2, r1, r4
 8003b54:	ea20 0002 	bic.w	r0, r0, r2
 8003b58:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8003b5c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8003b60:	bf08      	it	eq
 8003b62:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8003b66:	bd70      	pop	{r4, r5, r6, pc}
 8003b68:	f094 0f00 	teq	r4, #0
 8003b6c:	d10f      	bne.n	8003b8e <__aeabi_dmul+0x1c2>
 8003b6e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8003b72:	0040      	lsls	r0, r0, #1
 8003b74:	eb41 0101 	adc.w	r1, r1, r1
 8003b78:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003b7c:	bf08      	it	eq
 8003b7e:	3c01      	subeq	r4, #1
 8003b80:	d0f7      	beq.n	8003b72 <__aeabi_dmul+0x1a6>
 8003b82:	ea41 0106 	orr.w	r1, r1, r6
 8003b86:	f095 0f00 	teq	r5, #0
 8003b8a:	bf18      	it	ne
 8003b8c:	4770      	bxne	lr
 8003b8e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8003b92:	0052      	lsls	r2, r2, #1
 8003b94:	eb43 0303 	adc.w	r3, r3, r3
 8003b98:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003b9c:	bf08      	it	eq
 8003b9e:	3d01      	subeq	r5, #1
 8003ba0:	d0f7      	beq.n	8003b92 <__aeabi_dmul+0x1c6>
 8003ba2:	ea43 0306 	orr.w	r3, r3, r6
 8003ba6:	4770      	bx	lr
 8003ba8:	ea94 0f0c 	teq	r4, ip
 8003bac:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8003bb0:	bf18      	it	ne
 8003bb2:	ea95 0f0c 	teqne	r5, ip
 8003bb6:	d00c      	beq.n	8003bd2 <__aeabi_dmul+0x206>
 8003bb8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8003bbc:	bf18      	it	ne
 8003bbe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8003bc2:	d1d1      	bne.n	8003b68 <__aeabi_dmul+0x19c>
 8003bc4:	ea81 0103 	eor.w	r1, r1, r3
 8003bc8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003bcc:	f04f 0000 	mov.w	r0, #0
 8003bd0:	bd70      	pop	{r4, r5, r6, pc}
 8003bd2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8003bd6:	bf06      	itte	eq
 8003bd8:	4610      	moveq	r0, r2
 8003bda:	4619      	moveq	r1, r3
 8003bdc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8003be0:	d019      	beq.n	8003c16 <__aeabi_dmul+0x24a>
 8003be2:	ea94 0f0c 	teq	r4, ip
 8003be6:	d102      	bne.n	8003bee <__aeabi_dmul+0x222>
 8003be8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8003bec:	d113      	bne.n	8003c16 <__aeabi_dmul+0x24a>
 8003bee:	ea95 0f0c 	teq	r5, ip
 8003bf2:	d105      	bne.n	8003c00 <__aeabi_dmul+0x234>
 8003bf4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8003bf8:	bf1c      	itt	ne
 8003bfa:	4610      	movne	r0, r2
 8003bfc:	4619      	movne	r1, r3
 8003bfe:	d10a      	bne.n	8003c16 <__aeabi_dmul+0x24a>
 8003c00:	ea81 0103 	eor.w	r1, r1, r3
 8003c04:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003c08:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8003c0c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003c10:	f04f 0000 	mov.w	r0, #0
 8003c14:	bd70      	pop	{r4, r5, r6, pc}
 8003c16:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8003c1a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8003c1e:	bd70      	pop	{r4, r5, r6, pc}

08003c20 <__aeabi_ddiv>:
 8003c20:	b570      	push	{r4, r5, r6, lr}
 8003c22:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8003c26:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8003c2a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8003c2e:	bf1d      	ittte	ne
 8003c30:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8003c34:	ea94 0f0c 	teqne	r4, ip
 8003c38:	ea95 0f0c 	teqne	r5, ip
 8003c3c:	f000 f8a7 	bleq	8003d8e <__aeabi_ddiv+0x16e>
 8003c40:	eba4 0405 	sub.w	r4, r4, r5
 8003c44:	ea81 0e03 	eor.w	lr, r1, r3
 8003c48:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8003c4c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8003c50:	f000 8088 	beq.w	8003d64 <__aeabi_ddiv+0x144>
 8003c54:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8003c58:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8003c5c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8003c60:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8003c64:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8003c68:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8003c6c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8003c70:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8003c74:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8003c78:	429d      	cmp	r5, r3
 8003c7a:	bf08      	it	eq
 8003c7c:	4296      	cmpeq	r6, r2
 8003c7e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8003c82:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8003c86:	d202      	bcs.n	8003c8e <__aeabi_ddiv+0x6e>
 8003c88:	085b      	lsrs	r3, r3, #1
 8003c8a:	ea4f 0232 	mov.w	r2, r2, rrx
 8003c8e:	1ab6      	subs	r6, r6, r2
 8003c90:	eb65 0503 	sbc.w	r5, r5, r3
 8003c94:	085b      	lsrs	r3, r3, #1
 8003c96:	ea4f 0232 	mov.w	r2, r2, rrx
 8003c9a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003c9e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8003ca2:	ebb6 0e02 	subs.w	lr, r6, r2
 8003ca6:	eb75 0e03 	sbcs.w	lr, r5, r3
 8003caa:	bf22      	ittt	cs
 8003cac:	1ab6      	subcs	r6, r6, r2
 8003cae:	4675      	movcs	r5, lr
 8003cb0:	ea40 000c 	orrcs.w	r0, r0, ip
 8003cb4:	085b      	lsrs	r3, r3, #1
 8003cb6:	ea4f 0232 	mov.w	r2, r2, rrx
 8003cba:	ebb6 0e02 	subs.w	lr, r6, r2
 8003cbe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8003cc2:	bf22      	ittt	cs
 8003cc4:	1ab6      	subcs	r6, r6, r2
 8003cc6:	4675      	movcs	r5, lr
 8003cc8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8003ccc:	085b      	lsrs	r3, r3, #1
 8003cce:	ea4f 0232 	mov.w	r2, r2, rrx
 8003cd2:	ebb6 0e02 	subs.w	lr, r6, r2
 8003cd6:	eb75 0e03 	sbcs.w	lr, r5, r3
 8003cda:	bf22      	ittt	cs
 8003cdc:	1ab6      	subcs	r6, r6, r2
 8003cde:	4675      	movcs	r5, lr
 8003ce0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8003ce4:	085b      	lsrs	r3, r3, #1
 8003ce6:	ea4f 0232 	mov.w	r2, r2, rrx
 8003cea:	ebb6 0e02 	subs.w	lr, r6, r2
 8003cee:	eb75 0e03 	sbcs.w	lr, r5, r3
 8003cf2:	bf22      	ittt	cs
 8003cf4:	1ab6      	subcs	r6, r6, r2
 8003cf6:	4675      	movcs	r5, lr
 8003cf8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8003cfc:	ea55 0e06 	orrs.w	lr, r5, r6
 8003d00:	d018      	beq.n	8003d34 <__aeabi_ddiv+0x114>
 8003d02:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8003d06:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8003d0a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8003d0e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8003d12:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8003d16:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8003d1a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8003d1e:	d1c0      	bne.n	8003ca2 <__aeabi_ddiv+0x82>
 8003d20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003d24:	d10b      	bne.n	8003d3e <__aeabi_ddiv+0x11e>
 8003d26:	ea41 0100 	orr.w	r1, r1, r0
 8003d2a:	f04f 0000 	mov.w	r0, #0
 8003d2e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8003d32:	e7b6      	b.n	8003ca2 <__aeabi_ddiv+0x82>
 8003d34:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003d38:	bf04      	itt	eq
 8003d3a:	4301      	orreq	r1, r0
 8003d3c:	2000      	moveq	r0, #0
 8003d3e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8003d42:	bf88      	it	hi
 8003d44:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8003d48:	f63f aeaf 	bhi.w	8003aaa <__aeabi_dmul+0xde>
 8003d4c:	ebb5 0c03 	subs.w	ip, r5, r3
 8003d50:	bf04      	itt	eq
 8003d52:	ebb6 0c02 	subseq.w	ip, r6, r2
 8003d56:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8003d5a:	f150 0000 	adcs.w	r0, r0, #0
 8003d5e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8003d62:	bd70      	pop	{r4, r5, r6, pc}
 8003d64:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8003d68:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8003d6c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8003d70:	bfc2      	ittt	gt
 8003d72:	ebd4 050c 	rsbsgt	r5, r4, ip
 8003d76:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8003d7a:	bd70      	popgt	{r4, r5, r6, pc}
 8003d7c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003d80:	f04f 0e00 	mov.w	lr, #0
 8003d84:	3c01      	subs	r4, #1
 8003d86:	e690      	b.n	8003aaa <__aeabi_dmul+0xde>
 8003d88:	ea45 0e06 	orr.w	lr, r5, r6
 8003d8c:	e68d      	b.n	8003aaa <__aeabi_dmul+0xde>
 8003d8e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8003d92:	ea94 0f0c 	teq	r4, ip
 8003d96:	bf08      	it	eq
 8003d98:	ea95 0f0c 	teqeq	r5, ip
 8003d9c:	f43f af3b 	beq.w	8003c16 <__aeabi_dmul+0x24a>
 8003da0:	ea94 0f0c 	teq	r4, ip
 8003da4:	d10a      	bne.n	8003dbc <__aeabi_ddiv+0x19c>
 8003da6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8003daa:	f47f af34 	bne.w	8003c16 <__aeabi_dmul+0x24a>
 8003dae:	ea95 0f0c 	teq	r5, ip
 8003db2:	f47f af25 	bne.w	8003c00 <__aeabi_dmul+0x234>
 8003db6:	4610      	mov	r0, r2
 8003db8:	4619      	mov	r1, r3
 8003dba:	e72c      	b.n	8003c16 <__aeabi_dmul+0x24a>
 8003dbc:	ea95 0f0c 	teq	r5, ip
 8003dc0:	d106      	bne.n	8003dd0 <__aeabi_ddiv+0x1b0>
 8003dc2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8003dc6:	f43f aefd 	beq.w	8003bc4 <__aeabi_dmul+0x1f8>
 8003dca:	4610      	mov	r0, r2
 8003dcc:	4619      	mov	r1, r3
 8003dce:	e722      	b.n	8003c16 <__aeabi_dmul+0x24a>
 8003dd0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8003dd4:	bf18      	it	ne
 8003dd6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8003dda:	f47f aec5 	bne.w	8003b68 <__aeabi_dmul+0x19c>
 8003dde:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8003de2:	f47f af0d 	bne.w	8003c00 <__aeabi_dmul+0x234>
 8003de6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8003dea:	f47f aeeb 	bne.w	8003bc4 <__aeabi_dmul+0x1f8>
 8003dee:	e712      	b.n	8003c16 <__aeabi_dmul+0x24a>

08003df0 <__aeabi_d2f>:
 8003df0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8003df4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8003df8:	bf24      	itt	cs
 8003dfa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8003dfe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8003e02:	d90d      	bls.n	8003e20 <__aeabi_d2f+0x30>
 8003e04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8003e08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8003e0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8003e10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8003e14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8003e18:	bf08      	it	eq
 8003e1a:	f020 0001 	biceq.w	r0, r0, #1
 8003e1e:	4770      	bx	lr
 8003e20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8003e24:	d121      	bne.n	8003e6a <__aeabi_d2f+0x7a>
 8003e26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8003e2a:	bfbc      	itt	lt
 8003e2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8003e30:	4770      	bxlt	lr
 8003e32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003e36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8003e3a:	f1c2 0218 	rsb	r2, r2, #24
 8003e3e:	f1c2 0c20 	rsb	ip, r2, #32
 8003e42:	fa10 f30c 	lsls.w	r3, r0, ip
 8003e46:	fa20 f002 	lsr.w	r0, r0, r2
 8003e4a:	bf18      	it	ne
 8003e4c:	f040 0001 	orrne.w	r0, r0, #1
 8003e50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8003e54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8003e58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8003e5c:	ea40 000c 	orr.w	r0, r0, ip
 8003e60:	fa23 f302 	lsr.w	r3, r3, r2
 8003e64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003e68:	e7cc      	b.n	8003e04 <__aeabi_d2f+0x14>
 8003e6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8003e6e:	d107      	bne.n	8003e80 <__aeabi_d2f+0x90>
 8003e70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8003e74:	bf1e      	ittt	ne
 8003e76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8003e7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8003e7e:	4770      	bxne	lr
 8003e80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8003e84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8003e88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop

08003e90 <__libc_init_array>:
 8003e90:	b570      	push	{r4, r5, r6, lr}
 8003e92:	4b0e      	ldr	r3, [pc, #56]	; (8003ecc <__libc_init_array+0x3c>)
 8003e94:	4c0e      	ldr	r4, [pc, #56]	; (8003ed0 <__libc_init_array+0x40>)
 8003e96:	1ae4      	subs	r4, r4, r3
 8003e98:	10a4      	asrs	r4, r4, #2
 8003e9a:	2500      	movs	r5, #0
 8003e9c:	461e      	mov	r6, r3
 8003e9e:	42a5      	cmp	r5, r4
 8003ea0:	d004      	beq.n	8003eac <__libc_init_array+0x1c>
 8003ea2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ea6:	4798      	blx	r3
 8003ea8:	3501      	adds	r5, #1
 8003eaa:	e7f8      	b.n	8003e9e <__libc_init_array+0xe>
 8003eac:	f7fd fab8 	bl	8001420 <_init>
 8003eb0:	4c08      	ldr	r4, [pc, #32]	; (8003ed4 <__libc_init_array+0x44>)
 8003eb2:	4b09      	ldr	r3, [pc, #36]	; (8003ed8 <__libc_init_array+0x48>)
 8003eb4:	1ae4      	subs	r4, r4, r3
 8003eb6:	10a4      	asrs	r4, r4, #2
 8003eb8:	2500      	movs	r5, #0
 8003eba:	461e      	mov	r6, r3
 8003ebc:	42a5      	cmp	r5, r4
 8003ebe:	d004      	beq.n	8003eca <__libc_init_array+0x3a>
 8003ec0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ec4:	4798      	blx	r3
 8003ec6:	3501      	adds	r5, #1
 8003ec8:	e7f8      	b.n	8003ebc <__libc_init_array+0x2c>
 8003eca:	bd70      	pop	{r4, r5, r6, pc}
 8003ecc:	08003edc 	.word	0x08003edc
 8003ed0:	08003edc 	.word	0x08003edc
 8003ed4:	08003edc 	.word	0x08003edc
 8003ed8:	08003edc 	.word	0x08003edc
