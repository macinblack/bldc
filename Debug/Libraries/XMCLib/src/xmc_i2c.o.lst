   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "xmc_i2c.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_USIC_CH_GetTransmitBufferStatus,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_USIC_CH_GetTransmitBufferStatus:
  25              	.LFB150:
  26              	 .file 1 "D:\\Naukowe\\BLDC_workspace\\PWM_from_ex\\Libraries\\XMCLib\\inc/xmc_usic.h"
   1:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
   2:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @file xmc_usic.h
   3:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @date 2015-10-27
   4:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
   5:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @cond
   6:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   *************************************************************************************************
   7:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMClib v2.1.2 - XMC Peripheral Driver Library 
   8:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
   9:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Copyright (c) 2015, Infineon Technologies AG
  10:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * All rights reserved.                        
  11:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *                                             
  12:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * following conditions are met:   
  14:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *                                                                              
  15:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * disclaimer.                        
  17:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 
  18:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 
  21:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * products derived from this software without specific prior written permission.                  
  23:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *                                                                              
  24:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *                                                                              
  32:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  **************************************************************************************************
  35:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
  36:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Change History
  37:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * --------------
  38:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
  39:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 2015-02-20:
  40:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *     - Initial draft<br>
  41:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *     - Documentation improved <br>
  42:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
  43:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 2015-05-08:
  44:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_SetInputTriggerCombinationMode() and XMC_USIC_CH_SetTransmitBufferStatus
  45:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *      
  46:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 2015-06-20:
  47:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  48:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 
  49:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 2015-08-17:
  50:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *     - Bug fixed in XMC_USIC_CH_SetTransmitBufferStatus API. OR operator removed.
  51:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
  52:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 2015-08-24:
  53:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *     - Added APIs for enabling/disabling delay compensation XMC_USIC_CH_DisableDelayCompensation(
  54:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *       XMC_USIC_CH_DisableDelayCompensation()
  55:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
  56:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 2015-08-25:
  57:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *     - Added APIs for defining if the data shift unit input is derived
  58:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *       from the input data path DXn or from the selected protocol pre-processors: XMC_USIC_CH_Con
  59:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *       and XMC_USIC_CH_ConnectInputDataShiftToDataInput()
  60:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
  61:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 2015-08-27:
  62:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *     - Fixed bug in XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1T value.
  63:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *     - Added APIs for direct TBUF access: XMC_USIC_CH_WriteToTBUF() and XMC_USIC_CH_WriteToTBUFTC
  64:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *     - Added APIs for external input for BRG configuration:XMC_USIC_CH_ConfigExternalInputSignalT
  65:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
  66:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 2015-08-28:
  67:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *     - Added API for enabling the transfer trigger unit to set bit TCSR.TE if the trigger signal 
  68:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *       Clear to Send (CTS) signal: XMC_USIC_CH_EnableTBUFDataValidTrigger() and XMC_USIC_CH_Disab
  69:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
  70:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @endcond
  71:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
  72:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
  73:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
  74:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #ifndef XMC_USIC_H
  75:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #define XMC_USIC_H
  76:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /*******************************************************************************
  77:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * HEADER FILES
  78:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *******************************************************************************/
  79:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
  80:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #include "xmc_common.h"
  81:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
  82:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
  83:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @addtogroup XMClib XMC Peripheral Library
  84:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @{
  85:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
  86:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
  87:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
  88:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @addtogroup USIC
  89:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @brief Universal Serial Interface Channel(USIC) driver for serial communication.
  90:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
  91:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * The Universal Serial Interface Channel(USIC) module is a flexible interface module
  92:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * covering several serial communication protocols. A USIC module contains two
  93:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * independent communication channels named USICx_CH0 and USICx_CH1, with x
  94:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * being the number of the USIC module. The user can program, during run-time, which protocol will 
  95:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * by each communication channel and which pins are used.
  96:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * The driver provides APIs, configuration structures and enumerations to configure common features
  97:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * communication protocols.
  98:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 
  99:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC driver features:
 100:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * -# Allows configuration of FIFO for transmit and receive functions.
 101:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * -# Provides a structure type XMC_USIC_CH_t to represent the USIC channel registers in a programm
 102:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  friendly format.
 103:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * -# Allows configuration of automatic update for frame length, word length, slave select or slave
 104:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * -# Allows transmission of data to FIFO using XMC_USIC_CH_TXFIFO_PutData() and XMC_USIC_CH_TXFIFO
 105:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * -# Allows reading of received data in FIFO using XMC_USIC_CH_RXFIFO_GetData()
 106:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * -# Allows configuration of baudrate using XMC_USIC_CH_SetBaudrate()
 107:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * -# Provides API to trigger interrupts using XMC_USIC_CH_TriggerServiceRequest()
 108:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @{
 109:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 110:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 111:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /*******************************************************************************
 112:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * MACROS
 113:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *******************************************************************************/
 114:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 115:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #define XMC_USIC0 ((XMC_USIC_t *)USIC0_BASE)			/**< USIC0 module base address */
 116:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #define XMC_USIC0_CH0 ((XMC_USIC_CH_t *)USIC0_CH0_BASE)	/**< USIC0 channel 0 base address */
 117:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #define XMC_USIC0_CH1 ((XMC_USIC_CH_t *)USIC0_CH1_BASE)	/**< USIC0 channel 1 base address */
 118:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 119:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #if defined(USIC1)
 120:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #define XMC_USIC1 ((XMC_USIC_t *)USIC1_BASE)			/**< USIC1 module base address */
 121:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #define XMC_USIC1_CH0 ((XMC_USIC_CH_t *)USIC1_CH0_BASE)	/**< USIC1 channel 0 base address */
 122:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #define XMC_USIC1_CH1 ((XMC_USIC_CH_t *)USIC1_CH1_BASE)	/**< USIC1 channel 1 base address */
 123:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #endif
 124:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 125:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #if defined(USIC2)
 126:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #define XMC_USIC2 ((XMC_USIC_t *)USIC2_BASE)			/**< USIC2 module base address */
 127:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #define XMC_USIC2_CH0 ((XMC_USIC_CH_t *)USIC2_CH0_BASE)	/**< USIC2 channel 0 base address */
 128:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #define XMC_USIC2_CH1 ((XMC_USIC_CH_t *)USIC2_CH1_BASE)	/**< USIC2 channel 1 base address */
 129:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #endif
 130:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 131:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEL_Msk  USIC_CH_DX0CR_DSEL_Msk   /**< Common mask for DSEL bitfield mask in 
 132:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEL_Pos  USIC_CH_DX0CR_DSEL_Pos   /**< Common mask for DSEL bitfield position
 133:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #define USIC_CH_DXCR_SFSEL_Pos USIC_CH_DX0CR_SFSEL_Pos  /**< Common mask for SFSEL bitfield positio
 134:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #define USIC_CH_DXCR_SFSEL_Msk USIC_CH_DX0CR_SFSEL_Msk  /**< Common mask for SFSEL bitfield mask in
 135:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #define USIC_CH_DXCR_DPOL_Msk  USIC_CH_DX0CR_DPOL_Msk   /**< Common mask for DPOL bitfield mask in 
 136:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #define USIC_CH_DXCR_DFEN_Msk  USIC_CH_DX0CR_DFEN_Msk   /**< Common mask for DFEN bitfield mask in 
 137:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEN_Msk  USIC_CH_DX0CR_DSEN_Msk   /**< Common mask for DSEN bitfield mask in 
 138:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #define USIC_CH_DXCR_CM_Pos    USIC_CH_DX0CR_CM_Pos     /**< Common mask for CM bitfield position i
 139:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #define USIC_CH_DXCR_CM_Msk    USIC_CH_DX0CR_CM_Msk     /**< Common mask for CM bitfield mask in DX
 140:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #define USIC_CH_DXCR_INSW_Msk  USIC_CH_DX0CR_INSW_Msk   /**< Common mask for INSW bitfield mask in 
 141:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #define USIC_CH_DXCR_INSW_pos  USIC_CH_DX0CR_INSW_Pos   /**< Common mask for INSW bitfield position
 142:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 143:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #if UC_FAMILY == XMC1
 144:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  #include "xmc1_usic_map.h"
 145:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #endif
 146:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 147:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #if UC_FAMILY == XMC4
 148:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  #include "xmc4_usic_map.h"
 149:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #endif
 150:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 151:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /*******************************************************************************
 152:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * ENUMS
 153:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *******************************************************************************/
 154:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 155:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 156:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel driver status
 157:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 158:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_STATUS
 159:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 160:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_OK,    /**< USIC driver status : OK */
 161:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_ERROR, /**< USIC driver status : ERROR */
 162:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_BUSY   /**< USIC driver status : BUSY */
 163:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_STATUS_t;
 164:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 165:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 166:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel kernel mode
 167:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** */
 168:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_KERNEL_MODE
 169:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 170:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_RUN_0  = 0x0UL,  /**< Run mode 0 (transmission and reception possible)*/
 171:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_RUN_1  = 0x1UL << USIC_CH_KSCFG_NOMCFG_Pos,  /**< Run mode 1 (transmissio
 172:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_STOP_0 = 0x2UL << USIC_CH_KSCFG_NOMCFG_Pos,  /**< Stop mode 0 (no transmi
 173:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_STOP_1 = 0x3UL << USIC_CH_KSCFG_NOMCFG_Pos   /**< Stop mode 1 (both trans
 174:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_KERNEL_MODE_t;
 175:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 176:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 177:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel operating mode
 178:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 179:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_OPERATING_MODE
 180:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 181:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_IDLE = 0x0UL, /**< USIC channel idle */
 182:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_SPI  = 0x1UL << USIC_CH_CCR_MODE_Pos, /**< SPI mode */
 183:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_UART = 0x2UL << USIC_CH_CCR_MODE_Pos, /**< UART mode */
 184:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_I2S  = 0x3UL << USIC_CH_CCR_MODE_Pos, /**< I2S mode */
 185:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_I2C  = 0x4UL << USIC_CH_CCR_MODE_Pos  /**< I2C mode */
 186:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_OPERATING_MODE_t;
 187:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 188:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 189:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel inputs
 190:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 191:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT
 192:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 193:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX0, /**< DX0 input */
 194:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX1, /**< DX1 input */
 195:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX2, /**< DX2 input */
 196:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX3, /**< DX3 input */
 197:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX4, /**< DX4 input */
 198:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX5  /**< DX5 input */
 199:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_t;
 200:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 201:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 202:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel input source sampling frequency
 203:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 204:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT_SAMPLING_FREQ
 205:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 206:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_SAMPLING_FREQ_FPERIPH            = 0x0UL, /**< Use fperiph frequency for input 
 207:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_SAMPLING_FREQ_FRACTIONAL_DIVIDER = 0x1UL << USIC_CH_DXCR_SFSEL_Pos  /**< Use fF
 208:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_SAMPLING_FREQ_t;
 209:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 210:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 211:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel input combination mode
 212:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 213:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT_COMBINATION_MODE
 214:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 215:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_TRIGGER_DISABLED = 0x0UL, /**< The trigger activation is disab
 216:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_RISING_EDGE      = 0x1UL, /**< A rising edge activates DXnT*/
 217:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_FALLING_EDGE     = 0x2UL, /**< A falling edge activates DXnT*/
 218:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_BOTH_EDGES       = 0x3UL, /**< Both edges activate DXnT*/
 219:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_COMBINATION_MODE_t;
 220:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 221:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 222:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel data transmission start modes.
 223:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Data shifted out of the transmit pin depends on the value configured for the
 224:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * TDEN bitfield of the TCSR register. Following enum values are used for configuring
 225:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * the TCSR->TDEN bitfield.
 226:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 227:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_START_TRANSMISION_MODE
 228:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 229:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_DISABLED      = 0x0U, /**< Passive data level is sent out on transm
 230:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV        = 0x1UL << USIC_CH_TCSR_TDEN_Pos, /**< Transmission o
 231:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_0 = 0x2UL << USIC_CH_TCSR_TDEN_Pos, /**< Transmission o
 232:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_1 = 0x3UL << USIC_CH_TCSR_TDEN_Pos  /**< Transmission o
 233:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_START_TRANSMISION_MODE_t;
 234:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 235:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 236:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel interrupt node pointers
 237:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 238:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INTERRUPT_NODE_POINTER
 239:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 240:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT      = USIC_CH_INPR_TSINP_Pos, /**< Node pointe
 241:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER     = USIC_CH_INPR_TBINP_Pos, /**< Node pointe
 242:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIVE             = USIC_CH_INPR_RINP_Pos,  /**< Node pointe
 243:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE   = USIC_CH_INPR_AINP_Pos,  /**< Node pointe
 244:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL            = USIC_CH_INPR_PINP_Pos   /**< Node pointe
 245:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_INTERRUPT_NODE_POINTER_t;
 246:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 247:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 248:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel events
 249:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 250:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_EVENT
 251:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 252:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_RECEIVE_START       = USIC_CH_CCR_RSIEN_Msk, /**< Receive start event */
 253:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_DATA_LOST           = USIC_CH_CCR_DLIEN_Msk, /**< Data lost event */
 254:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_TRANSMIT_SHIFT      = USIC_CH_CCR_TSIEN_Msk, /**< Transmit shift event */
 255:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_TRANSMIT_BUFFER     = USIC_CH_CCR_TBIEN_Msk, /**< Transmit buffer event */
 256:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_STANDARD_RECEIVE    = USIC_CH_CCR_RIEN_Msk,  /**< Receive event */
 257:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE = USIC_CH_CCR_AIEN_Msk,  /**< Alternate receive event */
 258:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_BAUD_RATE_GENERATOR = USIC_CH_CCR_BRGIEN_Msk /**< Baudrate generator event */
 259:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_EVENT_t;
 260:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 261:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 262:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel parity mode
 263:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** */
 264:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_PARITY_MODE
 265:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 266:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_NONE     = 0x0UL,  /**< Disable parity mode */
 267:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_EVEN     = 0x2UL << USIC_CH_CCR_PM_Pos,  /**< Enable even parity mode */
 268:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_ODD      = 0x3UL << USIC_CH_CCR_PM_Pos   /**< Enable odd parity mode */
 269:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_PARITY_MODE_t;
 270:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 271:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 272:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel data output mode
 273:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** */
 274:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_DATA_OUTPUT_MODE
 275:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 276:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_DATA_OUTPUT_MODE_NORMAL   = 0x0UL,  /**< Data output normal mode */
 277:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_DATA_OUTPUT_MODE_INVERTED = 0x1UL << USIC_CH_SCTR_DOCFG_Pos   /**< Data output invert
 278:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_DATA_OUTPUT_MODE_t;
 279:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 280:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 281:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel data transmit buffer status
 282:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** */
 283:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TBUF_STATUS
 284:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 285:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_IDLE = 0x0UL,                 /**< Transfer buffer is currently idle*/
 286:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_BUSY = USIC_CH_TCSR_TDV_Msk   /**< Transfer buffer is currently busy*/
 287:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_TBUF_STATUS_t;
 288:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 289:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 290:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 291:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 292:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel data transmit buffer status modification
 293:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** */
 294:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TBUF_STATUS_SET
 295:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 296:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_SET_BUSY   = 0x1UL, /**< Set Transfer buffer status to busy*/
 297:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_SET_IDLE   = 0x2UL  /**< Set Transfer buffer status to idle*/
 298:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_TBUF_STATUS_SET_t;
 299:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 300:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 301:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel receive buffer status
 302:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** */
 303:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RBUF_STATUS
 304:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 305:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_RBUF_STATUS_DATA_VALID0 = USIC_CH_RBUFSR_RDV0_Msk, /**< RBUF0 data has not yet been r
 306:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_RBUF_STATUS_DATA_VALID1 = USIC_CH_RBUFSR_RDV1_Msk  /**< RBUF1 data has not yet been r
 307:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_RBUF_STATUS_t;
 308:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 309:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 310:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel output signal passive data level
 311:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** */
 312:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USCI_CH_PASSIVE_DATA_LEVEL
 313:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 314:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_PASSIVE_DATA_LEVEL0 = 0x0UL, /**< Passive level(idle mode signal level) 0 */
 315:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_PASSIVE_DATA_LEVEL1 = 0x1UL << USIC_CH_SCTR_PDL_Pos  /**< Passive level(idle mode sig
 316:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_PASSIVE_DATA_LEVEL_t;
 317:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 318:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 319:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel receive FIFO size
 320:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** */
 321:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_FIFO_SIZE
 322:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 323:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_DISABLED     = 0x0U,  /**< FIFO Disabled */
 324:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_2WORDS  = 0x1U,  /**< FIFO size: 2 words */
 325:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_4WORDS  = 0x2U,  /**< FIFO size: 4 words */
 326:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_8WORDS  = 0x3U,  /**< FIFO size: 8 words */
 327:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_16WORDS = 0x4U,  /**< FIFO size: 16 words */
 328:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_32WORDS = 0x5U,  /**< FIFO size: 32 words */
 329:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_64WORDS = 0x6U   /**< FIFO size: 64 words */
 330:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_FIFO_SIZE_t;
 331:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 332:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 333:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel transmit FIFO interrupt node pointers
 334:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** */
 335:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER
 336:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 337:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD  = USIC_CH_TBCTR_STBINP_Pos,  /**< Node pointe
 338:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE = USIC_CH_TBCTR_ATBINP_Pos   /**< Node pointe
 339:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t;
 340:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 341:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 342:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel transmit FIFO event configuration
 343:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** */
 344:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_EVENT_CONF
 345:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 346:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD  = USIC_CH_TBCTR_STBIEN_Msk,   /**< Enable FIFO standard t
 347:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_CONF_ERROR     = (int32_t)USIC_CH_TBCTR_TBERIEN_Msk  /**< Enable transmi
 348:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_EVENT_CONF_t;
 349:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 350:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 351:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel transmit FIFO status
 352:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** */
 353:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_EVENT
 354:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 355:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_STANDARD = USIC_CH_TRBSR_STBI_Msk,    /**< Transmit FIFO status: Standar
 356:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_ERROR    = USIC_CH_TRBSR_TBERI_Msk    /**< Transmit FIFO status: Error e
 357:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_EVENT_t;
 358:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 359:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 360:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel receive FIFO interrupt node pointers
 361:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** */
 362:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER
 363:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 364:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD  = USIC_CH_RBCTR_SRBINP_Pos, /**< Node pointer
 365:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE = USIC_CH_RBCTR_ARBINP_Pos  /**< Node pointer
 366:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t;
 367:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 368:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 369:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel receive FIFO event configuration
 370:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** */
 371:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_EVENT_CONF
 372:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 373:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD  = USIC_CH_RBCTR_SRBIEN_Msk,   /**< Enable FIFO standard r
 374:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_ERROR     = (int32_t)USIC_CH_RBCTR_RBERIEN_Msk,  /**< Enable receiv
 375:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE = USIC_CH_RBCTR_ARBIEN_Msk   /**< Enable FIFO alternative
 376:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_EVENT_CONF_t;
 377:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 378:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 379:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel receive FIFO status
 380:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** */
 381:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_EVENT
 382:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 383:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_STANDARD  = USIC_CH_TRBSR_SRBI_Msk,   /**< Receive FIFO status: Standard
 384:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_ERROR     = USIC_CH_TRBSR_RBERI_Msk,  /**< Receive FIFO status: Error ev
 385:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE = USIC_CH_TRBSR_ARBI_Msk    /**< Receive FIFO status: Alternat
 386:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_EVENT_t;
 387:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 388:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 389:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel baudrate generator clock source
 390:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** */
 391:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_CLOCK_SOURCE
 392:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 393:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_SOURCE_DIVIDER = 0x0UL, /**< Baudrate generator clock source : Source divid
 394:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1T    = 0x2UL << USIC_CH_BRG_CLKSEL_Pos  /**< Baudrate generator c
 395:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_BRG_CLOCK_SOURCE_t;
 396:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 397:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 398:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel baudrate generator divider mode
 399:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** */
 400:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE
 401:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 402:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_DISABLED   = 0x0UL, /**< Baudrate generator clock divider: Dis
 403:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL     = 0x1UL << USIC_CH_FDR_DM_Pos, /**< Baudrate genera
 404:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL = 0x2UL << USIC_CH_FDR_DM_Pos  /**< Baudrate genera
 405:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_t;
 406:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 407:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 408:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel baudrate generator master clock passive level
 409:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** */
 410:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL
 411:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 412:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_0 = 0x0UL, /**< Baudrate generator master clock passiv
 413:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_1 = 0x1UL << USIC_CH_BRG_MCLKCFG_Pos  /**< Baudrate ge
 414:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_t;
 415:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 416:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 417:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel baudrate generator shift clock passive level
 418:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** */
 419:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL
 420:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 421:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED = 0x0UL, /**< Shift clock passive leve
 422:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED = 0x1UL << USIC_CH_BRG_SCLKCFG_Pos, /*
 423:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_ENABLED  = (int32_t)(0x2UL << USIC_CH_BRG_SCLKC
 424:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_ENABLED  = (int32_t)(0x3UL << USIC_CH_BRG_SCLKC
 425:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t;
 426:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 427:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 428:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel baudrate generator shift clock output
 429:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** */
 430:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT
 431:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 432:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK = 0x0UL, /**< Baudrate generator shift clock output: SCL.
 433:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1 = 0x1UL << USIC_CH_BRG_SCLKOSEL_Pos   /**< Baudrate genera
 434:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t;
 435:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 436:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /*******************************************************************************
 437:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * DATA STRUCTURES
 438:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *******************************************************************************/
 439:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 440:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /*Anonymous structure/union guard start*/
 441:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #if defined(__CC_ARM)
 442:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   #pragma push
 443:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   #pragma anon_unions
 444:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #elif defined(__TASKING__)
 445:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   #pragma warning 586
 446:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #endif
 447:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 448:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 449:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC module structure
 450:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 451:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** typedef USIC_GLOBAL_TypeDef XMC_USIC_t;
 452:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 453:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 454:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel structure.<br> The members of the structure are same as in the device header file, 
 455:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * except for some registers.
 456:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * DX0CR, DX1CR, DX2CR, DX3CR, DX4CR and DX5CR are replaced with the array DXCR[6].
 457:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * TBUF0 to TBUF31 are replaced with TBUF[32].
 458:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * IN0 to IN31 are replaced with IN[32].
 459:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 460:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** typedef struct XMC_USIC_CH
 461:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 462:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __I  uint32_t  RESERVED0;
 463:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __I  uint32_t  CCFG;			/**< Channel configuration register*/
 464:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __I  uint32_t  RESERVED1;
 465:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  KSCFG;			/**< Kernel state configuration register*/
 466:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  FDR;			/**< Fractional divider configuration register*/
 467:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  BRG;			/**< Baud rate generator register*/
 468:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  INPR;			/**< Interrupt node pointer register*/
 469:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  DXCR[6];		/**< Input control registers DX0 to DX5.*/
 470:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  SCTR;			/**< Shift control register*/
 471:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  TCSR;
 472:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 473:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   union {
 474:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****     __IO uint32_t  PCR_IICMode;	/**< I2C protocol configuration register*/
 475:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****     __IO uint32_t  PCR_IISMode; /**< I2S protocol configuration register*/
 476:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****     __IO uint32_t  PCR_SSCMode;	/**< SPI protocol configuration register*/
 477:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****     __IO uint32_t  PCR;			/**< Protocol configuration register*/
 478:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****     __IO uint32_t  PCR_ASCMode;	/**< UART protocol configuration register*/
 479:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   };
 480:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  CCR;			/**< Channel control register*/
 481:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  CMTR;			/**< Capture mode timer register*/
 482:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 483:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   union {
 484:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****     __IO uint32_t  PSR_IICMode;	/**< I2C protocol status register*/
 485:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****     __IO uint32_t  PSR_IISMode;	/**< I2S protocol status register*/
 486:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****     __IO uint32_t  PSR_SSCMode;	/**< SPI protocol status register*/
 487:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****     __IO uint32_t  PSR;			/**< Protocol status register*/
 488:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****     __IO uint32_t  PSR_ASCMode;	/**< UART protocol status register*/
 489:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   };
 490:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __O  uint32_t  PSCR;			/**< Protocol status clear register*/
 491:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __I  uint32_t  RBUFSR;		/**< Receive buffer status register*/
 492:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __I  uint32_t  RBUF;			/**< Receive buffer register*/
 493:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __I  uint32_t  RBUFD;			/**< Debug mode receive buffer register*/
 494:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __I  uint32_t  RBUF0;			/**< Receive buffer 0*/
 495:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __I  uint32_t  RBUF1;			/**< Receive buffer 1*/
 496:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __I  uint32_t  RBUF01SR;		/**< Receive buffer status register*/
 497:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __O  uint32_t  FMR;			/**< Flag modification register*/
 498:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __I  uint32_t  RESERVED2[5];
 499:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  TBUF[32];		/**< Tranmsit buffer registers*/
 500:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  BYP;			/**< FIFO bypass register*/
 501:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  BYPCR;			/**< FIFO bypass control register*/
 502:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  TBCTR;			/**< Transmit FIFO control register*/
 503:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  RBCTR;			/**< Receive FIFO control register*/
 504:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __I  uint32_t  TRBPTR;		/**< Transmit/recive buffer pointer register*/
 505:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  TRBSR;			/**< Transmit/receive buffer status register*/
 506:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __O  uint32_t  TRBSCR;		/**< Transmit/receive buffer status clear register*/
 507:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __I  uint32_t  OUTR;			/**< Receive FIFO output register*/
 508:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __I  uint32_t  OUTDR;			/**< Receive FIFO debug output register*/
 509:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __I  uint32_t  RESERVED3[23];
 510:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __O  uint32_t  IN[32];		/**< Transmit FIFO input register*/
 511:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_t;
 512:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 513:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 514:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /*Anonymous structure/union guard end*/
 515:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #if defined(__CC_ARM)
 516:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   #pragma pop
 517:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #elif defined(__TASKING__)
 518:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   #pragma warning restore
 519:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #endif
 520:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 521:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /*******************************************************************************
 522:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * API PROTOTYPES
 523:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  ******************************************************************************/
 524:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 525:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #ifdef __cplusplus
 526:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** extern "C" {
 527:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #endif
 528:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 529:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_IsModuleValid(const XMC_USIC_t *const module)
 530:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 531:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   bool tmp;
 532:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 533:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   tmp = (module == XMC_USIC0);
 534:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #if defined(XMC_USIC1)  
 535:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   tmp = tmp || (module == XMC_USIC1);
 536:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #endif
 537:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #if defined(XMC_USIC2)  
 538:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   tmp = tmp || (module == XMC_USIC2);
 539:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #endif
 540:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 541:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   return tmp;
 542:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
 543:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 544:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_IsChannelValid(const XMC_USIC_CH_t *const channel)
 545:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 546:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   bool tmp;
 547:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 548:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   tmp = ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1));
 549:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #if defined(XMC_USIC1)  
 550:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   tmp = tmp || ((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1));
 551:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #endif
 552:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #if defined(XMC_USIC2)  
 553:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   tmp = tmp || ((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1));
 554:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #endif
 555:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 556:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   return tmp;
 557:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
 558:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 559:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /* Common APIs */
 560:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 561:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 562:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  usic Pointer to USIC module handler of type @ref XMC_USIC_t.\n
 563:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC0 to @ref XMC_USIC2 based on device support.
 564:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 565:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 
 566:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 567:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Enables the USIC module.\n\n
 568:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Enables the clock for the USIC module by following the
 569:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * clock enabling sequence for the selected device.
 570:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 571:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 572:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_Enable(), XMC_USIC_Disable() \n\n\n
 573:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 574:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** void XMC_USIC_Enable(XMC_USIC_t *const usic);
 575:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 576:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  usic Pointer to USIC module handler of type @ref XMC_USIC_t.\n
 577:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC0 to @ref XMC_USIC2 based on device support.
 578:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 579:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 580:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 581:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Disables the USIC module.\n\n
 582:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Disables the clock for the USIC module by following the clock
 583:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * disabling sequence for the selected device.
 584:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 585:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 586:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_Disable(), XMC_USIC_Enable() \n\n\n
 587:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 588:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** void XMC_USIC_Disable(XMC_USIC_t *const usic);
 589:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 590:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 591:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 592:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 593:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 594:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 595:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Enables the USIC channel. \n\n
 596:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel is enabled by setting the module enable bit in KSCFG register bitfield MODEN.
 597:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * On enabling, the channel is set to idle mode.
 598:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 599:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 600:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_Disable(), XMC_USIC_Enable() \n\n\n
 601:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 602:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel);
 603:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 604:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 605:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 606:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 607:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 608:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 609:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Disables the USIC channel.\n\n
 610:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel is disabled by setting the module enable bit(MDEN) to 0 in the register KSCFG.
 611:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 612:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 613:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_Enable(), XMC_USIC_Disable() \n\n\n
 614:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 615:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** void XMC_USIC_CH_Disable(XMC_USIC_CH_t *const channel);
 616:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 617:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 618:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 619:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 620:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  rate Desired baudrate. \b Range: minimum value = 100, maximum value depends on the perip
 621:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				and \a oversampling. Maximum baudrate can be derived using the formula: (fperiph * 1023)/(10
 622:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 623:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 						This can be related to the number of samples for each logic state of the data signal. \n
 624:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 						\b Range: 1 to 32. Value should be chosen based on the protocol used.
 625:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return Status indicating the baudrate configuration.\n
 626:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_STATUS_OK if baudrate is successfully configured,
 627:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 					  @ref XMC_USIC_CH_STATUS_ERROR if desired baudrate or oversampling is invalid.
 628:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 629:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 630:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Configures the baudrate of the USIC channel. \n\n
 631:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Baudrate is configured by considering the peripheral frequency and the desired baudrate.
 632:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Optimum values of FDR->STEP and BRG->PDIV are calulated and used for generating the desired
 633:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * baudrate.
 634:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 635:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 636:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_SetStartTransmisionMode(), XMC_USIC_CH_SetInputSource() \n\n\n
 637:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 638:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t 
 639:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 640:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 641:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 642:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 643:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  pdiv Desired divider for the external frequency input. \b Range: minimum value = 1, maxi
 644:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 645:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 						This can be related to the number of samples for each logic state of the data signal. \n
 646:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 						\b Range: 1 to 32. Value should be chosen based on the protocol used.
 647:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  combination_mode Selects which edge of the synchronized(and optionally filtered) signal 
 648:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *                          output DXnT of the input stage.
 649:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 650:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 651:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 652:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 653:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Enables the external frequency input for the Baudrate Generator and configures the divider, over
 654:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * the combination mode of the USIC channel. \n\n
 655:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 656:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 657:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_SetBRGInputClockSource(), XMC_USIC_CH_SetInputTriggerCombinationMode() \n\n\n
 658:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 659:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** void XMC_USIC_CH_ConfigExternalInputSignalToBRG(XMC_USIC_CH_t *const channel,
 660:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 		                                         const uint16_t pdiv,
 661:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 												 const uint32_t oversampling,
 662:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 												 const XMC_USIC_CH_INPUT_COMBINATION_MODE_t combination_mode);
 663:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 664:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 665:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 666:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 667:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 668:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 669:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  source Input source select for the input stage. The table below maps the enum value with
 670:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * <table><tr><td>0</td><td>DXnA</td></tr><tr><td>1</td><td>DXnB</td></tr><tr><td>2</td><td>DXnC</t
 671:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * <tr><td>4</td><td>DXnE</td></tr><tr><td>5</td><td>DXnF</td></tr><tr><td>6</td><td>DXnG</td></tr>
 672:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * </tr></table>
 673:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 674:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 675:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 676:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Selects the data source for USIC input stage.\n\n
 677:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Selects the input data signal source among DXnA, DXnB.. DXnG for the input stage. The API can be
 678:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * like DX0CR, DX1CR etc. 
 679:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *  
 680:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 681:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableIn
 682:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 683:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 684:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INP
 685:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 686:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 687:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                          ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 688:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
 689:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 690:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 691:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 692:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 693:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 694:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 695:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 696:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 697:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * The input of the data shift unit is controlled by the
 698:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * protocol pre-processor. \n\n
 699:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 700:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 701:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_ConnectInputDataShiftToDataInput()\n\n\n
 702:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 703:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConnectInputDataShiftToPPP(XMC_USIC_CH_t *const channel, const XMC
 704:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 705:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_INSW_Msk;
 706:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
 707:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 708:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 709:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 710:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 711:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 712:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 713:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 714:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 715:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 716:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * The input of the data shift unit is connected to
 717:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * the selected data input line. \n\n
 718:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 719:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * This setting is used
 720:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * if the signals are directly derived from an input
 721:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * pin without treatment by the protocol preprocessor.
 722:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 723:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_ConnectInputDataShiftToPPP()\n\n\n
 724:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 725:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConnectInputDataShiftToDataInput(XMC_USIC_CH_t *const channel, con
 726:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 727:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->DXCR[input] |= USIC_CH_DXCR_INSW_Msk;
 728:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
 729:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 730:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 731:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 732:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 733:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 734:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 735:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 736:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 737:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 738:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Enables input inversion for USIC channel input data signal. \n\n
 739:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 740:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Polarity of the input source can be changed to provide inverted data input.
 741:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 742:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputInversion()\n\n\n
 743:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 744:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputInversion(XMC_USIC_CH_t *const channel, const XMC_USIC_
 745:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 746:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->DXCR[input] |= USIC_CH_DXCR_DPOL_Msk;
 747:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
 748:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 749:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 750:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 751:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 752:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 753:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 754:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 755:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 756:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 757:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Disables input inversion for USIC channel. \n\n
 758:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 759:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Resets the input data polarity for the USIC channel input data signal.
 760:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 761:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputInversion()\n\n\n
 762:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 763:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputInversion(XMC_USIC_CH_t *const channel, const XMC_USIC
 764:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 765:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_DPOL_Msk;
 766:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
 767:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 768:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 769:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 770:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 771:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 772:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 773:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 774:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Enables delay compensation. \n\n
 775:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 776:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Delay compensation can be applied to the receive path.
 777:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 778:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_DisableDelayCompensation()\n\n\n
 779:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 780:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableDelayCompensation(XMC_USIC_CH_t *const channel)
 781:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 782:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->DXCR[1U] |= USIC_CH_DX1CR_DCEN_Msk;
 783:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
 784:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 785:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 786:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 787:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 788:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 789:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 790:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 791:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Disables delay compensation.. \n\n
 792:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 793:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 794:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_EnableDelayCompensation()\n\n\n
 795:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 796:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableDelayCompensation(XMC_USIC_CH_t *const channel)
 797:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 798:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->DXCR[1U] &=(uint32_t)~USIC_CH_DX1CR_DCEN_Msk;
 799:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
 800:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 801:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 802:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 803:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 804:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 805:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 806:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 807:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 808:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 809:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Enables the input digital filter for USIC channel input data signal. \n\n
 810:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will be digitally filtered.
 811:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 812:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 813:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputDigitalFilter()\n\n\n
 814:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 815:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputDigitalFilter(XMC_USIC_CH_t *const channel, const XMC_U
 816:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 817:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->DXCR[input] |= (uint32_t)USIC_CH_DXCR_DFEN_Msk;
 818:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
 819:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 820:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 821:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 822:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 823:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 824:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 825:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 826:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 827:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Disables the input digital filter for USIC channel input data signal. \n\n
 828:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will not be digitally filtered.
 829:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 830:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 831:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputDigitalFilter()\n\n\n
 832:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 833:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputDigitalFilter(XMC_USIC_CH_t *const channel, const XMC_
 834:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 835:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_DFEN_Msk;
 836:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
 837:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 838:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 839:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 840:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 841:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 842:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 843:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 844:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 845:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Enables input synchronization for the USIC channel input data signal. \n\n
 846:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will be synchronized with fPERIPH.
 847:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * A noisy signal can be synchronized and filtered by enabling the digital filter.
 848:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 849:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 850:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputSync(), XMC_USIC_CH_EnableInputDigitalFilter()\n\n\n
 851:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 852:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputSync(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_IN
 853:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 854:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->DXCR[input] |=(uint32_t)USIC_CH_DXCR_DSEN_Msk;
 855:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
 856:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 857:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 858:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 859:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 860:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 861:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 862:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 863:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 864:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Disables input synchronization for the USIC channel input data signal. \n\n
 865:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will not be synchronized.
 866:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 867:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 868:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_DisableInputDigitalFilter() \n\n\n
 869:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 870:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputSync(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_I
 871:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 872:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_DSEN_Msk;
 873:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
 874:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 875:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 876:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 877:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 878:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 879:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  sampling_freq Sampling frequency value of type \a XMC_USIC_CH_INPUT_SAMPLING_FREQ_t.
 880:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 881:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 882:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 883:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Sets sampling frequency for USIC channel input data signal. \n\n
 884:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 885:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 886:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSource(), XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_EnableInputDigitalFilte
 887:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 888:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputSamplingFreq(XMC_USIC_CH_t *const channel,
 889:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 		                                              const XMC_USIC_CH_INPUT_t input,
 890:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 		                                              const XMC_USIC_CH_INPUT_SAMPLING_FREQ_t sampling_fr
 891:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 892:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DXCR_SFSEL_Msk)) |
 893:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                          ((uint32_t)sampling_freq);
 894:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
 895:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 896:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 897:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 898:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 899:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 900:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 901:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  combination_mode Combination mode value of type \a XMC_USIC_CH_INPUT_COMBINATION_MODE_t.
 902:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 903:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 904:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 905:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Selects which edge of the synchronized signal DXnS activates the trigger output DXnT of the inpu
 906:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 907:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 908:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSource(), XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_EnableInputDigitalFilte
 909:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 910:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputTriggerCombinationMode(XMC_USIC_CH_t *const channel,
 911:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 		                                                        const XMC_USIC_CH_INPUT_t input,
 912:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 		                                                        const XMC_USIC_CH_INPUT_COMBINATION_MODE_
 913:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 914:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DXCR_CM_Msk)) |
 915:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                          ((uint32_t)combination_mode << USIC_CH_DXCR_CM_Pos);
 916:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
 917:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 918:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 919:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 920:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 921:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  clock_source clock source for the BRG.
 922:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 923:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 924:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 925:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Sets the clock source for the BRG. \n\n
 926:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 927:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 928:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputTriggerCombinationMode(), XMC_USIC_CH_SetExternalClockBRGDivider()\n\n\n
 929:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 930:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetBRGInputClockSource(XMC_USIC_CH_t *const channel, const XMC_USI
 931:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 932:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->BRG = (uint32_t)(channel->BRG & (~USIC_CH_BRG_CLKSEL_Msk)) | (uint32_t)(clock_source);
 933:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
 934:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 935:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 936:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 937:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 938:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param data Data to be transmitted. \n
 939:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *           \b Range: 16bit unsigned data. minimum= 0, maximum= 65535
 940:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 941:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 942:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 943:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Writes data into the transmit buffer. \n\n
 944:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * The data provided is placed in TBUF[0U].
 945:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 946:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 947:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 948:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_WriteToTBUFTCI() \n\n\n
 949:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 950:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_WriteToTBUF(XMC_USIC_CH_t *const channel, const uint16_t data)
 951:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 952:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->TBUF[0U] = data;
 953:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
 954:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 955:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 956:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 957:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 958:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param data Data to be transmitted.
 959:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param transmit_control_information transmit control information to be configured while transmit
 960:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31.
 961:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 962:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 963:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 964:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Writes data to the transmit buffer in a control mode. \n\n
 965:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * When the respective control mode is enabled , this API can be used.
 966:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 967:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 968:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 969:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_WriteToTBUF() \n\n\n
 970:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 971:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_WriteToTBUFTCI(XMC_USIC_CH_t *const channel,
 972:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                              const uint16_t data,
 973:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                              const uint32_t transmit_control_information)
 974:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 975:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->TBUF[transmit_control_information] = data;
 976:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
 977:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 978:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 979:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 980:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 981:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  word_length Number of bits to be configured for a data word. \n
 982:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 					   \b Range: minimum= 1, maximum= 16. \n
 983:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 					   e.g: For word length of 8, \a word_length should be provided as 8.
 984:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 985:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 986:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 987:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Sets the data word length in number of bits. \n\n
 988:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Sets the number of bits to represent a data word. Frame length should be a multiple of word leng
 989:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 990:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 991:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_SetFrameLength()\n\n\n
 992:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 993:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_len
 994:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 995:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
 996:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                   (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
 997:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
 998:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 999:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1000:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1001:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1002:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  frame_length Number of bits in a frame. \n
1003:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 						\b Range: minimum= 1, maximum= 0x3f. The maximum value for fixed frame size is 0x3f. \n
1004:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 						e.g: For a frame length of 16, \a frame_length should be provided as 16.
1005:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1006:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1007:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1008:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Define the data frame length.\n\n
1009:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Set the number of bits to be serially transmitted in a frame.
1010:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * The frame length should be multiples of word length. If the value is set to 0x40, the frame leng
1011:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * has to be controlled explicitly. 
1012:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1013:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1014:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1015:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1016:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_l
1017:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1018:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
1019:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                   (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
1020:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1021:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1022:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1023:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1024:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1025:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param event Bit mask of the channel events to be enabled. Use @ref XMC_USIC_CH_EVENT_t for the 
1026:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC_CH_EVENT_RECEIVE_START, @ref XMC_USIC_CH_EVENT_DATA_LOST etc. Multip
1027:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				can be combined using \a OR operation.
1028:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1029:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1030:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1031:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Enable the channel interrupt events.\n\n
1032:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Common channel events related to serial communication can be configured using this API.
1033:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Multiple events can be combined using the bitwise OR operation and configured in one function ca
1034:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_EVENT_t enumerates multiple protocol event bitmasks. These enumerations can be used 
1035:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1036:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1037:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1038:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1039:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
1040:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1041:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->CCR |= event;
1042:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1043:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1044:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1045:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1046:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				  \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device sup
1047:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param event Bit mask of the channel events to be disabled. Use @ref XMC_USIC_CH_EVENT_t for the
1048:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC_CH_EVENT_RECEIVE_START, @ref XMC_USIC_CH_EVENT_DATA_LOST etc. Multip
1049:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				can be combined using \a OR operation.
1050:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1051:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1052:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1053:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Disable the channel interrupt events. \n\n
1054:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Multiple events can be combined using the bitwise OR operation and configured in one function ca
1055:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_EVENT_t enumerates multiple protocol event bitmasks. These enumerations can be used 
1056:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1057:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1058:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1059:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** */
1060:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
1061:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1062:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->CCR &= (uint32_t)~event;
1063:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1064:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1065:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1066:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1067:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				  \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device sup
1068:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  interrupt_node Interrupt node pointer to be configured. \n
1069:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 						  \b Range: @ref XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT,
1070:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 						  			@ref XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER etc.
1071:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param service_request Service request number.\n
1072:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 						  \b Range: 0 to 5.
1073:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1074:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1075:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1076:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Sets the interrupt node for USIC channel events. \n\n
1077:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * For an event to generate interrupt, node pointer should be configured with service request(SR0, 
1078:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * The NVIC node gets linked to the interrupt event by doing so.<br>
1079:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Note: NVIC node should be separately enabled to generate the interrupt.
1080:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1081:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1082:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_EnableEvent() \n\n\n
1083:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1084:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1085:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                          const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
1086:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                          const uint32_t service_request);
1087:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1088:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1089:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1090:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1091:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return Stataus @ref XMC_USIC_CH_TBUF_STATUS_IDLE if transmit buffer is free,
1092:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *                 @ref XMC_USIC_CH_TBUF_STATUS_BUSY if transmit buffer is busy.
1093:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1094:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1095:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Gets transmit buffer status. \n\n
1096:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Status indicates whether the transmit buffer is free, or busy transmitting data.
1097:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * The status depends on the value of TDV flag in TCSR register.
1098:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * This status can be used while transmitting data. Transmit data when the transmit buffer
1099:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * status is @ref XMC_USIC_CH_TBUF_STATUS_IDLE.
1100:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1101:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1102:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_SetDataOutputMode() \n\n\n
1103:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1104:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const 
1105:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
  27              	 .loc 1 1105 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
1106:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
  43              	 .loc 1 1106 0
  44 0008 7B68     	 ldr r3,[r7,#4]
  45 000a 9B6B     	 ldr r3,[r3,#56]
  46 000c DBB2     	 uxtb r3,r3
  47 000e 23F07F03 	 bic r3,r3,#127
  48 0012 DBB2     	 uxtb r3,r3
1107:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
  49              	 .loc 1 1107 0
  50 0014 1846     	 mov r0,r3
  51 0016 0C37     	 adds r7,r7,#12
  52              	.LCFI3:
  53              	 .cfi_def_cfa_offset 4
  54 0018 BD46     	 mov sp,r7
  55              	.LCFI4:
  56              	 .cfi_def_cfa_register 13
  57              	 
  58 001a 5DF8047B 	 ldr r7,[sp],#4
  59              	.LCFI5:
  60              	 .cfi_restore 7
  61              	 .cfi_def_cfa_offset 0
  62 001e 7047     	 bx lr
  63              	 .cfi_endproc
  64              	.LFE150:
  66              	 .section .text.XMC_USIC_CH_SetMode,"ax",%progbits
  67              	 .align 2
  68              	 .thumb
  69              	 .thumb_func
  71              	XMC_USIC_CH_SetMode:
  72              	.LFB184:
1108:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1109:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1110:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @brief API to get receive buffer status
1111:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1112:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1113:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return Status of data validity check for RBUF0 and RBUF1. \n
1114:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 		   Returned value should be masked with RDV0 and RDV1 bits to know the status. \n
1115:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 		   \b Range: @ref XMC_USIC_CH_RBUF_STATUS_DATA_VALID0, @ref XMC_USIC_CH_RBUF_STATUS_DATA_VALID
1116:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1117:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1118:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Checks if RBUF0 and RBUF1 have valid unread data. \n\n
1119:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * It checks the bits RDV0 and RDV1 of the RBUFSR register.
1120:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Returns the value of RBUFSR masked with bitmasks of RDV0 and RDV1.
1121:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * It can be used to decide whether 2bytes has to be read from RBUF or 1 byte. 
1122:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * If both bitmasks XMC_USIC_CH_RBUF_STATUS_DATA_VALID0 and XMC_USIC_CH_RBUF_STATUS_DATA_VALID1
1123:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * are set, then 2 bytes can be read from RBUF. If only either of them is set, then only one byte
1124:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * can be read from RBUF.
1125:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1126:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
1127:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1128:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_GetReceiveBufferStatus(XMC_USIC_CH_t *const channel)
1129:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1130:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   return ((uint32_t) (channel->RBUFSR & (USIC_CH_RBUFSR_RDV0_Msk | USIC_CH_RBUFSR_RDV1_Msk)));
1131:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1132:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1133:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1134:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1135:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1136:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1137:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  start_transmision_mode Transmission mode to be enabled. \n
1138:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 								\b Range: @ref XMC_USIC_CH_START_TRANSMISION_DISABLED,
1139:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 								@ref XMC_USIC_CH_START_TRANSMISION_ON_TDV, @ref XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2
1140:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 								@ref XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_1
1141:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *                              
1142:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1143:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1144:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1145:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Configures data transmission. \n\n
1146:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * The configuration affects the data shifted on the DOUT0 pin.
1147:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1148:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1149:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus(), XMC_USIC_CH_SetDataOutputMode() \n\n\n
1150:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1151:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetStartTransmisionMode(XMC_USIC_CH_t *const channel,
1152:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                                          const XMC_USIC_CH_START_TRANSMISION_MODE_t
1153:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1154:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->TCSR = (uint32_t)(channel->TCSR & (~USIC_CH_TCSR_TDEN_Msk)) | (uint32_t)start_transmisio
1155:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1156:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1157:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1158:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1159:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1160:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1161:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  data_output_mode  Data output mode. \n
1162:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_DATA_OUTPUT_MODE_NORMAL, @ref XMC_USIC_CH_DATA_OUTPUT_MODE_INVERTE
1163:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1164:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1165:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1166:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Configures the mode for data output. \n\n
1167:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel can be configured to shift inverted data or direct data based on the input to the A
1168:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1169:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1170:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_SetStartTransmisionMode() \n\n\n
1171:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1172:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetDataOutputMode(XMC_USIC_CH_t *const channel,
1173:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                                    const XMC_USIC_CH_DATA_OUTPUT_MODE_t data_output
1174:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1175:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_DOCFG_Msk)) | (uint32_t)data_output_mod
1176:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1177:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1178:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1179:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1180:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1181:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1182:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1183:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1184:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Enables automatic update of frame length. \n\n
1185:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * When the automatic update of frame length is enabled, frame length is configured based on the 
1186:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * index of the TBUF[]/IN[] register array. When the data is written to TBUF[x], frame length is co
1187:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * with the mask value of \a x at the last 5 bit positions. Same logic is applicable if data is wri
1188:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * IN[x] register.
1189:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1190:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1191:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_DisableFrameLengthControl(), XMC_USIC_CH_TXFIFO_PutDataFLEMode() \n\n\n
1192:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1193:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableFrameLengthControl(XMC_USIC_CH_t *const channel)
1194:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1195:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->TCSR = (uint32_t)(channel->TCSR & (~(USIC_CH_TCSR_WLEMD_Msk |
1196:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                          USIC_CH_TCSR_SELMD_Msk |
1197:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                          USIC_CH_TCSR_WAMD_Msk |
1198:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                          USIC_CH_TCSR_HPCMD_Msk))) |
1199:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                          (uint32_t)USIC_CH_TCSR_FLEMD_Msk;
1200:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1201:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1202:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1203:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1204:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1205:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1206:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1207:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1208:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Disables automatic update of frame length. \n\n
1209:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * When automatic update of frame length is disabled, frame length has to configured explicitly.
1210:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Frame length remains fixed until it is changed again.
1211:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1212:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1213:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_DisableFrameLengthControl(), XMC_USIC_CH_SetFrameLength() \n\n\n
1214:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1215:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableFrameLengthControl(XMC_USIC_CH_t *const channel)
1216:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1217:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->TCSR &= (uint32_t)~USIC_CH_TCSR_FLEMD_Msk;
1218:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1219:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1220:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1221:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1222:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1223:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1224:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1225:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1226:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Bit TCSR.TE is set if DX2T becomes active while TDV = 1. \n\n
1227:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Enables the transfer trigger unit to set bit TCSR.TE if the trigger signal DX2T becomes active
1228:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * for event driven transfer starts.
1229:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1230:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1231:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_DisableTBUFDataValidTrigger()\n\n\n
1232:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1233:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableTBUFDataValidTrigger(XMC_USIC_CH_t *const channel)
1234:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1235:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->TCSR |= (uint32_t)USIC_CH_TCSR_TDVTR_Msk;
1236:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1237:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1238:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1239:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1240:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1241:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1242:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1243:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1244:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Disables the trigger of TDV depending on DX2T signal. \n\n
1245:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Bit TCSR.TE is permanently set.
1246:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1247:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1248:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_EnableTBUFDataValidTrigger() \n\n\n
1249:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1250:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableTBUFDataValidTrigger(XMC_USIC_CH_t *const channel)
1251:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1252:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->TCSR &= (uint32_t)~USIC_CH_TCSR_TDVTR_Msk;
1253:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1254:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1255:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1256:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1257:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1258:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  service_request_line service request number of the event to be triggered. \n
1259:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 			\b Range: 0 to 5.
1260:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1261:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1262:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1263:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Trigger a USIC interrupt service request.\n\n
1264:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * When the USIC service request is triggered, the NVIC interrupt associated with it will be 
1265:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * generated if enabled. 
1266:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1267:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1268:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1269:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1270:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t
1271:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1272:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->FMR |= (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
1273:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1274:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1275:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1276:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1277:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1278:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  transmit_buffer_status clearing or setting the TDV flag. \n
1279:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1280:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1281:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1282:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1283:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Modify TCSR.TDV and TCSR.TE to control the start of a data word transmission by software.
1284:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1285:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1286:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
1287:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1288:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetTransmitBufferStatus(XMC_USIC_CH_t *const channel,
1289:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 		                                                 const XMC_USIC_CH_TBUF_STATUS_SET_t transmit_buf
1290:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1291:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->FMR = (uint32_t)transmit_buffer_status;
1292:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1293:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1294:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1295:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1296:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1297:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  passive_level Value of passive level for the channel. \n
1298:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_PASSIVE_DATA_LEVEL0, @ref XMC_USIC_CH_PASSIVE_DATA_LEVEL1
1299:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1300:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1301:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1302:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Set the passive data level of the output signal. \n\n
1303:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * When the USIC channel transmit stage is idle, the output signal level stays at the 
1304:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * configured passive level.
1305:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1306:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1307:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus(), XMC_USIC_CH_SetStartTransmisionMode() \n\n\n
1308:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1309:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetPassiveDataLevel(XMC_USIC_CH_t *const channel,
1310:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                                      const XMC_USIC_CH_PASSIVE_DATA_LEVEL_t passive
1311:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1312:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->SCTR &= (~USIC_CH_SCTR_PDL_Msk);
1313:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->SCTR |= (uint32_t)passive_level;
1314:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1315:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1316:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /* TX FIFO APIs */
1317:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1318:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1319:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1320:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param data_pointer Start position inside the FIFO buffer. \n
1321:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 		\b Range: 0 to 63.
1322:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param size Required size of the transmit FIFO. \n
1323:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1324:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param limit Threshold of transmit FIFO filling level to be considered for generating events. \n
1325:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1326:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1327:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1328:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1329:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Initializes the transmit FIFO. \n\n
1330:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Transmit FIFO is a subset of a common FIFO sized 64 words. This FIFO is shared between 2 channel
1331:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Each channel can share the FIFO for transmission and reception. \a data_pointer represents the s
1332:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * from where transmit data can be put, for the selected USIC channel. \a size represents the size 
1333:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 2. Since the FIFO is shared between 2 USIC channels, FIFO size should be carefully selected. A F
1334:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * event is generated when the FIFO filling level falls below the \a limit value.
1335:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1336:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1337:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent(), XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
1338:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1339:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
1340:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                   const uint32_t data_pointer,
1341:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                   const XMC_USIC_CH_FIFO_SIZE_t size,
1342:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                   const uint32_t limit);
1343:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1344:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1345:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1346:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1347:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param size Required size of the transmit FIFO. \n
1348:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1349:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param limit Threshold for transmit FIFO filling level to be considered for generating events. \
1350:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1351:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1352:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1353:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1354:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Sets the size and trigger limit for the transmit FIFO. \n\n
1355:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * The API is not to be called for initializing the transmit FIFO. The API shall be used for the 
1356:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * runtime change of transmit FIFO trigger limit. FIFO start position will not be affected on execu
1357:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1358:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1359:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit() \n\n\n
1360:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1361:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** void XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
1362:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                             const XMC_USIC_CH_FIFO_SIZE_t size,
1363:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                             const uint32_t limit);
1364:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1365:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1366:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1367:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1368:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1369:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param event Events to be enabled. Multiple events can be bitwise OR combined. @ref XMC_USIC_CH_
1370:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1371:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1372:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1373:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Enables the interrupt events related to transmit FIFO. \n\n
1374:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t.
1375:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Multiple events can be enabled by providing multiple events in a single call. For providing 
1376:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation. Events are configured in the TBC
1377:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1378:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Note: API only enables the events. For interrupt generation, interrupt node must be configured a
1379:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * must be enabled.
1380:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1381:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1382:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
1383:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1384:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t ev
1385:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1386:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->TBCTR |= event;
1387:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1388:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1389:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1390:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1391:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1392:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1393:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param event Events to be disabled. @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t \n
1394:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1395:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1396:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1397:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Disables the interrupt events related to transmit FIFO. \n\n
1398:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * By disabling the interrupt events, generation of interrupt is stopped. User can poll the event 
1399:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * flags from the status register using the API XMC_USIC_CH_TXFIFO_GetEvent(). 
1400:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t. Fo
1401:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.
1402:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1403:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1404:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1405:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1406:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t e
1407:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1408:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->TBCTR &= (uint32_t)~event;
1409:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1410:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1411:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1412:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1413:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				      \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1414:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param interrupt_node Node pointer representing the transmit FIFO events. \n
1415:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 						  \b Range: @ref XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
1416:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 						  			@ref XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE
1417:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param service_request The service request to be used for interrupt generation. \n
1418:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 						  \b Range: 0 to 5.
1419:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1420:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1421:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1422:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Sets an interrupt node for the transmit FIFO events.\n\n
1423:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * A node pointer represents one or more interrupt events. Service request represents the interrupt
1424:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * among the 6 interrupt nodes available for USIC module.
1425:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * API configures the service request to be used for interrupt generation for the events selected.
1426:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * A transmit FIFO event can generate an interrupt only if the interrupt node is configured for the
1427:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * the interrupt generation is enabled for the event. For example, transmit FIFO standard transmit 
1428:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * interrupt is generated if the interrupt node for the same is set and interrupt is enabled.<br>
1429:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1430:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Note: NVIC node should be explicitly enabled for the interrupt generation.
1431:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1432:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1433:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1434:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1435:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1436:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                                 const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t i
1437:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                                 const uint32_t service_request);
1438:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1439:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1440:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1441:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1442:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param data Data to be transmitted. \n
1443:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *           \b Range: 16bit unsigned data. minimum= 0, maximum= 65535
1444:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1445:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1446:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1447:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Writes data into the transmit FIFO. \n\n
1448:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * The data provided is placed in the transmit FIFO.
1449:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * The transmit FIFO should be configured before calling this API.
1450:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1451:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1452:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1453:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1454:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutData(XMC_USIC_CH_t *const channel, const uint16_t data)
1455:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1456:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->IN[0] = data;
1457:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1458:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1459:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1460:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1461:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1462:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param data Data to be transmitted.
1463:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param frame_length Frame length to be configured while transmitting the data. \n
1464:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31. e.g: For a frame length of 16, set \a frame_length as 15.
1465:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1466:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1467:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1468:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Writes data to the transmit FIFO in frame length control mode. \n\n
1469:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * When frame length control is enabled for dynamic update of frame length, this API can be used.
1470:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \a frame_length represents the frame length to be updated by the peripheral. 
1471:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \a frame_length is used as index for the IN[] register array.
1472:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1473:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1474:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1475:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1476:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataFLEMode(XMC_USIC_CH_t *const channel,
1477:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                                        const uint16_t data,
1478:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                                        const uint32_t frame_length)
1479:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1480:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->IN[frame_length] = data;
1481:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1482:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1483:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1484:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1485:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1486:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1487:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1488:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1489:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Clears the contents of transmit FIFO. \n\n
1490:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Transmit FIFO contents will be cleared and the filling level will be reset to 0.
1491:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1492:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1493:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
1494:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1495:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
1496:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1497:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->TRBSCR |= (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
1498:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1499:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1500:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1501:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1502:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1503:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return Status \a true if transmit FIFO is full
1504:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *              \a false if transmit FIFO is not full.
1505:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1506:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1507:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Checks if transmit FIFO is full. \n\n
1508:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * When the transmit FIFO filling level reaches the configured size, FIFO full flag is set.
1509:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * User should not write to the FIFO when the transmit FIFO is full.
1510:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1511:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1512:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
1513:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1514:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
1515:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1516:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
1517:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1518:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1519:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1520:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1521:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1522:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return Status \a true if transmit FIFO is empty
1523:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *              \a false if transmit FIFO has some data.
1524:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1525:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1526:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Checks if transmit FIFO is empty. \n\n
1527:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * When the transmit FIFO is empty, data can be written to FIFO.
1528:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * When the last written word to the transmit FIFO is transmitted out of the FIFO, 
1529:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * FIFO empty flag is set.
1530:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1531:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1532:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
1533:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1534:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
1535:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1536:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
1537:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1538:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1539:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1540:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1541:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1542:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return Transmit FIFO filling level. \n 
1543:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *           \b Range: minimum= 0(FIFO empty), maximum= transmit FIFO size.
1544:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1545:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1546:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Gets the transmit FIFO filling level. \n\n
1547:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * For every word written to the FIFO, filling level is updated. The API gives the value
1548:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * of this filling level.
1549:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1550:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1551:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
1552:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1553:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_TXFIFO_GetLevel(XMC_USIC_CH_t *const channel)
1554:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1555:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   return ((uint32_t)(channel->TRBSR & USIC_CH_TRBSR_TBFLVL_Msk) >> USIC_CH_TRBSR_TBFLVL_Pos);
1556:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1557:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1558:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1559:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1560:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1561:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return Status of standard transmit and transmit buffer error events. @ref XMC_USIC_CH_TXFIFO_EV
1562:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1563:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1564:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Gets the transmit FIFO event status. \n\n
1565:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Gives the status of transmit FIFO standard transmit buffer event and transmit buffer error event
1566:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * The status bits are located at their bit positions in the TRBSR register in the returned value.
1567:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * User can make use of the @ref XMC_USIC_CH_TXFIFO_EVENT_t enumeration for checking the status of 
1568:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * The status can be found by using the bitwise AND operation on the returned value with the enumer
1569:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1570:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Note: Event status flags should be cleared by the user explicitly.
1571:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1572:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1573:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_ClearEvent() \n\n\n
1574:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1575:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_TXFIFO_GetEvent(XMC_USIC_CH_t *const channel)
1576:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1577:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   return (uint32_t)((channel->TRBSR) & (USIC_CH_TRBSR_STBI_Msk |
1578:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                               USIC_CH_TRBSR_TBERI_Msk));
1579:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1580:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1581:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1582:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1583:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1584:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  event Transmit FIFO events to be cleared. \n
1585:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 			     \b Range: @ref XMC_USIC_CH_TXFIFO_EVENT_STANDARD, @ref XMC_USIC_CH_TXFIFO_EVENT_ERROR.
1586:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1587:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1588:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1589:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Clears the transmit FIFO event flags in the status register. \n\n
1590:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel peripheral does not clear the event flags after they are read.
1591:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * This API clears the events provided in the \a mask value. 
1592:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EVENT enumeration can be used as input. Multiple events
1593:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * can be cleared by providing a mask value obtained by bitwise OR operation of 
1594:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * multiple event enumerations.
1595:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1596:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1597:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetEvent() \n\n\n
1598:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1599:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_ClearEvent(XMC_USIC_CH_t *const channel,
1600:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                                    const uint32_t event)
1601:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1602:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->TRBSCR |= event;
1603:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1604:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1605:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1606:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1607:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1608:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param data_pointer Start position inside the FIFO buffer. \n
1609:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 		\b Range: 0 to 63.
1610:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param size Required size of the receive FIFO. \n
1611:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1612:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param limit Threshold of receive FIFO filling level to be considered for generating events. \n
1613:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1614:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1615:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1616:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1617:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Configures the receive FIFO. \n\n
1618:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Receive FIFO is the subset of a common FIFO sized 64 words. This FIFO is shared between 2 channe
1619:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Each channel can share the FIFO for transmission and reception. \a data_pointer represents the s
1620:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * from where received data can be put. \a size represents the size of receive FIFO as a multiple o
1621:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Since the FIFO is shared between 2 USIC channels, FIFO size should be carefully selected. A FIFO
1622:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * event or alternative receive buffer event is generated when the FIFO filling level exceeds the \
1623:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1624:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1625:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_EnableEvent(), XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
1626:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** */
1627:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
1628:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                   const uint32_t data_pointer,
1629:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                   const XMC_USIC_CH_FIFO_SIZE_t size,
1630:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                   const uint32_t limit);
1631:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1632:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1633:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1634:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1635:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param size Required size of the receive FIFO. \n
1636:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1637:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param limit Threshold for receive FIFO filling level to be considered for generating events. \n
1638:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1639:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1640:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1641:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1642:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Sets the size and trigger limit for the receive FIFO. \n\n
1643:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * The API is not to be called for initializing the receive FIFO. The API shall be used for the 
1644:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * runtime change of receive FIFO trigger limit. FIFO start position will not be affected on execut
1645:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1646:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1647:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit()\ n\n\n
1648:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1649:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
1650:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                             const XMC_USIC_CH_FIFO_SIZE_t size,
1651:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                             const uint32_t limit);
1652:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1653:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1654:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1655:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1656:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param event Events to be enabled. Multiple events can be bitwise OR combined. @ref XMC_USIC_CH_
1657:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1658:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1659:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1660:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Enables the interrupt events related to transmit FIFO. \n\n
1661:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_t.
1662:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Multiple events can be enabled by providing multiple events in a single call. For providing 
1663:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.<br>
1664:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1665:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Note: API only enables the events. For interrupt generation, interrupt node must be configured a
1666:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * must be enabled.
1667:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1668:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1669:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
1670:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1671:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t ev
1672:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1673:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->RBCTR |= event;
1674:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1675:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1676:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1677:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1678:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1679:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1680:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param event Events to be disabled. \n
1681:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD, @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_ERR
1682:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 			@ref XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE.
1683:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1684:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1685:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1686:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Disables the selected interrupt events related to receive FIFO. \n\n
1687:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * By disabling the interrupt events, generation of interrupt is stopped. User can poll the event 
1688:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * flags from the status register using the API XMC_USIC_CH_RXFIFO_GetEvent(). 
1689:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration \a XMC_USIC_CH_RXFIFO_EVENT_CONF. For pr
1690:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.
1691:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1692:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1693:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
1694:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1695:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t e
1696:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1697:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->RBCTR &= (uint32_t)~event;
1698:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1699:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1700:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1701:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1702:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1703:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param interrupt_node Node pointer representing the receive FIFO events. \n
1704:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 					\b Range: @ref XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
1705:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 					@ref XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE
1706:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param service_request The service request to be used for interrupt generation.\n
1707:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 					\b Range: 0 to 5.
1708:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1709:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1710:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1711:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Sets an interrupt node for the receive FIFO events. \n\n
1712:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * A node pointer represents one or more interrupt events. Service request represents the interrupt
1713:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * among the 6 interrupt nodes available for USIC module.
1714:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * API configures the service request to be used for interrupt generation for the events selected.
1715:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * A receive FIFO event can generate an interrupt only if the interrupt node is configured for the 
1716:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * the interrupt generation is enabled for the event. For example, transmit FIFO standard transmit 
1717:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * interrupt is generated if the interrupt node for the same is set and interrupt is enabled.<br>
1718:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1719:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Note: NVIC node should be explicitly enabled for the interrupt generation.
1720:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1721:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1722:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
1723:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1724:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1725:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                                 const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t i
1726:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                                 const uint32_t service_request);
1727:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1728:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1729:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1730:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1731:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return Value read from the receive FIFO. \n
1732:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 			\b Range: 16bit data. Length of data depends on the word length configuration.
1733:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1734:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1735:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Gets data from the receive FIFO. \n\n
1736:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Receive FIFO should be read only if data is availble in the FIFO. This can be checked using
1737:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * the API XMC_USIC_CH_RXFIFO_IsEmpty(). Receive FIFO error flag will be set if an attempt is made
1738:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * to read from an empty receive FIFO. To read all the received data, user should keep reading data
1739:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * until receive FIFO is empty.
1740:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1741:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1742:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_ClearEvent() \n\n\n
1743:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1744:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE uint16_t XMC_USIC_CH_RXFIFO_GetData(XMC_USIC_CH_t *const channel)
1745:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1746:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   return (uint16_t)(channel->OUTR);
1747:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1748:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1749:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1750:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1751:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1752:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1753:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1754:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1755:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Clears the contents of receive FIFO. \n\n
1756:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Receive FIFO contents will be cleared and the filling level will be reset to 0.
1757:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1758:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1759:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
1760:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1761:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
1762:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1763:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->TRBSCR |= (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
1764:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1765:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1766:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1767:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1768:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1769:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return Status \a true if receive FIFO is full
1770:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *              \a false if receive FIFO is not full.
1771:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1772:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1773:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Checks if receive FIFO is full. \n\n
1774:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * When the receive FIFO filling level reaches the configured size, FIFO full flag is set.
1775:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Any data received when the receive FIFO is full, is lost.
1776:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1777:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1778:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_IsEmpty(), XMC_USIC_CH_RXFIFO_Flush() \n\n\n
1779:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1780:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsFull(XMC_USIC_CH_t *const channel)
1781:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1782:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_RFULL_Msk);
1783:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1784:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1785:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1786:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1787:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1788:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return Status \a true if receive FIFO is empty,
1789:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *              \a false if receive FIFO has some data.
1790:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1791:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1792:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Checks if receive FIFO is empty. \n\n
1793:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * When the receive FIFO is empty, received data will be put in receive FIFO.
1794:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * When the last received word in the FIFO is read, FIFO empty flag is set. Any attempt
1795:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * to read from an empty receive FIFO will set the receive FIFO error flag.
1796:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1797:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1798:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
1799:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1800:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
1801:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1802:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
1803:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1804:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1805:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1806:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1807:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1808:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return uint32_t Receive FIFO filling level. \n
1809:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *           \b Range: minimum= 0(FIFO empty), maximum= receive FIFO size.
1810:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1811:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1812:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Gets the receive FIFO filling level. \n\n
1813:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * For every word received, the filling level is incremented. The API gives the value
1814:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * of this filling level. The filling level is decremented when the data is read out of the 
1815:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * receive FIFO.
1816:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1817:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1818:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
1819:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1820:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_RXFIFO_GetLevel(XMC_USIC_CH_t *const channel)
1821:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1822:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   return ((uint32_t)(channel->TRBSR & USIC_CH_TRBSR_RBFLVL_Msk) >> USIC_CH_TRBSR_RBFLVL_Pos);
1823:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1824:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1825:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1826:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1827:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1828:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return Status of standard receive buffer, alternative receive buffer and receive buffer error e
1829:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_RXFIFO_EVENT_STANDARD, @ref XMC_USIC_CH_RXFIFO_EVENT_ERROR,
1830:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 					  @ref XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE.
1831:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1832:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1833:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Gets the receive FIFO events' status. \n\n
1834:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Gives the status of receive FIFO standard receive buffer event, alternative receive buffer event
1835:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * The status bits are located at their bitpositions in the TRBSR register in the returned value.
1836:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * User can make use of the XMC_USIC_CH_RXFIFO_EVENT enumeration for checking the status of return 
1837:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * The status can be found by using the bitwise AND operation on the returned value with the enumer
1838:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1839:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Note: Event status flags should be cleared by the user explicitly.
1840:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1841:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1842:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_ClearEvent()\n\n\n
1843:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1844:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_RXFIFO_GetEvent(XMC_USIC_CH_t *const channel)
1845:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1846:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   return (uint32_t)((channel->TRBSR) & (USIC_CH_TRBSR_SRBI_Msk |
1847:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                               USIC_CH_TRBSR_RBERI_Msk |
1848:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                               USIC_CH_TRBSR_ARBI_Msk));
1849:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1850:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1851:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1852:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1853:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1854:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  event Receive FIFO events to be cleared. \n
1855:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_RXFIFO_EVENT_STANDARD, @ref XMC_USIC_CH_RXFIFO_EVENT_ERROR,
1856:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 					  @ref XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE.
1857:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1858:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1859:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1860:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Clears the receive FIFO event flags in the status register. \n\n
1861:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel peripheral does not clear the event flags after they are read.
1862:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * This API clears the events provided in the \a mask value. 
1863:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_EVENT enumeration can be used as input. Multiple events
1864:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * can be cleared by providing a mask value obtained by bitwise OR operation of 
1865:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * multiple event enumerations.
1866:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1867:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1868:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_GetEvent() \n\n\n
1869:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1870:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_ClearEvent(XMC_USIC_CH_t *const channel,
1871:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                                    const uint32_t event)
1872:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1873:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->TRBSCR |= event;
1874:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1875:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1876:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1877:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1878:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1879:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1880:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1881:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1882:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Enables time measurement using the capture mode timer. \n\n
1883:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Time measurement is enabled by setting the timer enable flag in BRG register.
1884:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1885:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1886:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_DisableTimeMeasurement() \n\n\n
1887:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1888:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableTimeMeasurement(XMC_USIC_CH_t *const channel)
1889:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1890:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->BRG |= (uint32_t)USIC_CH_BRG_TMEN_Msk;
1891:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1892:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1893:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1894:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1895:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1896:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1897:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1898:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1899:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Disables time measurement using the capture mode timer. \n\n
1900:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Time measurement is disabled by clearing the timer enable flag in BRG register.
1901:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1902:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1903:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_EnableTimeMeasurement() \n\n\n
1904:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1905:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableTimeMeasurement(XMC_USIC_CH_t *const channel)
1906:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1907:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->BRG &= (uint32_t)~USIC_CH_BRG_TMEN_Msk;
1908:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1909:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1910:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1911:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1912:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1913:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param passive_level Passive level for the master clock output. \n
1914:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 					\b Range: @ref XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_0, @ref XMC_USIC_CH_BRG_MASTER_CL
1915:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1916:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1917:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1918:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Sets the idle mode pin level for the master clock output. \n
1919:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1920:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetMclkOutputPassiveLevel(XMC_USIC_CH_t *const channel,
1921:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                                            const XMC_USIC_CH_BRG_MASTER_CLOCK_PASSI
1922:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1923:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->BRG = (uint32_t)(channel->BRG & (~USIC_CH_BRG_MCLKCFG_Msk)) | (uint32_t)passive_level;
1924:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1925:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1926:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1927:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1928:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param passive_level Passive level for the clock output. \n
1929:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 					\b Range: @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED,
1930:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 							  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_ENABLED,
1931:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 							  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED,
1932:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *							  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_ENABLED,
1933:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param clock_output Shift clock source selection. \n
1934:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 					\b Range: Use @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK,
1935:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 								  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1
1936:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1937:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1938:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1939:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Sets the idle mode shift clock output level and selects the shift clock source. \n\n
1940:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Shift clock idle mode output level can be set to logic high or low. Shift clock output can be co
1941:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * delay of half shift clock period. Both the configurations are available as enumeration values de
1942:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t.
1943:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * This value should be configured based on the slave device requirement.
1944:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Shift clock source can be selected between internal clock(master) and external input(slave).
1945:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1946:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1947:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
1948:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                                            const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIV
1949:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                                            const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT
1950:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1951:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
1952:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                              USIC_CH_BRG_SCLKOSEL_Msk))) |
1953:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                  (uint32_t)passive_level |
1954:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                  (uint32_t)clock_output;
1955:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1956:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1957:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1958:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1959:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1960:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param mode USIC channel operation mode. \n
1961:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC_CH_OPERATING_MODE_IDLE, @ref XMC_USIC_CH_OPERATING_MODE_SPI,
1962:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 						  @ref XMC_USIC_CH_OPERATING_MODE_UART, @ref XMC_USIC_CH_OPERATING_MODE_I2S,
1963:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 						  @ref XMC_USIC_CH_OPERATING_MODE_I2C.
1964:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1965:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1966:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1967:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Sets the USIC channel operation mode.\n\n
1968:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * A USIC channel can support multiple serial communication protocols like UART, SPI, I2C and I2S.
1969:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * The API sets the input operation mode to the USIC channel.
1970:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1971:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1972:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
1973:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1974:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_
1975:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
  73              	 .loc 1 1975 0
  74              	 .cfi_startproc
  75              	 
  76              	 
  77              	 
  78 0000 80B4     	 push {r7}
  79              	.LCFI6:
  80              	 .cfi_def_cfa_offset 4
  81              	 .cfi_offset 7,-4
  82 0002 83B0     	 sub sp,sp,#12
  83              	.LCFI7:
  84              	 .cfi_def_cfa_offset 16
  85 0004 00AF     	 add r7,sp,#0
  86              	.LCFI8:
  87              	 .cfi_def_cfa_register 7
  88 0006 7860     	 str r0,[r7,#4]
  89 0008 0B46     	 mov r3,r1
  90 000a FB70     	 strb r3,[r7,#3]
1976:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
  91              	 .loc 1 1976 0
  92 000c 7B68     	 ldr r3,[r7,#4]
  93 000e 1B6C     	 ldr r3,[r3,#64]
  94 0010 23F00F02 	 bic r2,r3,#15
  95 0014 FB78     	 ldrb r3,[r7,#3]
  96 0016 1A43     	 orrs r2,r2,r3
  97 0018 7B68     	 ldr r3,[r7,#4]
  98 001a 1A64     	 str r2,[r3,#64]
1977:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
  99              	 .loc 1 1977 0
 100 001c 0C37     	 adds r7,r7,#12
 101              	.LCFI9:
 102              	 .cfi_def_cfa_offset 4
 103 001e BD46     	 mov sp,r7
 104              	.LCFI10:
 105              	 .cfi_def_cfa_register 13
 106              	 
 107 0020 5DF8047B 	 ldr r7,[sp],#4
 108              	.LCFI11:
 109              	 .cfi_restore 7
 110              	 .cfi_def_cfa_offset 0
 111 0024 7047     	 bx lr
 112              	 .cfi_endproc
 113              	.LFE184:
 115 0026 00BF     	 .section .text.XMC_I2C_CH_ClearStatusFlag,"ax",%progbits
 116              	 .align 2
 117              	 .thumb
 118              	 .thumb_func
 120              	XMC_I2C_CH_ClearStatusFlag:
 121              	.LFB192:
 122              	 .file 2 "D:\\Naukowe\\BLDC_workspace\\PWM_from_ex\\Libraries\\XMCLib\\inc/xmc_i2c.h"
   1:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** /**
   2:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @file xmc_i2c.h
   3:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @date 2015-10-27
   4:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
   5:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @cond
   6:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  **************************************************************************************************
   7:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * XMClib v2.1.2 - XMC Peripheral Driver Library 
   8:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
   9:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * Copyright (c) 2015, Infineon Technologies AG
  10:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * All rights reserved.                        
  11:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *                                             
  12:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * following conditions are met:   
  14:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *                                                                              
  15:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * disclaimer.                        
  17:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * 
  18:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * 
  21:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * products derived from this software without specific prior written permission.                  
  23:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *                                                                              
  24:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *                                                                              
  32:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  **************************************************************************************************
  35:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
  36:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * Change History
  37:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * --------------
  38:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
  39:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * 2015-02-20:
  40:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *     - Initial <br>
  41:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *      
  42:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * 2015-05-20:
  43:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *     - Description updated <br>
  44:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *     - Added XMC_I2C_CH_TriggerServiceRequest() and XMC_I2C_CH_SelectInterruptNodePointer() <br>
  45:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
  46:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * 2015-06-20:
  47:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *     - Removed version macros and declaration of GetDriverVersion API <br>
  48:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
  49:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * 2015-08-27:
  50:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *     - Added APIs for external input for BRG configuration:XMC_I2C_CH_ConfigExternalInputSignalTo
  51:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
  52:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * 2015-09-01:
  53:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *     - Added APIs for enabling or disabling the ACK response to a 0x00 slave address: XMC_I2C_CH_
  54:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *       XMC_I2C_CH_DisableSlaveAcknowledgeTo00(). <br>
  55:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *     - Modified XMC_I2C_CH_SetInputSource() API for avoiding complete DXCR register overwriting. 
  56:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *     - Modified XMC_I2C_CH_EVENT_t enum for supporting XMC_I2C_CH_EnableEvent() and XMC_I2C_CH_Di
  57:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *       for supporting multiple events configuration <br>
  58:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
  59:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * 2015-10-02:
  60:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *     - Fix 10bit addressing
  61:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
  62:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * 2015-10-07:
  63:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *     - Fix register access in XMC_I2C_CH_EnableSlaveAcknowledgeTo00() and XMC_I2C_CH_DisableSlave
  64:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *     - Naming of APIs modified: from XMC_I2C_CH_EnableSlaveAcknowledgeTo00() to  XMC_I2C_CH_Enabl
  65:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *       and from XMC_I2C_CH_DisableSlaveAcknowledgeTo00() to XMC_I2C_CH_DisableAcknowledgeAddress0
  66:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
  67:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @endcond 
  68:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
  69:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  */
  70:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** 
  71:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** #ifndef XMC_I2C_H
  72:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** #define XMC_I2C_H
  73:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** 
  74:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** /*******************************************************************************
  75:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * HEADER FILES
  76:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *******************************************************************************/
  77:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** 
  78:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** #include "xmc_usic.h"
  79:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** 
  80:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** /**
  81:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @addtogroup XMClib XMC Peripheral Library
  82:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @{
  83:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  */
  84:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** 
  85:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** /**
  86:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @addtogroup I2C
  87:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @brief Inter Integrated Circuit(IIC) driver for the XMC microcontroller family. 
  88:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
  89:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * USIC IIC Features: <br>
  90:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *  * Two-wire interface, with one line for shift clock transfer and synchronization (shift clock S
  91:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *	* Communication in standard mode (100 kBit/s) or in fast mode (up to 400 kBit/s) <br>
  92:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *	* Support of 7-bit addressing, as well as 10-bit addressing <br>
  93:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *	* Master mode operation, where the IIC controls the bus transactions and provides the clock sign
  94:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *	* Slave mode operation, where an external master controls the bus transactions and provides the 
  95:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *	* Multi-master mode operation, where several masters can be connected to the bus and bus arbitra
  96:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** 	  The master/slave operation of an IIC bus participant can change from frame to frame. <br>
  97:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *	* Efficient frame handling (low software effort), also allowing DMA transfers <br>
  98:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *	* Powerful interrupt handling due to multitude of indication flags <br>
  99:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @{
 100:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  */
 101:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** 
 102:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** /*******************************************************************************
 103:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * MACROS
 104:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *******************************************************************************/
 105:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** 
 106:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** #if defined(USIC0)
 107:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** #define XMC_I2C0_CH0 XMC_USIC0_CH0                   /**< USIC0 channel 0 base address */
 108:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** #define XMC_I2C0_CH1 XMC_USIC0_CH1                   /**< USIC0 channel 1 base address */
 109:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** #endif
 110:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** 
 111:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** #if defined(USIC1)
 112:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** #define XMC_I2C1_CH0 XMC_USIC1_CH0                   /**< USIC1 channel 0 base address */
 113:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** #define XMC_I2C1_CH1 XMC_USIC1_CH1                   /**< USIC1 channel 1 base address */
 114:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** #endif
 115:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** 
 116:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** #if defined(USIC2)
 117:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** #define XMC_I2C2_CH0 XMC_USIC2_CH0                   /**< USIC2 channel 0 base address */
 118:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** #define XMC_I2C2_CH1 XMC_USIC2_CH1                   /**< USIC2 channel 1 base address */
 119:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** #endif
 120:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** 
 121:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** #define XMC_I2C_10BIT_ADDR_GROUP       (0x7800U)	 /**< Value to verify the address is 10-bit or not
 122:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** 
 123:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** /*******************************************************************************
 124:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * ENUMS
 125:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *******************************************************************************/
 126:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** 
 127:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** /**
 128:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @brief I2C Status
 129:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  */
 130:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** typedef enum XMC_I2C_CH_STATUS
 131:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** {
 132:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_OK,      /**< Status OK */
 133:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_ERROR,   /**< Status ERROR */
 134:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_BUSY     /**< Status BUSY */
 135:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** } XMC_I2C_CH_STATUS_t;
 136:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** 
 137:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** /**
 138:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @brief I2C status
 139:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  */
 140:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** typedef enum XMC_I2C_CH_STATUS_FLAG
 141:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** {
 142:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_SLAVE_SELECT = USIC_CH_PSR_IICMode_SLSEL_Msk,                     /**< Sla
 143:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_WRONG_TDF_CODE_FOUND = USIC_CH_PSR_IICMode_WTDF_Msk,              /**< Wro
 144:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_START_CONDITION_RECEIVED = USIC_CH_PSR_IICMode_SCR_Msk,           /**< Sta
 145:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_REPEATED_START_CONDITION_RECEIVED = USIC_CH_PSR_IICMode_RSCR_Msk, /**< Rep
 146:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_STOP_CONDITION_RECEIVED = USIC_CH_PSR_IICMode_PCR_Msk,            /**< Sto
 147:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED = USIC_CH_PSR_IICMode_NACK_Msk,                     /**< NAC
 148:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST = USIC_CH_PSR_IICMode_ARL_Msk,                   /**< Arb
 149:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_SLAVE_READ_REQUESTED = USIC_CH_PSR_IICMode_SRR_Msk,               /**< Sla
 150:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_ERROR = USIC_CH_PSR_IICMode_ERR_Msk,                              /**< Err
 151:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED = USIC_CH_PSR_IICMode_ACK_Msk,                       /**< ACK
 152:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_RECEIVER_START_INDICATION = USIC_CH_PSR_IICMode_RSIF_Msk,         /**< Rec
 153:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_DATA_LOST_INDICATION = USIC_CH_PSR_IICMode_DLIF_Msk,              /**< Dat
 154:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_TRANSMIT_SHIFT_INDICATION = USIC_CH_PSR_IICMode_TSIF_Msk,         /**< Tra
 155:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION = USIC_CH_PSR_IICMode_TBIF_Msk,        /**< Tra
 156:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION = USIC_CH_PSR_IICMode_RIF_Msk,                 /**< Rec
 157:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION = USIC_CH_PSR_IICMode_AIF_Msk,     /**< Alt
 158:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_BAUD_RATE_GENERATOR_INDICATION = USIC_CH_PSR_IICMode_BRGIF_Msk    /**< Bau
 159:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** } XMC_I2C_CH_STATUS_FLAG_t;
 160:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** 
 161:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** /**
 162:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @brief I2C receiver status. The received data byte is available at the bit
 163:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * positions RBUF[7:0], whereas the additional information is monitored at the bit positions
 164:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** *  RBUF[12:8].
 165:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  */
 166:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** typedef enum XMC_I2C_CH_RECEIVER_STATUS_FLAG
 167:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** {
 168:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   XMC_I2C_CH_RECEIVER_STATUS_FLAG_ACK = 0x1U,      /**< Bit 8:  Value of Received Acknowledgement b
 169:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   XMC_I2C_CH_RECEIVER_STATUS_FLAG_FIN = 0x2U,      /**< Bit 9:  A 1 at this bit position indicates 
 170:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****                                                                 followed by the address reception t
 171:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****                                                                 been received. A 0 at this bit posi
 172:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   XMC_I2C_CH_RECEIVER_STATUS_FLAG_MODE = 0x4U,     /**< Bit 10: A 0 at this bit position indicates 
 173:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****                                                                 when the device has been in slave m
 174:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   XMC_I2C_CH_RECEIVER_STATUS_FLAG_ERR = 0x8U,      /**< Bit 11: A 1 at this bit position indicates 
 175:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****                                                                 data byte in the receive buffer */
 176:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   XMC_I2C_CH_RECEIVER_STATUS_FLAG_ADR = 0x10       /**< Bit 12: A 0 at this bit position indicates 
 177:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****                                                                 has been received. A 1 indicates a 
 178:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** } XMC_I2C_CH_RECEIVER_STATUS_FLAG_t;
 179:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** 
 180:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** /**
 181:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @brief I2C commands
 182:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  */
 183:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** typedef enum XMC_I2C_CH_CMD
 184:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** {
 185:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   XMC_I2C_CH_CMD_WRITE,                            /**< I2C Command Write */
 186:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   XMC_I2C_CH_CMD_READ                              /**< I2C Command Read */
 187:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** } XMC_I2C_CH_CMD_t;
 188:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** 
 189:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** /**
 190:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @brief I2C events
 191:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  */
 192:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** typedef enum XMC_I2C_CH_EVENT
 193:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** {
 194:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_RECEIVE_START       = USIC_CH_CCR_RSIEN_Msk,  /**< Receive start event */
 195:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_DATA_LOST           = USIC_CH_CCR_DLIEN_Msk,  /**< Data lost event */
 196:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_TRANSMIT_SHIFT      = USIC_CH_CCR_TSIEN_Msk,  /**< Transmit shift event */
 197:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_TRANSMIT_BUFFER     = USIC_CH_CCR_TBIEN_Msk,  /**< Transmit buffer event */
 198:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_STANDARD_RECEIVE    = USIC_CH_CCR_RIEN_Msk,   /**< Receive event */
 199:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_ALTERNATIVE_RECEIVE = USIC_CH_CCR_AIEN_Msk,   /**< Alternate receive event */
 200:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_BAUD_RATE_GENERATOR = USIC_CH_CCR_BRGIEN_Msk, /**< Baudrate generator event */
 201:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** 
 202:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_START_CONDITION_RECEIVED = USIC_CH_PCR_IICMode_SCRIEN_Msk,             /**< Star
 203:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_REPEATED_START_CONDITION_RECEIVED = USIC_CH_PCR_IICMode_RSCRIEN_Msk,   /**< Repe
 204:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_STOP_CONDITION_RECEIVED = USIC_CH_PCR_IICMode_PCRIEN_Msk,              /**< Stop
 205:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_NACK = USIC_CH_PCR_IICMode_NACKIEN_Msk,                                /**< NACK
 206:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_ARBITRATION_LOST = USIC_CH_PCR_IICMode_ARLIEN_Msk,                     /**< Arbi
 207:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_SLAVE_READ_REQUEST = USIC_CH_PCR_IICMode_SRRIEN_Msk,                   /**< Slav
 208:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_ERROR = USIC_CH_PCR_IICMode_ERRIEN_Msk,	                              /**< Error
 209:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_ACK = USIC_CH_PCR_IICMode_ACKIEN_Msk                                   /**< ACK 
 210:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** } XMC_I2C_CH_EVENT_t;
 211:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** 
 212:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** /**
 213:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @brief I2C input stage selection
 214:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  */
 215:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** typedef enum XMC_I2C_CH_INPUT
 216:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** {
 217:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   XMC_I2C_CH_INPUT_SDA = 0U,   /**< selection of sda input stage */
 218:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** #if UC_FAMILY == XMC1
 219:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   XMC_I2C_CH_INPUT_SDA1 = 3U,
 220:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   XMC_I2C_CH_INPUT_SDA2 = 5U,
 221:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** #endif  
 222:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   XMC_I2C_CH_INPUT_SCL = 1U,  /**< selection of scl input stage */
 223:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** #if UC_FAMILY == XMC1
 224:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   XMC_I2C_CH_INPUT_SCL1 = 4U
 225:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** #endif  
 226:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** } XMC_I2C_CH_INPUT_t;
 227:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** 
 228:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** /**
 229:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * I2C channel interrupt node pointers
 230:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  */
 231:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** typedef enum XMC_I2C_CH_INTERRUPT_NODE_POINTER
 232:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** {
 233:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   XMC_I2C_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT      = XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSM
 234:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   XMC_I2C_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER     = XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSM
 235:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   XMC_I2C_CH_INTERRUPT_NODE_POINTER_RECEIVE             = XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIV
 236:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   XMC_I2C_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE   = XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERN
 237:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   XMC_I2C_CH_INTERRUPT_NODE_POINTER_PROTOCOL            = XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOC
 238:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** } XMC_I2C_CH_INTERRUPT_NODE_POINTER_t;
 239:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** 
 240:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** /*******************************************************************************
 241:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * DATA STRUCTURES
 242:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *******************************************************************************/
 243:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** /**
 244:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @brief I2C_CH configuration structure
 245:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  */
 246:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** typedef struct XMC_I2C_CH_CONFIG
 247:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** {
 248:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   uint32_t baudrate;   /**< baud rate configuration upto max of 400KHz */
 249:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   uint16_t address;    /**< slave address 
 250:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****                             A 7-bit address needs to be left shifted it by 1.
 251:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****                             A 10-bit address needs to be ORed with XMC_I2C_10BIT_ADDR_GROUP. */
 252:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** } XMC_I2C_CH_CONFIG_t;
 253:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** 
 254:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** /*******************************************************************************
 255:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * API PROTOTYPES
 256:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *******************************************************************************/
 257:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** 
 258:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** #ifdef __cplusplus
 259:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** extern "C" {
 260:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** #endif
 261:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** 
 262:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** /**
 263:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 264:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @param config  Constant pointer to I2C channel config structure of type @ref XMC_I2C_CH_CONFIG_t
 265:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 266:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @return None<br>
 267:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 268:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 269:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * Initializes the I2C \a channel.<br>
 270:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 271:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par
 272:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * Configures the data format in SCTR register. Sets the slave address, baud rate. Enables transmit
 273:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * and disables parity generation.<br>
 274:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 275:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 276:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * XMC_USIC_CH_Enable()\n\n
 277:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  */
 278:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** 
 279:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** void XMC_I2C_CH_Init(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config);
 280:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** 
 281:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** /**
 282:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 283:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @param rate  baud rate of I2C channel
 284:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 285:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @return None<br>
 286:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 287:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 288:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * Sets the rate of I2C \a channel.
 289:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 290:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par<b>Note:</b><br>
 291:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * Standard over sampling is considered if rate <= 100KHz and fast over sampling is considered if r
 292:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 293:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 294:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * XMC_USIC_CH_SetBaudrate()\n\n
 295:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  */
 296:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrate(XMC_USIC_CH_t *const channel, const uint32_t rate);
 297:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** 
 298:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** /**
 299:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 300:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 301:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @return None<br>
 302:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 303:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 304:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * Starts the I2C \a channel.
 305:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 306:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par
 307:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * Sets the USIC input operation mode to I2C mode using CCR register.
 308:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 309:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 310:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * XMC_USIC_CH_SetMode()\n\n
 311:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  */
 312:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** __STATIC_INLINE void XMC_I2C_CH_Start(XMC_USIC_CH_t *const channel)
 313:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** {
 314:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_I2C);
 315:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** }
 316:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** 
 317:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** /**
 318:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 319:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 320:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @return @ref XMC_I2C_CH_STATUS_t<br>
 321:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 322:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 323:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * Stops the I2C \a channel.<br>
 324:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 325:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par
 326:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * Sets the USIC input operation to IDLE mode using CCR register.
 327:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 328:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 329:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * XMC_USIC_CH_SetMode()\n\n
 330:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  */
 331:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** XMC_I2C_CH_STATUS_t XMC_I2C_CH_Stop(XMC_USIC_CH_t *const channel);
 332:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** 
 333:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** /**
 334:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 335:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @param service_request Service request number in the range of 0-5
 336:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @return None<br>
 337:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 338:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 339:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * Sets the interrupt node for protocol interrupt.<br>
 340:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 341:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par
 342:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * To generate interrupt for an event, node pointer should be configured with service request numbe
 343:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * The NVIC node gets linked to the interrupt event by doing so.<br>
 344:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 345:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par<b>Note:</b><br>
 346:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * NVIC node should be separately enabled to generate the interrupt. After setting the node pointer
 347:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 348:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 349:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * XMC_I2C_CH_EnableEvent(), NVIC_SetPriority(), NVIC_EnableIRQ(), XMC_I2C_CH_SetInputSource()<br>
 350:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  */
 351:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** __STATIC_INLINE void XMC_I2C_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
 352:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****                                                         const uint8_t service_request)
 353:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** {
 354:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   XMC_USIC_CH_SetInterruptNodePointer(channel, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL, service
 355:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** }
 356:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** 
 357:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** 
 358:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** /**
 359:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 360:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * 				  \b Range: @ref XMC_I2C0_CH0, @ref XMC_I2C0_CH1,@ref XMC_I2C1_CH0,@ref XMC_I2C1_CH1,@ref XM
 361:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @param  interrupt_node Interrupt node pointer to be configured. \n
 362:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * 						  \b Range: @ref XMC_SPI_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT,
 363:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * 						  			@ref XMC_SPI_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER etc.
 364:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @param service_request Service request number.\n
 365:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * 						  \b Range: 0 to 5.
 366:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @return None
 367:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 368:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par<b>Description</b><br>
 369:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * Sets the interrupt node for USIC channel events. \n\n
 370:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * For an event to generate interrupt, node pointer should be configured with service request(SR0, 
 371:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * The NVIC node gets linked to the interrupt event by doing so.<br>
 372:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * Note: NVIC node should be separately enabled to generate the interrupt.
 373:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 374:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><BR>
 375:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * XMC_I2C_CH_EnableEvent() \n\n\n
 376:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  */
 377:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** __STATIC_INLINE void XMC_I2C_CH_SelectInterruptNodePointer(XMC_USIC_CH_t *const channel,
 378:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****                                                            const XMC_I2C_CH_INTERRUPT_NODE_POINTER_
 379:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****                                                            const uint32_t service_request)
 380:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** {
 381:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   XMC_USIC_CH_SetInterruptNodePointer(channel, (XMC_USIC_CH_INTERRUPT_NODE_POINTER_t)interrupt_node
 382:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** 		                                       (uint32_t)service_request);
 383:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** }
 384:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** 
 385:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** /**
 386:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 387:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * 				   \b Range: @ref XMC_I2C0_CH0, @ref XMC_I2C0_CH1,@ref XMC_I2C1_CH0,@ref XMC_I2C1_CH1,@ref X
 388:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @param  service_request_line service request number of the event to be triggered. \n
 389:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * 			\b Range: 0 to 5.
 390:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @return None
 391:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 392:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par<b>Description</b><br>
 393:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * Trigger a I2C interrupt service request.\n\n
 394:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * When the I2C service request is triggered, the NVIC interrupt associated with it will be
 395:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * generated if enabled.
 396:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 397:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><BR>
 398:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * XMC_I2C_CH_SelectInterruptNodePointer() \n\n\n
 399:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  */
 400:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** __STATIC_INLINE void XMC_I2C_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t 
 401:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** {
 402:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   XMC_USIC_CH_TriggerServiceRequest(channel, (uint32_t)service_request_line);
 403:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** }
 404:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** 
 405:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** /**
 406:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 407:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @param input I2C channel input stage of type @ref XMC_I2C_CH_INPUT_t
 408:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @param source Input source select for the input stage(0->DX0A, 1->DX1A, .. 7->DX7G)
 409:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @return None<br>
 410:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 411:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 412:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * Sets the input source for I2C \a channel.<br>
 413:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * Defines the input stage for the corresponding input line.
 414:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 415:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @note After configuring the input source for corresponding channel, interrupt node pointer is se
 416:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 417:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 418:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * XMC_USIC_CH_SetInptSource(), XMC_USIC_CH_SetInterruptNodePointer()
 419:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 420:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  */
 421:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** __STATIC_INLINE void XMC_I2C_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_INPUT
 422:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** {
 423:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   channel->DXCR[input] =  (uint32_t)(channel->DXCR[input] & (~USIC_CH_DX0CR_INSW_Msk)) | USIC_CH_DX
 424:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 425:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** }
 426:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** 
 427:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** /**
 428:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 429:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @param address I2C slave address
 430:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @return None<br>
 431:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 432:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 433:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * Sets the I2C \a channel slave address.<br>
 434:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 435:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par
 436:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * Address is set in PCR_IICMode register by checking if it is in 10-bit address group or 7-bit add
 437:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * (If first five bits of address are assigned with 0xF0, then address mode is 10-bit mode otherwis
 438:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 439:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 440:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * XMC_I2C_CH_GetSlaveAddress()\n\n
 441:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  */
 442:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address);
 443:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** 
 444:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** /**
 445:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel handler of type @ref XMC_USIC_CH_t
 446:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @return uint16_t Slave address<br>
 447:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 448:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 449:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * Gets the I2C \a channel slave address.<br>
 450:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 451:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par
 452:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * Returns the address using PCR_IICMode register by checking if it is in 10-bit address group or 7
 453:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * (If first five bits of address are assigned with 0xF0, then address mode is considered as 10-bit
 454:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 455:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 456:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * XMC_I2C_CH_SetSlaveAddress()\n\n
 457:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  */
 458:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** uint16_t XMC_I2C_CH_GetSlaveAddress(const XMC_USIC_CH_t *const channel);
 459:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** 
 460:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** /**
 461:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 462:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @param addr I2C master address
 463:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @param command read/write command
 464:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @return None<br>
 465:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 466:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 467:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * Starts the I2C master \a channel.<br>
 468:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 469:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par
 470:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * Sends the Start condition with read/write command by updating IN/TBUF register based on FIFO/non
 471:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 472:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 473:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit(), XMC_USIC_CH_GetTransmitBufferStatus()\n\n
 474:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  */
 475:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** void XMC_I2C_CH_MasterStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD
 476:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** 
 477:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** /**
 478:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 479:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @param addr I2C master address
 480:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @param command read/write command
 481:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @return None<br>
 482:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 483:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 484:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * Sends the repeated start condition from I2C master \a channel.<br>
 485:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 486:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par
 487:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * Sends the repeated start condition with read/write command by updating IN/TBUF register based on
 488:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 489:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 490:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit(), XMC_USIC_CH_GetTransmitBufferStatus()\n\n
 491:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  */
 492:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** void XMC_I2C_CH_MasterRepeatedStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2
 493:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** 
 494:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** /**
 495:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 496:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @return None<br>
 497:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 498:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 499:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * Stops the I2C master \a channel.<br>
 500:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 501:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par
 502:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   * Reads the transmit buffer status is busy or not and thereby updates IN/TBUF register based on F
 503:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 504:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 505:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit(), XMC_USIC_CH_GetTransmitBufferStatus()\n\n
 506:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  */
 507:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** void XMC_I2C_CH_MasterStop(XMC_USIC_CH_t *const channel);
 508:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** 
 509:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** /**
 510:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 511:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @param data data to transmit from I2C \a channel
 512:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @return None<br>
 513:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 514:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 515:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * Transmit the data from the I2C master \a channel.<br>
 516:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 517:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par
 518:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * Reads the transmit buffer status is busy or not and thereby updates IN/TBUF register based on FI
 519:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 520:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 521:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * XMC_USIC_CH_GetTransmitBufferStatus()\n\n
 522:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  */
 523:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** void XMC_I2C_CH_MasterTransmit(XMC_USIC_CH_t *const channel, const uint8_t data);
 524:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** 
 525:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** /**
 526:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 527:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @param data data to transmit from I2C \a channel
 528:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @return None<br>
 529:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 530:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 531:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * Transmit the data from the I2C slave \a channel.<br>
 532:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 533:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par
 534:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * Reads the transmit buffer status is busy or not and thereby updates IN/TBUF register based on FI
 535:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 536:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 537:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * XMC_USIC_CH_GetTransmitBufferStatus(),XMC_I2C_CH_ClearStatusFlag()\n\n
 538:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  */
 539:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** void XMC_I2C_CH_SlaveTransmit(XMC_USIC_CH_t *const channel, const uint8_t data);
 540:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** 
 541:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** /**
 542:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 543:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @return None<br>
 544:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 545:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 546:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * Sends the Ack request from I2C master \a channel.<br>
 547:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 548:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par
 549:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** * Reads the transmit buffer status is busy or not and thereby updates IN/TBUF register based on FIF
 550:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 551:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 552:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit()\n\n
 553:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  */
 554:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** void XMC_I2C_CH_MasterReceiveAck(XMC_USIC_CH_t *const channel);
 555:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** 
 556:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** /**
 557:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 558:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @return None<br>
 559:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 560:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 561:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * Sends the Nack request from I2C master \a channel.<br>
 562:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 563:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par
 564:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * Reads the transmit buffer status is busy or not and thereby updates IN/TBUF register based on FI
 565:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 566:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 567:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit()\n\n
 568:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  */
 569:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** void XMC_I2C_CH_MasterReceiveNack(XMC_USIC_CH_t *const channel);
 570:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** 
 571:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** /**
 572:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 573:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @return uint8_t OUTR/RBUF register data<br>
 574:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 575:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 576:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * Reads the data from I2C \a channel.<br>
 577:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 578:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par
 579:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * Data is read by using OUTR/RBUF register based on FIFO/non-FIFO modes.
 580:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 581:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 582:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit()\n\n
 583:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  */
 584:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** uint8_t XMC_I2C_CH_GetReceivedData(const XMC_USIC_CH_t *const channel);
 585:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** 
 586:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** /**
 587:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 588:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @return uint8_t Receiver status flag<br>
 589:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 590:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 591:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * Gets the receiver status of I2C \a channel using RBUF register of bits 8-12 which gives informat
 592:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 593:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 594:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit()\n\n
 595:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  */
 596:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** __STATIC_INLINE uint8_t XMC_I2C_CH_GetReceiverStatusFlag(XMC_USIC_CH_t *const channel)
 597:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** {
 598:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   return((uint8_t)((channel->RBUF) >> 8U));
 599:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** }
 600:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** 
 601:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** /**
 602:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 603:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @param event ORed values of @ref XMC_I2C_CH_EVENT_t enum
 604:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @return None<br>
 605:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 606:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 607:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * Enables the input parameter @ref XMC_I2C_CH_EVENT_t event using PCR_IICMode register.
 608:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 609:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 610:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * XMC_I2C_CH_DisableEvent()\n\n
 611:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  */
 612:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** void XMC_I2C_CH_EnableEvent(XMC_USIC_CH_t *const channel, uint32_t event);
 613:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** 
 614:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** /**
 615:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 616:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @param event ORed values of @ref XMC_I2C_CH_EVENT_t enum
 617:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @return None<br>
 618:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 619:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 620:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * Disables the input parameter @ref XMC_I2C_CH_EVENT_t event using PCR_IICMode register.
 621:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 622:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 623:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * XMC_I2C_CH_EnableEvent()\n\n
 624:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  */
 625:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** void XMC_I2C_CH_DisableEvent(XMC_USIC_CH_t *const channel, uint32_t event);
 626:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** 
 627:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** /**
 628:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 629:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @return uint32_t Status byte<br>
 630:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 631:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 632:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * Retrieves the status byte of I2C \a channel using PSR_IICMode register.\n
 633:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 634:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 635:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * XMC_I2C_CH_ClearStatusFlag()\n\n
 636:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  */
 637:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** __STATIC_INLINE uint32_t XMC_I2C_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
 638:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** {
 639:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   return (channel->PSR_IICMode);
 640:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** }
 641:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** 
 642:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** /**
 643:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 644:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @param flag Status flag
 645:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * @return None<br>
 646:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 647:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 648:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * Clears the status flag of I2C \a channel by setting the input parameter \a flag in PSCR register
 649:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  *
 650:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 651:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  * XMC_I2C_CH_GetStatusFlag()\n\n
 652:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****  */
 653:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** __STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
 654:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** {
 123              	 .loc 2 654 0
 124              	 .cfi_startproc
 125              	 
 126              	 
 127              	 
 128 0000 80B4     	 push {r7}
 129              	.LCFI12:
 130              	 .cfi_def_cfa_offset 4
 131              	 .cfi_offset 7,-4
 132 0002 83B0     	 sub sp,sp,#12
 133              	.LCFI13:
 134              	 .cfi_def_cfa_offset 16
 135 0004 00AF     	 add r7,sp,#0
 136              	.LCFI14:
 137              	 .cfi_def_cfa_register 7
 138 0006 7860     	 str r0,[r7,#4]
 139 0008 3960     	 str r1,[r7]
 655:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h ****   channel->PSCR |= flag;
 140              	 .loc 2 655 0
 141 000a 7B68     	 ldr r3,[r7,#4]
 142 000c DA6C     	 ldr r2,[r3,#76]
 143 000e 3B68     	 ldr r3,[r7]
 144 0010 1A43     	 orrs r2,r2,r3
 145 0012 7B68     	 ldr r3,[r7,#4]
 146 0014 DA64     	 str r2,[r3,#76]
 656:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_i2c.h **** }
 147              	 .loc 2 656 0
 148 0016 0C37     	 adds r7,r7,#12
 149              	.LCFI15:
 150              	 .cfi_def_cfa_offset 4
 151 0018 BD46     	 mov sp,r7
 152              	.LCFI16:
 153              	 .cfi_def_cfa_register 13
 154              	 
 155 001a 5DF8047B 	 ldr r7,[sp],#4
 156              	.LCFI17:
 157              	 .cfi_restore 7
 158              	 .cfi_def_cfa_offset 0
 159 001e 7047     	 bx lr
 160              	 .cfi_endproc
 161              	.LFE192:
 163              	 .section .text.XMC_I2C_CH_Init,"ax",%progbits
 164              	 .align 2
 165              	 .global XMC_I2C_CH_Init
 166              	 .thumb
 167              	 .thumb_func
 169              	XMC_I2C_CH_Init:
 170              	.LFB196:
 171              	 .file 3 "../Libraries/XMCLib/src/xmc_i2c.c"
   1:../Libraries/XMCLib/src/xmc_i2c.c **** /**
   2:../Libraries/XMCLib/src/xmc_i2c.c ****  * @file xmc_i2c.c
   3:../Libraries/XMCLib/src/xmc_i2c.c ****  * @date 2015-10-27
   4:../Libraries/XMCLib/src/xmc_i2c.c ****  *
   5:../Libraries/XMCLib/src/xmc_i2c.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc_i2c.c ****  **************************************************************************************************
   7:../Libraries/XMCLib/src/xmc_i2c.c ****  * XMClib v2.1.2 - XMC Peripheral Driver Library 
   8:../Libraries/XMCLib/src/xmc_i2c.c ****  *
   9:../Libraries/XMCLib/src/xmc_i2c.c ****  * Copyright (c) 2015, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc_i2c.c ****  * All rights reserved.                        
  11:../Libraries/XMCLib/src/xmc_i2c.c ****  *                                             
  12:../Libraries/XMCLib/src/xmc_i2c.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Libraries/XMCLib/src/xmc_i2c.c ****  * following conditions are met:   
  14:../Libraries/XMCLib/src/xmc_i2c.c ****  *                                                                              
  15:../Libraries/XMCLib/src/xmc_i2c.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Libraries/XMCLib/src/xmc_i2c.c ****  * disclaimer.                        
  17:../Libraries/XMCLib/src/xmc_i2c.c ****  * 
  18:../Libraries/XMCLib/src/xmc_i2c.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Libraries/XMCLib/src/xmc_i2c.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:../Libraries/XMCLib/src/xmc_i2c.c ****  * 
  21:../Libraries/XMCLib/src/xmc_i2c.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Libraries/XMCLib/src/xmc_i2c.c ****  * products derived from this software without specific prior written permission.                  
  23:../Libraries/XMCLib/src/xmc_i2c.c ****  *                                                                              
  24:../Libraries/XMCLib/src/xmc_i2c.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Libraries/XMCLib/src/xmc_i2c.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Libraries/XMCLib/src/xmc_i2c.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Libraries/XMCLib/src/xmc_i2c.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Libraries/XMCLib/src/xmc_i2c.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Libraries/XMCLib/src/xmc_i2c.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Libraries/XMCLib/src/xmc_i2c.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:../Libraries/XMCLib/src/xmc_i2c.c ****  *                                                                              
  32:../Libraries/XMCLib/src/xmc_i2c.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Libraries/XMCLib/src/xmc_i2c.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:../Libraries/XMCLib/src/xmc_i2c.c ****  **************************************************************************************************
  35:../Libraries/XMCLib/src/xmc_i2c.c ****  *
  36:../Libraries/XMCLib/src/xmc_i2c.c ****  * Change History
  37:../Libraries/XMCLib/src/xmc_i2c.c ****  * --------------
  38:../Libraries/XMCLib/src/xmc_i2c.c ****  *
  39:../Libraries/XMCLib/src/xmc_i2c.c ****  * 2015-02-20:
  40:../Libraries/XMCLib/src/xmc_i2c.c ****  *     - Initial <br>
  41:../Libraries/XMCLib/src/xmc_i2c.c ****  *      
  42:../Libraries/XMCLib/src/xmc_i2c.c ****  * 2015-05-20:
  43:../Libraries/XMCLib/src/xmc_i2c.c ****        - Modified XMC_I2C_CH_Stop() API for not setting to IDLE the channel if it is busy <br>
  44:../Libraries/XMCLib/src/xmc_i2c.c ****  *
  45:../Libraries/XMCLib/src/xmc_i2c.c ****  * 2015-06-20:
  46:../Libraries/XMCLib/src/xmc_i2c.c ****  *     - Removed GetDriverVersion API <br>
  47:../Libraries/XMCLib/src/xmc_i2c.c ****  *
  48:../Libraries/XMCLib/src/xmc_i2c.c ****  * 2015-08-14:
  49:../Libraries/XMCLib/src/xmc_i2c.c ****  *     - updated the XMC_I2C_CH_SetBaudrate API to support dynamic change from 400K to low frequenc
  50:../Libraries/XMCLib/src/xmc_i2c.c ****  *
  51:../Libraries/XMCLib/src/xmc_i2c.c ****  * 2015-09-01:
  52:../Libraries/XMCLib/src/xmc_i2c.c ****  *     - Modified XMC_I2C_CH_EnableEvent() and XMC_I2C_CH_DisableEvent() for supporting multiple ev
  53:../Libraries/XMCLib/src/xmc_i2c.c ****  *
  54:../Libraries/XMCLib/src/xmc_i2c.c ****  * 2015-10-02:
  55:../Libraries/XMCLib/src/xmc_i2c.c ****  *     - Fixed 10bit addressing
  56:../Libraries/XMCLib/src/xmc_i2c.c ****  *
  57:../Libraries/XMCLib/src/xmc_i2c.c ****  * @endcond 
  58:../Libraries/XMCLib/src/xmc_i2c.c ****  *
  59:../Libraries/XMCLib/src/xmc_i2c.c ****  */
  60:../Libraries/XMCLib/src/xmc_i2c.c **** 
  61:../Libraries/XMCLib/src/xmc_i2c.c **** /**************************************************************************************************
  62:../Libraries/XMCLib/src/xmc_i2c.c ****  * HEADER FILES
  63:../Libraries/XMCLib/src/xmc_i2c.c ****  **************************************************************************************************
  64:../Libraries/XMCLib/src/xmc_i2c.c **** #include <xmc_i2c.h>
  65:../Libraries/XMCLib/src/xmc_i2c.c **** 
  66:../Libraries/XMCLib/src/xmc_i2c.c **** /**************************************************************************************************
  67:../Libraries/XMCLib/src/xmc_i2c.c ****  * MACROS
  68:../Libraries/XMCLib/src/xmc_i2c.c ****  **************************************************************************************************
  69:../Libraries/XMCLib/src/xmc_i2c.c **** #define XMC_I2C_7BIT_ADDR_Pos   (8U)		/**< 7-bit address position */
  70:../Libraries/XMCLib/src/xmc_i2c.c **** #define TRANSMISSION_MODE       (3U)		/**< The shift control signal is considered active
  71:../Libraries/XMCLib/src/xmc_i2c.c ****                                                  without referring to the actual signal level. Data
  72:../Libraries/XMCLib/src/xmc_i2c.c ****                                                  frame transfer is possible after each edge of the 
  73:../Libraries/XMCLib/src/xmc_i2c.c **** #define WORDLENGTH              (7U)        /**< Word length */
  74:../Libraries/XMCLib/src/xmc_i2c.c **** #define SET_TDV                 (1U)		/**< Transmission data valid */
  75:../Libraries/XMCLib/src/xmc_i2c.c **** #define XMC_I2C_10BIT_ADDR_MASK (0x7C00U)   /**< Address mask for 10-bit mode */
  76:../Libraries/XMCLib/src/xmc_i2c.c **** 
  77:../Libraries/XMCLib/src/xmc_i2c.c **** /**************************************************************************************************
  78:../Libraries/XMCLib/src/xmc_i2c.c ****  * ENUMS
  79:../Libraries/XMCLib/src/xmc_i2c.c ****  **************************************************************************************************
  80:../Libraries/XMCLib/src/xmc_i2c.c **** 
  81:../Libraries/XMCLib/src/xmc_i2c.c **** typedef enum XMC_I2C_CH_TDF
  82:../Libraries/XMCLib/src/xmc_i2c.c **** {
  83:../Libraries/XMCLib/src/xmc_i2c.c ****   XMC_I2C_CH_TDF_MASTER_SEND =         0U,
  84:../Libraries/XMCLib/src/xmc_i2c.c ****   XMC_I2C_CH_TDF_SLAVE_SEND =          (uint32_t)1U << 8U,
  85:../Libraries/XMCLib/src/xmc_i2c.c ****   XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK =  (uint32_t)2U << 8U,
  86:../Libraries/XMCLib/src/xmc_i2c.c ****   XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK = (uint32_t)3U << 8U,
  87:../Libraries/XMCLib/src/xmc_i2c.c ****   XMC_I2C_CH_TDF_MASTER_START =        (uint32_t)4U << 8U,
  88:../Libraries/XMCLib/src/xmc_i2c.c ****   XMC_I2C_CH_TDF_MASTER_RESTART =      (uint32_t)5U << 8U,
  89:../Libraries/XMCLib/src/xmc_i2c.c ****   XMC_I2C_CH_TDF_MASTER_STOP =         (uint32_t)6U << 8U
  90:../Libraries/XMCLib/src/xmc_i2c.c **** } XMC_I2C_CH_TDF_t;
  91:../Libraries/XMCLib/src/xmc_i2c.c **** 
  92:../Libraries/XMCLib/src/xmc_i2c.c **** typedef enum XMC_I2C_CH_MAX_SPEED
  93:../Libraries/XMCLib/src/xmc_i2c.c **** {
  94:../Libraries/XMCLib/src/xmc_i2c.c ****   XMC_I2C_CH_MAX_SPEED_STANDARD = 100000U,
  95:../Libraries/XMCLib/src/xmc_i2c.c ****   XMC_I2C_CH_MAX_SPEED_FAST = 400000U
  96:../Libraries/XMCLib/src/xmc_i2c.c **** } XMC_I2C_CH_MAX_SPEED_t;
  97:../Libraries/XMCLib/src/xmc_i2c.c **** 
  98:../Libraries/XMCLib/src/xmc_i2c.c **** typedef enum XMC_I2C_CH_CLOCK_OVERSAMPLING
  99:../Libraries/XMCLib/src/xmc_i2c.c **** {
 100:../Libraries/XMCLib/src/xmc_i2c.c ****   XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD = 10U,
 101:../Libraries/XMCLib/src/xmc_i2c.c ****   XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST     = 25U
 102:../Libraries/XMCLib/src/xmc_i2c.c **** } XMC_I2C_CH_CLOCK_OVERSAMPLINGS_t;
 103:../Libraries/XMCLib/src/xmc_i2c.c **** 
 104:../Libraries/XMCLib/src/xmc_i2c.c **** /**************************************************************************************************
 105:../Libraries/XMCLib/src/xmc_i2c.c ****  * API IMPLEMENTATION
 106:../Libraries/XMCLib/src/xmc_i2c.c ****  **************************************************************************************************
 107:../Libraries/XMCLib/src/xmc_i2c.c **** /* Initializes the USIC channel by setting the data format, slave address, baudrate, transfer buffe
 108:../Libraries/XMCLib/src/xmc_i2c.c **** void XMC_I2C_CH_Init(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config)
 109:../Libraries/XMCLib/src/xmc_i2c.c **** {
 172              	 .loc 3 109 0
 173              	 .cfi_startproc
 174              	 
 175              	 
 176 0000 80B5     	 push {r7,lr}
 177              	.LCFI18:
 178              	 .cfi_def_cfa_offset 8
 179              	 .cfi_offset 7,-8
 180              	 .cfi_offset 14,-4
 181 0002 82B0     	 sub sp,sp,#8
 182              	.LCFI19:
 183              	 .cfi_def_cfa_offset 16
 184 0004 00AF     	 add r7,sp,#0
 185              	.LCFI20:
 186              	 .cfi_def_cfa_register 7
 187 0006 7860     	 str r0,[r7,#4]
 188 0008 3960     	 str r1,[r7]
 110:../Libraries/XMCLib/src/xmc_i2c.c ****   XMC_USIC_CH_Enable(channel);
 189              	 .loc 3 110 0
 190 000a 7868     	 ldr r0,[r7,#4]
 191 000c FFF7FEFF 	 bl XMC_USIC_CH_Enable
 111:../Libraries/XMCLib/src/xmc_i2c.c ****   
 112:../Libraries/XMCLib/src/xmc_i2c.c ****   /* Data format configuration */
 113:../Libraries/XMCLib/src/xmc_i2c.c ****   channel->SCTR = ((uint32_t)TRANSMISSION_MODE << (uint32_t)USIC_CH_SCTR_TRM_Pos) | /* Transmision 
 192              	 .loc 3 113 0
 193 0010 7B68     	 ldr r3,[r7,#4]
 194 0012 0E4A     	 ldr r2,.L6
 195 0014 5A63     	 str r2,[r3,#52]
 114:../Libraries/XMCLib/src/xmc_i2c.c ****                   ((uint32_t)WORDLENGTH << (uint32_t)USIC_CH_SCTR_WLE_Pos) | /* 8 data bits */
 115:../Libraries/XMCLib/src/xmc_i2c.c ****                   USIC_CH_SCTR_FLE_Msk |           /* unlimited data flow */
 116:../Libraries/XMCLib/src/xmc_i2c.c ****                   USIC_CH_SCTR_SDIR_Msk |          /* MSB shifted first */
 117:../Libraries/XMCLib/src/xmc_i2c.c ****                   USIC_CH_SCTR_PDL_Msk;            /* Passive Data Level */
 118:../Libraries/XMCLib/src/xmc_i2c.c **** 
 119:../Libraries/XMCLib/src/xmc_i2c.c ****   XMC_I2C_CH_SetSlaveAddress(channel, config->address);
 196              	 .loc 3 119 0
 197 0016 3B68     	 ldr r3,[r7]
 198 0018 9B88     	 ldrh r3,[r3,#4]
 199 001a 7868     	 ldr r0,[r7,#4]
 200 001c 1946     	 mov r1,r3
 201 001e FFF7FEFF 	 bl XMC_I2C_CH_SetSlaveAddress
 120:../Libraries/XMCLib/src/xmc_i2c.c ****   (void)XMC_I2C_CH_SetBaudrate(channel, config->baudrate);
 202              	 .loc 3 120 0
 203 0022 3B68     	 ldr r3,[r7]
 204 0024 1B68     	 ldr r3,[r3]
 205 0026 7868     	 ldr r0,[r7,#4]
 206 0028 1946     	 mov r1,r3
 207 002a FFF7FEFF 	 bl XMC_I2C_CH_SetBaudrate
 121:../Libraries/XMCLib/src/xmc_i2c.c ****     
 122:../Libraries/XMCLib/src/xmc_i2c.c ****   /* Enable transfer buffer */
 123:../Libraries/XMCLib/src/xmc_i2c.c ****   channel->TCSR = ((uint32_t)SET_TDV << (uint32_t)USIC_CH_TCSR_TDEN_Pos) | USIC_CH_TCSR_TDSSM_Msk;
 208              	 .loc 3 123 0
 209 002e 7B68     	 ldr r3,[r7,#4]
 210 0030 4FF4A062 	 mov r2,#1280
 211 0034 9A63     	 str r2,[r3,#56]
 124:../Libraries/XMCLib/src/xmc_i2c.c **** 
 125:../Libraries/XMCLib/src/xmc_i2c.c ****   /* Clear status flags */
 126:../Libraries/XMCLib/src/xmc_i2c.c ****   channel->PSCR = 0xFFFFFFFFU;
 212              	 .loc 3 126 0
 213 0036 7B68     	 ldr r3,[r7,#4]
 214 0038 4FF0FF32 	 mov r2,#-1
 215 003c DA64     	 str r2,[r3,#76]
 127:../Libraries/XMCLib/src/xmc_i2c.c **** 
 128:../Libraries/XMCLib/src/xmc_i2c.c ****   /* Disable parity generation */
 129:../Libraries/XMCLib/src/xmc_i2c.c ****   channel->CCR = 0x0U;
 216              	 .loc 3 129 0
 217 003e 7B68     	 ldr r3,[r7,#4]
 218 0040 0022     	 movs r2,#0
 219 0042 1A64     	 str r2,[r3,#64]
 130:../Libraries/XMCLib/src/xmc_i2c.c **** }
 220              	 .loc 3 130 0
 221 0044 0837     	 adds r7,r7,#8
 222              	.LCFI21:
 223              	 .cfi_def_cfa_offset 8
 224 0046 BD46     	 mov sp,r7
 225              	.LCFI22:
 226              	 .cfi_def_cfa_register 13
 227              	 
 228 0048 80BD     	 pop {r7,pc}
 229              	.L7:
 230 004a 00BF     	 .align 2
 231              	.L6:
 232 004c 03033F07 	 .word 121570051
 233              	 .cfi_endproc
 234              	.LFE196:
 236              	 .section .text.XMC_I2C_CH_SetSlaveAddress,"ax",%progbits
 237              	 .align 2
 238              	 .global XMC_I2C_CH_SetSlaveAddress
 239              	 .thumb
 240              	 .thumb_func
 242              	XMC_I2C_CH_SetSlaveAddress:
 243              	.LFB197:
 131:../Libraries/XMCLib/src/xmc_i2c.c **** /* Sets the slave address */
 132:../Libraries/XMCLib/src/xmc_i2c.c **** void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address)
 133:../Libraries/XMCLib/src/xmc_i2c.c **** {
 244              	 .loc 3 133 0
 245              	 .cfi_startproc
 246              	 
 247              	 
 248              	 
 249 0000 80B4     	 push {r7}
 250              	.LCFI23:
 251              	 .cfi_def_cfa_offset 4
 252              	 .cfi_offset 7,-4
 253 0002 83B0     	 sub sp,sp,#12
 254              	.LCFI24:
 255              	 .cfi_def_cfa_offset 16
 256 0004 00AF     	 add r7,sp,#0
 257              	.LCFI25:
 258              	 .cfi_def_cfa_register 7
 259 0006 7860     	 str r0,[r7,#4]
 260 0008 0B46     	 mov r3,r1
 261 000a 7B80     	 strh r3,[r7,#2]
 134:../Libraries/XMCLib/src/xmc_i2c.c ****   if ((address & XMC_I2C_10BIT_ADDR_MASK) == XMC_I2C_10BIT_ADDR_GROUP)
 262              	 .loc 3 134 0
 263 000c 7B88     	 ldrh r3,[r7,#2]
 264 000e 03F4F843 	 and r3,r3,#31744
 265 0012 B3F5F04F 	 cmp r3,#30720
 266 0016 09D1     	 bne .L9
 135:../Libraries/XMCLib/src/xmc_i2c.c ****   {
 136:../Libraries/XMCLib/src/xmc_i2c.c ****     channel->PCR_IICMode = (address & 0xffU) | ((address << 1) & 0xfe00U);
 267              	 .loc 3 136 0
 268 0018 7B88     	 ldrh r3,[r7,#2]
 269 001a DAB2     	 uxtb r2,r3
 270 001c 7B88     	 ldrh r3,[r7,#2]
 271 001e 5B00     	 lsls r3,r3,#1
 272 0020 03F47E43 	 and r3,r3,#65024
 273 0024 1A43     	 orrs r2,r2,r3
 274 0026 7B68     	 ldr r3,[r7,#4]
 275 0028 DA63     	 str r2,[r3,#60]
 276 002a 03E0     	 b .L8
 277              	.L9:
 137:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 138:../Libraries/XMCLib/src/xmc_i2c.c ****   else
 139:../Libraries/XMCLib/src/xmc_i2c.c ****   {
 140:../Libraries/XMCLib/src/xmc_i2c.c ****     channel->PCR_IICMode = ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
 278              	 .loc 3 140 0
 279 002c 7B88     	 ldrh r3,[r7,#2]
 280 002e 1A02     	 lsls r2,r3,#8
 281 0030 7B68     	 ldr r3,[r7,#4]
 282 0032 DA63     	 str r2,[r3,#60]
 283              	.L8:
 141:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 142:../Libraries/XMCLib/src/xmc_i2c.c **** }
 284              	 .loc 3 142 0
 285 0034 0C37     	 adds r7,r7,#12
 286              	.LCFI26:
 287              	 .cfi_def_cfa_offset 4
 288 0036 BD46     	 mov sp,r7
 289              	.LCFI27:
 290              	 .cfi_def_cfa_register 13
 291              	 
 292 0038 5DF8047B 	 ldr r7,[sp],#4
 293              	.LCFI28:
 294              	 .cfi_restore 7
 295              	 .cfi_def_cfa_offset 0
 296 003c 7047     	 bx lr
 297              	 .cfi_endproc
 298              	.LFE197:
 300 003e 00BF     	 .section .text.XMC_I2C_CH_GetSlaveAddress,"ax",%progbits
 301              	 .align 2
 302              	 .global XMC_I2C_CH_GetSlaveAddress
 303              	 .thumb
 304              	 .thumb_func
 306              	XMC_I2C_CH_GetSlaveAddress:
 307              	.LFB198:
 143:../Libraries/XMCLib/src/xmc_i2c.c **** /* Read the slave address */
 144:../Libraries/XMCLib/src/xmc_i2c.c **** uint16_t XMC_I2C_CH_GetSlaveAddress(const XMC_USIC_CH_t *const channel)
 145:../Libraries/XMCLib/src/xmc_i2c.c **** {
 308              	 .loc 3 145 0
 309              	 .cfi_startproc
 310              	 
 311              	 
 312              	 
 313 0000 80B4     	 push {r7}
 314              	.LCFI29:
 315              	 .cfi_def_cfa_offset 4
 316              	 .cfi_offset 7,-4
 317 0002 85B0     	 sub sp,sp,#20
 318              	.LCFI30:
 319              	 .cfi_def_cfa_offset 24
 320 0004 00AF     	 add r7,sp,#0
 321              	.LCFI31:
 322              	 .cfi_def_cfa_register 7
 323 0006 7860     	 str r0,[r7,#4]
 146:../Libraries/XMCLib/src/xmc_i2c.c ****   uint32_t address = channel->PCR_IICMode & (uint32_t)USIC_CH_PCR_IICMode_SLAD_Msk;
 324              	 .loc 3 146 0
 325 0008 7B68     	 ldr r3,[r7,#4]
 326 000a DB6B     	 ldr r3,[r3,#60]
 327 000c 9BB2     	 uxth r3,r3
 328 000e FB60     	 str r3,[r7,#12]
 147:../Libraries/XMCLib/src/xmc_i2c.c ****   
 148:../Libraries/XMCLib/src/xmc_i2c.c ****   if ((address & 0xffU) == 0U)
 329              	 .loc 3 148 0
 330 0010 FB68     	 ldr r3,[r7,#12]
 331 0012 DBB2     	 uxtb r3,r3
 332 0014 002B     	 cmp r3,#0
 333 0016 03D1     	 bne .L12
 149:../Libraries/XMCLib/src/xmc_i2c.c ****   {
 150:../Libraries/XMCLib/src/xmc_i2c.c ****     address = address >> XMC_I2C_7BIT_ADDR_Pos;
 334              	 .loc 3 150 0
 335 0018 FB68     	 ldr r3,[r7,#12]
 336 001a 1B0A     	 lsrs r3,r3,#8
 337 001c FB60     	 str r3,[r7,#12]
 338 001e 07E0     	 b .L13
 339              	.L12:
 151:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 152:../Libraries/XMCLib/src/xmc_i2c.c ****   else
 153:../Libraries/XMCLib/src/xmc_i2c.c ****   {
 154:../Libraries/XMCLib/src/xmc_i2c.c ****     address = (address & 0xffU) | ((address >> 1) & 0x0300U);
 340              	 .loc 3 154 0
 341 0020 FB68     	 ldr r3,[r7,#12]
 342 0022 DAB2     	 uxtb r2,r3
 343 0024 FB68     	 ldr r3,[r7,#12]
 344 0026 5B08     	 lsrs r3,r3,#1
 345 0028 03F44073 	 and r3,r3,#768
 346 002c 1343     	 orrs r3,r3,r2
 347 002e FB60     	 str r3,[r7,#12]
 348              	.L13:
 155:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 156:../Libraries/XMCLib/src/xmc_i2c.c ****   
 157:../Libraries/XMCLib/src/xmc_i2c.c ****   return (uint16_t)address;
 349              	 .loc 3 157 0
 350 0030 FB68     	 ldr r3,[r7,#12]
 351 0032 9BB2     	 uxth r3,r3
 158:../Libraries/XMCLib/src/xmc_i2c.c **** }
 352              	 .loc 3 158 0
 353 0034 1846     	 mov r0,r3
 354 0036 1437     	 adds r7,r7,#20
 355              	.LCFI32:
 356              	 .cfi_def_cfa_offset 4
 357 0038 BD46     	 mov sp,r7
 358              	.LCFI33:
 359              	 .cfi_def_cfa_register 13
 360              	 
 361 003a 5DF8047B 	 ldr r7,[sp],#4
 362              	.LCFI34:
 363              	 .cfi_restore 7
 364              	 .cfi_def_cfa_offset 0
 365 003e 7047     	 bx lr
 366              	 .cfi_endproc
 367              	.LFE198:
 369              	 .section .text.XMC_I2C_CH_SetBaudrate,"ax",%progbits
 370              	 .align 2
 371              	 .global XMC_I2C_CH_SetBaudrate
 372              	 .thumb
 373              	 .thumb_func
 375              	XMC_I2C_CH_SetBaudrate:
 376              	.LFB199:
 159:../Libraries/XMCLib/src/xmc_i2c.c **** /* Sets the baudrate and oversampling based on standard speed or fast speed */
 160:../Libraries/XMCLib/src/xmc_i2c.c **** XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate)
 161:../Libraries/XMCLib/src/xmc_i2c.c **** {
 377              	 .loc 3 161 0
 378              	 .cfi_startproc
 379              	 
 380              	 
 381 0000 80B5     	 push {r7,lr}
 382              	.LCFI35:
 383              	 .cfi_def_cfa_offset 8
 384              	 .cfi_offset 7,-8
 385              	 .cfi_offset 14,-4
 386 0002 84B0     	 sub sp,sp,#16
 387              	.LCFI36:
 388              	 .cfi_def_cfa_offset 24
 389 0004 00AF     	 add r7,sp,#0
 390              	.LCFI37:
 391              	 .cfi_def_cfa_register 7
 392 0006 7860     	 str r0,[r7,#4]
 393 0008 3960     	 str r1,[r7]
 162:../Libraries/XMCLib/src/xmc_i2c.c ****   XMC_I2C_CH_STATUS_t status;
 163:../Libraries/XMCLib/src/xmc_i2c.c ****   
 164:../Libraries/XMCLib/src/xmc_i2c.c ****   status = XMC_I2C_CH_STATUS_ERROR;
 394              	 .loc 3 164 0
 395 000a 0123     	 movs r3,#1
 396 000c FB73     	 strb r3,[r7,#15]
 165:../Libraries/XMCLib/src/xmc_i2c.c ****   
 166:../Libraries/XMCLib/src/xmc_i2c.c ****   if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
 397              	 .loc 3 166 0
 398 000e 3B68     	 ldr r3,[r7]
 399 0010 174A     	 ldr r2,.L22
 400 0012 9342     	 cmp r3,r2
 401 0014 10D8     	 bhi .L16
 167:../Libraries/XMCLib/src/xmc_i2c.c ****   {
 168:../Libraries/XMCLib/src/xmc_i2c.c **** 		channel->PCR_IICMode &= (uint32_t)~USIC_CH_PCR_IICMode_STIM_Msk;
 402              	 .loc 3 168 0
 403 0016 7B68     	 ldr r3,[r7,#4]
 404 0018 DB6B     	 ldr r3,[r3,#60]
 405 001a 23F40032 	 bic r2,r3,#131072
 406 001e 7B68     	 ldr r3,[r7,#4]
 407 0020 DA63     	 str r2,[r3,#60]
 169:../Libraries/XMCLib/src/xmc_i2c.c ****     if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD) ==
 408              	 .loc 3 169 0
 409 0022 7868     	 ldr r0,[r7,#4]
 410 0024 3968     	 ldr r1,[r7]
 411 0026 0A22     	 movs r2,#10
 412 0028 FFF7FEFF 	 bl XMC_USIC_CH_SetBaudrate
 413 002c 0346     	 mov r3,r0
 414 002e 002B     	 cmp r3,#0
 415 0030 19D1     	 bne .L18
 170:../Libraries/XMCLib/src/xmc_i2c.c ****     {
 171:../Libraries/XMCLib/src/xmc_i2c.c ****       status = XMC_I2C_CH_STATUS_OK;
 416              	 .loc 3 171 0
 417 0032 0023     	 movs r3,#0
 418 0034 FB73     	 strb r3,[r7,#15]
 419 0036 16E0     	 b .L18
 420              	.L16:
 172:../Libraries/XMCLib/src/xmc_i2c.c ****     }
 173:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 174:../Libraries/XMCLib/src/xmc_i2c.c ****   else if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_FAST)
 421              	 .loc 3 174 0
 422 0038 3B68     	 ldr r3,[r7]
 423 003a 0E4A     	 ldr r2,.L22+4
 424 003c 9342     	 cmp r3,r2
 425 003e 10D8     	 bhi .L19
 175:../Libraries/XMCLib/src/xmc_i2c.c ****   {
 176:../Libraries/XMCLib/src/xmc_i2c.c ****     channel->PCR_IICMode |= (uint32_t)USIC_CH_PCR_IICMode_STIM_Msk;
 426              	 .loc 3 176 0
 427 0040 7B68     	 ldr r3,[r7,#4]
 428 0042 DB6B     	 ldr r3,[r3,#60]
 429 0044 43F40032 	 orr r2,r3,#131072
 430 0048 7B68     	 ldr r3,[r7,#4]
 431 004a DA63     	 str r2,[r3,#60]
 177:../Libraries/XMCLib/src/xmc_i2c.c ****     if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST) == XMC
 432              	 .loc 3 177 0
 433 004c 7868     	 ldr r0,[r7,#4]
 434 004e 3968     	 ldr r1,[r7]
 435 0050 1922     	 movs r2,#25
 436 0052 FFF7FEFF 	 bl XMC_USIC_CH_SetBaudrate
 437 0056 0346     	 mov r3,r0
 438 0058 002B     	 cmp r3,#0
 439 005a 04D1     	 bne .L18
 178:../Libraries/XMCLib/src/xmc_i2c.c ****     {
 179:../Libraries/XMCLib/src/xmc_i2c.c ****       status = XMC_I2C_CH_STATUS_OK;
 440              	 .loc 3 179 0
 441 005c 0023     	 movs r3,#0
 442 005e FB73     	 strb r3,[r7,#15]
 443 0060 01E0     	 b .L18
 444              	.L19:
 180:../Libraries/XMCLib/src/xmc_i2c.c ****     }
 181:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 182:../Libraries/XMCLib/src/xmc_i2c.c ****   else 
 183:../Libraries/XMCLib/src/xmc_i2c.c ****   {
 184:../Libraries/XMCLib/src/xmc_i2c.c ****     status = XMC_I2C_CH_STATUS_ERROR;
 445              	 .loc 3 184 0
 446 0062 0123     	 movs r3,#1
 447 0064 FB73     	 strb r3,[r7,#15]
 448              	.L18:
 185:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 186:../Libraries/XMCLib/src/xmc_i2c.c ****   
 187:../Libraries/XMCLib/src/xmc_i2c.c ****   return status;
 449              	 .loc 3 187 0
 450 0066 FB7B     	 ldrb r3,[r7,#15]
 188:../Libraries/XMCLib/src/xmc_i2c.c **** }
 451              	 .loc 3 188 0
 452 0068 1846     	 mov r0,r3
 453 006a 1037     	 adds r7,r7,#16
 454              	.LCFI38:
 455              	 .cfi_def_cfa_offset 8
 456 006c BD46     	 mov sp,r7
 457              	.LCFI39:
 458              	 .cfi_def_cfa_register 13
 459              	 
 460 006e 80BD     	 pop {r7,pc}
 461              	.L23:
 462              	 .align 2
 463              	.L22:
 464 0070 A0860100 	 .word 100000
 465 0074 801A0600 	 .word 400000
 466              	 .cfi_endproc
 467              	.LFE199:
 469              	 .section .text.XMC_I2C_CH_MasterStart,"ax",%progbits
 470              	 .align 2
 471              	 .global XMC_I2C_CH_MasterStart
 472              	 .thumb
 473              	 .thumb_func
 475              	XMC_I2C_CH_MasterStart:
 476              	.LFB200:
 189:../Libraries/XMCLib/src/xmc_i2c.c **** /* Sends master start condition along with read/write command to IN/TBUF register based on FIFO/non
 190:../Libraries/XMCLib/src/xmc_i2c.c **** void XMC_I2C_CH_MasterStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD
 191:../Libraries/XMCLib/src/xmc_i2c.c **** {
 477              	 .loc 3 191 0
 478              	 .cfi_startproc
 479              	 
 480              	 
 481 0000 80B5     	 push {r7,lr}
 482              	.LCFI40:
 483              	 .cfi_def_cfa_offset 8
 484              	 .cfi_offset 7,-8
 485              	 .cfi_offset 14,-4
 486 0002 84B0     	 sub sp,sp,#16
 487              	.LCFI41:
 488              	 .cfi_def_cfa_offset 24
 489 0004 00AF     	 add r7,sp,#0
 490              	.LCFI42:
 491              	 .cfi_def_cfa_register 7
 492 0006 7860     	 str r0,[r7,#4]
 493 0008 0B46     	 mov r3,r1
 494 000a 7B80     	 strh r3,[r7,#2]
 495 000c 1346     	 mov r3,r2
 496 000e 7B70     	 strb r3,[r7,#1]
 192:../Libraries/XMCLib/src/xmc_i2c.c ****   uint32_t temp;
 193:../Libraries/XMCLib/src/xmc_i2c.c ****   
 194:../Libraries/XMCLib/src/xmc_i2c.c ****   temp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_START;
 497              	 .loc 3 194 0
 498 0010 7B88     	 ldrh r3,[r7,#2]
 499 0012 43F48063 	 orr r3,r3,#1024
 500 0016 9BB2     	 uxth r3,r3
 501 0018 FB60     	 str r3,[r7,#12]
 195:../Libraries/XMCLib/src/xmc_i2c.c ****   if (command == XMC_I2C_CH_CMD_READ)
 502              	 .loc 3 195 0
 503 001a 7B78     	 ldrb r3,[r7,#1]
 504 001c 012B     	 cmp r3,#1
 505 001e 03D1     	 bne .L25
 196:../Libraries/XMCLib/src/xmc_i2c.c ****   {
 197:../Libraries/XMCLib/src/xmc_i2c.c ****     temp |= 0x1U;
 506              	 .loc 3 197 0
 507 0020 FB68     	 ldr r3,[r7,#12]
 508 0022 43F00103 	 orr r3,r3,#1
 509 0026 FB60     	 str r3,[r7,#12]
 510              	.L25:
 198:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 199:../Libraries/XMCLib/src/xmc_i2c.c **** 
 200:../Libraries/XMCLib/src/xmc_i2c.c ****   /* Check FIFO size */
 201:../Libraries/XMCLib/src/xmc_i2c.c ****   if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 511              	 .loc 3 201 0
 512 0028 7B68     	 ldr r3,[r7,#4]
 513 002a D3F80831 	 ldr r3,[r3,#264]
 514 002e 03F0E063 	 and r3,r3,#117440512
 515 0032 002B     	 cmp r3,#0
 516 0034 10D1     	 bne .L26
 202:../Libraries/XMCLib/src/xmc_i2c.c ****   {
 203:../Libraries/XMCLib/src/xmc_i2c.c ****     while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 517              	 .loc 3 203 0
 518 0036 00BF     	 nop
 519              	.L27:
 520              	 .loc 3 203 0 is_stmt 0 discriminator 1
 521 0038 7868     	 ldr r0,[r7,#4]
 522 003a FFF7FEFF 	 bl XMC_USIC_CH_GetTransmitBufferStatus
 523 003e 0346     	 mov r3,r0
 524 0040 802B     	 cmp r3,#128
 525 0042 F9D0     	 beq .L27
 204:../Libraries/XMCLib/src/xmc_i2c.c **** 	{
 205:../Libraries/XMCLib/src/xmc_i2c.c ****       /* check TDV, wait until TBUF is ready */
 206:../Libraries/XMCLib/src/xmc_i2c.c ****     }
 207:../Libraries/XMCLib/src/xmc_i2c.c **** 
 208:../Libraries/XMCLib/src/xmc_i2c.c ****     /* clear PSR_TBIF */
 209:../Libraries/XMCLib/src/xmc_i2c.c ****     XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION
 526              	 .loc 3 209 0 is_stmt 1
 527 0044 7868     	 ldr r0,[r7,#4]
 528 0046 4FF40051 	 mov r1,#8192
 529 004a FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 210:../Libraries/XMCLib/src/xmc_i2c.c **** 
 211:../Libraries/XMCLib/src/xmc_i2c.c ****     channel->TBUF[0] = temp;
 530              	 .loc 3 211 0
 531 004e 7B68     	 ldr r3,[r7,#4]
 532 0050 FA68     	 ldr r2,[r7,#12]
 533 0052 C3F88020 	 str r2,[r3,#128]
 534 0056 03E0     	 b .L24
 535              	.L26:
 212:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 213:../Libraries/XMCLib/src/xmc_i2c.c ****   else
 214:../Libraries/XMCLib/src/xmc_i2c.c ****   {
 215:../Libraries/XMCLib/src/xmc_i2c.c ****     channel->IN[0U] = temp;
 536              	 .loc 3 215 0
 537 0058 7B68     	 ldr r3,[r7,#4]
 538 005a FA68     	 ldr r2,[r7,#12]
 539 005c C3F88021 	 str r2,[r3,#384]
 540              	.L24:
 216:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 217:../Libraries/XMCLib/src/xmc_i2c.c **** }
 541              	 .loc 3 217 0
 542 0060 1037     	 adds r7,r7,#16
 543              	.LCFI43:
 544              	 .cfi_def_cfa_offset 8
 545 0062 BD46     	 mov sp,r7
 546              	.LCFI44:
 547              	 .cfi_def_cfa_register 13
 548              	 
 549 0064 80BD     	 pop {r7,pc}
 550              	 .cfi_endproc
 551              	.LFE200:
 553 0066 00BF     	 .section .text.XMC_I2C_CH_MasterRepeatedStart,"ax",%progbits
 554              	 .align 2
 555              	 .global XMC_I2C_CH_MasterRepeatedStart
 556              	 .thumb
 557              	 .thumb_func
 559              	XMC_I2C_CH_MasterRepeatedStart:
 560              	.LFB201:
 218:../Libraries/XMCLib/src/xmc_i2c.c **** /* Sends master repeated start condition along with read/write command to IN/TBUF register based on
 219:../Libraries/XMCLib/src/xmc_i2c.c **** void XMC_I2C_CH_MasterRepeatedStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2
 220:../Libraries/XMCLib/src/xmc_i2c.c **** {
 561              	 .loc 3 220 0
 562              	 .cfi_startproc
 563              	 
 564              	 
 565 0000 80B5     	 push {r7,lr}
 566              	.LCFI45:
 567              	 .cfi_def_cfa_offset 8
 568              	 .cfi_offset 7,-8
 569              	 .cfi_offset 14,-4
 570 0002 84B0     	 sub sp,sp,#16
 571              	.LCFI46:
 572              	 .cfi_def_cfa_offset 24
 573 0004 00AF     	 add r7,sp,#0
 574              	.LCFI47:
 575              	 .cfi_def_cfa_register 7
 576 0006 7860     	 str r0,[r7,#4]
 577 0008 0B46     	 mov r3,r1
 578 000a 7B80     	 strh r3,[r7,#2]
 579 000c 1346     	 mov r3,r2
 580 000e 7B70     	 strb r3,[r7,#1]
 221:../Libraries/XMCLib/src/xmc_i2c.c ****   uint32_t tmp;
 222:../Libraries/XMCLib/src/xmc_i2c.c ****   tmp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_RESTART;
 581              	 .loc 3 222 0
 582 0010 7B88     	 ldrh r3,[r7,#2]
 583 0012 43F4A063 	 orr r3,r3,#1280
 584 0016 9BB2     	 uxth r3,r3
 585 0018 FB60     	 str r3,[r7,#12]
 223:../Libraries/XMCLib/src/xmc_i2c.c ****   if (command == XMC_I2C_CH_CMD_READ)
 586              	 .loc 3 223 0
 587 001a 7B78     	 ldrb r3,[r7,#1]
 588 001c 012B     	 cmp r3,#1
 589 001e 03D1     	 bne .L30
 224:../Libraries/XMCLib/src/xmc_i2c.c ****   {
 225:../Libraries/XMCLib/src/xmc_i2c.c ****     tmp |= 0x1U;
 590              	 .loc 3 225 0
 591 0020 FB68     	 ldr r3,[r7,#12]
 592 0022 43F00103 	 orr r3,r3,#1
 593 0026 FB60     	 str r3,[r7,#12]
 594              	.L30:
 226:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 227:../Libraries/XMCLib/src/xmc_i2c.c **** 
 228:../Libraries/XMCLib/src/xmc_i2c.c ****   /* Check FIFO size */
 229:../Libraries/XMCLib/src/xmc_i2c.c ****   if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 595              	 .loc 3 229 0
 596 0028 7B68     	 ldr r3,[r7,#4]
 597 002a D3F80831 	 ldr r3,[r3,#264]
 598 002e 03F0E063 	 and r3,r3,#117440512
 599 0032 002B     	 cmp r3,#0
 600 0034 10D1     	 bne .L31
 230:../Libraries/XMCLib/src/xmc_i2c.c ****   {  
 231:../Libraries/XMCLib/src/xmc_i2c.c ****     while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 601              	 .loc 3 231 0
 602 0036 00BF     	 nop
 603              	.L32:
 604              	 .loc 3 231 0 is_stmt 0 discriminator 1
 605 0038 7868     	 ldr r0,[r7,#4]
 606 003a FFF7FEFF 	 bl XMC_USIC_CH_GetTransmitBufferStatus
 607 003e 0346     	 mov r3,r0
 608 0040 802B     	 cmp r3,#128
 609 0042 F9D0     	 beq .L32
 232:../Libraries/XMCLib/src/xmc_i2c.c **** 	{
 233:../Libraries/XMCLib/src/xmc_i2c.c ****       /* check TDV, wait until TBUF is ready */
 234:../Libraries/XMCLib/src/xmc_i2c.c ****     }
 235:../Libraries/XMCLib/src/xmc_i2c.c **** 
 236:../Libraries/XMCLib/src/xmc_i2c.c ****     /* clear PSR_TBIF */
 237:../Libraries/XMCLib/src/xmc_i2c.c ****     XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION
 610              	 .loc 3 237 0 is_stmt 1
 611 0044 7868     	 ldr r0,[r7,#4]
 612 0046 4FF40051 	 mov r1,#8192
 613 004a FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 238:../Libraries/XMCLib/src/xmc_i2c.c **** 
 239:../Libraries/XMCLib/src/xmc_i2c.c ****     channel->TBUF[0] = tmp;
 614              	 .loc 3 239 0
 615 004e 7B68     	 ldr r3,[r7,#4]
 616 0050 FA68     	 ldr r2,[r7,#12]
 617 0052 C3F88020 	 str r2,[r3,#128]
 618 0056 03E0     	 b .L29
 619              	.L31:
 240:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 241:../Libraries/XMCLib/src/xmc_i2c.c ****   else
 242:../Libraries/XMCLib/src/xmc_i2c.c ****   {
 243:../Libraries/XMCLib/src/xmc_i2c.c ****     channel->IN[0U] = tmp;
 620              	 .loc 3 243 0
 621 0058 7B68     	 ldr r3,[r7,#4]
 622 005a FA68     	 ldr r2,[r7,#12]
 623 005c C3F88021 	 str r2,[r3,#384]
 624              	.L29:
 244:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 245:../Libraries/XMCLib/src/xmc_i2c.c **** }
 625              	 .loc 3 245 0
 626 0060 1037     	 adds r7,r7,#16
 627              	.LCFI48:
 628              	 .cfi_def_cfa_offset 8
 629 0062 BD46     	 mov sp,r7
 630              	.LCFI49:
 631              	 .cfi_def_cfa_register 13
 632              	 
 633 0064 80BD     	 pop {r7,pc}
 634              	 .cfi_endproc
 635              	.LFE201:
 637 0066 00BF     	 .section .text.XMC_I2C_CH_MasterStop,"ax",%progbits
 638              	 .align 2
 639              	 .global XMC_I2C_CH_MasterStop
 640              	 .thumb
 641              	 .thumb_func
 643              	XMC_I2C_CH_MasterStop:
 644              	.LFB202:
 246:../Libraries/XMCLib/src/xmc_i2c.c **** 
 247:../Libraries/XMCLib/src/xmc_i2c.c **** /* Sends master stop command to IN/TBUF register based on FIFO/non-FIFO modes. */
 248:../Libraries/XMCLib/src/xmc_i2c.c **** void XMC_I2C_CH_MasterStop(XMC_USIC_CH_t *const channel)
 249:../Libraries/XMCLib/src/xmc_i2c.c **** {
 645              	 .loc 3 249 0
 646              	 .cfi_startproc
 647              	 
 648              	 
 649 0000 80B5     	 push {r7,lr}
 650              	.LCFI50:
 651              	 .cfi_def_cfa_offset 8
 652              	 .cfi_offset 7,-8
 653              	 .cfi_offset 14,-4
 654 0002 82B0     	 sub sp,sp,#8
 655              	.LCFI51:
 656              	 .cfi_def_cfa_offset 16
 657 0004 00AF     	 add r7,sp,#0
 658              	.LCFI52:
 659              	 .cfi_def_cfa_register 7
 660 0006 7860     	 str r0,[r7,#4]
 250:../Libraries/XMCLib/src/xmc_i2c.c ****   /* Check FIFO size */
 251:../Libraries/XMCLib/src/xmc_i2c.c ****   if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 661              	 .loc 3 251 0
 662 0008 7B68     	 ldr r3,[r7,#4]
 663 000a D3F80831 	 ldr r3,[r3,#264]
 664 000e 03F0E063 	 and r3,r3,#117440512
 665 0012 002B     	 cmp r3,#0
 666 0014 11D1     	 bne .L35
 252:../Libraries/XMCLib/src/xmc_i2c.c ****   {
 253:../Libraries/XMCLib/src/xmc_i2c.c ****     while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 667              	 .loc 3 253 0
 668 0016 00BF     	 nop
 669              	.L36:
 670              	 .loc 3 253 0 is_stmt 0 discriminator 1
 671 0018 7868     	 ldr r0,[r7,#4]
 672 001a FFF7FEFF 	 bl XMC_USIC_CH_GetTransmitBufferStatus
 673 001e 0346     	 mov r3,r0
 674 0020 802B     	 cmp r3,#128
 675 0022 F9D0     	 beq .L36
 254:../Libraries/XMCLib/src/xmc_i2c.c ****     {
 255:../Libraries/XMCLib/src/xmc_i2c.c ****       /* check TDV, wait until TBUF is ready */
 256:../Libraries/XMCLib/src/xmc_i2c.c ****     }
 257:../Libraries/XMCLib/src/xmc_i2c.c **** 
 258:../Libraries/XMCLib/src/xmc_i2c.c ****     /* clear PSR_TBIF */
 259:../Libraries/XMCLib/src/xmc_i2c.c ****     XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION
 676              	 .loc 3 259 0 is_stmt 1
 677 0024 7868     	 ldr r0,[r7,#4]
 678 0026 4FF40051 	 mov r1,#8192
 679 002a FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 260:../Libraries/XMCLib/src/xmc_i2c.c **** 
 261:../Libraries/XMCLib/src/xmc_i2c.c ****     channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 680              	 .loc 3 261 0
 681 002e 7B68     	 ldr r3,[r7,#4]
 682 0030 4FF4C062 	 mov r2,#1536
 683 0034 C3F88020 	 str r2,[r3,#128]
 684 0038 04E0     	 b .L34
 685              	.L35:
 262:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 263:../Libraries/XMCLib/src/xmc_i2c.c ****   else
 264:../Libraries/XMCLib/src/xmc_i2c.c ****   {
 265:../Libraries/XMCLib/src/xmc_i2c.c ****     channel->IN[0U] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 686              	 .loc 3 265 0
 687 003a 7B68     	 ldr r3,[r7,#4]
 688 003c 4FF4C062 	 mov r2,#1536
 689 0040 C3F88021 	 str r2,[r3,#384]
 690              	.L34:
 266:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 267:../Libraries/XMCLib/src/xmc_i2c.c **** }
 691              	 .loc 3 267 0
 692 0044 0837     	 adds r7,r7,#8
 693              	.LCFI53:
 694              	 .cfi_def_cfa_offset 8
 695 0046 BD46     	 mov sp,r7
 696              	.LCFI54:
 697              	 .cfi_def_cfa_register 13
 698              	 
 699 0048 80BD     	 pop {r7,pc}
 700              	 .cfi_endproc
 701              	.LFE202:
 703 004a 00BF     	 .section .text.XMC_I2C_CH_MasterTransmit,"ax",%progbits
 704              	 .align 2
 705              	 .global XMC_I2C_CH_MasterTransmit
 706              	 .thumb
 707              	 .thumb_func
 709              	XMC_I2C_CH_MasterTransmit:
 710              	.LFB203:
 268:../Libraries/XMCLib/src/xmc_i2c.c **** 
 269:../Libraries/XMCLib/src/xmc_i2c.c **** /* Sends master send command along with data to IN/TBUF register based on FIFO/non-FIFO modes. */
 270:../Libraries/XMCLib/src/xmc_i2c.c **** void XMC_I2C_CH_MasterTransmit(XMC_USIC_CH_t *const channel, const uint8_t data)
 271:../Libraries/XMCLib/src/xmc_i2c.c **** {
 711              	 .loc 3 271 0
 712              	 .cfi_startproc
 713              	 
 714              	 
 715 0000 80B5     	 push {r7,lr}
 716              	.LCFI55:
 717              	 .cfi_def_cfa_offset 8
 718              	 .cfi_offset 7,-8
 719              	 .cfi_offset 14,-4
 720 0002 82B0     	 sub sp,sp,#8
 721              	.LCFI56:
 722              	 .cfi_def_cfa_offset 16
 723 0004 00AF     	 add r7,sp,#0
 724              	.LCFI57:
 725              	 .cfi_def_cfa_register 7
 726 0006 7860     	 str r0,[r7,#4]
 727 0008 0B46     	 mov r3,r1
 728 000a FB70     	 strb r3,[r7,#3]
 272:../Libraries/XMCLib/src/xmc_i2c.c ****   /* Check FIFO size */
 273:../Libraries/XMCLib/src/xmc_i2c.c ****   if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 729              	 .loc 3 273 0
 730 000c 7B68     	 ldr r3,[r7,#4]
 731 000e D3F80831 	 ldr r3,[r3,#264]
 732 0012 03F0E063 	 and r3,r3,#117440512
 733 0016 002B     	 cmp r3,#0
 734 0018 10D1     	 bne .L39
 274:../Libraries/XMCLib/src/xmc_i2c.c ****   {    
 275:../Libraries/XMCLib/src/xmc_i2c.c ****     while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 735              	 .loc 3 275 0
 736 001a 00BF     	 nop
 737              	.L40:
 738              	 .loc 3 275 0 is_stmt 0 discriminator 1
 739 001c 7868     	 ldr r0,[r7,#4]
 740 001e FFF7FEFF 	 bl XMC_USIC_CH_GetTransmitBufferStatus
 741 0022 0346     	 mov r3,r0
 742 0024 802B     	 cmp r3,#128
 743 0026 F9D0     	 beq .L40
 276:../Libraries/XMCLib/src/xmc_i2c.c **** 	{
 277:../Libraries/XMCLib/src/xmc_i2c.c ****       /* check TDV, wait until TBUF is ready */
 278:../Libraries/XMCLib/src/xmc_i2c.c ****     }
 279:../Libraries/XMCLib/src/xmc_i2c.c **** 
 280:../Libraries/XMCLib/src/xmc_i2c.c ****     /* clear PSR_TBIF */
 281:../Libraries/XMCLib/src/xmc_i2c.c ****     XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION
 744              	 .loc 3 281 0 is_stmt 1
 745 0028 7868     	 ldr r0,[r7,#4]
 746 002a 4FF40051 	 mov r1,#8192
 747 002e FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 282:../Libraries/XMCLib/src/xmc_i2c.c **** 
 283:../Libraries/XMCLib/src/xmc_i2c.c ****     channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 748              	 .loc 3 283 0
 749 0032 FA78     	 ldrb r2,[r7,#3]
 750 0034 7B68     	 ldr r3,[r7,#4]
 751 0036 C3F88020 	 str r2,[r3,#128]
 752 003a 03E0     	 b .L38
 753              	.L39:
 284:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 285:../Libraries/XMCLib/src/xmc_i2c.c ****   else
 286:../Libraries/XMCLib/src/xmc_i2c.c ****   {
 287:../Libraries/XMCLib/src/xmc_i2c.c ****     channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 754              	 .loc 3 287 0
 755 003c FA78     	 ldrb r2,[r7,#3]
 756 003e 7B68     	 ldr r3,[r7,#4]
 757 0040 C3F88021 	 str r2,[r3,#384]
 758              	.L38:
 288:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 289:../Libraries/XMCLib/src/xmc_i2c.c **** }
 759              	 .loc 3 289 0
 760 0044 0837     	 adds r7,r7,#8
 761              	.LCFI58:
 762              	 .cfi_def_cfa_offset 8
 763 0046 BD46     	 mov sp,r7
 764              	.LCFI59:
 765              	 .cfi_def_cfa_register 13
 766              	 
 767 0048 80BD     	 pop {r7,pc}
 768              	 .cfi_endproc
 769              	.LFE203:
 771 004a 00BF     	 .section .text.XMC_I2C_CH_SlaveTransmit,"ax",%progbits
 772              	 .align 2
 773              	 .global XMC_I2C_CH_SlaveTransmit
 774              	 .thumb
 775              	 .thumb_func
 777              	XMC_I2C_CH_SlaveTransmit:
 778              	.LFB204:
 290:../Libraries/XMCLib/src/xmc_i2c.c **** 
 291:../Libraries/XMCLib/src/xmc_i2c.c **** /* Sends slave send command along with data to IN/TBUF register based on FIFO/non-FIFO modes. */
 292:../Libraries/XMCLib/src/xmc_i2c.c **** void XMC_I2C_CH_SlaveTransmit(XMC_USIC_CH_t *const channel, const uint8_t data)
 293:../Libraries/XMCLib/src/xmc_i2c.c **** {
 779              	 .loc 3 293 0
 780              	 .cfi_startproc
 781              	 
 782              	 
 783 0000 80B5     	 push {r7,lr}
 784              	.LCFI60:
 785              	 .cfi_def_cfa_offset 8
 786              	 .cfi_offset 7,-8
 787              	 .cfi_offset 14,-4
 788 0002 82B0     	 sub sp,sp,#8
 789              	.LCFI61:
 790              	 .cfi_def_cfa_offset 16
 791 0004 00AF     	 add r7,sp,#0
 792              	.LCFI62:
 793              	 .cfi_def_cfa_register 7
 794 0006 7860     	 str r0,[r7,#4]
 795 0008 0B46     	 mov r3,r1
 796 000a FB70     	 strb r3,[r7,#3]
 294:../Libraries/XMCLib/src/xmc_i2c.c ****   /* Check FIFO size */
 295:../Libraries/XMCLib/src/xmc_i2c.c ****   if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 797              	 .loc 3 295 0
 798 000c 7B68     	 ldr r3,[r7,#4]
 799 000e D3F80831 	 ldr r3,[r3,#264]
 800 0012 03F0E063 	 and r3,r3,#117440512
 801 0016 002B     	 cmp r3,#0
 802 0018 12D1     	 bne .L43
 296:../Libraries/XMCLib/src/xmc_i2c.c ****   {    
 297:../Libraries/XMCLib/src/xmc_i2c.c ****     while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 803              	 .loc 3 297 0
 804 001a 00BF     	 nop
 805              	.L44:
 806              	 .loc 3 297 0 is_stmt 0 discriminator 1
 807 001c 7868     	 ldr r0,[r7,#4]
 808 001e FFF7FEFF 	 bl XMC_USIC_CH_GetTransmitBufferStatus
 809 0022 0346     	 mov r3,r0
 810 0024 802B     	 cmp r3,#128
 811 0026 F9D0     	 beq .L44
 298:../Libraries/XMCLib/src/xmc_i2c.c **** 	{
 299:../Libraries/XMCLib/src/xmc_i2c.c ****       /* check TDV, wait until TBUF is ready */
 300:../Libraries/XMCLib/src/xmc_i2c.c ****     }    
 301:../Libraries/XMCLib/src/xmc_i2c.c **** 
 302:../Libraries/XMCLib/src/xmc_i2c.c ****     /* clear PSR_TBIF */
 303:../Libraries/XMCLib/src/xmc_i2c.c ****     XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION
 812              	 .loc 3 303 0 is_stmt 1
 813 0028 7868     	 ldr r0,[r7,#4]
 814 002a 4FF40051 	 mov r1,#8192
 815 002e FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 304:../Libraries/XMCLib/src/xmc_i2c.c **** 
 305:../Libraries/XMCLib/src/xmc_i2c.c ****     channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_SLAVE_SEND | data;
 816              	 .loc 3 305 0
 817 0032 FB78     	 ldrb r3,[r7,#3]
 818 0034 43F48072 	 orr r2,r3,#256
 819 0038 7B68     	 ldr r3,[r7,#4]
 820 003a C3F88020 	 str r2,[r3,#128]
 821 003e 05E0     	 b .L42
 822              	.L43:
 306:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 307:../Libraries/XMCLib/src/xmc_i2c.c ****   else
 308:../Libraries/XMCLib/src/xmc_i2c.c ****   {
 309:../Libraries/XMCLib/src/xmc_i2c.c ****     channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_SLAVE_SEND | data;
 823              	 .loc 3 309 0
 824 0040 FB78     	 ldrb r3,[r7,#3]
 825 0042 43F48072 	 orr r2,r3,#256
 826 0046 7B68     	 ldr r3,[r7,#4]
 827 0048 C3F88021 	 str r2,[r3,#384]
 828              	.L42:
 310:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 311:../Libraries/XMCLib/src/xmc_i2c.c **** }
 829              	 .loc 3 311 0
 830 004c 0837     	 adds r7,r7,#8
 831              	.LCFI63:
 832              	 .cfi_def_cfa_offset 8
 833 004e BD46     	 mov sp,r7
 834              	.LCFI64:
 835              	 .cfi_def_cfa_register 13
 836              	 
 837 0050 80BD     	 pop {r7,pc}
 838              	 .cfi_endproc
 839              	.LFE204:
 841 0052 00BF     	 .section .text.XMC_I2C_CH_MasterReceiveAck,"ax",%progbits
 842              	 .align 2
 843              	 .global XMC_I2C_CH_MasterReceiveAck
 844              	 .thumb
 845              	 .thumb_func
 847              	XMC_I2C_CH_MasterReceiveAck:
 848              	.LFB205:
 312:../Libraries/XMCLib/src/xmc_i2c.c **** 
 313:../Libraries/XMCLib/src/xmc_i2c.c **** /* Sends master receive ack command to IN/TBUF register based on FIFO/non-FIFO modes. */
 314:../Libraries/XMCLib/src/xmc_i2c.c **** void XMC_I2C_CH_MasterReceiveAck(XMC_USIC_CH_t *const channel)
 315:../Libraries/XMCLib/src/xmc_i2c.c **** {
 849              	 .loc 3 315 0
 850              	 .cfi_startproc
 851              	 
 852              	 
 853 0000 80B5     	 push {r7,lr}
 854              	.LCFI65:
 855              	 .cfi_def_cfa_offset 8
 856              	 .cfi_offset 7,-8
 857              	 .cfi_offset 14,-4
 858 0002 82B0     	 sub sp,sp,#8
 859              	.LCFI66:
 860              	 .cfi_def_cfa_offset 16
 861 0004 00AF     	 add r7,sp,#0
 862              	.LCFI67:
 863              	 .cfi_def_cfa_register 7
 864 0006 7860     	 str r0,[r7,#4]
 316:../Libraries/XMCLib/src/xmc_i2c.c **** /* Check FIFO size */
 317:../Libraries/XMCLib/src/xmc_i2c.c ****   if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 865              	 .loc 3 317 0
 866 0008 7B68     	 ldr r3,[r7,#4]
 867 000a D3F80831 	 ldr r3,[r3,#264]
 868 000e 03F0E063 	 and r3,r3,#117440512
 869 0012 002B     	 cmp r3,#0
 870 0014 11D1     	 bne .L47
 318:../Libraries/XMCLib/src/xmc_i2c.c ****   {    
 319:../Libraries/XMCLib/src/xmc_i2c.c ****     while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 871              	 .loc 3 319 0
 872 0016 00BF     	 nop
 873              	.L48:
 874              	 .loc 3 319 0 is_stmt 0 discriminator 1
 875 0018 7868     	 ldr r0,[r7,#4]
 876 001a FFF7FEFF 	 bl XMC_USIC_CH_GetTransmitBufferStatus
 877 001e 0346     	 mov r3,r0
 878 0020 802B     	 cmp r3,#128
 879 0022 F9D0     	 beq .L48
 320:../Libraries/XMCLib/src/xmc_i2c.c **** 	{
 321:../Libraries/XMCLib/src/xmc_i2c.c ****       /* check TDV, wait until TBUF is ready */
 322:../Libraries/XMCLib/src/xmc_i2c.c ****     }
 323:../Libraries/XMCLib/src/xmc_i2c.c **** 
 324:../Libraries/XMCLib/src/xmc_i2c.c ****     /* clear PSR_TBIF */
 325:../Libraries/XMCLib/src/xmc_i2c.c ****     XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION
 880              	 .loc 3 325 0 is_stmt 1
 881 0024 7868     	 ldr r0,[r7,#4]
 882 0026 4FF40051 	 mov r1,#8192
 883 002a FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 326:../Libraries/XMCLib/src/xmc_i2c.c **** 
 327:../Libraries/XMCLib/src/xmc_i2c.c ****     channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
 884              	 .loc 3 327 0
 885 002e 7B68     	 ldr r3,[r7,#4]
 886 0030 4FF40072 	 mov r2,#512
 887 0034 C3F88020 	 str r2,[r3,#128]
 888 0038 04E0     	 b .L46
 889              	.L47:
 328:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 329:../Libraries/XMCLib/src/xmc_i2c.c ****   else
 330:../Libraries/XMCLib/src/xmc_i2c.c ****   {
 331:../Libraries/XMCLib/src/xmc_i2c.c ****     channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
 890              	 .loc 3 331 0
 891 003a 7B68     	 ldr r3,[r7,#4]
 892 003c 4FF40072 	 mov r2,#512
 893 0040 C3F88021 	 str r2,[r3,#384]
 894              	.L46:
 332:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 333:../Libraries/XMCLib/src/xmc_i2c.c **** }
 895              	 .loc 3 333 0
 896 0044 0837     	 adds r7,r7,#8
 897              	.LCFI68:
 898              	 .cfi_def_cfa_offset 8
 899 0046 BD46     	 mov sp,r7
 900              	.LCFI69:
 901              	 .cfi_def_cfa_register 13
 902              	 
 903 0048 80BD     	 pop {r7,pc}
 904              	 .cfi_endproc
 905              	.LFE205:
 907 004a 00BF     	 .section .text.XMC_I2C_CH_MasterReceiveNack,"ax",%progbits
 908              	 .align 2
 909              	 .global XMC_I2C_CH_MasterReceiveNack
 910              	 .thumb
 911              	 .thumb_func
 913              	XMC_I2C_CH_MasterReceiveNack:
 914              	.LFB206:
 334:../Libraries/XMCLib/src/xmc_i2c.c **** 
 335:../Libraries/XMCLib/src/xmc_i2c.c **** /* Sends master receive nack command to IN/TBUF register based on FIFO/non-FIFO modes. */
 336:../Libraries/XMCLib/src/xmc_i2c.c **** void XMC_I2C_CH_MasterReceiveNack(XMC_USIC_CH_t *const channel)
 337:../Libraries/XMCLib/src/xmc_i2c.c **** {
 915              	 .loc 3 337 0
 916              	 .cfi_startproc
 917              	 
 918              	 
 919 0000 80B5     	 push {r7,lr}
 920              	.LCFI70:
 921              	 .cfi_def_cfa_offset 8
 922              	 .cfi_offset 7,-8
 923              	 .cfi_offset 14,-4
 924 0002 82B0     	 sub sp,sp,#8
 925              	.LCFI71:
 926              	 .cfi_def_cfa_offset 16
 927 0004 00AF     	 add r7,sp,#0
 928              	.LCFI72:
 929              	 .cfi_def_cfa_register 7
 930 0006 7860     	 str r0,[r7,#4]
 338:../Libraries/XMCLib/src/xmc_i2c.c ****   /* Check FIFO size */
 339:../Libraries/XMCLib/src/xmc_i2c.c ****   if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 931              	 .loc 3 339 0
 932 0008 7B68     	 ldr r3,[r7,#4]
 933 000a D3F80831 	 ldr r3,[r3,#264]
 934 000e 03F0E063 	 and r3,r3,#117440512
 935 0012 002B     	 cmp r3,#0
 936 0014 11D1     	 bne .L51
 340:../Libraries/XMCLib/src/xmc_i2c.c ****   {    
 341:../Libraries/XMCLib/src/xmc_i2c.c ****     while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 937              	 .loc 3 341 0
 938 0016 00BF     	 nop
 939              	.L52:
 940              	 .loc 3 341 0 is_stmt 0 discriminator 1
 941 0018 7868     	 ldr r0,[r7,#4]
 942 001a FFF7FEFF 	 bl XMC_USIC_CH_GetTransmitBufferStatus
 943 001e 0346     	 mov r3,r0
 944 0020 802B     	 cmp r3,#128
 945 0022 F9D0     	 beq .L52
 342:../Libraries/XMCLib/src/xmc_i2c.c **** 	{
 343:../Libraries/XMCLib/src/xmc_i2c.c ****       /* check TDV, wait until TBUF is ready */
 344:../Libraries/XMCLib/src/xmc_i2c.c ****     }
 345:../Libraries/XMCLib/src/xmc_i2c.c **** 
 346:../Libraries/XMCLib/src/xmc_i2c.c ****     /* clear PSR_TBIF */
 347:../Libraries/XMCLib/src/xmc_i2c.c ****     XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION
 946              	 .loc 3 347 0 is_stmt 1
 947 0024 7868     	 ldr r0,[r7,#4]
 948 0026 4FF40051 	 mov r1,#8192
 949 002a FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 348:../Libraries/XMCLib/src/xmc_i2c.c **** 
 349:../Libraries/XMCLib/src/xmc_i2c.c ****     channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 950              	 .loc 3 349 0
 951 002e 7B68     	 ldr r3,[r7,#4]
 952 0030 4FF44072 	 mov r2,#768
 953 0034 C3F88020 	 str r2,[r3,#128]
 954 0038 04E0     	 b .L50
 955              	.L51:
 350:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 351:../Libraries/XMCLib/src/xmc_i2c.c ****   else 
 352:../Libraries/XMCLib/src/xmc_i2c.c ****   {
 353:../Libraries/XMCLib/src/xmc_i2c.c ****     channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 956              	 .loc 3 353 0
 957 003a 7B68     	 ldr r3,[r7,#4]
 958 003c 4FF44072 	 mov r2,#768
 959 0040 C3F88021 	 str r2,[r3,#384]
 960              	.L50:
 354:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 355:../Libraries/XMCLib/src/xmc_i2c.c **** }
 961              	 .loc 3 355 0
 962 0044 0837     	 adds r7,r7,#8
 963              	.LCFI73:
 964              	 .cfi_def_cfa_offset 8
 965 0046 BD46     	 mov sp,r7
 966              	.LCFI74:
 967              	 .cfi_def_cfa_register 13
 968              	 
 969 0048 80BD     	 pop {r7,pc}
 970              	 .cfi_endproc
 971              	.LFE206:
 973 004a 00BF     	 .section .text.XMC_I2C_CH_GetReceivedData,"ax",%progbits
 974              	 .align 2
 975              	 .global XMC_I2C_CH_GetReceivedData
 976              	 .thumb
 977              	 .thumb_func
 979              	XMC_I2C_CH_GetReceivedData:
 980              	.LFB207:
 356:../Libraries/XMCLib/src/xmc_i2c.c **** 
 357:../Libraries/XMCLib/src/xmc_i2c.c **** /* Reads the data from RBUF if FIFO size is 0 otherwise from OUTR. */
 358:../Libraries/XMCLib/src/xmc_i2c.c **** uint8_t XMC_I2C_CH_GetReceivedData(const XMC_USIC_CH_t *const channel)
 359:../Libraries/XMCLib/src/xmc_i2c.c **** {
 981              	 .loc 3 359 0
 982              	 .cfi_startproc
 983              	 
 984              	 
 985              	 
 986 0000 80B4     	 push {r7}
 987              	.LCFI75:
 988              	 .cfi_def_cfa_offset 4
 989              	 .cfi_offset 7,-4
 990 0002 85B0     	 sub sp,sp,#20
 991              	.LCFI76:
 992              	 .cfi_def_cfa_offset 24
 993 0004 00AF     	 add r7,sp,#0
 994              	.LCFI77:
 995              	 .cfi_def_cfa_register 7
 996 0006 7860     	 str r0,[r7,#4]
 360:../Libraries/XMCLib/src/xmc_i2c.c ****   uint8_t retval;
 361:../Libraries/XMCLib/src/xmc_i2c.c **** 
 362:../Libraries/XMCLib/src/xmc_i2c.c ****   /* Check FIFO size */
 363:../Libraries/XMCLib/src/xmc_i2c.c ****   if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 997              	 .loc 3 363 0
 998 0008 7B68     	 ldr r3,[r7,#4]
 999 000a D3F80C31 	 ldr r3,[r3,#268]
 1000 000e 03F0E063 	 and r3,r3,#117440512
 1001 0012 002B     	 cmp r3,#0
 1002 0014 03D1     	 bne .L55
 364:../Libraries/XMCLib/src/xmc_i2c.c ****   {
 365:../Libraries/XMCLib/src/xmc_i2c.c ****     retval = (uint8_t)channel->RBUF;
 1003              	 .loc 3 365 0
 1004 0016 7B68     	 ldr r3,[r7,#4]
 1005 0018 5B6D     	 ldr r3,[r3,#84]
 1006 001a FB73     	 strb r3,[r7,#15]
 1007 001c 03E0     	 b .L56
 1008              	.L55:
 366:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 367:../Libraries/XMCLib/src/xmc_i2c.c ****   else
 368:../Libraries/XMCLib/src/xmc_i2c.c ****   {
 369:../Libraries/XMCLib/src/xmc_i2c.c ****     retval = (uint8_t)channel->OUTR;
 1009              	 .loc 3 369 0
 1010 001e 7B68     	 ldr r3,[r7,#4]
 1011 0020 D3F81C31 	 ldr r3,[r3,#284]
 1012 0024 FB73     	 strb r3,[r7,#15]
 1013              	.L56:
 370:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 371:../Libraries/XMCLib/src/xmc_i2c.c **** 
 372:../Libraries/XMCLib/src/xmc_i2c.c ****   return retval;
 1014              	 .loc 3 372 0
 1015 0026 FB7B     	 ldrb r3,[r7,#15]
 373:../Libraries/XMCLib/src/xmc_i2c.c **** }
 1016              	 .loc 3 373 0
 1017 0028 1846     	 mov r0,r3
 1018 002a 1437     	 adds r7,r7,#20
 1019              	.LCFI78:
 1020              	 .cfi_def_cfa_offset 4
 1021 002c BD46     	 mov sp,r7
 1022              	.LCFI79:
 1023              	 .cfi_def_cfa_register 13
 1024              	 
 1025 002e 5DF8047B 	 ldr r7,[sp],#4
 1026              	.LCFI80:
 1027              	 .cfi_restore 7
 1028              	 .cfi_def_cfa_offset 0
 1029 0032 7047     	 bx lr
 1030              	 .cfi_endproc
 1031              	.LFE207:
 1033              	 .section .text.XMC_I2C_CH_Stop,"ax",%progbits
 1034              	 .align 2
 1035              	 .global XMC_I2C_CH_Stop
 1036              	 .thumb
 1037              	 .thumb_func
 1039              	XMC_I2C_CH_Stop:
 1040              	.LFB208:
 374:../Libraries/XMCLib/src/xmc_i2c.c **** 
 375:../Libraries/XMCLib/src/xmc_i2c.c **** /* Sets the operating mode of USIC to IDLE */
 376:../Libraries/XMCLib/src/xmc_i2c.c **** XMC_I2C_CH_STATUS_t XMC_I2C_CH_Stop(XMC_USIC_CH_t *const channel)
 377:../Libraries/XMCLib/src/xmc_i2c.c **** {
 1041              	 .loc 3 377 0
 1042              	 .cfi_startproc
 1043              	 
 1044              	 
 1045 0000 80B5     	 push {r7,lr}
 1046              	.LCFI81:
 1047              	 .cfi_def_cfa_offset 8
 1048              	 .cfi_offset 7,-8
 1049              	 .cfi_offset 14,-4
 1050 0002 84B0     	 sub sp,sp,#16
 1051              	.LCFI82:
 1052              	 .cfi_def_cfa_offset 24
 1053 0004 00AF     	 add r7,sp,#0
 1054              	.LCFI83:
 1055              	 .cfi_def_cfa_register 7
 1056 0006 7860     	 str r0,[r7,#4]
 378:../Libraries/XMCLib/src/xmc_i2c.c ****   XMC_I2C_CH_STATUS_t status = XMC_I2C_CH_STATUS_OK;
 1057              	 .loc 3 378 0
 1058 0008 0023     	 movs r3,#0
 1059 000a FB73     	 strb r3,[r7,#15]
 379:../Libraries/XMCLib/src/xmc_i2c.c **** 
 380:../Libraries/XMCLib/src/xmc_i2c.c ****   if (((uint32_t)XMC_USIC_CH_GetTransmitBufferStatus(channel) & (uint32_t)XMC_USIC_CH_TBUF_STATUS_B
 1060              	 .loc 3 380 0
 1061 000c 7868     	 ldr r0,[r7,#4]
 1062 000e FFF7FEFF 	 bl XMC_USIC_CH_GetTransmitBufferStatus
 1063 0012 0346     	 mov r3,r0
 1064 0014 DBB2     	 uxtb r3,r3
 1065 0016 5BB2     	 sxtb r3,r3
 1066 0018 002B     	 cmp r3,#0
 1067 001a 02DA     	 bge .L59
 381:../Libraries/XMCLib/src/xmc_i2c.c ****   {
 382:../Libraries/XMCLib/src/xmc_i2c.c ****     status = XMC_I2C_CH_STATUS_BUSY;
 1068              	 .loc 3 382 0
 1069 001c 0223     	 movs r3,#2
 1070 001e FB73     	 strb r3,[r7,#15]
 1071 0020 03E0     	 b .L60
 1072              	.L59:
 383:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 384:../Libraries/XMCLib/src/xmc_i2c.c ****   else
 385:../Libraries/XMCLib/src/xmc_i2c.c ****   {
 386:../Libraries/XMCLib/src/xmc_i2c.c ****     /* USIC channel in IDLE mode */
 387:../Libraries/XMCLib/src/xmc_i2c.c ****     XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_IDLE);
 1073              	 .loc 3 387 0
 1074 0022 7868     	 ldr r0,[r7,#4]
 1075 0024 0021     	 movs r1,#0
 1076 0026 FFF7FEFF 	 bl XMC_USIC_CH_SetMode
 1077              	.L60:
 388:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 389:../Libraries/XMCLib/src/xmc_i2c.c ****   return status;
 1078              	 .loc 3 389 0
 1079 002a FB7B     	 ldrb r3,[r7,#15]
 390:../Libraries/XMCLib/src/xmc_i2c.c **** }
 1080              	 .loc 3 390 0
 1081 002c 1846     	 mov r0,r3
 1082 002e 1037     	 adds r7,r7,#16
 1083              	.LCFI84:
 1084              	 .cfi_def_cfa_offset 8
 1085 0030 BD46     	 mov sp,r7
 1086              	.LCFI85:
 1087              	 .cfi_def_cfa_register 13
 1088              	 
 1089 0032 80BD     	 pop {r7,pc}
 1090              	 .cfi_endproc
 1091              	.LFE208:
 1093              	 .section .text.XMC_I2C_CH_EnableEvent,"ax",%progbits
 1094              	 .align 2
 1095              	 .global XMC_I2C_CH_EnableEvent
 1096              	 .thumb
 1097              	 .thumb_func
 1099              	XMC_I2C_CH_EnableEvent:
 1100              	.LFB209:
 391:../Libraries/XMCLib/src/xmc_i2c.c **** 
 392:../Libraries/XMCLib/src/xmc_i2c.c **** void XMC_I2C_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
 393:../Libraries/XMCLib/src/xmc_i2c.c **** {
 1101              	 .loc 3 393 0
 1102              	 .cfi_startproc
 1103              	 
 1104              	 
 1105              	 
 1106 0000 80B4     	 push {r7}
 1107              	.LCFI86:
 1108              	 .cfi_def_cfa_offset 4
 1109              	 .cfi_offset 7,-4
 1110 0002 83B0     	 sub sp,sp,#12
 1111              	.LCFI87:
 1112              	 .cfi_def_cfa_offset 16
 1113 0004 00AF     	 add r7,sp,#0
 1114              	.LCFI88:
 1115              	 .cfi_def_cfa_register 7
 1116 0006 7860     	 str r0,[r7,#4]
 1117 0008 3960     	 str r1,[r7]
 394:../Libraries/XMCLib/src/xmc_i2c.c ****   channel->CCR |= (event&0x1fc00U);
 1118              	 .loc 3 394 0
 1119 000a 7B68     	 ldr r3,[r7,#4]
 1120 000c 1A6C     	 ldr r2,[r3,#64]
 1121 000e 3B68     	 ldr r3,[r7]
 1122 0010 03F4FE33 	 and r3,r3,#130048
 1123 0014 1A43     	 orrs r2,r2,r3
 1124 0016 7B68     	 ldr r3,[r7,#4]
 1125 0018 1A64     	 str r2,[r3,#64]
 395:../Libraries/XMCLib/src/xmc_i2c.c ****   channel->PCR_IICMode |= ((event) & 0x41fc0000U);
 1126              	 .loc 3 395 0
 1127 001a 7B68     	 ldr r3,[r7,#4]
 1128 001c DA6B     	 ldr r2,[r3,#60]
 1129 001e 3968     	 ldr r1,[r7]
 1130 0020 044B     	 ldr r3,.L63
 1131 0022 0B40     	 ands r3,r3,r1
 1132 0024 1A43     	 orrs r2,r2,r3
 1133 0026 7B68     	 ldr r3,[r7,#4]
 1134 0028 DA63     	 str r2,[r3,#60]
 396:../Libraries/XMCLib/src/xmc_i2c.c **** }
 1135              	 .loc 3 396 0
 1136 002a 0C37     	 adds r7,r7,#12
 1137              	.LCFI89:
 1138              	 .cfi_def_cfa_offset 4
 1139 002c BD46     	 mov sp,r7
 1140              	.LCFI90:
 1141              	 .cfi_def_cfa_register 13
 1142              	 
 1143 002e 5DF8047B 	 ldr r7,[sp],#4
 1144              	.LCFI91:
 1145              	 .cfi_restore 7
 1146              	 .cfi_def_cfa_offset 0
 1147 0032 7047     	 bx lr
 1148              	.L64:
 1149              	 .align 2
 1150              	.L63:
 1151 0034 0000FC41 	 .word 1107034112
 1152              	 .cfi_endproc
 1153              	.LFE209:
 1155              	 .section .text.XMC_I2C_CH_DisableEvent,"ax",%progbits
 1156              	 .align 2
 1157              	 .global XMC_I2C_CH_DisableEvent
 1158              	 .thumb
 1159              	 .thumb_func
 1161              	XMC_I2C_CH_DisableEvent:
 1162              	.LFB210:
 397:../Libraries/XMCLib/src/xmc_i2c.c **** 
 398:../Libraries/XMCLib/src/xmc_i2c.c **** void XMC_I2C_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
 399:../Libraries/XMCLib/src/xmc_i2c.c **** {
 1163              	 .loc 3 399 0
 1164              	 .cfi_startproc
 1165              	 
 1166              	 
 1167              	 
 1168 0000 80B4     	 push {r7}
 1169              	.LCFI92:
 1170              	 .cfi_def_cfa_offset 4
 1171              	 .cfi_offset 7,-4
 1172 0002 83B0     	 sub sp,sp,#12
 1173              	.LCFI93:
 1174              	 .cfi_def_cfa_offset 16
 1175 0004 00AF     	 add r7,sp,#0
 1176              	.LCFI94:
 1177              	 .cfi_def_cfa_register 7
 1178 0006 7860     	 str r0,[r7,#4]
 1179 0008 3960     	 str r1,[r7]
 400:../Libraries/XMCLib/src/xmc_i2c.c ****   channel->CCR &= (uint32_t)~(event&0x1fc00U);
 1180              	 .loc 3 400 0
 1181 000a 7B68     	 ldr r3,[r7,#4]
 1182 000c 1A6C     	 ldr r2,[r3,#64]
 1183 000e 3B68     	 ldr r3,[r7]
 1184 0010 03F4FE33 	 and r3,r3,#130048
 1185 0014 DB43     	 mvns r3,r3
 1186 0016 1A40     	 ands r2,r2,r3
 1187 0018 7B68     	 ldr r3,[r7,#4]
 1188 001a 1A64     	 str r2,[r3,#64]
 401:../Libraries/XMCLib/src/xmc_i2c.c ****   channel->PCR_IICMode &= (uint32_t)~((event) & 0x41fc0000U);
 1189              	 .loc 3 401 0
 1190 001c 7B68     	 ldr r3,[r7,#4]
 1191 001e DA6B     	 ldr r2,[r3,#60]
 1192 0020 3968     	 ldr r1,[r7]
 1193 0022 054B     	 ldr r3,.L66
 1194 0024 0B40     	 ands r3,r3,r1
 1195 0026 DB43     	 mvns r3,r3
 1196 0028 1A40     	 ands r2,r2,r3
 1197 002a 7B68     	 ldr r3,[r7,#4]
 1198 002c DA63     	 str r2,[r3,#60]
 402:../Libraries/XMCLib/src/xmc_i2c.c **** }
 1199              	 .loc 3 402 0
 1200 002e 0C37     	 adds r7,r7,#12
 1201              	.LCFI95:
 1202              	 .cfi_def_cfa_offset 4
 1203 0030 BD46     	 mov sp,r7
 1204              	.LCFI96:
 1205              	 .cfi_def_cfa_register 13
 1206              	 
 1207 0032 5DF8047B 	 ldr r7,[sp],#4
 1208              	.LCFI97:
 1209              	 .cfi_restore 7
 1210              	 .cfi_def_cfa_offset 0
 1211 0036 7047     	 bx lr
 1212              	.L67:
 1213              	 .align 2
 1214              	.L66:
 1215 0038 0000FC41 	 .word 1107034112
 1216              	 .cfi_endproc
 1217              	.LFE210:
 1219              	 .text
 1220              	.Letext0:
 1221              	 .file 4 "d:\\dave-4.1.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 1222              	 .file 5 "d:\\dave-4.1.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 1223              	 .file 6 "D:\\Naukowe\\BLDC_workspace\\PWM_from_ex/Libraries/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_i2c.c
    {standard input}:20     .text.XMC_USIC_CH_GetTransmitBufferStatus:00000000 $t
    {standard input}:24     .text.XMC_USIC_CH_GetTransmitBufferStatus:00000000 XMC_USIC_CH_GetTransmitBufferStatus
    {standard input}:67     .text.XMC_USIC_CH_SetMode:00000000 $t
    {standard input}:71     .text.XMC_USIC_CH_SetMode:00000000 XMC_USIC_CH_SetMode
    {standard input}:116    .text.XMC_I2C_CH_ClearStatusFlag:00000000 $t
    {standard input}:120    .text.XMC_I2C_CH_ClearStatusFlag:00000000 XMC_I2C_CH_ClearStatusFlag
    {standard input}:164    .text.XMC_I2C_CH_Init:00000000 $t
    {standard input}:169    .text.XMC_I2C_CH_Init:00000000 XMC_I2C_CH_Init
    {standard input}:242    .text.XMC_I2C_CH_SetSlaveAddress:00000000 XMC_I2C_CH_SetSlaveAddress
    {standard input}:375    .text.XMC_I2C_CH_SetBaudrate:00000000 XMC_I2C_CH_SetBaudrate
    {standard input}:232    .text.XMC_I2C_CH_Init:0000004c $d
    {standard input}:237    .text.XMC_I2C_CH_SetSlaveAddress:00000000 $t
    {standard input}:301    .text.XMC_I2C_CH_GetSlaveAddress:00000000 $t
    {standard input}:306    .text.XMC_I2C_CH_GetSlaveAddress:00000000 XMC_I2C_CH_GetSlaveAddress
    {standard input}:370    .text.XMC_I2C_CH_SetBaudrate:00000000 $t
    {standard input}:464    .text.XMC_I2C_CH_SetBaudrate:00000070 $d
    {standard input}:470    .text.XMC_I2C_CH_MasterStart:00000000 $t
    {standard input}:475    .text.XMC_I2C_CH_MasterStart:00000000 XMC_I2C_CH_MasterStart
    {standard input}:554    .text.XMC_I2C_CH_MasterRepeatedStart:00000000 $t
    {standard input}:559    .text.XMC_I2C_CH_MasterRepeatedStart:00000000 XMC_I2C_CH_MasterRepeatedStart
    {standard input}:638    .text.XMC_I2C_CH_MasterStop:00000000 $t
    {standard input}:643    .text.XMC_I2C_CH_MasterStop:00000000 XMC_I2C_CH_MasterStop
    {standard input}:704    .text.XMC_I2C_CH_MasterTransmit:00000000 $t
    {standard input}:709    .text.XMC_I2C_CH_MasterTransmit:00000000 XMC_I2C_CH_MasterTransmit
    {standard input}:772    .text.XMC_I2C_CH_SlaveTransmit:00000000 $t
    {standard input}:777    .text.XMC_I2C_CH_SlaveTransmit:00000000 XMC_I2C_CH_SlaveTransmit
    {standard input}:842    .text.XMC_I2C_CH_MasterReceiveAck:00000000 $t
    {standard input}:847    .text.XMC_I2C_CH_MasterReceiveAck:00000000 XMC_I2C_CH_MasterReceiveAck
    {standard input}:908    .text.XMC_I2C_CH_MasterReceiveNack:00000000 $t
    {standard input}:913    .text.XMC_I2C_CH_MasterReceiveNack:00000000 XMC_I2C_CH_MasterReceiveNack
    {standard input}:974    .text.XMC_I2C_CH_GetReceivedData:00000000 $t
    {standard input}:979    .text.XMC_I2C_CH_GetReceivedData:00000000 XMC_I2C_CH_GetReceivedData
    {standard input}:1034   .text.XMC_I2C_CH_Stop:00000000 $t
    {standard input}:1039   .text.XMC_I2C_CH_Stop:00000000 XMC_I2C_CH_Stop
    {standard input}:1094   .text.XMC_I2C_CH_EnableEvent:00000000 $t
    {standard input}:1099   .text.XMC_I2C_CH_EnableEvent:00000000 XMC_I2C_CH_EnableEvent
    {standard input}:1151   .text.XMC_I2C_CH_EnableEvent:00000034 $d
    {standard input}:1156   .text.XMC_I2C_CH_DisableEvent:00000000 $t
    {standard input}:1161   .text.XMC_I2C_CH_DisableEvent:00000000 XMC_I2C_CH_DisableEvent
    {standard input}:1215   .text.XMC_I2C_CH_DisableEvent:00000038 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_USIC_CH_Enable
XMC_USIC_CH_SetBaudrate
