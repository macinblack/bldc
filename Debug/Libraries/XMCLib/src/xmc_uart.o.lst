   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "xmc_uart.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_USIC_CH_GetTransmitBufferStatus,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_USIC_CH_GetTransmitBufferStatus:
  25              	.LFB175:
  26              	 .file 1 "D:\\Naukowe\\BLDC_workspace\\PWM_from_ex\\Libraries\\XMCLib\\inc/xmc_usic.h"
   1:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
   2:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @file xmc_usic.h
   3:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @date 2015-10-27
   4:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
   5:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @cond
   6:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   *************************************************************************************************
   7:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMClib v2.1.2 - XMC Peripheral Driver Library 
   8:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
   9:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Copyright (c) 2015, Infineon Technologies AG
  10:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * All rights reserved.                        
  11:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *                                             
  12:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * following conditions are met:   
  14:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *                                                                              
  15:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * disclaimer.                        
  17:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 
  18:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 
  21:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * products derived from this software without specific prior written permission.                  
  23:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *                                                                              
  24:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *                                                                              
  32:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  **************************************************************************************************
  35:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
  36:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Change History
  37:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * --------------
  38:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
  39:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 2015-02-20:
  40:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *     - Initial draft<br>
  41:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *     - Documentation improved <br>
  42:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
  43:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 2015-05-08:
  44:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_SetInputTriggerCombinationMode() and XMC_USIC_CH_SetTransmitBufferStatus
  45:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *      
  46:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 2015-06-20:
  47:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  48:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 
  49:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 2015-08-17:
  50:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *     - Bug fixed in XMC_USIC_CH_SetTransmitBufferStatus API. OR operator removed.
  51:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
  52:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 2015-08-24:
  53:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *     - Added APIs for enabling/disabling delay compensation XMC_USIC_CH_DisableDelayCompensation(
  54:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *       XMC_USIC_CH_DisableDelayCompensation()
  55:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
  56:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 2015-08-25:
  57:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *     - Added APIs for defining if the data shift unit input is derived
  58:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *       from the input data path DXn or from the selected protocol pre-processors: XMC_USIC_CH_Con
  59:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *       and XMC_USIC_CH_ConnectInputDataShiftToDataInput()
  60:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
  61:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 2015-08-27:
  62:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *     - Fixed bug in XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1T value.
  63:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *     - Added APIs for direct TBUF access: XMC_USIC_CH_WriteToTBUF() and XMC_USIC_CH_WriteToTBUFTC
  64:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *     - Added APIs for external input for BRG configuration:XMC_USIC_CH_ConfigExternalInputSignalT
  65:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
  66:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 2015-08-28:
  67:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *     - Added API for enabling the transfer trigger unit to set bit TCSR.TE if the trigger signal 
  68:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *       Clear to Send (CTS) signal: XMC_USIC_CH_EnableTBUFDataValidTrigger() and XMC_USIC_CH_Disab
  69:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
  70:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @endcond
  71:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
  72:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
  73:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
  74:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #ifndef XMC_USIC_H
  75:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #define XMC_USIC_H
  76:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /*******************************************************************************
  77:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * HEADER FILES
  78:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *******************************************************************************/
  79:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
  80:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #include "xmc_common.h"
  81:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
  82:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
  83:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @addtogroup XMClib XMC Peripheral Library
  84:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @{
  85:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
  86:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
  87:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
  88:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @addtogroup USIC
  89:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @brief Universal Serial Interface Channel(USIC) driver for serial communication.
  90:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
  91:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * The Universal Serial Interface Channel(USIC) module is a flexible interface module
  92:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * covering several serial communication protocols. A USIC module contains two
  93:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * independent communication channels named USICx_CH0 and USICx_CH1, with x
  94:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * being the number of the USIC module. The user can program, during run-time, which protocol will 
  95:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * by each communication channel and which pins are used.
  96:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * The driver provides APIs, configuration structures and enumerations to configure common features
  97:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * communication protocols.
  98:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 
  99:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC driver features:
 100:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * -# Allows configuration of FIFO for transmit and receive functions.
 101:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * -# Provides a structure type XMC_USIC_CH_t to represent the USIC channel registers in a programm
 102:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  friendly format.
 103:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * -# Allows configuration of automatic update for frame length, word length, slave select or slave
 104:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * -# Allows transmission of data to FIFO using XMC_USIC_CH_TXFIFO_PutData() and XMC_USIC_CH_TXFIFO
 105:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * -# Allows reading of received data in FIFO using XMC_USIC_CH_RXFIFO_GetData()
 106:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * -# Allows configuration of baudrate using XMC_USIC_CH_SetBaudrate()
 107:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * -# Provides API to trigger interrupts using XMC_USIC_CH_TriggerServiceRequest()
 108:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @{
 109:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 110:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 111:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /*******************************************************************************
 112:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * MACROS
 113:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *******************************************************************************/
 114:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 115:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #define XMC_USIC0 ((XMC_USIC_t *)USIC0_BASE)			/**< USIC0 module base address */
 116:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #define XMC_USIC0_CH0 ((XMC_USIC_CH_t *)USIC0_CH0_BASE)	/**< USIC0 channel 0 base address */
 117:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #define XMC_USIC0_CH1 ((XMC_USIC_CH_t *)USIC0_CH1_BASE)	/**< USIC0 channel 1 base address */
 118:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 119:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #if defined(USIC1)
 120:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #define XMC_USIC1 ((XMC_USIC_t *)USIC1_BASE)			/**< USIC1 module base address */
 121:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #define XMC_USIC1_CH0 ((XMC_USIC_CH_t *)USIC1_CH0_BASE)	/**< USIC1 channel 0 base address */
 122:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #define XMC_USIC1_CH1 ((XMC_USIC_CH_t *)USIC1_CH1_BASE)	/**< USIC1 channel 1 base address */
 123:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #endif
 124:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 125:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #if defined(USIC2)
 126:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #define XMC_USIC2 ((XMC_USIC_t *)USIC2_BASE)			/**< USIC2 module base address */
 127:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #define XMC_USIC2_CH0 ((XMC_USIC_CH_t *)USIC2_CH0_BASE)	/**< USIC2 channel 0 base address */
 128:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #define XMC_USIC2_CH1 ((XMC_USIC_CH_t *)USIC2_CH1_BASE)	/**< USIC2 channel 1 base address */
 129:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #endif
 130:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 131:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEL_Msk  USIC_CH_DX0CR_DSEL_Msk   /**< Common mask for DSEL bitfield mask in 
 132:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEL_Pos  USIC_CH_DX0CR_DSEL_Pos   /**< Common mask for DSEL bitfield position
 133:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #define USIC_CH_DXCR_SFSEL_Pos USIC_CH_DX0CR_SFSEL_Pos  /**< Common mask for SFSEL bitfield positio
 134:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #define USIC_CH_DXCR_SFSEL_Msk USIC_CH_DX0CR_SFSEL_Msk  /**< Common mask for SFSEL bitfield mask in
 135:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #define USIC_CH_DXCR_DPOL_Msk  USIC_CH_DX0CR_DPOL_Msk   /**< Common mask for DPOL bitfield mask in 
 136:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #define USIC_CH_DXCR_DFEN_Msk  USIC_CH_DX0CR_DFEN_Msk   /**< Common mask for DFEN bitfield mask in 
 137:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEN_Msk  USIC_CH_DX0CR_DSEN_Msk   /**< Common mask for DSEN bitfield mask in 
 138:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #define USIC_CH_DXCR_CM_Pos    USIC_CH_DX0CR_CM_Pos     /**< Common mask for CM bitfield position i
 139:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #define USIC_CH_DXCR_CM_Msk    USIC_CH_DX0CR_CM_Msk     /**< Common mask for CM bitfield mask in DX
 140:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #define USIC_CH_DXCR_INSW_Msk  USIC_CH_DX0CR_INSW_Msk   /**< Common mask for INSW bitfield mask in 
 141:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #define USIC_CH_DXCR_INSW_pos  USIC_CH_DX0CR_INSW_Pos   /**< Common mask for INSW bitfield position
 142:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 143:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #if UC_FAMILY == XMC1
 144:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  #include "xmc1_usic_map.h"
 145:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #endif
 146:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 147:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #if UC_FAMILY == XMC4
 148:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  #include "xmc4_usic_map.h"
 149:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #endif
 150:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 151:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /*******************************************************************************
 152:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * ENUMS
 153:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *******************************************************************************/
 154:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 155:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 156:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel driver status
 157:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 158:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_STATUS
 159:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 160:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_OK,    /**< USIC driver status : OK */
 161:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_ERROR, /**< USIC driver status : ERROR */
 162:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_BUSY   /**< USIC driver status : BUSY */
 163:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_STATUS_t;
 164:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 165:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 166:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel kernel mode
 167:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** */
 168:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_KERNEL_MODE
 169:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 170:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_RUN_0  = 0x0UL,  /**< Run mode 0 (transmission and reception possible)*/
 171:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_RUN_1  = 0x1UL << USIC_CH_KSCFG_NOMCFG_Pos,  /**< Run mode 1 (transmissio
 172:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_STOP_0 = 0x2UL << USIC_CH_KSCFG_NOMCFG_Pos,  /**< Stop mode 0 (no transmi
 173:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_STOP_1 = 0x3UL << USIC_CH_KSCFG_NOMCFG_Pos   /**< Stop mode 1 (both trans
 174:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_KERNEL_MODE_t;
 175:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 176:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 177:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel operating mode
 178:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 179:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_OPERATING_MODE
 180:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 181:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_IDLE = 0x0UL, /**< USIC channel idle */
 182:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_SPI  = 0x1UL << USIC_CH_CCR_MODE_Pos, /**< SPI mode */
 183:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_UART = 0x2UL << USIC_CH_CCR_MODE_Pos, /**< UART mode */
 184:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_I2S  = 0x3UL << USIC_CH_CCR_MODE_Pos, /**< I2S mode */
 185:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_I2C  = 0x4UL << USIC_CH_CCR_MODE_Pos  /**< I2C mode */
 186:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_OPERATING_MODE_t;
 187:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 188:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 189:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel inputs
 190:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 191:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT
 192:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 193:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX0, /**< DX0 input */
 194:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX1, /**< DX1 input */
 195:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX2, /**< DX2 input */
 196:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX3, /**< DX3 input */
 197:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX4, /**< DX4 input */
 198:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX5  /**< DX5 input */
 199:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_t;
 200:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 201:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 202:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel input source sampling frequency
 203:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 204:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT_SAMPLING_FREQ
 205:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 206:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_SAMPLING_FREQ_FPERIPH            = 0x0UL, /**< Use fperiph frequency for input 
 207:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_SAMPLING_FREQ_FRACTIONAL_DIVIDER = 0x1UL << USIC_CH_DXCR_SFSEL_Pos  /**< Use fF
 208:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_SAMPLING_FREQ_t;
 209:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 210:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 211:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel input combination mode
 212:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 213:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT_COMBINATION_MODE
 214:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 215:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_TRIGGER_DISABLED = 0x0UL, /**< The trigger activation is disab
 216:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_RISING_EDGE      = 0x1UL, /**< A rising edge activates DXnT*/
 217:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_FALLING_EDGE     = 0x2UL, /**< A falling edge activates DXnT*/
 218:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_BOTH_EDGES       = 0x3UL, /**< Both edges activate DXnT*/
 219:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_COMBINATION_MODE_t;
 220:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 221:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 222:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel data transmission start modes.
 223:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Data shifted out of the transmit pin depends on the value configured for the
 224:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * TDEN bitfield of the TCSR register. Following enum values are used for configuring
 225:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * the TCSR->TDEN bitfield.
 226:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 227:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_START_TRANSMISION_MODE
 228:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 229:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_DISABLED      = 0x0U, /**< Passive data level is sent out on transm
 230:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV        = 0x1UL << USIC_CH_TCSR_TDEN_Pos, /**< Transmission o
 231:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_0 = 0x2UL << USIC_CH_TCSR_TDEN_Pos, /**< Transmission o
 232:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_1 = 0x3UL << USIC_CH_TCSR_TDEN_Pos  /**< Transmission o
 233:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_START_TRANSMISION_MODE_t;
 234:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 235:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 236:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel interrupt node pointers
 237:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 238:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INTERRUPT_NODE_POINTER
 239:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 240:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT      = USIC_CH_INPR_TSINP_Pos, /**< Node pointe
 241:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER     = USIC_CH_INPR_TBINP_Pos, /**< Node pointe
 242:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIVE             = USIC_CH_INPR_RINP_Pos,  /**< Node pointe
 243:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE   = USIC_CH_INPR_AINP_Pos,  /**< Node pointe
 244:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL            = USIC_CH_INPR_PINP_Pos   /**< Node pointe
 245:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_INTERRUPT_NODE_POINTER_t;
 246:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 247:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 248:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel events
 249:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 250:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_EVENT
 251:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 252:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_RECEIVE_START       = USIC_CH_CCR_RSIEN_Msk, /**< Receive start event */
 253:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_DATA_LOST           = USIC_CH_CCR_DLIEN_Msk, /**< Data lost event */
 254:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_TRANSMIT_SHIFT      = USIC_CH_CCR_TSIEN_Msk, /**< Transmit shift event */
 255:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_TRANSMIT_BUFFER     = USIC_CH_CCR_TBIEN_Msk, /**< Transmit buffer event */
 256:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_STANDARD_RECEIVE    = USIC_CH_CCR_RIEN_Msk,  /**< Receive event */
 257:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE = USIC_CH_CCR_AIEN_Msk,  /**< Alternate receive event */
 258:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_BAUD_RATE_GENERATOR = USIC_CH_CCR_BRGIEN_Msk /**< Baudrate generator event */
 259:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_EVENT_t;
 260:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 261:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 262:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel parity mode
 263:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** */
 264:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_PARITY_MODE
 265:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 266:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_NONE     = 0x0UL,  /**< Disable parity mode */
 267:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_EVEN     = 0x2UL << USIC_CH_CCR_PM_Pos,  /**< Enable even parity mode */
 268:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_ODD      = 0x3UL << USIC_CH_CCR_PM_Pos   /**< Enable odd parity mode */
 269:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_PARITY_MODE_t;
 270:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 271:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 272:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel data output mode
 273:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** */
 274:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_DATA_OUTPUT_MODE
 275:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 276:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_DATA_OUTPUT_MODE_NORMAL   = 0x0UL,  /**< Data output normal mode */
 277:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_DATA_OUTPUT_MODE_INVERTED = 0x1UL << USIC_CH_SCTR_DOCFG_Pos   /**< Data output invert
 278:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_DATA_OUTPUT_MODE_t;
 279:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 280:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 281:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel data transmit buffer status
 282:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** */
 283:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TBUF_STATUS
 284:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 285:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_IDLE = 0x0UL,                 /**< Transfer buffer is currently idle*/
 286:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_BUSY = USIC_CH_TCSR_TDV_Msk   /**< Transfer buffer is currently busy*/
 287:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_TBUF_STATUS_t;
 288:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 289:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 290:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 291:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 292:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel data transmit buffer status modification
 293:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** */
 294:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TBUF_STATUS_SET
 295:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 296:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_SET_BUSY   = 0x1UL, /**< Set Transfer buffer status to busy*/
 297:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_SET_IDLE   = 0x2UL  /**< Set Transfer buffer status to idle*/
 298:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_TBUF_STATUS_SET_t;
 299:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 300:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 301:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel receive buffer status
 302:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** */
 303:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RBUF_STATUS
 304:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 305:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_RBUF_STATUS_DATA_VALID0 = USIC_CH_RBUFSR_RDV0_Msk, /**< RBUF0 data has not yet been r
 306:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_RBUF_STATUS_DATA_VALID1 = USIC_CH_RBUFSR_RDV1_Msk  /**< RBUF1 data has not yet been r
 307:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_RBUF_STATUS_t;
 308:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 309:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 310:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel output signal passive data level
 311:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** */
 312:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USCI_CH_PASSIVE_DATA_LEVEL
 313:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 314:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_PASSIVE_DATA_LEVEL0 = 0x0UL, /**< Passive level(idle mode signal level) 0 */
 315:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_PASSIVE_DATA_LEVEL1 = 0x1UL << USIC_CH_SCTR_PDL_Pos  /**< Passive level(idle mode sig
 316:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_PASSIVE_DATA_LEVEL_t;
 317:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 318:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 319:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel receive FIFO size
 320:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** */
 321:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_FIFO_SIZE
 322:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 323:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_DISABLED     = 0x0U,  /**< FIFO Disabled */
 324:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_2WORDS  = 0x1U,  /**< FIFO size: 2 words */
 325:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_4WORDS  = 0x2U,  /**< FIFO size: 4 words */
 326:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_8WORDS  = 0x3U,  /**< FIFO size: 8 words */
 327:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_16WORDS = 0x4U,  /**< FIFO size: 16 words */
 328:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_32WORDS = 0x5U,  /**< FIFO size: 32 words */
 329:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_64WORDS = 0x6U   /**< FIFO size: 64 words */
 330:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_FIFO_SIZE_t;
 331:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 332:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 333:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel transmit FIFO interrupt node pointers
 334:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** */
 335:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER
 336:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 337:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD  = USIC_CH_TBCTR_STBINP_Pos,  /**< Node pointe
 338:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE = USIC_CH_TBCTR_ATBINP_Pos   /**< Node pointe
 339:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t;
 340:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 341:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 342:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel transmit FIFO event configuration
 343:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** */
 344:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_EVENT_CONF
 345:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 346:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD  = USIC_CH_TBCTR_STBIEN_Msk,   /**< Enable FIFO standard t
 347:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_CONF_ERROR     = (int32_t)USIC_CH_TBCTR_TBERIEN_Msk  /**< Enable transmi
 348:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_EVENT_CONF_t;
 349:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 350:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 351:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel transmit FIFO status
 352:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** */
 353:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_EVENT
 354:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 355:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_STANDARD = USIC_CH_TRBSR_STBI_Msk,    /**< Transmit FIFO status: Standar
 356:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_ERROR    = USIC_CH_TRBSR_TBERI_Msk    /**< Transmit FIFO status: Error e
 357:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_EVENT_t;
 358:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 359:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 360:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel receive FIFO interrupt node pointers
 361:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** */
 362:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER
 363:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 364:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD  = USIC_CH_RBCTR_SRBINP_Pos, /**< Node pointer
 365:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE = USIC_CH_RBCTR_ARBINP_Pos  /**< Node pointer
 366:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t;
 367:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 368:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 369:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel receive FIFO event configuration
 370:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** */
 371:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_EVENT_CONF
 372:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 373:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD  = USIC_CH_RBCTR_SRBIEN_Msk,   /**< Enable FIFO standard r
 374:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_ERROR     = (int32_t)USIC_CH_RBCTR_RBERIEN_Msk,  /**< Enable receiv
 375:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE = USIC_CH_RBCTR_ARBIEN_Msk   /**< Enable FIFO alternative
 376:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_EVENT_CONF_t;
 377:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 378:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 379:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel receive FIFO status
 380:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** */
 381:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_EVENT
 382:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 383:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_STANDARD  = USIC_CH_TRBSR_SRBI_Msk,   /**< Receive FIFO status: Standard
 384:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_ERROR     = USIC_CH_TRBSR_RBERI_Msk,  /**< Receive FIFO status: Error ev
 385:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE = USIC_CH_TRBSR_ARBI_Msk    /**< Receive FIFO status: Alternat
 386:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_EVENT_t;
 387:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 388:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 389:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel baudrate generator clock source
 390:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** */
 391:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_CLOCK_SOURCE
 392:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 393:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_SOURCE_DIVIDER = 0x0UL, /**< Baudrate generator clock source : Source divid
 394:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1T    = 0x2UL << USIC_CH_BRG_CLKSEL_Pos  /**< Baudrate generator c
 395:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_BRG_CLOCK_SOURCE_t;
 396:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 397:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 398:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel baudrate generator divider mode
 399:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** */
 400:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE
 401:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 402:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_DISABLED   = 0x0UL, /**< Baudrate generator clock divider: Dis
 403:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL     = 0x1UL << USIC_CH_FDR_DM_Pos, /**< Baudrate genera
 404:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL = 0x2UL << USIC_CH_FDR_DM_Pos  /**< Baudrate genera
 405:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_t;
 406:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 407:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 408:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel baudrate generator master clock passive level
 409:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** */
 410:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL
 411:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 412:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_0 = 0x0UL, /**< Baudrate generator master clock passiv
 413:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_1 = 0x1UL << USIC_CH_BRG_MCLKCFG_Pos  /**< Baudrate ge
 414:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_t;
 415:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 416:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 417:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel baudrate generator shift clock passive level
 418:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** */
 419:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL
 420:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 421:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED = 0x0UL, /**< Shift clock passive leve
 422:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED = 0x1UL << USIC_CH_BRG_SCLKCFG_Pos, /*
 423:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_ENABLED  = (int32_t)(0x2UL << USIC_CH_BRG_SCLKC
 424:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_ENABLED  = (int32_t)(0x3UL << USIC_CH_BRG_SCLKC
 425:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t;
 426:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 427:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 428:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel baudrate generator shift clock output
 429:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** */
 430:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT
 431:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 432:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK = 0x0UL, /**< Baudrate generator shift clock output: SCL.
 433:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1 = 0x1UL << USIC_CH_BRG_SCLKOSEL_Pos   /**< Baudrate genera
 434:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t;
 435:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 436:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /*******************************************************************************
 437:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * DATA STRUCTURES
 438:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *******************************************************************************/
 439:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 440:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /*Anonymous structure/union guard start*/
 441:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #if defined(__CC_ARM)
 442:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   #pragma push
 443:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   #pragma anon_unions
 444:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #elif defined(__TASKING__)
 445:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   #pragma warning 586
 446:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #endif
 447:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 448:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 449:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC module structure
 450:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 451:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** typedef USIC_GLOBAL_TypeDef XMC_USIC_t;
 452:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 453:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 454:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel structure.<br> The members of the structure are same as in the device header file, 
 455:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * except for some registers.
 456:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * DX0CR, DX1CR, DX2CR, DX3CR, DX4CR and DX5CR are replaced with the array DXCR[6].
 457:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * TBUF0 to TBUF31 are replaced with TBUF[32].
 458:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * IN0 to IN31 are replaced with IN[32].
 459:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 460:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** typedef struct XMC_USIC_CH
 461:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 462:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __I  uint32_t  RESERVED0;
 463:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __I  uint32_t  CCFG;			/**< Channel configuration register*/
 464:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __I  uint32_t  RESERVED1;
 465:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  KSCFG;			/**< Kernel state configuration register*/
 466:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  FDR;			/**< Fractional divider configuration register*/
 467:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  BRG;			/**< Baud rate generator register*/
 468:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  INPR;			/**< Interrupt node pointer register*/
 469:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  DXCR[6];		/**< Input control registers DX0 to DX5.*/
 470:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  SCTR;			/**< Shift control register*/
 471:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  TCSR;
 472:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 473:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   union {
 474:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****     __IO uint32_t  PCR_IICMode;	/**< I2C protocol configuration register*/
 475:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****     __IO uint32_t  PCR_IISMode; /**< I2S protocol configuration register*/
 476:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****     __IO uint32_t  PCR_SSCMode;	/**< SPI protocol configuration register*/
 477:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****     __IO uint32_t  PCR;			/**< Protocol configuration register*/
 478:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****     __IO uint32_t  PCR_ASCMode;	/**< UART protocol configuration register*/
 479:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   };
 480:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  CCR;			/**< Channel control register*/
 481:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  CMTR;			/**< Capture mode timer register*/
 482:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 483:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   union {
 484:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****     __IO uint32_t  PSR_IICMode;	/**< I2C protocol status register*/
 485:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****     __IO uint32_t  PSR_IISMode;	/**< I2S protocol status register*/
 486:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****     __IO uint32_t  PSR_SSCMode;	/**< SPI protocol status register*/
 487:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****     __IO uint32_t  PSR;			/**< Protocol status register*/
 488:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****     __IO uint32_t  PSR_ASCMode;	/**< UART protocol status register*/
 489:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   };
 490:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __O  uint32_t  PSCR;			/**< Protocol status clear register*/
 491:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __I  uint32_t  RBUFSR;		/**< Receive buffer status register*/
 492:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __I  uint32_t  RBUF;			/**< Receive buffer register*/
 493:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __I  uint32_t  RBUFD;			/**< Debug mode receive buffer register*/
 494:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __I  uint32_t  RBUF0;			/**< Receive buffer 0*/
 495:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __I  uint32_t  RBUF1;			/**< Receive buffer 1*/
 496:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __I  uint32_t  RBUF01SR;		/**< Receive buffer status register*/
 497:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __O  uint32_t  FMR;			/**< Flag modification register*/
 498:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __I  uint32_t  RESERVED2[5];
 499:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  TBUF[32];		/**< Tranmsit buffer registers*/
 500:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  BYP;			/**< FIFO bypass register*/
 501:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  BYPCR;			/**< FIFO bypass control register*/
 502:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  TBCTR;			/**< Transmit FIFO control register*/
 503:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  RBCTR;			/**< Receive FIFO control register*/
 504:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __I  uint32_t  TRBPTR;		/**< Transmit/recive buffer pointer register*/
 505:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  TRBSR;			/**< Transmit/receive buffer status register*/
 506:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __O  uint32_t  TRBSCR;		/**< Transmit/receive buffer status clear register*/
 507:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __I  uint32_t  OUTR;			/**< Receive FIFO output register*/
 508:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __I  uint32_t  OUTDR;			/**< Receive FIFO debug output register*/
 509:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __I  uint32_t  RESERVED3[23];
 510:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   __O  uint32_t  IN[32];		/**< Transmit FIFO input register*/
 511:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_t;
 512:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 513:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 514:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /*Anonymous structure/union guard end*/
 515:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #if defined(__CC_ARM)
 516:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   #pragma pop
 517:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #elif defined(__TASKING__)
 518:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   #pragma warning restore
 519:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #endif
 520:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 521:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /*******************************************************************************
 522:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * API PROTOTYPES
 523:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  ******************************************************************************/
 524:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 525:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #ifdef __cplusplus
 526:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** extern "C" {
 527:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #endif
 528:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 529:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_IsModuleValid(const XMC_USIC_t *const module)
 530:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 531:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   bool tmp;
 532:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 533:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   tmp = (module == XMC_USIC0);
 534:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #if defined(XMC_USIC1)  
 535:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   tmp = tmp || (module == XMC_USIC1);
 536:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #endif
 537:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #if defined(XMC_USIC2)  
 538:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   tmp = tmp || (module == XMC_USIC2);
 539:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #endif
 540:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 541:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   return tmp;
 542:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
 543:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 544:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_IsChannelValid(const XMC_USIC_CH_t *const channel)
 545:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 546:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   bool tmp;
 547:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 548:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   tmp = ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1));
 549:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #if defined(XMC_USIC1)  
 550:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   tmp = tmp || ((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1));
 551:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #endif
 552:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #if defined(XMC_USIC2)  
 553:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   tmp = tmp || ((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1));
 554:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** #endif
 555:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 556:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   return tmp;
 557:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
 558:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 559:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /* Common APIs */
 560:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 561:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 562:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  usic Pointer to USIC module handler of type @ref XMC_USIC_t.\n
 563:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC0 to @ref XMC_USIC2 based on device support.
 564:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 565:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 
 566:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 567:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Enables the USIC module.\n\n
 568:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Enables the clock for the USIC module by following the
 569:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * clock enabling sequence for the selected device.
 570:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 571:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 572:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_Enable(), XMC_USIC_Disable() \n\n\n
 573:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 574:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** void XMC_USIC_Enable(XMC_USIC_t *const usic);
 575:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 576:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  usic Pointer to USIC module handler of type @ref XMC_USIC_t.\n
 577:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC0 to @ref XMC_USIC2 based on device support.
 578:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 579:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 580:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 581:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Disables the USIC module.\n\n
 582:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Disables the clock for the USIC module by following the clock
 583:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * disabling sequence for the selected device.
 584:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 585:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 586:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_Disable(), XMC_USIC_Enable() \n\n\n
 587:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 588:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** void XMC_USIC_Disable(XMC_USIC_t *const usic);
 589:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 590:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 591:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 592:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 593:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 594:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 595:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Enables the USIC channel. \n\n
 596:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel is enabled by setting the module enable bit in KSCFG register bitfield MODEN.
 597:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * On enabling, the channel is set to idle mode.
 598:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 599:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 600:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_Disable(), XMC_USIC_Enable() \n\n\n
 601:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 602:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel);
 603:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 604:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 605:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 606:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 607:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 608:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 609:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Disables the USIC channel.\n\n
 610:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel is disabled by setting the module enable bit(MDEN) to 0 in the register KSCFG.
 611:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 612:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 613:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_Enable(), XMC_USIC_Disable() \n\n\n
 614:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 615:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** void XMC_USIC_CH_Disable(XMC_USIC_CH_t *const channel);
 616:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 617:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 618:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 619:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 620:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  rate Desired baudrate. \b Range: minimum value = 100, maximum value depends on the perip
 621:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				and \a oversampling. Maximum baudrate can be derived using the formula: (fperiph * 1023)/(10
 622:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 623:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 						This can be related to the number of samples for each logic state of the data signal. \n
 624:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 						\b Range: 1 to 32. Value should be chosen based on the protocol used.
 625:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return Status indicating the baudrate configuration.\n
 626:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_STATUS_OK if baudrate is successfully configured,
 627:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 					  @ref XMC_USIC_CH_STATUS_ERROR if desired baudrate or oversampling is invalid.
 628:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 629:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 630:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Configures the baudrate of the USIC channel. \n\n
 631:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Baudrate is configured by considering the peripheral frequency and the desired baudrate.
 632:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Optimum values of FDR->STEP and BRG->PDIV are calulated and used for generating the desired
 633:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * baudrate.
 634:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 635:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 636:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_SetStartTransmisionMode(), XMC_USIC_CH_SetInputSource() \n\n\n
 637:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 638:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t 
 639:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 640:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 641:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 642:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 643:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  pdiv Desired divider for the external frequency input. \b Range: minimum value = 1, maxi
 644:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 645:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 						This can be related to the number of samples for each logic state of the data signal. \n
 646:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 						\b Range: 1 to 32. Value should be chosen based on the protocol used.
 647:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  combination_mode Selects which edge of the synchronized(and optionally filtered) signal 
 648:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *                          output DXnT of the input stage.
 649:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 650:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 651:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 652:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 653:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Enables the external frequency input for the Baudrate Generator and configures the divider, over
 654:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * the combination mode of the USIC channel. \n\n
 655:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 656:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 657:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_SetBRGInputClockSource(), XMC_USIC_CH_SetInputTriggerCombinationMode() \n\n\n
 658:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 659:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** void XMC_USIC_CH_ConfigExternalInputSignalToBRG(XMC_USIC_CH_t *const channel,
 660:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 		                                         const uint16_t pdiv,
 661:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 												 const uint32_t oversampling,
 662:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 												 const XMC_USIC_CH_INPUT_COMBINATION_MODE_t combination_mode);
 663:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 664:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 665:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 666:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 667:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 668:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 669:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  source Input source select for the input stage. The table below maps the enum value with
 670:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * <table><tr><td>0</td><td>DXnA</td></tr><tr><td>1</td><td>DXnB</td></tr><tr><td>2</td><td>DXnC</t
 671:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * <tr><td>4</td><td>DXnE</td></tr><tr><td>5</td><td>DXnF</td></tr><tr><td>6</td><td>DXnG</td></tr>
 672:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * </tr></table>
 673:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 674:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 675:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 676:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Selects the data source for USIC input stage.\n\n
 677:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Selects the input data signal source among DXnA, DXnB.. DXnG for the input stage. The API can be
 678:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * like DX0CR, DX1CR etc. 
 679:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *  
 680:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 681:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableIn
 682:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 683:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 684:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INP
 685:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 686:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 687:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                          ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 688:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
 689:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 690:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 691:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 692:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 693:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 694:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 695:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 696:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 697:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * The input of the data shift unit is controlled by the
 698:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * protocol pre-processor. \n\n
 699:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 700:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 701:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_ConnectInputDataShiftToDataInput()\n\n\n
 702:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 703:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConnectInputDataShiftToPPP(XMC_USIC_CH_t *const channel, const XMC
 704:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 705:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_INSW_Msk;
 706:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
 707:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 708:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 709:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 710:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 711:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 712:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 713:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 714:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 715:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 716:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * The input of the data shift unit is connected to
 717:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * the selected data input line. \n\n
 718:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 719:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * This setting is used
 720:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * if the signals are directly derived from an input
 721:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * pin without treatment by the protocol preprocessor.
 722:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 723:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_ConnectInputDataShiftToPPP()\n\n\n
 724:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 725:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConnectInputDataShiftToDataInput(XMC_USIC_CH_t *const channel, con
 726:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 727:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->DXCR[input] |= USIC_CH_DXCR_INSW_Msk;
 728:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
 729:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 730:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 731:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 732:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 733:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 734:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 735:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 736:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 737:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 738:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Enables input inversion for USIC channel input data signal. \n\n
 739:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 740:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Polarity of the input source can be changed to provide inverted data input.
 741:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 742:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputInversion()\n\n\n
 743:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 744:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputInversion(XMC_USIC_CH_t *const channel, const XMC_USIC_
 745:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 746:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->DXCR[input] |= USIC_CH_DXCR_DPOL_Msk;
 747:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
 748:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 749:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 750:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 751:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 752:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 753:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 754:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 755:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 756:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 757:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Disables input inversion for USIC channel. \n\n
 758:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 759:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Resets the input data polarity for the USIC channel input data signal.
 760:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 761:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputInversion()\n\n\n
 762:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 763:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputInversion(XMC_USIC_CH_t *const channel, const XMC_USIC
 764:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 765:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_DPOL_Msk;
 766:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
 767:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 768:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 769:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 770:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 771:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 772:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 773:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 774:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Enables delay compensation. \n\n
 775:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 776:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Delay compensation can be applied to the receive path.
 777:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 778:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_DisableDelayCompensation()\n\n\n
 779:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 780:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableDelayCompensation(XMC_USIC_CH_t *const channel)
 781:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 782:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->DXCR[1U] |= USIC_CH_DX1CR_DCEN_Msk;
 783:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
 784:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 785:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 786:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 787:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 788:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 789:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 790:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 791:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Disables delay compensation.. \n\n
 792:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 793:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 794:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_EnableDelayCompensation()\n\n\n
 795:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 796:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableDelayCompensation(XMC_USIC_CH_t *const channel)
 797:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 798:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->DXCR[1U] &=(uint32_t)~USIC_CH_DX1CR_DCEN_Msk;
 799:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
 800:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 801:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 802:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 803:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 804:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 805:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 806:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 807:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 808:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 809:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Enables the input digital filter for USIC channel input data signal. \n\n
 810:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will be digitally filtered.
 811:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 812:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 813:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputDigitalFilter()\n\n\n
 814:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 815:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputDigitalFilter(XMC_USIC_CH_t *const channel, const XMC_U
 816:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 817:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->DXCR[input] |= (uint32_t)USIC_CH_DXCR_DFEN_Msk;
 818:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
 819:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 820:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 821:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 822:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 823:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 824:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 825:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 826:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 827:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Disables the input digital filter for USIC channel input data signal. \n\n
 828:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will not be digitally filtered.
 829:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 830:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 831:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputDigitalFilter()\n\n\n
 832:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 833:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputDigitalFilter(XMC_USIC_CH_t *const channel, const XMC_
 834:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 835:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_DFEN_Msk;
 836:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
 837:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 838:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 839:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 840:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 841:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 842:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 843:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 844:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 845:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Enables input synchronization for the USIC channel input data signal. \n\n
 846:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will be synchronized with fPERIPH.
 847:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * A noisy signal can be synchronized and filtered by enabling the digital filter.
 848:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 849:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 850:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputSync(), XMC_USIC_CH_EnableInputDigitalFilter()\n\n\n
 851:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 852:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputSync(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_IN
 853:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 854:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->DXCR[input] |=(uint32_t)USIC_CH_DXCR_DSEN_Msk;
 855:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
 856:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 857:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 858:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 859:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 860:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 861:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 862:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 863:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 864:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Disables input synchronization for the USIC channel input data signal. \n\n
 865:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will not be synchronized.
 866:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 867:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 868:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_DisableInputDigitalFilter() \n\n\n
 869:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 870:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputSync(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_I
 871:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 872:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_DSEN_Msk;
 873:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
 874:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 875:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 876:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 877:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 878:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 879:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  sampling_freq Sampling frequency value of type \a XMC_USIC_CH_INPUT_SAMPLING_FREQ_t.
 880:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 881:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 882:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 883:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Sets sampling frequency for USIC channel input data signal. \n\n
 884:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 885:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 886:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSource(), XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_EnableInputDigitalFilte
 887:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 888:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputSamplingFreq(XMC_USIC_CH_t *const channel,
 889:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 		                                              const XMC_USIC_CH_INPUT_t input,
 890:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 		                                              const XMC_USIC_CH_INPUT_SAMPLING_FREQ_t sampling_fr
 891:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 892:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DXCR_SFSEL_Msk)) |
 893:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                          ((uint32_t)sampling_freq);
 894:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
 895:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 896:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 897:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 898:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 899:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 900:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 901:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  combination_mode Combination mode value of type \a XMC_USIC_CH_INPUT_COMBINATION_MODE_t.
 902:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 903:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 904:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 905:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Selects which edge of the synchronized signal DXnS activates the trigger output DXnT of the inpu
 906:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 907:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 908:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSource(), XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_EnableInputDigitalFilte
 909:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 910:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputTriggerCombinationMode(XMC_USIC_CH_t *const channel,
 911:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 		                                                        const XMC_USIC_CH_INPUT_t input,
 912:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 		                                                        const XMC_USIC_CH_INPUT_COMBINATION_MODE_
 913:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 914:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DXCR_CM_Msk)) |
 915:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                          ((uint32_t)combination_mode << USIC_CH_DXCR_CM_Pos);
 916:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
 917:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 918:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 919:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 920:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 921:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  clock_source clock source for the BRG.
 922:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 923:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 924:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 925:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Sets the clock source for the BRG. \n\n
 926:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 927:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 928:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputTriggerCombinationMode(), XMC_USIC_CH_SetExternalClockBRGDivider()\n\n\n
 929:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 930:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetBRGInputClockSource(XMC_USIC_CH_t *const channel, const XMC_USI
 931:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 932:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->BRG = (uint32_t)(channel->BRG & (~USIC_CH_BRG_CLKSEL_Msk)) | (uint32_t)(clock_source);
 933:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
 934:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 935:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 936:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 937:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 938:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param data Data to be transmitted. \n
 939:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *           \b Range: 16bit unsigned data. minimum= 0, maximum= 65535
 940:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 941:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 942:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 943:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Writes data into the transmit buffer. \n\n
 944:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * The data provided is placed in TBUF[0U].
 945:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 946:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 947:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 948:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_WriteToTBUFTCI() \n\n\n
 949:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 950:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_WriteToTBUF(XMC_USIC_CH_t *const channel, const uint16_t data)
 951:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 952:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->TBUF[0U] = data;
 953:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
 954:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 955:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 956:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 957:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 958:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param data Data to be transmitted.
 959:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param transmit_control_information transmit control information to be configured while transmit
 960:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31.
 961:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 962:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 963:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 964:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Writes data to the transmit buffer in a control mode. \n\n
 965:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * When the respective control mode is enabled , this API can be used.
 966:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 967:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 968:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 969:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_WriteToTBUF() \n\n\n
 970:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 971:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_WriteToTBUFTCI(XMC_USIC_CH_t *const channel,
 972:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                              const uint16_t data,
 973:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                              const uint32_t transmit_control_information)
 974:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 975:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->TBUF[transmit_control_information] = data;
 976:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
 977:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 978:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
 979:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 980:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 981:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  word_length Number of bits to be configured for a data word. \n
 982:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 					   \b Range: minimum= 1, maximum= 16. \n
 983:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 					   e.g: For word length of 8, \a word_length should be provided as 8.
 984:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 985:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 986:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 987:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Sets the data word length in number of bits. \n\n
 988:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Sets the number of bits to represent a data word. Frame length should be a multiple of word leng
 989:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
 990:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 991:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_SetFrameLength()\n\n\n
 992:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
 993:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_len
 994:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
 995:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
 996:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                   (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
 997:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
 998:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
 999:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1000:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1001:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1002:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  frame_length Number of bits in a frame. \n
1003:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 						\b Range: minimum= 1, maximum= 0x3f. The maximum value for fixed frame size is 0x3f. \n
1004:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 						e.g: For a frame length of 16, \a frame_length should be provided as 16.
1005:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1006:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1007:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1008:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Define the data frame length.\n\n
1009:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Set the number of bits to be serially transmitted in a frame.
1010:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * The frame length should be multiples of word length. If the value is set to 0x40, the frame leng
1011:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * has to be controlled explicitly. 
1012:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1013:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1014:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1015:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1016:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_l
1017:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1018:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
1019:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                   (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
1020:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1021:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1022:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1023:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1024:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1025:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param event Bit mask of the channel events to be enabled. Use @ref XMC_USIC_CH_EVENT_t for the 
1026:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC_CH_EVENT_RECEIVE_START, @ref XMC_USIC_CH_EVENT_DATA_LOST etc. Multip
1027:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				can be combined using \a OR operation.
1028:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1029:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1030:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1031:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Enable the channel interrupt events.\n\n
1032:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Common channel events related to serial communication can be configured using this API.
1033:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Multiple events can be combined using the bitwise OR operation and configured in one function ca
1034:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_EVENT_t enumerates multiple protocol event bitmasks. These enumerations can be used 
1035:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1036:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1037:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1038:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1039:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
1040:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1041:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->CCR |= event;
1042:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1043:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1044:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1045:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1046:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				  \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device sup
1047:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param event Bit mask of the channel events to be disabled. Use @ref XMC_USIC_CH_EVENT_t for the
1048:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC_CH_EVENT_RECEIVE_START, @ref XMC_USIC_CH_EVENT_DATA_LOST etc. Multip
1049:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				can be combined using \a OR operation.
1050:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1051:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1052:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1053:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Disable the channel interrupt events. \n\n
1054:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Multiple events can be combined using the bitwise OR operation and configured in one function ca
1055:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_EVENT_t enumerates multiple protocol event bitmasks. These enumerations can be used 
1056:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1057:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1058:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1059:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** */
1060:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
1061:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1062:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->CCR &= (uint32_t)~event;
1063:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1064:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1065:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1066:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1067:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				  \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device sup
1068:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  interrupt_node Interrupt node pointer to be configured. \n
1069:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 						  \b Range: @ref XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT,
1070:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 						  			@ref XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER etc.
1071:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param service_request Service request number.\n
1072:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 						  \b Range: 0 to 5.
1073:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1074:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1075:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1076:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Sets the interrupt node for USIC channel events. \n\n
1077:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * For an event to generate interrupt, node pointer should be configured with service request(SR0, 
1078:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * The NVIC node gets linked to the interrupt event by doing so.<br>
1079:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Note: NVIC node should be separately enabled to generate the interrupt.
1080:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1081:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1082:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_EnableEvent() \n\n\n
1083:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1084:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1085:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                          const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
1086:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                          const uint32_t service_request);
1087:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1088:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1089:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1090:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1091:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return Stataus @ref XMC_USIC_CH_TBUF_STATUS_IDLE if transmit buffer is free,
1092:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *                 @ref XMC_USIC_CH_TBUF_STATUS_BUSY if transmit buffer is busy.
1093:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1094:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1095:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Gets transmit buffer status. \n\n
1096:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Status indicates whether the transmit buffer is free, or busy transmitting data.
1097:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * The status depends on the value of TDV flag in TCSR register.
1098:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * This status can be used while transmitting data. Transmit data when the transmit buffer
1099:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * status is @ref XMC_USIC_CH_TBUF_STATUS_IDLE.
1100:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1101:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1102:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_SetDataOutputMode() \n\n\n
1103:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1104:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const 
1105:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
  27              	 .loc 1 1105 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
1106:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
  43              	 .loc 1 1106 0
  44 0008 7B68     	 ldr r3,[r7,#4]
  45 000a 9B6B     	 ldr r3,[r3,#56]
  46 000c DBB2     	 uxtb r3,r3
  47 000e 23F07F03 	 bic r3,r3,#127
  48 0012 DBB2     	 uxtb r3,r3
1107:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
  49              	 .loc 1 1107 0
  50 0014 1846     	 mov r0,r3
  51 0016 0C37     	 adds r7,r7,#12
  52              	.LCFI3:
  53              	 .cfi_def_cfa_offset 4
  54 0018 BD46     	 mov sp,r7
  55              	.LCFI4:
  56              	 .cfi_def_cfa_register 13
  57              	 
  58 001a 5DF8047B 	 ldr r7,[sp],#4
  59              	.LCFI5:
  60              	 .cfi_restore 7
  61              	 .cfi_def_cfa_offset 0
  62 001e 7047     	 bx lr
  63              	 .cfi_endproc
  64              	.LFE175:
  66              	 .section .text.XMC_USIC_CH_SetMode,"ax",%progbits
  67              	 .align 2
  68              	 .thumb
  69              	 .thumb_func
  71              	XMC_USIC_CH_SetMode:
  72              	.LFB209:
1108:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1109:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1110:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @brief API to get receive buffer status
1111:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1112:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1113:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return Status of data validity check for RBUF0 and RBUF1. \n
1114:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 		   Returned value should be masked with RDV0 and RDV1 bits to know the status. \n
1115:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 		   \b Range: @ref XMC_USIC_CH_RBUF_STATUS_DATA_VALID0, @ref XMC_USIC_CH_RBUF_STATUS_DATA_VALID
1116:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1117:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1118:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Checks if RBUF0 and RBUF1 have valid unread data. \n\n
1119:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * It checks the bits RDV0 and RDV1 of the RBUFSR register.
1120:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Returns the value of RBUFSR masked with bitmasks of RDV0 and RDV1.
1121:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * It can be used to decide whether 2bytes has to be read from RBUF or 1 byte. 
1122:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * If both bitmasks XMC_USIC_CH_RBUF_STATUS_DATA_VALID0 and XMC_USIC_CH_RBUF_STATUS_DATA_VALID1
1123:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * are set, then 2 bytes can be read from RBUF. If only either of them is set, then only one byte
1124:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * can be read from RBUF.
1125:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1126:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
1127:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1128:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_GetReceiveBufferStatus(XMC_USIC_CH_t *const channel)
1129:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1130:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   return ((uint32_t) (channel->RBUFSR & (USIC_CH_RBUFSR_RDV0_Msk | USIC_CH_RBUFSR_RDV1_Msk)));
1131:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1132:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1133:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1134:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1135:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1136:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1137:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  start_transmision_mode Transmission mode to be enabled. \n
1138:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 								\b Range: @ref XMC_USIC_CH_START_TRANSMISION_DISABLED,
1139:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 								@ref XMC_USIC_CH_START_TRANSMISION_ON_TDV, @ref XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2
1140:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 								@ref XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_1
1141:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *                              
1142:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1143:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1144:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1145:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Configures data transmission. \n\n
1146:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * The configuration affects the data shifted on the DOUT0 pin.
1147:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1148:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1149:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus(), XMC_USIC_CH_SetDataOutputMode() \n\n\n
1150:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1151:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetStartTransmisionMode(XMC_USIC_CH_t *const channel,
1152:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                                          const XMC_USIC_CH_START_TRANSMISION_MODE_t
1153:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1154:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->TCSR = (uint32_t)(channel->TCSR & (~USIC_CH_TCSR_TDEN_Msk)) | (uint32_t)start_transmisio
1155:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1156:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1157:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1158:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1159:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1160:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1161:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  data_output_mode  Data output mode. \n
1162:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_DATA_OUTPUT_MODE_NORMAL, @ref XMC_USIC_CH_DATA_OUTPUT_MODE_INVERTE
1163:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1164:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1165:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1166:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Configures the mode for data output. \n\n
1167:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel can be configured to shift inverted data or direct data based on the input to the A
1168:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1169:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1170:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_SetStartTransmisionMode() \n\n\n
1171:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1172:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetDataOutputMode(XMC_USIC_CH_t *const channel,
1173:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                                    const XMC_USIC_CH_DATA_OUTPUT_MODE_t data_output
1174:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1175:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_DOCFG_Msk)) | (uint32_t)data_output_mod
1176:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1177:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1178:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1179:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1180:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1181:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1182:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1183:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1184:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Enables automatic update of frame length. \n\n
1185:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * When the automatic update of frame length is enabled, frame length is configured based on the 
1186:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * index of the TBUF[]/IN[] register array. When the data is written to TBUF[x], frame length is co
1187:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * with the mask value of \a x at the last 5 bit positions. Same logic is applicable if data is wri
1188:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * IN[x] register.
1189:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1190:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1191:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_DisableFrameLengthControl(), XMC_USIC_CH_TXFIFO_PutDataFLEMode() \n\n\n
1192:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1193:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableFrameLengthControl(XMC_USIC_CH_t *const channel)
1194:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1195:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->TCSR = (uint32_t)(channel->TCSR & (~(USIC_CH_TCSR_WLEMD_Msk |
1196:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                          USIC_CH_TCSR_SELMD_Msk |
1197:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                          USIC_CH_TCSR_WAMD_Msk |
1198:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                          USIC_CH_TCSR_HPCMD_Msk))) |
1199:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                          (uint32_t)USIC_CH_TCSR_FLEMD_Msk;
1200:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1201:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1202:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1203:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1204:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1205:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1206:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1207:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1208:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Disables automatic update of frame length. \n\n
1209:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * When automatic update of frame length is disabled, frame length has to configured explicitly.
1210:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Frame length remains fixed until it is changed again.
1211:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1212:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1213:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_DisableFrameLengthControl(), XMC_USIC_CH_SetFrameLength() \n\n\n
1214:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1215:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableFrameLengthControl(XMC_USIC_CH_t *const channel)
1216:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1217:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->TCSR &= (uint32_t)~USIC_CH_TCSR_FLEMD_Msk;
1218:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1219:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1220:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1221:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1222:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1223:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1224:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1225:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1226:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Bit TCSR.TE is set if DX2T becomes active while TDV = 1. \n\n
1227:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Enables the transfer trigger unit to set bit TCSR.TE if the trigger signal DX2T becomes active
1228:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * for event driven transfer starts.
1229:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1230:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1231:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_DisableTBUFDataValidTrigger()\n\n\n
1232:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1233:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableTBUFDataValidTrigger(XMC_USIC_CH_t *const channel)
1234:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1235:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->TCSR |= (uint32_t)USIC_CH_TCSR_TDVTR_Msk;
1236:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1237:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1238:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1239:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1240:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1241:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1242:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1243:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1244:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Disables the trigger of TDV depending on DX2T signal. \n\n
1245:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Bit TCSR.TE is permanently set.
1246:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1247:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1248:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_EnableTBUFDataValidTrigger() \n\n\n
1249:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1250:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableTBUFDataValidTrigger(XMC_USIC_CH_t *const channel)
1251:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1252:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->TCSR &= (uint32_t)~USIC_CH_TCSR_TDVTR_Msk;
1253:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1254:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1255:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1256:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1257:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1258:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  service_request_line service request number of the event to be triggered. \n
1259:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 			\b Range: 0 to 5.
1260:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1261:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1262:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1263:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Trigger a USIC interrupt service request.\n\n
1264:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * When the USIC service request is triggered, the NVIC interrupt associated with it will be 
1265:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * generated if enabled. 
1266:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1267:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1268:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1269:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1270:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t
1271:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1272:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->FMR |= (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
1273:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1274:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1275:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1276:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1277:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1278:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  transmit_buffer_status clearing or setting the TDV flag. \n
1279:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1280:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1281:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1282:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1283:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Modify TCSR.TDV and TCSR.TE to control the start of a data word transmission by software.
1284:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1285:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1286:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
1287:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1288:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetTransmitBufferStatus(XMC_USIC_CH_t *const channel,
1289:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 		                                                 const XMC_USIC_CH_TBUF_STATUS_SET_t transmit_buf
1290:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1291:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->FMR = (uint32_t)transmit_buffer_status;
1292:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1293:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1294:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1295:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1296:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1297:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  passive_level Value of passive level for the channel. \n
1298:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_PASSIVE_DATA_LEVEL0, @ref XMC_USIC_CH_PASSIVE_DATA_LEVEL1
1299:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1300:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1301:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1302:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Set the passive data level of the output signal. \n\n
1303:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * When the USIC channel transmit stage is idle, the output signal level stays at the 
1304:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * configured passive level.
1305:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1306:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1307:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus(), XMC_USIC_CH_SetStartTransmisionMode() \n\n\n
1308:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1309:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetPassiveDataLevel(XMC_USIC_CH_t *const channel,
1310:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                                      const XMC_USIC_CH_PASSIVE_DATA_LEVEL_t passive
1311:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1312:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->SCTR &= (~USIC_CH_SCTR_PDL_Msk);
1313:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->SCTR |= (uint32_t)passive_level;
1314:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1315:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1316:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /* TX FIFO APIs */
1317:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1318:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1319:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1320:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param data_pointer Start position inside the FIFO buffer. \n
1321:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 		\b Range: 0 to 63.
1322:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param size Required size of the transmit FIFO. \n
1323:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1324:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param limit Threshold of transmit FIFO filling level to be considered for generating events. \n
1325:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1326:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1327:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1328:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1329:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Initializes the transmit FIFO. \n\n
1330:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Transmit FIFO is a subset of a common FIFO sized 64 words. This FIFO is shared between 2 channel
1331:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Each channel can share the FIFO for transmission and reception. \a data_pointer represents the s
1332:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * from where transmit data can be put, for the selected USIC channel. \a size represents the size 
1333:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 2. Since the FIFO is shared between 2 USIC channels, FIFO size should be carefully selected. A F
1334:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * event is generated when the FIFO filling level falls below the \a limit value.
1335:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1336:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1337:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent(), XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
1338:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1339:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
1340:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                   const uint32_t data_pointer,
1341:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                   const XMC_USIC_CH_FIFO_SIZE_t size,
1342:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                   const uint32_t limit);
1343:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1344:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1345:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1346:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1347:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param size Required size of the transmit FIFO. \n
1348:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1349:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param limit Threshold for transmit FIFO filling level to be considered for generating events. \
1350:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1351:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1352:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1353:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1354:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Sets the size and trigger limit for the transmit FIFO. \n\n
1355:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * The API is not to be called for initializing the transmit FIFO. The API shall be used for the 
1356:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * runtime change of transmit FIFO trigger limit. FIFO start position will not be affected on execu
1357:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1358:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1359:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit() \n\n\n
1360:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1361:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** void XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
1362:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                             const XMC_USIC_CH_FIFO_SIZE_t size,
1363:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                             const uint32_t limit);
1364:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1365:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1366:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1367:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1368:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1369:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param event Events to be enabled. Multiple events can be bitwise OR combined. @ref XMC_USIC_CH_
1370:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1371:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1372:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1373:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Enables the interrupt events related to transmit FIFO. \n\n
1374:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t.
1375:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Multiple events can be enabled by providing multiple events in a single call. For providing 
1376:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation. Events are configured in the TBC
1377:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1378:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Note: API only enables the events. For interrupt generation, interrupt node must be configured a
1379:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * must be enabled.
1380:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1381:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1382:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
1383:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1384:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t ev
1385:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1386:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->TBCTR |= event;
1387:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1388:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1389:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1390:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1391:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1392:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1393:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param event Events to be disabled. @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t \n
1394:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1395:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1396:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1397:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Disables the interrupt events related to transmit FIFO. \n\n
1398:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * By disabling the interrupt events, generation of interrupt is stopped. User can poll the event 
1399:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * flags from the status register using the API XMC_USIC_CH_TXFIFO_GetEvent(). 
1400:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t. Fo
1401:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.
1402:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1403:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1404:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1405:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1406:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t e
1407:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1408:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->TBCTR &= (uint32_t)~event;
1409:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1410:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1411:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1412:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1413:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				      \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1414:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param interrupt_node Node pointer representing the transmit FIFO events. \n
1415:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 						  \b Range: @ref XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
1416:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 						  			@ref XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE
1417:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param service_request The service request to be used for interrupt generation. \n
1418:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 						  \b Range: 0 to 5.
1419:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1420:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1421:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1422:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Sets an interrupt node for the transmit FIFO events.\n\n
1423:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * A node pointer represents one or more interrupt events. Service request represents the interrupt
1424:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * among the 6 interrupt nodes available for USIC module.
1425:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * API configures the service request to be used for interrupt generation for the events selected.
1426:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * A transmit FIFO event can generate an interrupt only if the interrupt node is configured for the
1427:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * the interrupt generation is enabled for the event. For example, transmit FIFO standard transmit 
1428:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * interrupt is generated if the interrupt node for the same is set and interrupt is enabled.<br>
1429:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1430:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Note: NVIC node should be explicitly enabled for the interrupt generation.
1431:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1432:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1433:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1434:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1435:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1436:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                                 const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t i
1437:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                                 const uint32_t service_request);
1438:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1439:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1440:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1441:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1442:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param data Data to be transmitted. \n
1443:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *           \b Range: 16bit unsigned data. minimum= 0, maximum= 65535
1444:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1445:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1446:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1447:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Writes data into the transmit FIFO. \n\n
1448:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * The data provided is placed in the transmit FIFO.
1449:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * The transmit FIFO should be configured before calling this API.
1450:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1451:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1452:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1453:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1454:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutData(XMC_USIC_CH_t *const channel, const uint16_t data)
1455:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1456:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->IN[0] = data;
1457:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1458:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1459:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1460:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1461:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1462:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param data Data to be transmitted.
1463:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param frame_length Frame length to be configured while transmitting the data. \n
1464:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31. e.g: For a frame length of 16, set \a frame_length as 15.
1465:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1466:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1467:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1468:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Writes data to the transmit FIFO in frame length control mode. \n\n
1469:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * When frame length control is enabled for dynamic update of frame length, this API can be used.
1470:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \a frame_length represents the frame length to be updated by the peripheral. 
1471:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \a frame_length is used as index for the IN[] register array.
1472:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1473:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1474:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1475:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1476:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataFLEMode(XMC_USIC_CH_t *const channel,
1477:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                                        const uint16_t data,
1478:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                                        const uint32_t frame_length)
1479:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1480:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->IN[frame_length] = data;
1481:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1482:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1483:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1484:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1485:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1486:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1487:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1488:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1489:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Clears the contents of transmit FIFO. \n\n
1490:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Transmit FIFO contents will be cleared and the filling level will be reset to 0.
1491:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1492:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1493:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
1494:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1495:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
1496:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1497:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->TRBSCR |= (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
1498:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1499:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1500:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1501:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1502:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1503:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return Status \a true if transmit FIFO is full
1504:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *              \a false if transmit FIFO is not full.
1505:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1506:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1507:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Checks if transmit FIFO is full. \n\n
1508:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * When the transmit FIFO filling level reaches the configured size, FIFO full flag is set.
1509:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * User should not write to the FIFO when the transmit FIFO is full.
1510:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1511:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1512:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
1513:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1514:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
1515:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1516:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
1517:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1518:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1519:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1520:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1521:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1522:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return Status \a true if transmit FIFO is empty
1523:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *              \a false if transmit FIFO has some data.
1524:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1525:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1526:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Checks if transmit FIFO is empty. \n\n
1527:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * When the transmit FIFO is empty, data can be written to FIFO.
1528:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * When the last written word to the transmit FIFO is transmitted out of the FIFO, 
1529:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * FIFO empty flag is set.
1530:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1531:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1532:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
1533:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1534:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
1535:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1536:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
1537:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1538:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1539:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1540:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1541:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1542:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return Transmit FIFO filling level. \n 
1543:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *           \b Range: minimum= 0(FIFO empty), maximum= transmit FIFO size.
1544:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1545:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1546:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Gets the transmit FIFO filling level. \n\n
1547:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * For every word written to the FIFO, filling level is updated. The API gives the value
1548:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * of this filling level.
1549:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1550:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1551:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
1552:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1553:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_TXFIFO_GetLevel(XMC_USIC_CH_t *const channel)
1554:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1555:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   return ((uint32_t)(channel->TRBSR & USIC_CH_TRBSR_TBFLVL_Msk) >> USIC_CH_TRBSR_TBFLVL_Pos);
1556:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1557:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1558:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1559:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1560:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1561:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return Status of standard transmit and transmit buffer error events. @ref XMC_USIC_CH_TXFIFO_EV
1562:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1563:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1564:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Gets the transmit FIFO event status. \n\n
1565:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Gives the status of transmit FIFO standard transmit buffer event and transmit buffer error event
1566:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * The status bits are located at their bit positions in the TRBSR register in the returned value.
1567:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * User can make use of the @ref XMC_USIC_CH_TXFIFO_EVENT_t enumeration for checking the status of 
1568:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * The status can be found by using the bitwise AND operation on the returned value with the enumer
1569:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1570:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Note: Event status flags should be cleared by the user explicitly.
1571:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1572:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1573:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_ClearEvent() \n\n\n
1574:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1575:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_TXFIFO_GetEvent(XMC_USIC_CH_t *const channel)
1576:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1577:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   return (uint32_t)((channel->TRBSR) & (USIC_CH_TRBSR_STBI_Msk |
1578:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                               USIC_CH_TRBSR_TBERI_Msk));
1579:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1580:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1581:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1582:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1583:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1584:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  event Transmit FIFO events to be cleared. \n
1585:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 			     \b Range: @ref XMC_USIC_CH_TXFIFO_EVENT_STANDARD, @ref XMC_USIC_CH_TXFIFO_EVENT_ERROR.
1586:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1587:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1588:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1589:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Clears the transmit FIFO event flags in the status register. \n\n
1590:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel peripheral does not clear the event flags after they are read.
1591:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * This API clears the events provided in the \a mask value. 
1592:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EVENT enumeration can be used as input. Multiple events
1593:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * can be cleared by providing a mask value obtained by bitwise OR operation of 
1594:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * multiple event enumerations.
1595:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1596:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1597:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetEvent() \n\n\n
1598:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1599:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_ClearEvent(XMC_USIC_CH_t *const channel,
1600:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                                    const uint32_t event)
1601:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1602:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->TRBSCR |= event;
1603:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1604:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1605:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1606:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1607:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1608:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param data_pointer Start position inside the FIFO buffer. \n
1609:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 		\b Range: 0 to 63.
1610:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param size Required size of the receive FIFO. \n
1611:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1612:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param limit Threshold of receive FIFO filling level to be considered for generating events. \n
1613:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1614:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1615:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1616:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1617:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Configures the receive FIFO. \n\n
1618:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Receive FIFO is the subset of a common FIFO sized 64 words. This FIFO is shared between 2 channe
1619:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Each channel can share the FIFO for transmission and reception. \a data_pointer represents the s
1620:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * from where received data can be put. \a size represents the size of receive FIFO as a multiple o
1621:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Since the FIFO is shared between 2 USIC channels, FIFO size should be carefully selected. A FIFO
1622:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * event or alternative receive buffer event is generated when the FIFO filling level exceeds the \
1623:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1624:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1625:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_EnableEvent(), XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
1626:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** */
1627:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
1628:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                   const uint32_t data_pointer,
1629:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                   const XMC_USIC_CH_FIFO_SIZE_t size,
1630:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                   const uint32_t limit);
1631:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1632:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1633:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1634:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1635:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param size Required size of the receive FIFO. \n
1636:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1637:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param limit Threshold for receive FIFO filling level to be considered for generating events. \n
1638:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1639:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1640:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1641:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1642:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Sets the size and trigger limit for the receive FIFO. \n\n
1643:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * The API is not to be called for initializing the receive FIFO. The API shall be used for the 
1644:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * runtime change of receive FIFO trigger limit. FIFO start position will not be affected on execut
1645:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1646:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1647:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit()\ n\n\n
1648:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1649:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
1650:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                             const XMC_USIC_CH_FIFO_SIZE_t size,
1651:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                             const uint32_t limit);
1652:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1653:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1654:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1655:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1656:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param event Events to be enabled. Multiple events can be bitwise OR combined. @ref XMC_USIC_CH_
1657:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1658:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1659:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1660:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Enables the interrupt events related to transmit FIFO. \n\n
1661:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_t.
1662:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Multiple events can be enabled by providing multiple events in a single call. For providing 
1663:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.<br>
1664:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1665:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Note: API only enables the events. For interrupt generation, interrupt node must be configured a
1666:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * must be enabled.
1667:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1668:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1669:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
1670:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1671:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t ev
1672:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1673:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->RBCTR |= event;
1674:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1675:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1676:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1677:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1678:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1679:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1680:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param event Events to be disabled. \n
1681:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD, @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_ERR
1682:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 			@ref XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE.
1683:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1684:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1685:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1686:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Disables the selected interrupt events related to receive FIFO. \n\n
1687:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * By disabling the interrupt events, generation of interrupt is stopped. User can poll the event 
1688:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * flags from the status register using the API XMC_USIC_CH_RXFIFO_GetEvent(). 
1689:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration \a XMC_USIC_CH_RXFIFO_EVENT_CONF. For pr
1690:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.
1691:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1692:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1693:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
1694:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1695:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t e
1696:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1697:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->RBCTR &= (uint32_t)~event;
1698:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1699:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1700:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1701:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1702:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1703:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param interrupt_node Node pointer representing the receive FIFO events. \n
1704:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 					\b Range: @ref XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
1705:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 					@ref XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE
1706:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param service_request The service request to be used for interrupt generation.\n
1707:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 					\b Range: 0 to 5.
1708:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1709:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1710:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1711:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Sets an interrupt node for the receive FIFO events. \n\n
1712:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * A node pointer represents one or more interrupt events. Service request represents the interrupt
1713:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * among the 6 interrupt nodes available for USIC module.
1714:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * API configures the service request to be used for interrupt generation for the events selected.
1715:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * A receive FIFO event can generate an interrupt only if the interrupt node is configured for the 
1716:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * the interrupt generation is enabled for the event. For example, transmit FIFO standard transmit 
1717:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * interrupt is generated if the interrupt node for the same is set and interrupt is enabled.<br>
1718:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1719:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Note: NVIC node should be explicitly enabled for the interrupt generation.
1720:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1721:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1722:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
1723:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1724:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1725:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                                 const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t i
1726:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                                 const uint32_t service_request);
1727:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1728:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1729:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1730:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1731:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return Value read from the receive FIFO. \n
1732:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 			\b Range: 16bit data. Length of data depends on the word length configuration.
1733:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1734:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1735:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Gets data from the receive FIFO. \n\n
1736:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Receive FIFO should be read only if data is availble in the FIFO. This can be checked using
1737:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * the API XMC_USIC_CH_RXFIFO_IsEmpty(). Receive FIFO error flag will be set if an attempt is made
1738:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * to read from an empty receive FIFO. To read all the received data, user should keep reading data
1739:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * until receive FIFO is empty.
1740:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1741:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1742:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_ClearEvent() \n\n\n
1743:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1744:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE uint16_t XMC_USIC_CH_RXFIFO_GetData(XMC_USIC_CH_t *const channel)
1745:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1746:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   return (uint16_t)(channel->OUTR);
1747:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1748:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1749:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1750:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1751:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1752:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1753:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1754:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1755:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Clears the contents of receive FIFO. \n\n
1756:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Receive FIFO contents will be cleared and the filling level will be reset to 0.
1757:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1758:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1759:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
1760:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1761:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
1762:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1763:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->TRBSCR |= (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
1764:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1765:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1766:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1767:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1768:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1769:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return Status \a true if receive FIFO is full
1770:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *              \a false if receive FIFO is not full.
1771:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1772:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1773:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Checks if receive FIFO is full. \n\n
1774:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * When the receive FIFO filling level reaches the configured size, FIFO full flag is set.
1775:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Any data received when the receive FIFO is full, is lost.
1776:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1777:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1778:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_IsEmpty(), XMC_USIC_CH_RXFIFO_Flush() \n\n\n
1779:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1780:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsFull(XMC_USIC_CH_t *const channel)
1781:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1782:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_RFULL_Msk);
1783:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1784:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1785:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1786:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1787:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1788:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return Status \a true if receive FIFO is empty,
1789:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *              \a false if receive FIFO has some data.
1790:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1791:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1792:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Checks if receive FIFO is empty. \n\n
1793:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * When the receive FIFO is empty, received data will be put in receive FIFO.
1794:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * When the last received word in the FIFO is read, FIFO empty flag is set. Any attempt
1795:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * to read from an empty receive FIFO will set the receive FIFO error flag.
1796:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1797:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1798:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
1799:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1800:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
1801:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1802:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
1803:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1804:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1805:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1806:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1807:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1808:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return uint32_t Receive FIFO filling level. \n
1809:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *           \b Range: minimum= 0(FIFO empty), maximum= receive FIFO size.
1810:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1811:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1812:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Gets the receive FIFO filling level. \n\n
1813:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * For every word received, the filling level is incremented. The API gives the value
1814:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * of this filling level. The filling level is decremented when the data is read out of the 
1815:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * receive FIFO.
1816:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1817:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1818:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
1819:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1820:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_RXFIFO_GetLevel(XMC_USIC_CH_t *const channel)
1821:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1822:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   return ((uint32_t)(channel->TRBSR & USIC_CH_TRBSR_RBFLVL_Msk) >> USIC_CH_TRBSR_RBFLVL_Pos);
1823:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1824:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1825:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1826:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1827:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1828:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return Status of standard receive buffer, alternative receive buffer and receive buffer error e
1829:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_RXFIFO_EVENT_STANDARD, @ref XMC_USIC_CH_RXFIFO_EVENT_ERROR,
1830:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 					  @ref XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE.
1831:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1832:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1833:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Gets the receive FIFO events' status. \n\n
1834:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Gives the status of receive FIFO standard receive buffer event, alternative receive buffer event
1835:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * The status bits are located at their bitpositions in the TRBSR register in the returned value.
1836:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * User can make use of the XMC_USIC_CH_RXFIFO_EVENT enumeration for checking the status of return 
1837:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * The status can be found by using the bitwise AND operation on the returned value with the enumer
1838:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1839:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Note: Event status flags should be cleared by the user explicitly.
1840:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1841:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1842:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_ClearEvent()\n\n\n
1843:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1844:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_RXFIFO_GetEvent(XMC_USIC_CH_t *const channel)
1845:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1846:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   return (uint32_t)((channel->TRBSR) & (USIC_CH_TRBSR_SRBI_Msk |
1847:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                               USIC_CH_TRBSR_RBERI_Msk |
1848:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                               USIC_CH_TRBSR_ARBI_Msk));
1849:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1850:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1851:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1852:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1853:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1854:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  event Receive FIFO events to be cleared. \n
1855:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_RXFIFO_EVENT_STANDARD, @ref XMC_USIC_CH_RXFIFO_EVENT_ERROR,
1856:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 					  @ref XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE.
1857:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1858:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1859:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1860:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Clears the receive FIFO event flags in the status register. \n\n
1861:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel peripheral does not clear the event flags after they are read.
1862:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * This API clears the events provided in the \a mask value. 
1863:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_EVENT enumeration can be used as input. Multiple events
1864:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * can be cleared by providing a mask value obtained by bitwise OR operation of 
1865:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * multiple event enumerations.
1866:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1867:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1868:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_GetEvent() \n\n\n
1869:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1870:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_ClearEvent(XMC_USIC_CH_t *const channel,
1871:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                                    const uint32_t event)
1872:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1873:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->TRBSCR |= event;
1874:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1875:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1876:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1877:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1878:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1879:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1880:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1881:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1882:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Enables time measurement using the capture mode timer. \n\n
1883:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Time measurement is enabled by setting the timer enable flag in BRG register.
1884:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1885:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1886:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_DisableTimeMeasurement() \n\n\n
1887:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1888:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableTimeMeasurement(XMC_USIC_CH_t *const channel)
1889:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1890:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->BRG |= (uint32_t)USIC_CH_BRG_TMEN_Msk;
1891:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1892:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1893:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1894:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1895:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1896:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1897:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1898:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1899:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Disables time measurement using the capture mode timer. \n\n
1900:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Time measurement is disabled by clearing the timer enable flag in BRG register.
1901:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1902:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1903:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_EnableTimeMeasurement() \n\n\n
1904:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1905:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableTimeMeasurement(XMC_USIC_CH_t *const channel)
1906:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1907:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->BRG &= (uint32_t)~USIC_CH_BRG_TMEN_Msk;
1908:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1909:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1910:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1911:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1912:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1913:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param passive_level Passive level for the master clock output. \n
1914:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 					\b Range: @ref XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_0, @ref XMC_USIC_CH_BRG_MASTER_CL
1915:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1916:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1917:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1918:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Sets the idle mode pin level for the master clock output. \n
1919:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1920:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetMclkOutputPassiveLevel(XMC_USIC_CH_t *const channel,
1921:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                                            const XMC_USIC_CH_BRG_MASTER_CLOCK_PASSI
1922:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1923:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->BRG = (uint32_t)(channel->BRG & (~USIC_CH_BRG_MCLKCFG_Msk)) | (uint32_t)passive_level;
1924:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1925:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1926:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1927:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1928:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param passive_level Passive level for the clock output. \n
1929:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 					\b Range: @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED,
1930:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 							  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_ENABLED,
1931:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 							  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED,
1932:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *							  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_ENABLED,
1933:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param clock_output Shift clock source selection. \n
1934:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 					\b Range: Use @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK,
1935:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 								  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1
1936:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1937:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1938:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1939:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Sets the idle mode shift clock output level and selects the shift clock source. \n\n
1940:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Shift clock idle mode output level can be set to logic high or low. Shift clock output can be co
1941:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * delay of half shift clock period. Both the configurations are available as enumeration values de
1942:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t.
1943:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * This value should be configured based on the slave device requirement.
1944:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Shift clock source can be selected between internal clock(master) and external input(slave).
1945:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1946:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1947:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
1948:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                                            const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIV
1949:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                                            const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT
1950:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
1951:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
1952:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                                              USIC_CH_BRG_SCLKOSEL_Msk))) |
1953:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                  (uint32_t)passive_level |
1954:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****                  (uint32_t)clock_output;
1955:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
1956:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** 
1957:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** /**
1958:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1959:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1960:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @param mode USIC channel operation mode. \n
1961:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC_CH_OPERATING_MODE_IDLE, @ref XMC_USIC_CH_OPERATING_MODE_SPI,
1962:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 						  @ref XMC_USIC_CH_OPERATING_MODE_UART, @ref XMC_USIC_CH_OPERATING_MODE_I2S,
1963:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * 						  @ref XMC_USIC_CH_OPERATING_MODE_I2C.
1964:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1965:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1966:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1967:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * Sets the USIC channel operation mode.\n\n
1968:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * A USIC channel can support multiple serial communication protocols like UART, SPI, I2C and I2S.
1969:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * The API sets the input operation mode to the USIC channel.
1970:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  *
1971:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1972:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
1973:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****  */
1974:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_
1975:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** {
  73              	 .loc 1 1975 0
  74              	 .cfi_startproc
  75              	 
  76              	 
  77              	 
  78 0000 80B4     	 push {r7}
  79              	.LCFI6:
  80              	 .cfi_def_cfa_offset 4
  81              	 .cfi_offset 7,-4
  82 0002 83B0     	 sub sp,sp,#12
  83              	.LCFI7:
  84              	 .cfi_def_cfa_offset 16
  85 0004 00AF     	 add r7,sp,#0
  86              	.LCFI8:
  87              	 .cfi_def_cfa_register 7
  88 0006 7860     	 str r0,[r7,#4]
  89 0008 0B46     	 mov r3,r1
  90 000a FB70     	 strb r3,[r7,#3]
1976:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h ****   channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
  91              	 .loc 1 1976 0
  92 000c 7B68     	 ldr r3,[r7,#4]
  93 000e 1B6C     	 ldr r3,[r3,#64]
  94 0010 23F00F02 	 bic r2,r3,#15
  95 0014 FB78     	 ldrb r3,[r7,#3]
  96 0016 1A43     	 orrs r2,r2,r3
  97 0018 7B68     	 ldr r3,[r7,#4]
  98 001a 1A64     	 str r2,[r3,#64]
1977:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_usic.h **** }
  99              	 .loc 1 1977 0
 100 001c 0C37     	 adds r7,r7,#12
 101              	.LCFI9:
 102              	 .cfi_def_cfa_offset 4
 103 001e BD46     	 mov sp,r7
 104              	.LCFI10:
 105              	 .cfi_def_cfa_register 13
 106              	 
 107 0020 5DF8047B 	 ldr r7,[sp],#4
 108              	.LCFI11:
 109              	 .cfi_restore 7
 110              	 .cfi_def_cfa_offset 0
 111 0024 7047     	 bx lr
 112              	 .cfi_endproc
 113              	.LFE209:
 115 0026 00BF     	 .section .text.XMC_UART_CH_ClearStatusFlag,"ax",%progbits
 116              	 .align 2
 117              	 .thumb
 118              	 .thumb_func
 120              	XMC_UART_CH_ClearStatusFlag:
 121              	.LFB217:
 122              	 .file 2 "D:\\Naukowe\\BLDC_workspace\\PWM_from_ex\\Libraries\\XMCLib\\inc/xmc_uart.h"
   1:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  /**
   2:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * @file xmc_uart.h
   3:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * @date 2015-10-27
   4:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *
   5:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * @cond
   6:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** ***************************************************************************************************
   7:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * XMClib v2.1.2 - XMC Peripheral Driver Library 
   8:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *
   9:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * Copyright (c) 2015, Infineon Technologies AG
  10:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * All rights reserved.                        
  11:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *                                             
  12:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * following conditions are met:   
  14:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *                                                                              
  15:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * disclaimer.                        
  17:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * 
  18:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * 
  21:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * products derived from this software without specific prior written permission.                  
  23:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *                                                                              
  24:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *                                                                              
  32:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  **************************************************************************************************
  35:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *
  36:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * Change History
  37:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * --------------
  38:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *
  39:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * 2015-02-20:
  40:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *     - Initial
  41:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *      
  42:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * 2015-05-20:
  43:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *     - Description updated <br>
  44:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *     - Added XMC_UART_CH_TriggerServiceRequest() and XMC_UART_CH_SelectInterruptNodePointer <br>
  45:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *
  46:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * 2015-06-20:
  47:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *     - Removed version macros and declaration of GetDriverVersion API <br>
  48:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *
  49:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * 2015-09-01:
  50:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *     - Modified XMC_UART_CH_SetInputSource() for avoiding complete DXCR register overwriting. <br
  51:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *     - Modified XMC_UART_CH_EVENT_t enum for supporting XMC_UART_CH_EnableEvent() and XMC_UART_CH
  52:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *       for supporting multiple events configuration <br>
  53:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * @endcond 
  54:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *
  55:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  */
  56:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** 
  57:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** #ifndef XMC_UART_H
  58:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** #define XMC_UART_H
  59:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** 
  60:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** /**************************************************************************************************
  61:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * HEADER FILES
  62:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  **************************************************************************************************
  63:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** 
  64:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** #include "xmc_usic.h"
  65:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** 
  66:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** /**
  67:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * @addtogroup XMClib XMC Peripheral Library
  68:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * @{
  69:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  */
  70:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** 
  71:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** /**
  72:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * @addtogroup UART
  73:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * @brief Universal Asynchronous Receiver/Transmitter (UART) driver for XMC microcontroller family.
  74:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *
  75:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * The UART driver uses Universal Serial Interface Channel(USIC) module to implement UART protocol.
  76:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * It provides APIs to configure USIC channel for UART communication. The driver enables the user
  77:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * in getting the status of UART protocol events, configuring interrupt service requests, protocol
  78:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * related parameter configuration etc.
  79:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * 
  80:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * UART driver features:
  81:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * -# Configuration structure XMC_UART_CH_CONFIG_t and initialization function XMC_UART_CH_Init()
  82:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * -# Enumeration of events with their bit masks @ref XMC_UART_CH_EVENT_t, @ref XMC_UART_CH_STATUS_
  83:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * -# Allows the selection of input source for the DX0 input stage using the API XMC_UART_CH_SetInp
  84:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * -# Allows configuration of baudrate using XMC_UART_CH_SetBaudrate() and configuration of data le
  85:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  XMC_UART_CH_SetWordLength() and XMC_UART_CH_SetFrameLength()
  86:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * -# Provides the status of UART protocol events, XMC_UART_CH_GetStatusFlag()
  87:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * -# Allows transmission of data using XMC_UART_CH_Transmit() and gets received data using XMC_UAR
  88:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * 
  89:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * @{
  90:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  */
  91:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** 
  92:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** /**************************************************************************************************
  93:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * MACROS
  94:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  **************************************************************************************************
  95:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** 
  96:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** #if defined(USIC0)
  97:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** #define XMC_UART0_CH0 XMC_USIC0_CH0 /**< USIC0 channel 0 base address */
  98:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** #define XMC_UART0_CH1 XMC_USIC0_CH1 /**< USIC0 channel 1 base address */
  99:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** #endif
 100:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** 
 101:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** #if defined(USIC1)
 102:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** #define XMC_UART1_CH0 XMC_USIC1_CH0 /**< USIC1 channel 0 base address */
 103:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** #define XMC_UART1_CH1 XMC_USIC1_CH1 /**< USIC1 channel 1 base address */
 104:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** #endif
 105:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** 
 106:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** #if defined(USIC2)
 107:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** #define XMC_UART2_CH0 XMC_USIC2_CH0 /**< USIC2 channel 0 base address */
 108:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** #define XMC_UART2_CH1 XMC_USIC2_CH1 /**< USIC2 channel 1 base address */
 109:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** #endif
 110:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** 
 111:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** /**************************************************************************************************
 112:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * ENUMS
 113:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  **************************************************************************************************
 114:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** 
 115:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** /**
 116:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * UART driver status
 117:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  */
 118:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** typedef enum XMC_UART_CH_STATUS
 119:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** {
 120:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****   XMC_UART_CH_STATUS_OK,     /**< UART driver status : OK*/
 121:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****   XMC_UART_CH_STATUS_ERROR,  /**< UART driver status : ERROR */
 122:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****   XMC_UART_CH_STATUS_BUSY    /**< UART driver status : BUSY */
 123:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** } XMC_UART_CH_STATUS_t;
 124:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** 
 125:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** /**
 126:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** * UART portocol status. The enum values can be used for getting the status of UART channel.
 127:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** *
 128:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** */
 129:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** typedef enum XMC_UART_CH_STATUS_FLAG
 130:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** {
 131:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_TRANSMISSION_IDLE = USIC_CH_PSR_ASCMode_TXIDLE_Msk,                 /**< 
 132:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_RECEPTION_IDLE = USIC_CH_PSR_ASCMode_RXIDLE_Msk,                    /**< 
 133:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_SYNCHRONIZATION_BREAK_DETECTED = USIC_CH_PSR_ASCMode_SBD_Msk,       /**< 
 134:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_COLLISION_DETECTED = USIC_CH_PSR_ASCMode_COL_Msk,                   /**< 
 135:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_RECEIVER_NOISE_DETECTED = USIC_CH_PSR_ASCMode_RNS_Msk,              /**< 
 136:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_FORMAT_ERROR_IN_STOP_BIT_0 = USIC_CH_PSR_ASCMode_FER0_Msk,          /**< 
 137:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_FORMAT_ERROR_IN_STOP_BIT_1 = USIC_CH_PSR_ASCMode_FER1_Msk,          /**< 
 138:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_RECEIVE_FRAME_FINISHED = USIC_CH_PSR_ASCMode_RFF_Msk,               /**< 
 139:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_TRANSMITTER_FRAME_FINISHED = USIC_CH_PSR_ASCMode_TFF_Msk,           /**< 
 140:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_TRANSFER_STATUS_BUSY = USIC_CH_PSR_ASCMode_BUSY_Msk,                /**< 
 141:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_RECEIVER_START_INDICATION = USIC_CH_PSR_ASCMode_RSIF_Msk,           /**< 
 142:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_DATA_LOST_INDICATION = USIC_CH_PSR_ASCMode_DLIF_Msk,                /**< 
 143:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_TRANSMIT_SHIFT_INDICATION = USIC_CH_PSR_ASCMode_TSIF_Msk,           /**< 
 144:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION = USIC_CH_PSR_ASCMode_TBIF_Msk,          /**< 
 145:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_RECEIVE_INDICATION = USIC_CH_PSR_ASCMode_RIF_Msk,                   /**< 
 146:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION = USIC_CH_PSR_ASCMode_AIF_Msk,       /**< 
 147:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_BAUD_RATE_GENERATOR_INDICATION = USIC_CH_PSR_ASCMode_BRGIF_Msk      /**< 
 148:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** } XMC_UART_CH_STATUS_FLAG_t;
 149:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** 
 150:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** /**
 151:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** * UART configuration events. The enums can be used for configuring events using the CCR register.
 152:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** */
 153:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** typedef enum XMC_CH_UART_EVENT
 154:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** {
 155:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****   XMC_UART_CH_EVENT_RECEIVE_START       = USIC_CH_CCR_RSIEN_Msk,  /**< Receive start event */
 156:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****   XMC_UART_CH_EVENT_DATA_LOST           = USIC_CH_CCR_DLIEN_Msk,  /**< Data lost event */
 157:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****   XMC_UART_CH_EVENT_TRANSMIT_SHIFT      = USIC_CH_CCR_TSIEN_Msk,  /**< Transmit shift event */
 158:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****   XMC_UART_CH_EVENT_TRANSMIT_BUFFER     = USIC_CH_CCR_TBIEN_Msk,  /**< Transmit buffer event */
 159:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****   XMC_UART_CH_EVENT_STANDARD_RECEIVE    = USIC_CH_CCR_RIEN_Msk,   /**< Receive event */
 160:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****   XMC_UART_CH_EVENT_ALTERNATIVE_RECEIVE = USIC_CH_CCR_AIEN_Msk,   /**< Alternate receive event */
 161:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****   XMC_UART_CH_EVENT_BAUD_RATE_GENERATOR = USIC_CH_CCR_BRGIEN_Msk, /**< Baudrate generator event */
 162:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****   
 163:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****   XMC_UART_CH_EVENT_SYNCHRONIZATION_BREAK = USIC_CH_PCR_ASCMode_SBIEN_Msk, /**< Event synchronizati
 164:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****   XMC_UART_CH_EVENT_COLLISION = USIC_CH_PCR_ASCMode_CDEN_Msk,              /**< Event collision */
 165:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****   XMC_UART_CH_EVENT_RECEIVER_NOISE = USIC_CH_PCR_ASCMode_RNIEN_Msk,        /**< Event receiver nois
 166:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****   XMC_UART_CH_EVENT_FORMAT_ERROR = USIC_CH_PCR_ASCMode_FEIEN_Msk,          /**< Event format error 
 167:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****   XMC_UART_CH_EVENT_FRAME_FINISHED = USIC_CH_PCR_ASCMode_FFIEN_Msk         /**< Event frame finishe
 168:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** } XMC_UART_CH_EVENT_t;
 169:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** 
 170:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** /**
 171:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * UART Input sampling frequency options
 172:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  */
 173:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** typedef enum XMC_UART_CH_INPUT_SAMPLING_FREQ
 174:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** {
 175:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****   XMC_UART_CH_INPUT_SAMPLING_FREQ_FPERIPH            = XMC_USIC_CH_INPUT_SAMPLING_FREQ_FPERIPH,    
 176:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****   XMC_UART_CH_INPUT_SAMPLING_FREQ_FRACTIONAL_DIVIDER = XMC_USIC_CH_INPUT_SAMPLING_FREQ_FRACTIONAL_D
 177:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** } XMC_UART_CH_INPUT_SAMPLING_FREQ_t;
 178:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** 
 179:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** /**
 180:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * UART input stages
 181:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  */
 182:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** typedef enum XMC_UART_CH_INPUT
 183:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** {
 184:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****   XMC_UART_CH_INPUT_RXD = 0UL   /**< UART input stage DX0*/
 185:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** #if UC_FAMILY == XMC1
 186:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****   ,
 187:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****   XMC_UART_CH_INPUT_RXD1 = 3UL, /**< UART input stage DX3*/
 188:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****   XMC_UART_CH_INPUT_RXD2 = 5UL  /**< UART input stage DX5*/
 189:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** #endif
 190:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** } XMC_UART_CH_INPUT_t;
 191:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** 
 192:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** 
 193:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** /**
 194:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * UART channel interrupt node pointers
 195:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  */
 196:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** typedef enum XMC_UART_CH_INTERRUPT_NODE_POINTER
 197:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** {
 198:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****   XMC_UART_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT      = XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANS
 199:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****   XMC_UART_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER     = XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANS
 200:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****   XMC_UART_CH_INTERRUPT_NODE_POINTER_RECEIVE             = XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEI
 201:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****   XMC_UART_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE   = XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTER
 202:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****   XMC_UART_CH_INTERRUPT_NODE_POINTER_PROTOCOL            = XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTO
 203:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** } XMC_UART_CH_INTERRUPT_NODE_POINTER_t;
 204:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** 
 205:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** /**************************************************************************************************
 206:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * DATA STRUCTURES
 207:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  **************************************************************************************************
 208:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** 
 209:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** /**
 210:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * UART initialization structure
 211:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** */
 212:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** typedef struct XMC_UART_CH_CONFIG
 213:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** {
 214:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****   uint32_t baudrate;                         /**< Desired baudrate. \b Range: minimum= 100, maximum
 215:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****   uint8_t data_bits;                         /**< Number of bits for the data field. Value configur
 216:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****                                                   \b Range: minimum= 1, maximum= 16*/
 217:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****   uint8_t frame_length;                      /**< Indicates nmber of bits in a frame. Configured as
 218:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****                                                   \b Range: minimum= 1, maximum= 63*/
 219:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****   uint8_t stop_bits;                         /**< Number of stop bits. \b Range: minimum= 1, maximu
 220:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****   uint8_t oversampling;						           /**< Number of samples for a symbol(DCTQ).\b Range: minimum
 221:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****   XMC_USIC_CH_PARITY_MODE_t parity_mode;     /**< Parity mode. \b Range: @ref XMC_USIC_CH_PARITY_MO
 222:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****                                                   @ref XMC_USIC_CH_PARITY_MODE_ODD*/
 223:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** } XMC_UART_CH_CONFIG_t;
 224:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** 
 225:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** /**************************************************************************************************
 226:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * API PROTOTYPES
 227:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  **************************************************************************************************
 228:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** 
 229:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** #ifdef __cplusplus
 230:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** extern "C" {
 231:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** #endif
 232:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** 
 233:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** /**
 234:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 235:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, XMC_UART0_CH1,XMC_UART1_CH0, XMC_UART1_CH1,XMC_UART2_CH0, XM
 236:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * @param config Constant pointer to UART configuration structure of type @ref XMC_UART_CH_CONFIG_t
 237:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * @return XMC_UART_CH_STATUS_t Status of initializing the USIC channel for UART protocol.\n
 238:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *          \b Range: @ref XMC_UART_CH_STATUS_OK if initialization is successful.\n
 239:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *                    @ref XMC_UART_CH_STATUS_ERROR if configuration of baudrate failed.
 240:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *
 241:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * \par<b>Description</b><br>
 242:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * Initializes the USIC channel for UART protocol.\n\n
 243:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * During the initialization, USIC channel is enabled, baudrate is configured with the defined over
 244:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * in the intialization structure. If the oversampling value is set to 0 in the structure, the defa
 245:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * is considered. Sampling point for each symbol is configured at the half of sampling period. Symb
 246:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * majority decision among 3 samples. 
 247:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * Word length is configured with the number of data bits. If the value of \a frame_length is 0, th
 248:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * is set to the same value as word length. If \a frame_length is greater than 0, it is set as the 
 249:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * Parity mode is set to the value configured for \a parity_mode.
 250:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * The USIC channel should be set to UART mode by calling the XMC_UART_CH_Start() API after the ini
 251:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *
 252:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 253:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * XMC_UART_CH_Start(), XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 254:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  */
 255:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** void XMC_UART_CH_Init(XMC_USIC_CH_t *const channel, const XMC_UART_CH_CONFIG_t *const config);
 256:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** 
 257:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** /**
 258:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 259:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 260:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * @return None
 261:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *
 262:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * \par<b>Description</b><br>
 263:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * Sets the USIC channel operation mode to UART mode.\n\n
 264:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * CCR register bitfield \a Mode is set to 2(UART mode). This API should be called after configurin
 265:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * the USIC channel. Transmission and reception can happen only when the UART mode is set. 
 266:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * This is an inline function.
 267:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *
 268:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 269:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 270:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  */
 271:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** __STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
 272:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** {
 273:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****   channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPER
 274:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** }
 275:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** 
 276:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** /**
 277:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 278:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 279:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * @return XMC_UART_CH_STATUS_t Status to indicate if the communication channel is stopped successf
 280:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *                              @ref XMC_UART_CH_STATUS_OK if the communication channel is stopped.
 281:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *                              @ref XMC_UART_CH_STATUS_BUSY if the communication channel is busy.
 282:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *
 283:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * \par<b>Description</b><br>
 284:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * Stops the UART communication.\n\n
 285:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * CCR register bitfield \a Mode is reset. This disables the communication.
 286:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * Before starting the communication again, the channel has to be reconfigured.
 287:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *
 288:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 289:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * XMC_UART_CH_Init() \n\n\n
 290:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  */
 291:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** XMC_UART_CH_STATUS_t XMC_UART_CH_Stop(XMC_USIC_CH_t *const channel);
 292:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** 
 293:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** /**
 294:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 295:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * 				   \b Range: @ref XMC_UART0_CH0, XMC_UART0_CH1 ,XMC_UART1_CH0, XMC_UART1_CH1, XMC_UART2_CH0,
 296:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * @param rate Desired baudrate. \n
 297:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *           \b Range: minimum value = 100, maximum value depends on the peripheral clock frequency
 298:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * 				   and \a oversampling. Maximum baudrate can be derived using the formula: (fperiph * 1023)/
 299:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 300:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * 					 This can be related to the number of samples for each logic state of the data signal.\n
 301:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * 					 \b Range: 4 to 32. Value should be chosen based on the protocol used.
 302:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * @return XMC_UART_CH_STATUS_t Status indicating the baudrate configuration.\n
 303:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * 			     \b Range: @ref XMC_USIC_CH_STATUS_OK if baudrate is successfully configured,
 304:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * 					 @ref XMC_USIC_CH_STATUS_ERROR if desired baudrate or oversampling is invalid.
 305:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *
 306:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * \par<b>Description:</b><br>
 307:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * Sets the bus speed in bits per second.\n\n
 308:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * Derives the values of \a STEP and PDIV to arrive at the optimum realistic speed possible.
 309:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * \a oversampling is the number of samples to be taken for each symbol of UART protocol.
 310:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * Default \a oversampling of 16 is considered if the input \a oversampling is less than 4. It is r
 311:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * a minimum oversampling of 4 for UART.
 312:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *
 313:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 314:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * XMC_UART_CH_Init(), XMC_UART_CH_Stop()
 315:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  */
 316:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** XMC_UART_CH_STATUS_t XMC_UART_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t 
 317:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** 
 318:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** /**
 319:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 320:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 321:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * @param  data Data to be transmitted. \n 
 322:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *          \b Range: 16 bit unsigned data within the range 0 to 65535. Actual size of
 323:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *          data transmitted depends on the configured number of bits for the UART protocol in the 
 324:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * @return None
 325:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *
 326:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * \par<b>Description</b><br>
 327:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * Transmits data over serial communication channel using UART protocol.\n\n
 328:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * Based on the channel configuration, data is either put to the transmit FIFO or to TBUF register.
 329:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * Before putting data to TBUF, the API waits for TBUF to finish shifting its contents to shift reg
 330:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * So user can continuously execute the API without checking for TBUF busy status. Based on the num
 331:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * data bits configured, the lower significant bits will be extracted for transmission.
 332:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *
 333:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * Note: When FIFO is not configured, the API waits for the TBUF to be available. 
 334:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * This makes the execution a blocking call.
 335:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *
 336:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 337:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * XMC_UART_CH_GetReceivedData() \n\n\n
 338:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  */
 339:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data);
 340:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** 
 341:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** /**
 342:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 343:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 344:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * @return uint16_t Received data over UART communication channel.
 345:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * \par<b>Description</b><br>
 346:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * Provides one word of data received over UART communication channel.\n\n
 347:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * Based on the channel configuration, data is either read from the receive FIFO or RBUF register.
 348:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * Before returning the value, there is no check for data validity. User should check the appropria
 349:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * data receive flags(standard receive/alternative receive/FIFO standard receive/FIFO alternative r
 350:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * before executing the API. Reading from an empty receive FIFO can generate a receive error event.
 351:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *
 352:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 353:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * XMC_UART_CH_GetStatusFlag(), XMC_UART_CH_Transmit() \n\n\n
 354:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  */
 355:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel);
 356:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** 
 357:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** /**
 358:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * @param  channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 359:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 360:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * @param  word_length Data word length. \n
 361:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *          \b Range: minimum= 1, maximum= 16.
 362:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * @return None
 363:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *
 364:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * \par<b>Description</b><br>
 365:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * Sets the data word length in number of bits.\n\n
 366:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * Word length can range from 1 to 16. It indicates the number of data bits in a data word.
 367:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * The value of \a word_length will be decremented by 1 before setting the value to \a SCTR registe
 368:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * If the UART data bits is more than 16, then the frame length should be set to the actual number 
 369:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * word length should be configured with the number of bits expected in each transaction. For examp
 370:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * for UART communication is 20 bits, then the frame length should be set as 20. Word length can be
 371:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * transmit and receive handling. If data is stored as 8bit array, then the word length can be set 
 372:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * a full message of UART data should be transmitted/ received as 3 data words.
 373:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *
 374:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 375:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * XMC_UART_CH_SetFrameLength() \n\n\n
 376:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  */
 377:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** __STATIC_INLINE void XMC_UART_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_len
 378:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** {
 379:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****   XMC_USIC_CH_SetWordLength(channel, word_length);
 380:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** }
 381:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** 
 382:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** /**
 383:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * @param  channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 384:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 385:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * @param  frame_length Number of data bits in each UART frame. \n
 386:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *          \b Range: minimum= 1, maximum= 64.
 387:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * @return None
 388:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *
 389:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * \par<b>Description</b><br>
 390:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * Sets the number of data bits for UART communication.\n\n
 391:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * The frame length is configured by setting the input value to \a SCTR register.
 392:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * The value of \a frame_length will be decremented by 1, before setting it to the register.
 393:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * Frame length should not be set to 64 for UART communication.
 394:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *
 395:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 396:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * XMC_UART_CH_SetWordLength() \n\n\n
 397:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  */
 398:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** __STATIC_INLINE void XMC_UART_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_l
 399:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** {
 400:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****   XMC_USIC_CH_SetFrameLength(channel, frame_length);
 401:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** }
 402:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** 
 403:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** /**
 404:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 405:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 406:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * @param  event Event bitmasks to enable. Use the type @ref XMC_UART_CH_EVENT_t for naming events.
 407:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART_CH_EVENT_RECEIVE_START, @ref XMC_UART_CH_EVENT_DATA_LOST,
 408:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * 				  @ref XMC_UART_CH_EVENT_TRANSMIT_SHIFT, @ref XMC_UART_CH_EVENT_TRANSMIT_BUFFER,
 409:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * 				  etc.
 410:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * @return None
 411:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *
 412:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * \par<b>Description</b><br>
 413:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * Enables interrupt events for UART communication.\n\n
 414:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * Multiple events can be combined using the bitwise OR operation and configured in one function ca
 415:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * @ref XMC_UART_CH_EVENT_t enumerates multiple event bitmasks. These enumerations can be used as i
 416:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * Events are configured by setting bits in the CCR register.
 417:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 418:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * XMC_UART_CH_DisableEvent(), XMC_UART_CH_SetInterruptNodePointer(), XMC_UART_CH_GetStatusFlag() \
 419:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  */
 420:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** void XMC_UART_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event);
 421:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** 
 422:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** /**
 423:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 424:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 425:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * @param  event Bitmask of events to disable. Use the type @ref XMC_UART_CH_EVENT_t for naming eve
 426:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART_CH_EVENT_RECEIVE_START, @ref XMC_UART_CH_EVENT_DATA_LOST,
 427:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * 				  @ref XMC_UART_CH_EVENT_TRANSMIT_SHIFT, @ref XMC_UART_CH_EVENT_TRANSMIT_BUFFER,
 428:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * 				  etc.
 429:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * @return None
 430:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *
 431:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * \par<b>Description</b><br>
 432:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * Disables the interrupt events by clearing the bits in CCR register.\n\n
 433:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * Multiple events can be combined using the bitwise OR operation and configured in one function ca
 434:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * XMC_UART_CH_EVENT_FLAG_t enumerates multiple event bitmasks. These enumerations can be used as i
 435:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *
 436:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 437:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * XMC_UART_CH_ClearStatusFlag(), XMC_UART_CH_EnableEvent() \n\n\n
 438:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  */
 439:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** void XMC_UART_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event);
 440:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** 
 441:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** /**
 442:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 443:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 444:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * @param service_request Service request number for generating protocol interrupts.\n
 445:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * 				  \b Range: 0 to 5.
 446:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * @return None
 447:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *
 448:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * \par<b>Description</b><br>
 449:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * Sets the interrupt node for UART channel protocol events.\n\n
 450:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * For all the protocol events enlisted in the enumeration XMC_UART_CH_EVENT_t, one common
 451:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * interrupt gets generated. The service request connects the interrupt node to the UART 
 452:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * protocol events.
 453:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * Note: NVIC node should be separately enabled to generate the interrupt.
 454:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *
 455:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 456:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * XMC_UART_CH_EnableEvent() \n\n\n
 457:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  */
 458:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** __STATIC_INLINE void XMC_UART_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
 459:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****                                                          const uint8_t service_request)
 460:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** {
 461:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****   XMC_USIC_CH_SetInterruptNodePointer(channel, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL, 
 462:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****                                               (uint32_t)service_request);
 463:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** }
 464:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** 
 465:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** /**
 466:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 467:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 468:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * @param  interrupt_node Interrupt node pointer to be configured. \n
 469:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * 						  \b Range: @ref XMC_UART_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT,
 470:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * 						  			@ref XMC_UART_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER etc.
 471:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * @param service_request Service request number.\n
 472:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * 						  \b Range: 0 to 5.
 473:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * @return None
 474:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *
 475:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * \par<b>Description</b><br>
 476:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * Sets the interrupt node for USIC channel events. \n\n
 477:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * For an event to generate interrupt, node pointer should be configured with service request(SR0, 
 478:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * The NVIC node gets linked to the interrupt event by doing so.<br>
 479:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * Note: NVIC node should be separately enabled to generate the interrupt.
 480:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *
 481:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 482:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * XMC_UART_CH_EnableEvent() \n\n\n
 483:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  */
 484:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** __STATIC_INLINE void XMC_UART_CH_SelectInterruptNodePointer(XMC_USIC_CH_t *const channel,
 485:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****                                                             const XMC_UART_CH_INTERRUPT_NODE_POINTE
 486:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****                                                             const uint32_t service_request)
 487:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** {
 488:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****   XMC_USIC_CH_SetInterruptNodePointer(channel, (XMC_USIC_CH_INTERRUPT_NODE_POINTER_t)interrupt_node
 489:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** 		                                       (uint32_t)service_request);
 490:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** }
 491:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** 
 492:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** /**
 493:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 494:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * 				   \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@r
 495:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * @param  service_request_line service request number of the event to be triggered. \n
 496:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * 			\b Range: 0 to 5.
 497:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * @return None
 498:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *
 499:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * \par<b>Description</b><br>
 500:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * Trigger a UART interrupt service request.\n\n
 501:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * When the UART service request is triggered, the NVIC interrupt associated with it will be
 502:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * generated if enabled.
 503:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *
 504:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 505:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * XMC_UART_CH_SelectInterruptNodePointer() \n\n\n
 506:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  */
 507:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** __STATIC_INLINE void XMC_UART_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t
 508:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** {
 509:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****   XMC_USIC_CH_TriggerServiceRequest(channel, (uint32_t)service_request_line);
 510:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** }
 511:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** 
 512:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** /**
 513:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 514:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 515:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * @return Status of UART channel events. \n 
 516:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *          \b Range: Use @ref XMC_UART_CH_STATUS_FLAG_t enumerations for
 517:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * 					event bitmasks. @ref XMC_UART_CH_STATUS_FLAG_TRANSMISSION_IDLE, @ref XMC_UART_CH_STATUS_FLA
 518:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * 					@ref XMC_UART_CH_STATUS_FLAG_SYNCHRONIZATION_BREAK_DETECTED etc.
 519:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *
 520:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * \par<b>Description</b><br>
 521:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * Provides the status of UART channel events.\n\n
 522:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * Status provided by the API represents the status of multiple events at their bit positions. The 
 523:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * obtained using the enumeration XMC_UART_CH_STATUS_FLAG_t. Event status is obtained by reading
 524:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * the register PSR_ASCMode.
 525:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *
 526:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 527:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * XMC_UART_CH_EnableEvent(),  XMC_UART_CH_ClearStatusFlag()\n\n\n
 528:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  */
 529:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** __STATIC_INLINE uint32_t XMC_UART_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
 530:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** {
 531:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****   return channel->PSR_ASCMode;
 532:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** }
 533:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** 
 534:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** /**
 535:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 536:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 537:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * @param flag UART events to be cleared. \n
 538:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *          \b Range: Use @ref XMC_UART_CH_STATUS_FLAG_t enumerations for
 539:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * 					event bitmasks. @ref XMC_UART_CH_STATUS_FLAG_TRANSMISSION_IDLE, @ref XMC_UART_CH_STATUS_FLA
 540:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * 					@ref XMC_UART_CH_STATUS_FLAG_SYNCHRONIZATION_BREAK_DETECTED etc.
 541:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * @return None
 542:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *
 543:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * \par<b>Description</b><br>
 544:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * Clears the status of UART channel events.\n\n
 545:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * Multiple events can be combined using the bitwise OR operation and configured in one function ca
 546:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * XMC_UART_CH_STATUS_FLAG_t enumerates multiple event bitmasks. These enumerations can be used as 
 547:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * Events are cleared by setting the bitmask to the PSCR register.
 548:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  *
 549:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 550:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 551:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****  */
 552:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** __STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
 553:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** {
 123              	 .loc 2 553 0
 124              	 .cfi_startproc
 125              	 
 126              	 
 127              	 
 128 0000 80B4     	 push {r7}
 129              	.LCFI12:
 130              	 .cfi_def_cfa_offset 4
 131              	 .cfi_offset 7,-4
 132 0002 83B0     	 sub sp,sp,#12
 133              	.LCFI13:
 134              	 .cfi_def_cfa_offset 16
 135 0004 00AF     	 add r7,sp,#0
 136              	.LCFI14:
 137              	 .cfi_def_cfa_register 7
 138 0006 7860     	 str r0,[r7,#4]
 139 0008 3960     	 str r1,[r7]
 554:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h ****   channel->PSCR = flag;
 140              	 .loc 2 554 0
 141 000a 7B68     	 ldr r3,[r7,#4]
 142 000c 3A68     	 ldr r2,[r7]
 143 000e DA64     	 str r2,[r3,#76]
 555:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_uart.h **** }
 144              	 .loc 2 555 0
 145 0010 0C37     	 adds r7,r7,#12
 146              	.LCFI15:
 147              	 .cfi_def_cfa_offset 4
 148 0012 BD46     	 mov sp,r7
 149              	.LCFI16:
 150              	 .cfi_def_cfa_register 13
 151              	 
 152 0014 5DF8047B 	 ldr r7,[sp],#4
 153              	.LCFI17:
 154              	 .cfi_restore 7
 155              	 .cfi_def_cfa_offset 0
 156 0018 7047     	 bx lr
 157              	 .cfi_endproc
 158              	.LFE217:
 160 001a 00BF     	 .section .text.XMC_UART_CH_Init,"ax",%progbits
 161              	 .align 2
 162              	 .global XMC_UART_CH_Init
 163              	 .thumb
 164              	 .thumb_func
 166              	XMC_UART_CH_Init:
 167              	.LFB228:
 168              	 .file 3 "../Libraries/XMCLib/src/xmc_uart.c"
   1:../Libraries/XMCLib/src/xmc_uart.c **** /**
   2:../Libraries/XMCLib/src/xmc_uart.c ****  * @file xmc_uart.c
   3:../Libraries/XMCLib/src/xmc_uart.c ****  * @date 2015-10-27
   4:../Libraries/XMCLib/src/xmc_uart.c ****  *
   5:../Libraries/XMCLib/src/xmc_uart.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc_uart.c ****  **************************************************************************************************
   7:../Libraries/XMCLib/src/xmc_uart.c ****  * XMClib v2.1.2 - XMC Peripheral Driver Library 
   8:../Libraries/XMCLib/src/xmc_uart.c ****  *
   9:../Libraries/XMCLib/src/xmc_uart.c ****  * Copyright (c) 2015, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc_uart.c ****  * All rights reserved.                        
  11:../Libraries/XMCLib/src/xmc_uart.c ****  *                                             
  12:../Libraries/XMCLib/src/xmc_uart.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Libraries/XMCLib/src/xmc_uart.c ****  * following conditions are met:   
  14:../Libraries/XMCLib/src/xmc_uart.c ****  *                                                                              
  15:../Libraries/XMCLib/src/xmc_uart.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Libraries/XMCLib/src/xmc_uart.c ****  * disclaimer.                        
  17:../Libraries/XMCLib/src/xmc_uart.c ****  * 
  18:../Libraries/XMCLib/src/xmc_uart.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Libraries/XMCLib/src/xmc_uart.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:../Libraries/XMCLib/src/xmc_uart.c ****  * 
  21:../Libraries/XMCLib/src/xmc_uart.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Libraries/XMCLib/src/xmc_uart.c ****  * products derived from this software without specific prior written permission.                  
  23:../Libraries/XMCLib/src/xmc_uart.c ****  *                                                                              
  24:../Libraries/XMCLib/src/xmc_uart.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Libraries/XMCLib/src/xmc_uart.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Libraries/XMCLib/src/xmc_uart.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Libraries/XMCLib/src/xmc_uart.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Libraries/XMCLib/src/xmc_uart.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Libraries/XMCLib/src/xmc_uart.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Libraries/XMCLib/src/xmc_uart.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:../Libraries/XMCLib/src/xmc_uart.c ****  *                                                                              
  32:../Libraries/XMCLib/src/xmc_uart.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Libraries/XMCLib/src/xmc_uart.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:../Libraries/XMCLib/src/xmc_uart.c ****  **************************************************************************************************
  35:../Libraries/XMCLib/src/xmc_uart.c ****  *
  36:../Libraries/XMCLib/src/xmc_uart.c ****  * Change History
  37:../Libraries/XMCLib/src/xmc_uart.c ****  * --------------
  38:../Libraries/XMCLib/src/xmc_uart.c ****  *
  39:../Libraries/XMCLib/src/xmc_uart.c ****  * 2015-02-20:
  40:../Libraries/XMCLib/src/xmc_uart.c ****  *     - Initial <br>
  41:../Libraries/XMCLib/src/xmc_uart.c ****  *      
  42:../Libraries/XMCLib/src/xmc_uart.c ****  * 2015-05-20:
  43:../Libraries/XMCLib/src/xmc_uart.c ****  *     - xmc_uart_ch_stop API implementation corrected.
  44:../Libraries/XMCLib/src/xmc_uart.c ****  *     - Modified XMC_UART_CH_Stop() API for not setting to IDLE the channel if it is busy <br>
  45:../Libraries/XMCLib/src/xmc_uart.c ****  *
  46:../Libraries/XMCLib/src/xmc_uart.c ****  * 2015-06-20:
  47:../Libraries/XMCLib/src/xmc_uart.c ****  *     - Removed GetDriverVersion API <br>
  48:../Libraries/XMCLib/src/xmc_uart.c ****  *
  49:../Libraries/XMCLib/src/xmc_uart.c ****  * 2015-09-01:
  50:../Libraries/XMCLib/src/xmc_uart.c ****  *     - Modified XMC_UART_CH_EnableEvent() and XMC_UART_CH_DisableEvent() for supporting multiple 
  51:../Libraries/XMCLib/src/xmc_uart.c ****  * @endcond 
  52:../Libraries/XMCLib/src/xmc_uart.c ****  *
  53:../Libraries/XMCLib/src/xmc_uart.c ****  */
  54:../Libraries/XMCLib/src/xmc_uart.c **** 
  55:../Libraries/XMCLib/src/xmc_uart.c **** /**************************************************************************************************
  56:../Libraries/XMCLib/src/xmc_uart.c ****  * HEADER FILES
  57:../Libraries/XMCLib/src/xmc_uart.c ****  **************************************************************************************************
  58:../Libraries/XMCLib/src/xmc_uart.c **** 
  59:../Libraries/XMCLib/src/xmc_uart.c **** #include <xmc_scu.h>
  60:../Libraries/XMCLib/src/xmc_uart.c **** #include <xmc_uart.h>
  61:../Libraries/XMCLib/src/xmc_uart.c **** 
  62:../Libraries/XMCLib/src/xmc_uart.c **** /**************************************************************************************************
  63:../Libraries/XMCLib/src/xmc_uart.c ****  * MACROS
  64:../Libraries/XMCLib/src/xmc_uart.c ****  **************************************************************************************************
  65:../Libraries/XMCLib/src/xmc_uart.c ****  
  66:../Libraries/XMCLib/src/xmc_uart.c **** #define XMC_UART_CH_OVERSAMPLING (16UL)
  67:../Libraries/XMCLib/src/xmc_uart.c **** #define XMC_UART_CH_OVERSAMPLING_MIN_VAL (4UL)
  68:../Libraries/XMCLib/src/xmc_uart.c **** 
  69:../Libraries/XMCLib/src/xmc_uart.c **** /**************************************************************************************************
  70:../Libraries/XMCLib/src/xmc_uart.c ****  * API IMPLEMENTATION
  71:../Libraries/XMCLib/src/xmc_uart.c ****  **************************************************************************************************
  72:../Libraries/XMCLib/src/xmc_uart.c **** 
  73:../Libraries/XMCLib/src/xmc_uart.c **** void XMC_UART_CH_Init(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config)
  74:../Libraries/XMCLib/src/xmc_uart.c **** {
 169              	 .loc 3 74 0
 170              	 .cfi_startproc
 171              	 
 172              	 
 173 0000 80B5     	 push {r7,lr}
 174              	.LCFI18:
 175              	 .cfi_def_cfa_offset 8
 176              	 .cfi_offset 7,-8
 177              	 .cfi_offset 14,-4
 178 0002 84B0     	 sub sp,sp,#16
 179              	.LCFI19:
 180              	 .cfi_def_cfa_offset 24
 181 0004 00AF     	 add r7,sp,#0
 182              	.LCFI20:
 183              	 .cfi_def_cfa_register 7
 184 0006 7860     	 str r0,[r7,#4]
 185 0008 3960     	 str r1,[r7]
  75:../Libraries/XMCLib/src/xmc_uart.c ****   uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
 186              	 .loc 3 75 0
 187 000a 1023     	 movs r3,#16
 188 000c FB60     	 str r3,[r7,#12]
  76:../Libraries/XMCLib/src/xmc_uart.c **** 
  77:../Libraries/XMCLib/src/xmc_uart.c ****   /* USIC channel switched on*/
  78:../Libraries/XMCLib/src/xmc_uart.c ****   XMC_USIC_CH_Enable(channel);
 189              	 .loc 3 78 0
 190 000e 7868     	 ldr r0,[r7,#4]
 191 0010 FFF7FEFF 	 bl XMC_USIC_CH_Enable
  79:../Libraries/XMCLib/src/xmc_uart.c ****   
  80:../Libraries/XMCLib/src/xmc_uart.c ****   if(config->oversampling != 0U)
 192              	 .loc 3 80 0
 193 0014 3B68     	 ldr r3,[r7]
 194 0016 DB79     	 ldrb r3,[r3,#7]
 195 0018 002B     	 cmp r3,#0
 196 001a 02D0     	 beq .L6
  81:../Libraries/XMCLib/src/xmc_uart.c ****   {
  82:../Libraries/XMCLib/src/xmc_uart.c ****     oversampling = (uint32_t)config->oversampling;
 197              	 .loc 3 82 0
 198 001c 3B68     	 ldr r3,[r7]
 199 001e DB79     	 ldrb r3,[r3,#7]
 200 0020 FB60     	 str r3,[r7,#12]
 201              	.L6:
  83:../Libraries/XMCLib/src/xmc_uart.c ****   }
  84:../Libraries/XMCLib/src/xmc_uart.c ****   
  85:../Libraries/XMCLib/src/xmc_uart.c ****   /* Configure baud rate */
  86:../Libraries/XMCLib/src/xmc_uart.c ****   (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
 202              	 .loc 3 86 0
 203 0022 3B68     	 ldr r3,[r7]
 204 0024 1B68     	 ldr r3,[r3]
 205 0026 7868     	 ldr r0,[r7,#4]
 206 0028 1946     	 mov r1,r3
 207 002a FA68     	 ldr r2,[r7,#12]
 208 002c FFF7FEFF 	 bl XMC_USIC_CH_SetBaudrate
  87:../Libraries/XMCLib/src/xmc_uart.c ****   
  88:../Libraries/XMCLib/src/xmc_uart.c ****   /* Configure frame format
  89:../Libraries/XMCLib/src/xmc_uart.c ****    * Configure the number of stop bits
  90:../Libraries/XMCLib/src/xmc_uart.c ****    * Pulse length is set to 0 to have standard UART signaling, 
  91:../Libraries/XMCLib/src/xmc_uart.c ****    * i.e. the 0 level is signaled during the complete bit time
  92:../Libraries/XMCLib/src/xmc_uart.c ****    * Sampling point set equal to the half of the oversampling period
  93:../Libraries/XMCLib/src/xmc_uart.c ****    * Enable Sample Majority Decision */
  94:../Libraries/XMCLib/src/xmc_uart.c ****   channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 209              	 .loc 3 94 0
 210 0030 3B68     	 ldr r3,[r7]
 211 0032 9B79     	 ldrb r3,[r3,#6]
 212 0034 013B     	 subs r3,r3,#1
 213 0036 5A00     	 lsls r2,r3,#1
  95:../Libraries/XMCLib/src/xmc_uart.c **** 			             (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
 214              	 .loc 3 95 0
 215 0038 FB68     	 ldr r3,[r7,#12]
 216 003a 5B08     	 lsrs r3,r3,#1
 217 003c 0133     	 adds r3,r3,#1
 218 003e 1B02     	 lsls r3,r3,#8
  94:../Libraries/XMCLib/src/xmc_uart.c **** 			             (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
 219              	 .loc 3 94 0
 220 0040 1343     	 orrs r3,r3,r2
 221 0042 43F00102 	 orr r2,r3,#1
 222 0046 7B68     	 ldr r3,[r7,#4]
 223 0048 DA63     	 str r2,[r3,#60]
  96:../Libraries/XMCLib/src/xmc_uart.c **** 			             USIC_CH_PCR_ASCMode_SMD_Msk);
  97:../Libraries/XMCLib/src/xmc_uart.c **** 
  98:../Libraries/XMCLib/src/xmc_uart.c ****   /* Set passive data level, high
  99:../Libraries/XMCLib/src/xmc_uart.c ****      Set word length. Data bits - 1
 100:../Libraries/XMCLib/src/xmc_uart.c ****      If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
 101:../Libraries/XMCLib/src/xmc_uart.c ****      Transmission Mode: The shift control signal is considered active if it
 102:../Libraries/XMCLib/src/xmc_uart.c ****      is at 1-level. This is the setting to be programmed to allow data transfers */
 103:../Libraries/XMCLib/src/xmc_uart.c ****   channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
 224              	 .loc 3 103 0
 225 004a 3B68     	 ldr r3,[r7]
 226 004c 1B79     	 ldrb r3,[r3,#4]
 227 004e 013B     	 subs r3,r3,#1
 228 0050 1B06     	 lsls r3,r3,#24
 229 0052 43F48172 	 orr r2,r3,#258
 230 0056 7B68     	 ldr r3,[r7,#4]
 231 0058 5A63     	 str r2,[r3,#52]
 104:../Libraries/XMCLib/src/xmc_uart.c **** 		              ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));
 105:../Libraries/XMCLib/src/xmc_uart.c **** 
 106:../Libraries/XMCLib/src/xmc_uart.c ****   if (config->frame_length != 0U)
 232              	 .loc 3 106 0
 233 005a 3B68     	 ldr r3,[r7]
 234 005c 5B79     	 ldrb r3,[r3,#5]
 235 005e 002B     	 cmp r3,#0
 236 0060 09D0     	 beq .L7
 107:../Libraries/XMCLib/src/xmc_uart.c ****   {
 108:../Libraries/XMCLib/src/xmc_uart.c ****     channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
 237              	 .loc 3 108 0
 238 0062 7B68     	 ldr r3,[r7,#4]
 239 0064 5A6B     	 ldr r2,[r3,#52]
 240 0066 3B68     	 ldr r3,[r7]
 241 0068 5B79     	 ldrb r3,[r3,#5]
 242 006a 013B     	 subs r3,r3,#1
 243 006c 1B04     	 lsls r3,r3,#16
 244 006e 1A43     	 orrs r2,r2,r3
 245 0070 7B68     	 ldr r3,[r7,#4]
 246 0072 5A63     	 str r2,[r3,#52]
 247 0074 08E0     	 b .L8
 248              	.L7:
 109:../Libraries/XMCLib/src/xmc_uart.c ****   }
 110:../Libraries/XMCLib/src/xmc_uart.c ****   else
 111:../Libraries/XMCLib/src/xmc_uart.c ****   {
 112:../Libraries/XMCLib/src/xmc_uart.c ****     channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
 249              	 .loc 3 112 0
 250 0076 7B68     	 ldr r3,[r7,#4]
 251 0078 5A6B     	 ldr r2,[r3,#52]
 252 007a 3B68     	 ldr r3,[r7]
 253 007c 1B79     	 ldrb r3,[r3,#4]
 254 007e 013B     	 subs r3,r3,#1
 255 0080 1B04     	 lsls r3,r3,#16
 256 0082 1A43     	 orrs r2,r2,r3
 257 0084 7B68     	 ldr r3,[r7,#4]
 258 0086 5A63     	 str r2,[r3,#52]
 259              	.L8:
 113:../Libraries/XMCLib/src/xmc_uart.c ****   }
 114:../Libraries/XMCLib/src/xmc_uart.c **** 
 115:../Libraries/XMCLib/src/xmc_uart.c ****   /* Enable transfer buffer */
 116:../Libraries/XMCLib/src/xmc_uart.c ****   channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
 260              	 .loc 3 116 0
 261 0088 7B68     	 ldr r3,[r7,#4]
 262 008a 4FF4A062 	 mov r2,#1280
 263 008e 9A63     	 str r2,[r3,#56]
 117:../Libraries/XMCLib/src/xmc_uart.c ****                   USIC_CH_TCSR_TDSSM_Msk;
 118:../Libraries/XMCLib/src/xmc_uart.c **** 
 119:../Libraries/XMCLib/src/xmc_uart.c ****   /* Clear protocol status */
 120:../Libraries/XMCLib/src/xmc_uart.c ****   channel->PSCR = 0xFFFFFFFFUL;
 264              	 .loc 3 120 0
 265 0090 7B68     	 ldr r3,[r7,#4]
 266 0092 4FF0FF32 	 mov r2,#-1
 267 0096 DA64     	 str r2,[r3,#76]
 121:../Libraries/XMCLib/src/xmc_uart.c **** 
 122:../Libraries/XMCLib/src/xmc_uart.c ****   /* Set parity settings */
 123:../Libraries/XMCLib/src/xmc_uart.c ****   channel->CCR = (uint32_t)config->parity_mode;
 268              	 .loc 3 123 0
 269 0098 3B68     	 ldr r3,[r7]
 270 009a 1B89     	 ldrh r3,[r3,#8]
 271 009c 1A46     	 mov r2,r3
 272 009e 7B68     	 ldr r3,[r7,#4]
 273 00a0 1A64     	 str r2,[r3,#64]
 124:../Libraries/XMCLib/src/xmc_uart.c **** }
 274              	 .loc 3 124 0
 275 00a2 1037     	 adds r7,r7,#16
 276              	.LCFI21:
 277              	 .cfi_def_cfa_offset 8
 278 00a4 BD46     	 mov sp,r7
 279              	.LCFI22:
 280              	 .cfi_def_cfa_register 13
 281              	 
 282 00a6 80BD     	 pop {r7,pc}
 283              	 .cfi_endproc
 284              	.LFE228:
 286              	 .section .text.XMC_UART_CH_SetBaudrate,"ax",%progbits
 287              	 .align 2
 288              	 .global XMC_UART_CH_SetBaudrate
 289              	 .thumb
 290              	 .thumb_func
 292              	XMC_UART_CH_SetBaudrate:
 293              	.LFB229:
 125:../Libraries/XMCLib/src/xmc_uart.c **** 
 126:../Libraries/XMCLib/src/xmc_uart.c **** XMC_UART_CH_STATUS_t XMC_UART_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t 
 127:../Libraries/XMCLib/src/xmc_uart.c **** {
 294              	 .loc 3 127 0
 295              	 .cfi_startproc
 296              	 
 297              	 
 298 0000 80B5     	 push {r7,lr}
 299              	.LCFI23:
 300              	 .cfi_def_cfa_offset 8
 301              	 .cfi_offset 7,-8
 302              	 .cfi_offset 14,-4
 303 0002 86B0     	 sub sp,sp,#24
 304              	.LCFI24:
 305              	 .cfi_def_cfa_offset 32
 306 0004 00AF     	 add r7,sp,#0
 307              	.LCFI25:
 308              	 .cfi_def_cfa_register 7
 309 0006 F860     	 str r0,[r7,#12]
 310 0008 B960     	 str r1,[r7,#8]
 311 000a 7A60     	 str r2,[r7,#4]
 128:../Libraries/XMCLib/src/xmc_uart.c ****   XMC_UART_CH_STATUS_t status;
 129:../Libraries/XMCLib/src/xmc_uart.c ****   
 130:../Libraries/XMCLib/src/xmc_uart.c ****   status = XMC_UART_CH_STATUS_ERROR;
 312              	 .loc 3 130 0
 313 000c 0123     	 movs r3,#1
 314 000e FB75     	 strb r3,[r7,#23]
 131:../Libraries/XMCLib/src/xmc_uart.c ****   
 132:../Libraries/XMCLib/src/xmc_uart.c ****   if ((rate <= (XMC_SCU_CLOCK_GetPeripheralClockFrequency() >> 2U)) && (oversampling >= XMC_UART_CH
 315              	 .loc 3 132 0
 316 0010 FFF7FEFF 	 bl XMC_SCU_CLOCK_GetPeripheralClockFrequency
 317 0014 0346     	 mov r3,r0
 318 0016 9A08     	 lsrs r2,r3,#2
 319 0018 BB68     	 ldr r3,[r7,#8]
 320 001a 9A42     	 cmp r2,r3
 321 001c 0CD3     	 bcc .L10
 322              	 .loc 3 132 0 is_stmt 0 discriminator 1
 323 001e 7B68     	 ldr r3,[r7,#4]
 324 0020 032B     	 cmp r3,#3
 325 0022 09D9     	 bls .L10
 133:../Libraries/XMCLib/src/xmc_uart.c ****   {
 134:../Libraries/XMCLib/src/xmc_uart.c ****     if (XMC_USIC_CH_SetBaudrate(channel, rate, oversampling) == XMC_USIC_CH_STATUS_OK)
 326              	 .loc 3 134 0 is_stmt 1
 327 0024 F868     	 ldr r0,[r7,#12]
 328 0026 B968     	 ldr r1,[r7,#8]
 329 0028 7A68     	 ldr r2,[r7,#4]
 330 002a FFF7FEFF 	 bl XMC_USIC_CH_SetBaudrate
 331 002e 0346     	 mov r3,r0
 332 0030 002B     	 cmp r3,#0
 333 0032 01D1     	 bne .L10
 135:../Libraries/XMCLib/src/xmc_uart.c ****     {
 136:../Libraries/XMCLib/src/xmc_uart.c ****       status = XMC_UART_CH_STATUS_OK;
 334              	 .loc 3 136 0
 335 0034 0023     	 movs r3,#0
 336 0036 FB75     	 strb r3,[r7,#23]
 337              	.L10:
 137:../Libraries/XMCLib/src/xmc_uart.c ****     }
 138:../Libraries/XMCLib/src/xmc_uart.c ****   } 
 139:../Libraries/XMCLib/src/xmc_uart.c ****   return status;
 338              	 .loc 3 139 0
 339 0038 FB7D     	 ldrb r3,[r7,#23]
 140:../Libraries/XMCLib/src/xmc_uart.c **** }
 340              	 .loc 3 140 0
 341 003a 1846     	 mov r0,r3
 342 003c 1837     	 adds r7,r7,#24
 343              	.LCFI26:
 344              	 .cfi_def_cfa_offset 8
 345 003e BD46     	 mov sp,r7
 346              	.LCFI27:
 347              	 .cfi_def_cfa_register 13
 348              	 
 349 0040 80BD     	 pop {r7,pc}
 350              	 .cfi_endproc
 351              	.LFE229:
 353 0042 00BF     	 .section .text.XMC_UART_CH_Transmit,"ax",%progbits
 354              	 .align 2
 355              	 .global XMC_UART_CH_Transmit
 356              	 .thumb
 357              	 .thumb_func
 359              	XMC_UART_CH_Transmit:
 360              	.LFB230:
 141:../Libraries/XMCLib/src/xmc_uart.c **** 
 142:../Libraries/XMCLib/src/xmc_uart.c **** void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
 143:../Libraries/XMCLib/src/xmc_uart.c **** {
 361              	 .loc 3 143 0
 362              	 .cfi_startproc
 363              	 
 364              	 
 365 0000 80B5     	 push {r7,lr}
 366              	.LCFI28:
 367              	 .cfi_def_cfa_offset 8
 368              	 .cfi_offset 7,-8
 369              	 .cfi_offset 14,-4
 370 0002 82B0     	 sub sp,sp,#8
 371              	.LCFI29:
 372              	 .cfi_def_cfa_offset 16
 373 0004 00AF     	 add r7,sp,#0
 374              	.LCFI30:
 375              	 .cfi_def_cfa_register 7
 376 0006 7860     	 str r0,[r7,#4]
 377 0008 0B46     	 mov r3,r1
 378 000a 7B80     	 strh r3,[r7,#2]
 144:../Libraries/XMCLib/src/xmc_uart.c ****   /* Check FIFO size */
 145:../Libraries/XMCLib/src/xmc_uart.c ****   if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
 379              	 .loc 3 145 0
 380 000c 7B68     	 ldr r3,[r7,#4]
 381 000e D3F80831 	 ldr r3,[r3,#264]
 382 0012 03F0E063 	 and r3,r3,#117440512
 383 0016 002B     	 cmp r3,#0
 384 0018 10D1     	 bne .L13
 146:../Libraries/XMCLib/src/xmc_uart.c ****   {
 147:../Libraries/XMCLib/src/xmc_uart.c ****     /* Wait till the Transmit Buffer is free for transmission */
 148:../Libraries/XMCLib/src/xmc_uart.c ****     while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 385              	 .loc 3 148 0
 386 001a 00BF     	 nop
 387              	.L14:
 388              	 .loc 3 148 0 is_stmt 0 discriminator 1
 389 001c 7868     	 ldr r0,[r7,#4]
 390 001e FFF7FEFF 	 bl XMC_USIC_CH_GetTransmitBufferStatus
 391 0022 0346     	 mov r3,r0
 392 0024 802B     	 cmp r3,#128
 393 0026 F9D0     	 beq .L14
 149:../Libraries/XMCLib/src/xmc_uart.c ****     {
 150:../Libraries/XMCLib/src/xmc_uart.c ****     }
 151:../Libraries/XMCLib/src/xmc_uart.c ****   
 152:../Libraries/XMCLib/src/xmc_uart.c ****     /* Clear the Transmit Buffer indication flag */
 153:../Libraries/XMCLib/src/xmc_uart.c ****     XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATI
 394              	 .loc 3 153 0 is_stmt 1
 395 0028 7868     	 ldr r0,[r7,#4]
 396 002a 4FF40051 	 mov r1,#8192
 397 002e FFF7FEFF 	 bl XMC_UART_CH_ClearStatusFlag
 154:../Libraries/XMCLib/src/xmc_uart.c ****   
 155:../Libraries/XMCLib/src/xmc_uart.c ****     /*Transmit data */
 156:../Libraries/XMCLib/src/xmc_uart.c ****     channel->TBUF[0U] = data;
 398              	 .loc 3 156 0
 399 0032 7A88     	 ldrh r2,[r7,#2]
 400 0034 7B68     	 ldr r3,[r7,#4]
 401 0036 C3F88020 	 str r2,[r3,#128]
 402 003a 03E0     	 b .L12
 403              	.L13:
 157:../Libraries/XMCLib/src/xmc_uart.c ****   }
 158:../Libraries/XMCLib/src/xmc_uart.c ****   else
 159:../Libraries/XMCLib/src/xmc_uart.c ****   {
 160:../Libraries/XMCLib/src/xmc_uart.c ****     channel->IN[0U] = data;
 404              	 .loc 3 160 0
 405 003c 7A88     	 ldrh r2,[r7,#2]
 406 003e 7B68     	 ldr r3,[r7,#4]
 407 0040 C3F88021 	 str r2,[r3,#384]
 408              	.L12:
 161:../Libraries/XMCLib/src/xmc_uart.c ****   }
 162:../Libraries/XMCLib/src/xmc_uart.c **** }
 409              	 .loc 3 162 0
 410 0044 0837     	 adds r7,r7,#8
 411              	.LCFI31:
 412              	 .cfi_def_cfa_offset 8
 413 0046 BD46     	 mov sp,r7
 414              	.LCFI32:
 415              	 .cfi_def_cfa_register 13
 416              	 
 417 0048 80BD     	 pop {r7,pc}
 418              	 .cfi_endproc
 419              	.LFE230:
 421 004a 00BF     	 .section .text.XMC_UART_CH_GetReceivedData,"ax",%progbits
 422              	 .align 2
 423              	 .global XMC_UART_CH_GetReceivedData
 424              	 .thumb
 425              	 .thumb_func
 427              	XMC_UART_CH_GetReceivedData:
 428              	.LFB231:
 163:../Libraries/XMCLib/src/xmc_uart.c **** 
 164:../Libraries/XMCLib/src/xmc_uart.c **** uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
 165:../Libraries/XMCLib/src/xmc_uart.c **** {
 429              	 .loc 3 165 0
 430              	 .cfi_startproc
 431              	 
 432              	 
 433              	 
 434 0000 80B4     	 push {r7}
 435              	.LCFI33:
 436              	 .cfi_def_cfa_offset 4
 437              	 .cfi_offset 7,-4
 438 0002 85B0     	 sub sp,sp,#20
 439              	.LCFI34:
 440              	 .cfi_def_cfa_offset 24
 441 0004 00AF     	 add r7,sp,#0
 442              	.LCFI35:
 443              	 .cfi_def_cfa_register 7
 444 0006 7860     	 str r0,[r7,#4]
 166:../Libraries/XMCLib/src/xmc_uart.c ****   uint16_t retval;
 167:../Libraries/XMCLib/src/xmc_uart.c **** 
 168:../Libraries/XMCLib/src/xmc_uart.c ****   /* Check FIFO size */
 169:../Libraries/XMCLib/src/xmc_uart.c ****   if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 445              	 .loc 3 169 0
 446 0008 7B68     	 ldr r3,[r7,#4]
 447 000a D3F80C31 	 ldr r3,[r3,#268]
 448 000e 03F0E063 	 and r3,r3,#117440512
 449 0012 002B     	 cmp r3,#0
 450 0014 03D1     	 bne .L17
 170:../Libraries/XMCLib/src/xmc_uart.c ****   {
 171:../Libraries/XMCLib/src/xmc_uart.c ****     retval = (uint16_t)channel->RBUF;
 451              	 .loc 3 171 0
 452 0016 7B68     	 ldr r3,[r7,#4]
 453 0018 5B6D     	 ldr r3,[r3,#84]
 454 001a FB81     	 strh r3,[r7,#14]
 455 001c 03E0     	 b .L18
 456              	.L17:
 172:../Libraries/XMCLib/src/xmc_uart.c ****   }
 173:../Libraries/XMCLib/src/xmc_uart.c ****   else
 174:../Libraries/XMCLib/src/xmc_uart.c ****   {
 175:../Libraries/XMCLib/src/xmc_uart.c ****     retval = (uint16_t)channel->OUTR;
 457              	 .loc 3 175 0
 458 001e 7B68     	 ldr r3,[r7,#4]
 459 0020 D3F81C31 	 ldr r3,[r3,#284]
 460 0024 FB81     	 strh r3,[r7,#14]
 461              	.L18:
 176:../Libraries/XMCLib/src/xmc_uart.c ****   }
 177:../Libraries/XMCLib/src/xmc_uart.c **** 
 178:../Libraries/XMCLib/src/xmc_uart.c ****   return retval;
 462              	 .loc 3 178 0
 463 0026 FB89     	 ldrh r3,[r7,#14]
 179:../Libraries/XMCLib/src/xmc_uart.c **** }
 464              	 .loc 3 179 0
 465 0028 1846     	 mov r0,r3
 466 002a 1437     	 adds r7,r7,#20
 467              	.LCFI36:
 468              	 .cfi_def_cfa_offset 4
 469 002c BD46     	 mov sp,r7
 470              	.LCFI37:
 471              	 .cfi_def_cfa_register 13
 472              	 
 473 002e 5DF8047B 	 ldr r7,[sp],#4
 474              	.LCFI38:
 475              	 .cfi_restore 7
 476              	 .cfi_def_cfa_offset 0
 477 0032 7047     	 bx lr
 478              	 .cfi_endproc
 479              	.LFE231:
 481              	 .section .text.XMC_UART_CH_Stop,"ax",%progbits
 482              	 .align 2
 483              	 .global XMC_UART_CH_Stop
 484              	 .thumb
 485              	 .thumb_func
 487              	XMC_UART_CH_Stop:
 488              	.LFB232:
 180:../Libraries/XMCLib/src/xmc_uart.c **** 
 181:../Libraries/XMCLib/src/xmc_uart.c **** XMC_UART_CH_STATUS_t XMC_UART_CH_Stop(XMC_USIC_CH_t *const channel)
 182:../Libraries/XMCLib/src/xmc_uart.c **** {
 489              	 .loc 3 182 0
 490              	 .cfi_startproc
 491              	 
 492              	 
 493 0000 80B5     	 push {r7,lr}
 494              	.LCFI39:
 495              	 .cfi_def_cfa_offset 8
 496              	 .cfi_offset 7,-8
 497              	 .cfi_offset 14,-4
 498 0002 84B0     	 sub sp,sp,#16
 499              	.LCFI40:
 500              	 .cfi_def_cfa_offset 24
 501 0004 00AF     	 add r7,sp,#0
 502              	.LCFI41:
 503              	 .cfi_def_cfa_register 7
 504 0006 7860     	 str r0,[r7,#4]
 183:../Libraries/XMCLib/src/xmc_uart.c ****   XMC_UART_CH_STATUS_t status = XMC_UART_CH_STATUS_OK;
 505              	 .loc 3 183 0
 506 0008 0023     	 movs r3,#0
 507 000a FB73     	 strb r3,[r7,#15]
 184:../Libraries/XMCLib/src/xmc_uart.c ****   if ((XMC_USIC_CH_GetTransmitBufferStatus(channel) & (uint32_t) XMC_USIC_CH_TBUF_STATUS_BUSY) != 0
 508              	 .loc 3 184 0
 509 000c 7868     	 ldr r0,[r7,#4]
 510 000e FFF7FEFF 	 bl XMC_USIC_CH_GetTransmitBufferStatus
 511 0012 0346     	 mov r3,r0
 512 0014 DBB2     	 uxtb r3,r3
 513 0016 5BB2     	 sxtb r3,r3
 514 0018 002B     	 cmp r3,#0
 515 001a 02DA     	 bge .L21
 185:../Libraries/XMCLib/src/xmc_uart.c ****   {
 186:../Libraries/XMCLib/src/xmc_uart.c **** 	status = XMC_UART_CH_STATUS_BUSY;
 516              	 .loc 3 186 0
 517 001c 0223     	 movs r3,#2
 518 001e FB73     	 strb r3,[r7,#15]
 519 0020 03E0     	 b .L22
 520              	.L21:
 187:../Libraries/XMCLib/src/xmc_uart.c ****   }
 188:../Libraries/XMCLib/src/xmc_uart.c ****   else
 189:../Libraries/XMCLib/src/xmc_uart.c ****   {
 190:../Libraries/XMCLib/src/xmc_uart.c **** 	/* USIC channel in IDLE mode */
 191:../Libraries/XMCLib/src/xmc_uart.c **** 	XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_IDLE);
 521              	 .loc 3 191 0
 522 0022 7868     	 ldr r0,[r7,#4]
 523 0024 0021     	 movs r1,#0
 524 0026 FFF7FEFF 	 bl XMC_USIC_CH_SetMode
 525              	.L22:
 192:../Libraries/XMCLib/src/xmc_uart.c ****   }
 193:../Libraries/XMCLib/src/xmc_uart.c ****   return status;
 526              	 .loc 3 193 0
 527 002a FB7B     	 ldrb r3,[r7,#15]
 194:../Libraries/XMCLib/src/xmc_uart.c **** }
 528              	 .loc 3 194 0
 529 002c 1846     	 mov r0,r3
 530 002e 1037     	 adds r7,r7,#16
 531              	.LCFI42:
 532              	 .cfi_def_cfa_offset 8
 533 0030 BD46     	 mov sp,r7
 534              	.LCFI43:
 535              	 .cfi_def_cfa_register 13
 536              	 
 537 0032 80BD     	 pop {r7,pc}
 538              	 .cfi_endproc
 539              	.LFE232:
 541              	 .section .text.XMC_UART_CH_EnableEvent,"ax",%progbits
 542              	 .align 2
 543              	 .global XMC_UART_CH_EnableEvent
 544              	 .thumb
 545              	 .thumb_func
 547              	XMC_UART_CH_EnableEvent:
 548              	.LFB233:
 195:../Libraries/XMCLib/src/xmc_uart.c **** 
 196:../Libraries/XMCLib/src/xmc_uart.c **** void XMC_UART_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
 197:../Libraries/XMCLib/src/xmc_uart.c **** {
 549              	 .loc 3 197 0
 550              	 .cfi_startproc
 551              	 
 552              	 
 553              	 
 554 0000 80B4     	 push {r7}
 555              	.LCFI44:
 556              	 .cfi_def_cfa_offset 4
 557              	 .cfi_offset 7,-4
 558 0002 83B0     	 sub sp,sp,#12
 559              	.LCFI45:
 560              	 .cfi_def_cfa_offset 16
 561 0004 00AF     	 add r7,sp,#0
 562              	.LCFI46:
 563              	 .cfi_def_cfa_register 7
 564 0006 7860     	 str r0,[r7,#4]
 565 0008 3960     	 str r1,[r7]
 198:../Libraries/XMCLib/src/xmc_uart.c ****   channel->CCR |= (event&0x1fc00U);
 566              	 .loc 3 198 0
 567 000a 7B68     	 ldr r3,[r7,#4]
 568 000c 1A6C     	 ldr r2,[r3,#64]
 569 000e 3B68     	 ldr r3,[r7]
 570 0010 03F4FE33 	 and r3,r3,#130048
 571 0014 1A43     	 orrs r2,r2,r3
 572 0016 7B68     	 ldr r3,[r7,#4]
 573 0018 1A64     	 str r2,[r3,#64]
 199:../Libraries/XMCLib/src/xmc_uart.c ****   channel->PCR_ASCMode |= (event&0xf8U);
 574              	 .loc 3 199 0
 575 001a 7B68     	 ldr r3,[r7,#4]
 576 001c DA6B     	 ldr r2,[r3,#60]
 577 001e 3B68     	 ldr r3,[r7]
 578 0020 03F0F803 	 and r3,r3,#248
 579 0024 1A43     	 orrs r2,r2,r3
 580 0026 7B68     	 ldr r3,[r7,#4]
 581 0028 DA63     	 str r2,[r3,#60]
 200:../Libraries/XMCLib/src/xmc_uart.c **** }
 582              	 .loc 3 200 0
 583 002a 0C37     	 adds r7,r7,#12
 584              	.LCFI47:
 585              	 .cfi_def_cfa_offset 4
 586 002c BD46     	 mov sp,r7
 587              	.LCFI48:
 588              	 .cfi_def_cfa_register 13
 589              	 
 590 002e 5DF8047B 	 ldr r7,[sp],#4
 591              	.LCFI49:
 592              	 .cfi_restore 7
 593              	 .cfi_def_cfa_offset 0
 594 0032 7047     	 bx lr
 595              	 .cfi_endproc
 596              	.LFE233:
 598              	 .section .text.XMC_UART_CH_DisableEvent,"ax",%progbits
 599              	 .align 2
 600              	 .global XMC_UART_CH_DisableEvent
 601              	 .thumb
 602              	 .thumb_func
 604              	XMC_UART_CH_DisableEvent:
 605              	.LFB234:
 201:../Libraries/XMCLib/src/xmc_uart.c **** 
 202:../Libraries/XMCLib/src/xmc_uart.c **** void XMC_UART_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
 203:../Libraries/XMCLib/src/xmc_uart.c **** {
 606              	 .loc 3 203 0
 607              	 .cfi_startproc
 608              	 
 609              	 
 610              	 
 611 0000 80B4     	 push {r7}
 612              	.LCFI50:
 613              	 .cfi_def_cfa_offset 4
 614              	 .cfi_offset 7,-4
 615 0002 83B0     	 sub sp,sp,#12
 616              	.LCFI51:
 617              	 .cfi_def_cfa_offset 16
 618 0004 00AF     	 add r7,sp,#0
 619              	.LCFI52:
 620              	 .cfi_def_cfa_register 7
 621 0006 7860     	 str r0,[r7,#4]
 622 0008 3960     	 str r1,[r7]
 204:../Libraries/XMCLib/src/xmc_uart.c ****   channel->CCR &= (uint32_t)~(event&0x1fc00U);
 623              	 .loc 3 204 0
 624 000a 7B68     	 ldr r3,[r7,#4]
 625 000c 1A6C     	 ldr r2,[r3,#64]
 626 000e 3B68     	 ldr r3,[r7]
 627 0010 03F4FE33 	 and r3,r3,#130048
 628 0014 DB43     	 mvns r3,r3
 629 0016 1A40     	 ands r2,r2,r3
 630 0018 7B68     	 ldr r3,[r7,#4]
 631 001a 1A64     	 str r2,[r3,#64]
 205:../Libraries/XMCLib/src/xmc_uart.c ****   channel->PCR_ASCMode &= (uint32_t)~(event&0xf8U);
 632              	 .loc 3 205 0
 633 001c 7B68     	 ldr r3,[r7,#4]
 634 001e DA6B     	 ldr r2,[r3,#60]
 635 0020 3B68     	 ldr r3,[r7]
 636 0022 03F0F803 	 and r3,r3,#248
 637 0026 DB43     	 mvns r3,r3
 638 0028 1A40     	 ands r2,r2,r3
 639 002a 7B68     	 ldr r3,[r7,#4]
 640 002c DA63     	 str r2,[r3,#60]
 206:../Libraries/XMCLib/src/xmc_uart.c **** }
 641              	 .loc 3 206 0
 642 002e 0C37     	 adds r7,r7,#12
 643              	.LCFI53:
 644              	 .cfi_def_cfa_offset 4
 645 0030 BD46     	 mov sp,r7
 646              	.LCFI54:
 647              	 .cfi_def_cfa_register 13
 648              	 
 649 0032 5DF8047B 	 ldr r7,[sp],#4
 650              	.LCFI55:
 651              	 .cfi_restore 7
 652              	 .cfi_def_cfa_offset 0
 653 0036 7047     	 bx lr
 654              	 .cfi_endproc
 655              	.LFE234:
 657              	 .text
 658              	.Letext0:
 659              	 .file 4 "d:\\dave-4.1.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 660              	 .file 5 "d:\\dave-4.1.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 661              	 .file 6 "D:\\Naukowe\\BLDC_workspace\\PWM_from_ex/Libraries/CMSIS/Include/core_cm4.h"
 662              	 .file 7 "D:\\Naukowe\\BLDC_workspace\\PWM_from_ex/Libraries/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_uart.c
    {standard input}:20     .text.XMC_USIC_CH_GetTransmitBufferStatus:00000000 $t
    {standard input}:24     .text.XMC_USIC_CH_GetTransmitBufferStatus:00000000 XMC_USIC_CH_GetTransmitBufferStatus
    {standard input}:67     .text.XMC_USIC_CH_SetMode:00000000 $t
    {standard input}:71     .text.XMC_USIC_CH_SetMode:00000000 XMC_USIC_CH_SetMode
    {standard input}:116    .text.XMC_UART_CH_ClearStatusFlag:00000000 $t
    {standard input}:120    .text.XMC_UART_CH_ClearStatusFlag:00000000 XMC_UART_CH_ClearStatusFlag
    {standard input}:161    .text.XMC_UART_CH_Init:00000000 $t
    {standard input}:166    .text.XMC_UART_CH_Init:00000000 XMC_UART_CH_Init
    {standard input}:287    .text.XMC_UART_CH_SetBaudrate:00000000 $t
    {standard input}:292    .text.XMC_UART_CH_SetBaudrate:00000000 XMC_UART_CH_SetBaudrate
    {standard input}:354    .text.XMC_UART_CH_Transmit:00000000 $t
    {standard input}:359    .text.XMC_UART_CH_Transmit:00000000 XMC_UART_CH_Transmit
    {standard input}:422    .text.XMC_UART_CH_GetReceivedData:00000000 $t
    {standard input}:427    .text.XMC_UART_CH_GetReceivedData:00000000 XMC_UART_CH_GetReceivedData
    {standard input}:482    .text.XMC_UART_CH_Stop:00000000 $t
    {standard input}:487    .text.XMC_UART_CH_Stop:00000000 XMC_UART_CH_Stop
    {standard input}:542    .text.XMC_UART_CH_EnableEvent:00000000 $t
    {standard input}:547    .text.XMC_UART_CH_EnableEvent:00000000 XMC_UART_CH_EnableEvent
    {standard input}:599    .text.XMC_UART_CH_DisableEvent:00000000 $t
    {standard input}:604    .text.XMC_UART_CH_DisableEvent:00000000 XMC_UART_CH_DisableEvent
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_USIC_CH_Enable
XMC_USIC_CH_SetBaudrate
XMC_SCU_CLOCK_GetPeripheralClockFrequency
