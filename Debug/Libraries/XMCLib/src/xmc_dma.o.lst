   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "xmc_dma.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_DMA_GetEventStatus,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_DMA_GetEventStatus:
  25              	.LFB128:
  26              	 .file 1 "D:\\Naukowe\\BLDC_workspace\\PWM_from_ex\\Libraries\\XMCLib\\inc/xmc_dma.h"
   1:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** 
   2:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** /**
   3:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * @file xmc_dma.h
   4:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * @date 2015-10-27
   5:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  *
   6:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * @cond
   7:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  **************************************************************************************************
   8:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * XMClib v2.1.2 - XMC Peripheral Driver Library 
   9:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  *
  10:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * Copyright (c) 2015, Infineon Technologies AG
  11:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * All rights reserved.                        
  12:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  *                                             
  13:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  14:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * following conditions are met:   
  15:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  *                                                                              
  16:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  17:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * disclaimer.                        
  18:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * 
  19:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  20:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  21:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * 
  22:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  23:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * products derived from this software without specific prior written permission.                  
  24:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  *                                                                              
  25:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  26:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  27:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  28:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  29:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  30:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  31:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  32:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  *                                                                              
  33:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  34:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  35:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  **************************************************************************************************
  36:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  *
  37:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * Change History
  38:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * --------------
  39:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  *
  40:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * 2015-02-20:
  41:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  *     - Initial <br>
  42:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  *
  43:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * 2015-06-20:
  44:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  *     - Add the declarations for the following APIs: <br>
  45:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  *       XMC_DMA_DisableRequestLine, XMC_DMA_ClearRequestLine, <br>
  46:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  *       XMC_DMA_CH_ClearSourcePeripheralRequest, <br>
  47:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  *       XMC_DMA_CH_ClearDestinationPeripheralRequest <br>
  48:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  *     - Documentation updates <br>
  49:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  *     - Removed version macros and declaration of GetDriverVersion API <br>
  50:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  *
  51:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * @endcond
  52:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  */
  53:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** 
  54:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** #ifndef XMC_DMA_H
  55:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** #define XMC_DMA_H
  56:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** 
  57:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** /*******************************************************************************
  58:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * HEADER FILES
  59:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  *******************************************************************************/
  60:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** 
  61:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** #include "xmc_common.h"
  62:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** 
  63:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** #if defined (GPDMA0)
  64:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** 
  65:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** #include "xmc_dma_map.h"
  66:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** 
  67:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** /**
  68:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * @addtogroup XMClib XMC Peripheral Library
  69:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * @{
  70:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  */
  71:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** 
  72:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** /**
  73:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * @addtogroup DMA
  74:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * @brief General purpose DMA (GPDMA) driver for the XMC4000 microcontroller family
  75:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  *
  76:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * The GPDMA is a highly configurable DMA controller that allows high-speed data transfers
  77:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * between peripherals and memories. Complex data transfers can be done with minimal
  78:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * intervention of the processor, making CPU available for other operations.
  79:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  *
  80:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * GPDMA provides extensive support for XMC microcontroller peripherals like A/D, D/A
  81:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * converters and timers. Data transfers through communication interfaces (USIC) using the
  82:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * GPDMA increase efficiency and parallelism for real-time applications.
  83:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  *
  84:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * The DMA low level driver provides functions to configure and initialize the GPDMA
  85:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * hardware peripheral.
  86:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * @{
  87:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  */
  88:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** 
  89:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** /*******************************************************************************
  90:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * MACROS
  91:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  *******************************************************************************/
  92:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** 
  93:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** #if defined (GPDMA0)
  94:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** #define XMC_DMA0 ((XMC_DMA_t *)GPDMA0_CH0_BASE) /**< DMA module 0 */
  95:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** #define XMC_DMA0_NUM_CHANNELS 8
  96:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** #endif
  97:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** 
  98:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** #if defined (GPDMA1)
  99:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** #define XMC_DMA1 ((XMC_DMA_t *)GPDMA1_CH0_BASE) /**< DMA module 1, only available in XMC45xx series
 100:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** #define XMC_DMA1_NUM_CHANNELS 4
 101:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** #endif
 102:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** 
 103:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** /*******************************************************************************
 104:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * ENUMS
 105:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  *******************************************************************************/
 106:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** 
 107:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** /**
 108:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * DMA transfer types
 109:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  */
 110:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** typedef enum XMC_DMA_CH_TRANSFER_TYPE
 111:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** {
 112:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_SINGLE_BLOCK,                                /**< Single block */
 113:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_RELOAD, /**< Multi-block: src addre
 114:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_CONTIGUOUS, /**< Multi-block: src addre
 115:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_RELOAD,     /**< Multi-block: src addre
 116:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_LINKED, /**< Multi-block: src addre
 117:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_LINKED,     /**< Multi-block: src addre
 118:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_CONTIGUOUS, /**< Multi-block: src addre
 119:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_RELOAD,     /**< Multi-block: src addre
 120:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_LINKED      /**< Multi-block: src addre
 121:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** } XMC_DMA_CH_TRANSFER_TYPE_t;
 122:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** 
 123:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** /**
 124:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * DMA transfer flow modes
 125:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  */
 126:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** typedef enum XMC_DMA_CH_TRANSFER_FLOW
 127:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** {
 128:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_M2M_DMA    = 0x0UL, /**< Memory to memory (DMA flow controller) */
 129:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_M2P_DMA    = 0x1UL, /**< Memory to peripheral (DMA flow controller) */
 130:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2M_DMA    = 0x2UL, /**< Peripheral to memory (DMA flow controller) */
 131:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA    = 0x3UL, /**< Peripheral to peripheral (DMA flow controller) 
 132:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2M_PER    = 0x4UL, /**< Peripheral to memory (Peripheral flow controlle
 133:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2P_SRCPER = 0x5UL, /**< Peripheral to peripheral (Source peripheral flo
 134:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_M2P_PER    = 0x6UL, /**< Memory to peripheral (Peripheral flow controlle
 135:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2P_DSTPER = 0x7UL  /**< Peripheral to peripheral (Destination periphera
 136:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** } XMC_DMA_CH_TRANSFER_FLOW_t;
 137:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** 
 138:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** /**
 139:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * Valid burst length values
 140:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  */
 141:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** typedef enum XMC_DMA_CH_BURST_LENGTH
 142:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** {
 143:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_BURST_LENGTH_1 = 0x0UL, /**< Burst length: 1 word */
 144:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_BURST_LENGTH_4 = 0x1UL, /**< Burst length: 4 words */
 145:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_BURST_LENGTH_8 = 0x2UL  /**< Burst length: 8 words */
 146:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** } XMC_DMA_CH_BURST_LENGTH_t;
 147:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** 
 148:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** /**
 149:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * Valid transfer width values
 150:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  */
 151:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** typedef enum XMC_DMA_CH_TRANSFER_WIDTH
 152:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** {
 153:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_WIDTH_8  = 0x0UL, /**< 8-bit transfer width */
 154:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_WIDTH_16 = 0x1UL, /**< 16-bit transfer width */
 155:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_WIDTH_32 = 0x2UL  /**< 32-bit transfer width */
 156:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** } XMC_DMA_CH_TRANSFER_WIDTH_t;
 157:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** 
 158:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** /**
 159:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * DMA address count mode
 160:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  */
 161:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** typedef enum XMC_DMA_CH_ADDRESS_COUNT_MODE
 162:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** {
 163:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_ADDRESS_COUNT_MODE_INCREMENT = 0x0UL, /**< Address count mode: increment */
 164:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_ADDRESS_COUNT_MODE_DECREMENT = 0x1UL, /**< Address count mode: decrement */
 165:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_ADDRESS_COUNT_MODE_NO_CHANGE = 0x2UL  /**< Address count mode: no change */
 166:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** } XMC_DMA_CH_ADDRESS_COUNT_MODE_t;
 167:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** 
 168:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** /**
 169:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * DMA channel priorities
 170:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  */
 171:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** typedef enum XMC_DMA_CH_PRIORITY
 172:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** {
 173:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_0 = 0x0UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 0 (low) *
 174:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_1 = 0x1UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 1 */
 175:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_2 = 0x2UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 2 */
 176:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_3 = 0x3UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 3 */
 177:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_4 = 0x4UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 4 */
 178:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_5 = 0x5UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 5 */
 179:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_6 = 0x6UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 6 */
 180:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_7 = 0x7UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos  /**< DMA channel priority 7 (high) 
 181:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** } XMC_DMA_CH_PRIORITY_t;
 182:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** 
 183:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** /**
 184:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * Source handshake interface
 185:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  */
 186:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** typedef enum XMC_DMA_CH_SRC_HANDSHAKING
 187:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** {
 188:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_SRC_HANDSHAKING_HARDWARE = 0x0UL << GPDMA0_CH_CFGL_HS_SEL_SRC_Pos, /**< Source: hardwa
 189:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_SRC_HANDSHAKING_SOFTWARE = 0x1UL << GPDMA0_CH_CFGL_HS_SEL_SRC_Pos  /**< Source: softwa
 190:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** } XMC_DMA_CH_SRC_HANDSHAKING_t;
 191:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** 
 192:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** /**
 193:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * Destination handshake interface
 194:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  */
 195:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** typedef enum XMC_DMA_CH_DST_HANDSHAKING
 196:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** {
 197:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_DST_HANDSHAKING_HARDWARE = 0x0UL << GPDMA0_CH_CFGL_HS_SEL_DST_Pos, /**< Destination: h
 198:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_DST_HANDSHAKING_SOFTWARE = 0x1UL << GPDMA0_CH_CFGL_HS_SEL_DST_Pos  /**< Destination: s
 199:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** } XMC_DMA_CH_DST_HANDSHAKING_t;
 200:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** 
 201:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** /**
 202:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * DMA hardware handshaking interface
 203:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * Hardware handshaking available only if DMA is flow controller
 204:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  */
 205:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** typedef enum XMC_DMA_CH_HARDWARE_HANDSHAKING_IF
 206:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** {
 207:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_0 = 0x0UL, /**< Hardware handshaking interface 0 */
 208:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_1 = 0x1UL, /**< Hardware handshaking interface 1 */
 209:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_2 = 0x2UL, /**< Hardware handshaking interface 2 */
 210:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_3 = 0x3UL, /**< Hardware handshaking interface 3 */
 211:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_4 = 0x4UL, /**< Hardware handshaking interface 4 */
 212:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_5 = 0x5UL, /**< Hardware handshaking interface 5 */
 213:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_6 = 0x6UL, /**< Hardware handshaking interface 6 */
 214:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_7 = 0x7UL  /**< Hardware handshaking interface 7 */
 215:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** } XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_t;
 216:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** 
 217:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** /**
 218:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * DMA events
 219:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  */
 220:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** typedef enum XMC_DMA_CH_EVENT
 221:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** {
 222:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_TRANSFER_COMPLETE        = 0x1UL, /**< Transfer complete event */
 223:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE  = 0x2UL, /**< Block transfer complete event */
 224:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE = 0x4UL, /**< Source transaction complete event */
 225:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE = 0x8UL, /**< Destination transaction complete event */
 226:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_ERROR                    = 0x10UL /**< DMA error event */
 227:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** } XMC_DMA_CH_EVENT_t;
 228:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** 
 229:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** /**
 230:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * Transaction types
 231:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  */
 232:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** typedef enum XMC_DMA_CH_TRANSACTION_TYPE
 233:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** {
 234:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_TRANSACTION_TYPE_SINGLE, /**< Single DMA transaction */
 235:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_TRANSACTION_TYPE_BURST   /**< Burst transaction */
 236:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** } XMC_DMA_CH_TRANSACTION_TYPE_t;
 237:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** 
 238:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** /**
 239:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * DMA channel status values
 240:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  */
 241:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** typedef enum XMC_DMA_CH_STATUS
 242:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** {
 243:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_STATUS_OK,    /**< DMA status OK */
 244:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_STATUS_ERROR, /**< DMA status error */
 245:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_STATUS_BUSY   /**< DMA is busy */
 246:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** } XMC_DMA_CH_STATUS_t;
 247:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** 
 248:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** /*******************************************************************************
 249:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * DATA STRUCTURES
 250:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  *******************************************************************************/
 251:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** 
 252:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** /**
 253:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * DMA channel configuration structure <br>
 254:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  *
 255:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * The structure represents a collection of all hardware registers used
 256:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * to configure the DMA channel. It is contained within the ::XMC_DMA_t
 257:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * structure. It's registers can be used to configure DMA transfer details
 258:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * like source address, destination address, block size, incrementation
 259:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * modes and the like.
 260:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  */
 261:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  
 262:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** typedef struct {
 263:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   __IO uint32_t  SAR;
 264:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   __I  uint32_t  RESERVED0;
 265:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   __IO uint32_t  DAR;
 266:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   __I  uint32_t  RESERVED1;
 267:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   __IO uint32_t  LLP;
 268:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   __I  uint32_t  RESERVED2;
 269:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   __IO uint32_t  CTLL;
 270:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   __IO uint32_t  CTLH;
 271:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   __IO uint32_t  SSTAT;
 272:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   __I  uint32_t  RESERVED3;
 273:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   __IO uint32_t  DSTAT;
 274:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   __I  uint32_t  RESERVED4;
 275:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   __IO uint32_t  SSTATAR;
 276:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   __I  uint32_t  RESERVED5;
 277:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   __IO uint32_t  DSTATAR;
 278:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   __I  uint32_t  RESERVED6;
 279:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   __IO uint32_t  CFGL;
 280:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   __IO uint32_t  CFGH;
 281:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   __IO uint32_t  SGR;
 282:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   __I  uint32_t  RESERVED7;
 283:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   __IO uint32_t  DSR;
 284:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   __I  uint32_t  RESERVED8;
 285:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** } GPDMA_CH_t;
 286:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** 
 287:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** /**
 288:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * DMA device structure <br>
 289:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  *
 290:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * The structure represents a collection of all hardware registers used
 291:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * to configure the GPDMA peripheral on the XMC4000 series of microcontrollers.
 292:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * The registers can be accessed with ::XMC_DMA0 and ::XMC_DMA1.
 293:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  */
 294:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** typedef struct {
 295:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   GPDMA_CH_t CH[8];
 296:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** 
 297:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   __IO uint32_t  RAWCHEV[10];
 298:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   __I  uint32_t  STATUSCHEV[10];
 299:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   __IO uint32_t  MASKCHEV[10];
 300:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   __O  uint32_t  CLEARCHEV[10];
 301:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   __I  uint32_t  STATUSGLEV;
 302:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   __I  uint32_t  RESERVED20;
 303:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   __IO uint32_t  REQSRCREG;
 304:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   __I  uint32_t  RESERVED21;
 305:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   __IO uint32_t  REQDSTREG;
 306:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   __I  uint32_t  RESERVED22;
 307:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   __IO uint32_t  SGLREQSRCREG;
 308:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   __I  uint32_t  RESERVED23;
 309:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   __IO uint32_t  SGLREQDSTREG;
 310:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   __I  uint32_t  RESERVED24;
 311:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   __IO uint32_t  LSTSRCREG;
 312:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   __I  uint32_t  RESERVED25;
 313:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   __IO uint32_t  LSTDSTREG;
 314:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   __I  uint32_t  RESERVED26;
 315:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   __IO uint32_t  DMACFGREG;
 316:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   __I  uint32_t  RESERVED27;
 317:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   __IO uint32_t  CHENREG;
 318:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   __I  uint32_t  RESERVED28;
 319:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   __I  uint32_t  ID;
 320:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   __I  uint32_t  RESERVED29[19];
 321:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   __I  uint32_t  TYPE;
 322:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   __I  uint32_t  VERSION;
 323:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** } XMC_DMA_t;
 324:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** 
 325:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** /* Anonymous structure/union guard start */
 326:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** #if defined (__CC_ARM)
 327:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   #pragma push
 328:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   #pragma anon_unions
 329:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** #elif defined (__TASKING__)
 330:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   #pragma warning 586
 331:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** #endif
 332:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** 
 333:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** /**
 334:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * DMA channel linked list item.
 335:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * Note: Needs to be word aligned
 336:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  */
 337:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** typedef struct XMC_DMA_LLI
 338:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** {
 339:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   uint32_t src_addr;                            /**< Source address */
 340:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   uint32_t dst_addr;                            /**< Destination address */
 341:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   struct XMC_DMA_LLI *llp;                      /**< Linked list pointer of type XMC_DMA_LLI_t */
 342:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   union
 343:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   {
 344:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****     struct
 345:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****     {
 346:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t enable_interrupt: 1;             /**< Enable interrupts? */
 347:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t dst_transfer_width: 3;           /**< Destination transfer width */
 348:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t src_transfer_width: 3;           /**< Source transfer width */
 349:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t dst_address_count_mode: 2;       /**< Destination address count mode */
 350:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t src_address_count_mode: 2;       /**< Source address count mode */
 351:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t dst_burst_length: 3;             /**< Destination burst length */
 352:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t src_burst_length: 3;             /**< Source burst length */
 353:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t enable_src_gather: 1;            /**< Enable source gather? */
 354:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t enable_dst_scatter: 1;           /**< Enable destination scatter? */
 355:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t : 1;                             /**< Reserved bits */
 356:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t transfer_flow: 3;                /**< DMA transfer flow */
 357:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t : 4;                             /**< Reserved bits */
 358:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t enable_dst_linked_list: 1;       /**< Enable destination linked list? */
 359:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t enable_src_linked_list: 1;       /**< Enable source linked list? */
 360:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t : 3;                             /**< Reserved bits */
 361:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****     };
 362:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****     uint32_t control;
 363:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   };
 364:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   uint32_t block_size;                          /**< Transfer block size */
 365:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   uint32_t src_status;                          /**< Source status */
 366:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   uint32_t dst_status;                          /**< Destination status */
 367:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** } XMC_DMA_LLI_t;
 368:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** 
 369:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** typedef XMC_DMA_LLI_t **XMC_DMA_LIST_t;         /**< Type definition for a linked list pointer */
 370:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** 
 371:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** /**
 372:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * DMA channel configuration structure
 373:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  */
 374:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** typedef struct XMC_DMA_CH_CONFIG
 375:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** {
 376:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   union
 377:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   {
 378:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****     uint32_t control;
 379:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****     struct
 380:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****     {
 381:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t enable_interrupt: 1;             /**< Enable interrupts? */
 382:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t dst_transfer_width: 3;           /**< Destination transfer width */
 383:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t src_transfer_width: 3;           /**< Source transfer width */
 384:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t dst_address_count_mode: 2;       /**< Destination address count mode */
 385:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t src_address_count_mode: 2;       /**< Source address count mode */
 386:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t dst_burst_length: 3;             /**< Destination burst length */
 387:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t src_burst_length: 3;             /**< Source burst length */
 388:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t enable_src_gather: 1;            /**< Enable source gather? */
 389:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t enable_dst_scatter: 1;           /**< Enable destination scatter? */
 390:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t : 1;                             
 391:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t transfer_flow: 3;                /**< DMA transfer flow */
 392:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t : 9;                             
 393:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****     };
 394:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   };
 395:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** 
 396:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   uint32_t src_addr;                            /**< Source address */
 397:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   uint32_t dst_addr;                            /**< Destination address */
 398:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_LLI_t *linked_list_pointer;           /**< Linked list pointer */
 399:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   
 400:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   union
 401:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   {
 402:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****     uint32_t src_gather_control;
 403:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****     struct
 404:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****     {
 405:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t src_gather_interval: 20;         /**< Source gather interval */
 406:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t src_gather_count: 12;            /**< Source gather count */
 407:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****     };
 408:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   };
 409:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** 
 410:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   union
 411:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   {
 412:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****     uint32_t dst_scatter_control;
 413:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****     struct
 414:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****     {
 415:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t dst_scatter_interval: 20;        /**< Destination scatter interval */
 416:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****       uint32_t dst_scatter_count: 12;           /**< Destination scatter count */
 417:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****     };
 418:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   };
 419:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   
 420:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   uint16_t block_size;                          /**< Block size for DMA controlled transfers [1-204
 421:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_t transfer_type;     /**< DMA transfer type */
 422:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_t priority;               /**< DMA channel priority */
 423:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_SRC_HANDSHAKING_t src_handshaking; /**< DMA source handshaking interface */
 424:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   uint8_t src_peripheral_request;               /**< Source peripheral request */
 425:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   XMC_DMA_CH_DST_HANDSHAKING_t dst_handshaking; /**< DMA destination handshaking interface */
 426:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   uint8_t dst_peripheral_request;               /**< Destination peripheral request */
 427:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** } XMC_DMA_CH_CONFIG_t;
 428:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** 
 429:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** /* Anonymous structure/union guard end */
 430:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** #if defined (__CC_ARM)
 431:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   #pragma pop
 432:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** #elif defined (__TASKING__)
 433:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   #pragma warning restore
 434:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** #endif
 435:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** 
 436:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** /**
 437:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * DMA channel event handler
 438:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  */
 439:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** typedef void (*XMC_DMA_CH_EVENT_HANDLER_t)(XMC_DMA_CH_EVENT_t event);
 440:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** 
 441:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** /*******************************************************************************
 442:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * API PROTOTYPES
 443:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  *******************************************************************************/
 444:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** 
 445:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** #ifdef __cplusplus
 446:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** extern "C" {
 447:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** #endif
 448:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** 
 449:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** /**
 450:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 451:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * @return None
 452:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  *
 453:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 454:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * Initialize the GPDMA peripheral <br>
 455:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  *
 456:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * \par
 457:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * The function initializes a prioritized list of DMA channels and enables the GPDMA
 458:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * peripheral.
 459:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  */
 460:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** void XMC_DMA_Init(XMC_DMA_t *const dma);
 461:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** 
 462:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** /**
 463:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 464:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * @return None
 465:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  *
 466:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 467:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * Enable the GPDMA peripheral <br>
 468:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  *
 469:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * \par
 470:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * The function de-asserts the GPDMA peripheral reset. In addition, it un-gates the
 471:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * GPDMA0 peripheral clock for all XMC4000 series of microcontrollers with an exception
 472:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * of the XMC4500 microcontroller. The XMC4500 doesn't support gating.
 473:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  */
 474:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** void XMC_DMA_Enable(XMC_DMA_t *const dma);
 475:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** 
 476:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** /**
 477:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 478:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * @return None
 479:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  *
 480:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 481:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * Disable the GPDMA peripheral <br>
 482:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  *
 483:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * \par
 484:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * The function asserts the GPDMA peripheral reset. In addition, it gates the GPDMA0
 485:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * peripheral clock for all XMC4000 series of microcontrollers with an exception of
 486:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * the XMC4500 microcontroller. The XMC4500 doesn't support gating.
 487:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  */
 488:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** void XMC_DMA_Disable(XMC_DMA_t *const dma);
 489:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** 
 490:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** /**
 491:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 492:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * @return bool
 493:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  *
 494:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 495:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * Check if the GPDMA peripheral is enabled <br>
 496:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  *
 497:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * \par
 498:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * For the XMC4500 microcontroller, the function checks if the GPDMA module is asserted
 499:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * and returns "false" if it is. In addition, it also checks if the clock is gated
 500:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * for the other XMC4000 series of microcontrollers. It returns "true" if the peripheral
 501:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * is enabled.
 502:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  */
 503:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** bool XMC_DMA_IsEnabled(const XMC_DMA_t *const dma);
 504:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** 
 505:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** /**
 506:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 507:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * @return uint32_t DMA event status
 508:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  *
 509:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 510:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * Get DMA event status <br>
 511:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  *
 512:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * \par
 513:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * The function returns the collective (global) status of GPDMA events. The following
 514:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * lists the various DMA events and their corresponding enumeration. The return value
 515:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * of this function may then be masked with any one of the following enumerations to
 516:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * obtain the status of individual DMA events. <br>
 517:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  *
 518:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * \par
 519:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * Transfer complete -> ::XMC_DMA_CH_EVENT_TRANSFER_COMPLETE                       <br>
 520:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * Block transfer complete -> ::XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE           <br>
 521:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * Source transaction complete -> ::XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE      <br>
 522:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * Destination transaction complete -> ::XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE <br>
 523:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * DMA error event -> ::XMC_DMA_CH_EVENT_ERROR                                     <br>
 524:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  */
 525:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetEventStatus(XMC_DMA_t *const dma)
 526:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** {
  27              	 .loc 1 526 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
 527:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   return (dma->STATUSGLEV);
  43              	 .loc 1 527 0
  44 0008 7B68     	 ldr r3,[r7,#4]
  45 000a D3F86033 	 ldr r3,[r3,#864]
 528:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** }
  46              	 .loc 1 528 0
  47 000e 1846     	 mov r0,r3
  48 0010 0C37     	 adds r7,r7,#12
  49              	.LCFI3:
  50              	 .cfi_def_cfa_offset 4
  51 0012 BD46     	 mov sp,r7
  52              	.LCFI4:
  53              	 .cfi_def_cfa_register 13
  54              	 
  55 0014 5DF8047B 	 ldr r7,[sp],#4
  56              	.LCFI5:
  57              	 .cfi_restore 7
  58              	 .cfi_def_cfa_offset 0
  59 0018 7047     	 bx lr
  60              	 .cfi_endproc
  61              	.LFE128:
  63 001a 00BF     	 .section .text.XMC_DMA_GetChannelsTransferCompleteStatus,"ax",%progbits
  64              	 .align 2
  65              	 .thumb
  66              	 .thumb_func
  68              	XMC_DMA_GetChannelsTransferCompleteStatus:
  69              	.LFB129:
 529:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** 
 530:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** /**
 531:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 532:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * @return uint32_t DMA transfer complete status
 533:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  *
 534:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 535:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * Get transfer complete status <br>
 536:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  *
 537:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * \par
 538:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * The function returns GPDMA transfer complete interrupt status. <br>
 539:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  */
 540:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsTransferCompleteStatus(XMC_DMA_t *const dma)
 541:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** {
  70              	 .loc 1 541 0
  71              	 .cfi_startproc
  72              	 
  73              	 
  74              	 
  75 0000 80B4     	 push {r7}
  76              	.LCFI6:
  77              	 .cfi_def_cfa_offset 4
  78              	 .cfi_offset 7,-4
  79 0002 83B0     	 sub sp,sp,#12
  80              	.LCFI7:
  81              	 .cfi_def_cfa_offset 16
  82 0004 00AF     	 add r7,sp,#0
  83              	.LCFI8:
  84              	 .cfi_def_cfa_register 7
  85 0006 7860     	 str r0,[r7,#4]
 542:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   return (dma->STATUSCHEV[0]);
  86              	 .loc 1 542 0
  87 0008 7B68     	 ldr r3,[r7,#4]
  88 000a D3F8E832 	 ldr r3,[r3,#744]
 543:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** }
  89              	 .loc 1 543 0
  90 000e 1846     	 mov r0,r3
  91 0010 0C37     	 adds r7,r7,#12
  92              	.LCFI9:
  93              	 .cfi_def_cfa_offset 4
  94 0012 BD46     	 mov sp,r7
  95              	.LCFI10:
  96              	 .cfi_def_cfa_register 13
  97              	 
  98 0014 5DF8047B 	 ldr r7,[sp],#4
  99              	.LCFI11:
 100              	 .cfi_restore 7
 101              	 .cfi_def_cfa_offset 0
 102 0018 7047     	 bx lr
 103              	 .cfi_endproc
 104              	.LFE129:
 106 001a 00BF     	 .section .text.XMC_DMA_GetChannelsBlockCompleteStatus,"ax",%progbits
 107              	 .align 2
 108              	 .thumb
 109              	 .thumb_func
 111              	XMC_DMA_GetChannelsBlockCompleteStatus:
 112              	.LFB130:
 544:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** 
 545:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** /**
 546:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 547:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * @return uint32_t DMA block complete status
 548:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  *
 549:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 550:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * Get block transfer complete status <br>
 551:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  *
 552:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * \par
 553:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * The function returns GPDMA block transfer complete interrupt status. <br>
 554:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  */
 555:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsBlockCompleteStatus(XMC_DMA_t *const dma)
 556:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** {
 113              	 .loc 1 556 0
 114              	 .cfi_startproc
 115              	 
 116              	 
 117              	 
 118 0000 80B4     	 push {r7}
 119              	.LCFI12:
 120              	 .cfi_def_cfa_offset 4
 121              	 .cfi_offset 7,-4
 122 0002 83B0     	 sub sp,sp,#12
 123              	.LCFI13:
 124              	 .cfi_def_cfa_offset 16
 125 0004 00AF     	 add r7,sp,#0
 126              	.LCFI14:
 127              	 .cfi_def_cfa_register 7
 128 0006 7860     	 str r0,[r7,#4]
 557:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   return (dma->STATUSCHEV[2]);
 129              	 .loc 1 557 0
 130 0008 7B68     	 ldr r3,[r7,#4]
 131 000a D3F8F032 	 ldr r3,[r3,#752]
 558:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** }
 132              	 .loc 1 558 0
 133 000e 1846     	 mov r0,r3
 134 0010 0C37     	 adds r7,r7,#12
 135              	.LCFI15:
 136              	 .cfi_def_cfa_offset 4
 137 0012 BD46     	 mov sp,r7
 138              	.LCFI16:
 139              	 .cfi_def_cfa_register 13
 140              	 
 141 0014 5DF8047B 	 ldr r7,[sp],#4
 142              	.LCFI17:
 143              	 .cfi_restore 7
 144              	 .cfi_def_cfa_offset 0
 145 0018 7047     	 bx lr
 146              	 .cfi_endproc
 147              	.LFE130:
 149 001a 00BF     	 .section .text.XMC_DMA_GetChannelsSourceTransactionCompleteStatus,"ax",%progbits
 150              	 .align 2
 151              	 .thumb
 152              	 .thumb_func
 154              	XMC_DMA_GetChannelsSourceTransactionCompleteStatus:
 155              	.LFB131:
 559:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** 
 560:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** /**
 561:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 562:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * @return uint32_t DMA event status
 563:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  *
 564:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 565:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * Get source transaction complete status <br>
 566:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  *
 567:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * \par
 568:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * The function returns the source transaction complete interrupt status. <br>
 569:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  *
 570:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * \par<b>Note: </b><br>
 571:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * If the source peripheral is memory, the source transaction complete interrupt is
 572:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * ignored.
 573:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  */
 574:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsSourceTransactionCompleteStatus(XMC_DMA_t *const dma)
 575:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** {
 156              	 .loc 1 575 0
 157              	 .cfi_startproc
 158              	 
 159              	 
 160              	 
 161 0000 80B4     	 push {r7}
 162              	.LCFI18:
 163              	 .cfi_def_cfa_offset 4
 164              	 .cfi_offset 7,-4
 165 0002 83B0     	 sub sp,sp,#12
 166              	.LCFI19:
 167              	 .cfi_def_cfa_offset 16
 168 0004 00AF     	 add r7,sp,#0
 169              	.LCFI20:
 170              	 .cfi_def_cfa_register 7
 171 0006 7860     	 str r0,[r7,#4]
 576:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   return (dma->STATUSCHEV[4]);
 172              	 .loc 1 576 0
 173 0008 7B68     	 ldr r3,[r7,#4]
 174 000a D3F8F832 	 ldr r3,[r3,#760]
 577:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** }
 175              	 .loc 1 577 0
 176 000e 1846     	 mov r0,r3
 177 0010 0C37     	 adds r7,r7,#12
 178              	.LCFI21:
 179              	 .cfi_def_cfa_offset 4
 180 0012 BD46     	 mov sp,r7
 181              	.LCFI22:
 182              	 .cfi_def_cfa_register 13
 183              	 
 184 0014 5DF8047B 	 ldr r7,[sp],#4
 185              	.LCFI23:
 186              	 .cfi_restore 7
 187              	 .cfi_def_cfa_offset 0
 188 0018 7047     	 bx lr
 189              	 .cfi_endproc
 190              	.LFE131:
 192 001a 00BF     	 .section .text.XMC_DMA_GetChannelsDestinationTransactionCompleteStatus,"ax",%progbits
 193              	 .align 2
 194              	 .thumb
 195              	 .thumb_func
 197              	XMC_DMA_GetChannelsDestinationTransactionCompleteStatus:
 198              	.LFB132:
 578:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** 
 579:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** /**
 580:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 581:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * @return uint32_t DMA event status
 582:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  *
 583:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 584:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * Get destination transaction complete status <br>
 585:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  *
 586:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * \par
 587:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * The function returns the destination transaction complete interrupt status <br>
 588:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  *
 589:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * \par<b>Note: </b><br>
 590:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * If the destination peripheral is memory, the destination transaction complete
 591:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * interrupt is ignored.
 592:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  */
 593:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsDestinationTransactionCompleteStatus(XMC_DMA_t *const d
 594:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** {
 199              	 .loc 1 594 0
 200              	 .cfi_startproc
 201              	 
 202              	 
 203              	 
 204 0000 80B4     	 push {r7}
 205              	.LCFI24:
 206              	 .cfi_def_cfa_offset 4
 207              	 .cfi_offset 7,-4
 208 0002 83B0     	 sub sp,sp,#12
 209              	.LCFI25:
 210              	 .cfi_def_cfa_offset 16
 211 0004 00AF     	 add r7,sp,#0
 212              	.LCFI26:
 213              	 .cfi_def_cfa_register 7
 214 0006 7860     	 str r0,[r7,#4]
 595:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   return (dma->STATUSCHEV[6]);
 215              	 .loc 1 595 0
 216 0008 7B68     	 ldr r3,[r7,#4]
 217 000a D3F80033 	 ldr r3,[r3,#768]
 596:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** }
 218              	 .loc 1 596 0
 219 000e 1846     	 mov r0,r3
 220 0010 0C37     	 adds r7,r7,#12
 221              	.LCFI27:
 222              	 .cfi_def_cfa_offset 4
 223 0012 BD46     	 mov sp,r7
 224              	.LCFI28:
 225              	 .cfi_def_cfa_register 13
 226              	 
 227 0014 5DF8047B 	 ldr r7,[sp],#4
 228              	.LCFI29:
 229              	 .cfi_restore 7
 230              	 .cfi_def_cfa_offset 0
 231 0018 7047     	 bx lr
 232              	 .cfi_endproc
 233              	.LFE132:
 235 001a 00BF     	 .section .text.XMC_DMA_GetChannelsErrorStatus,"ax",%progbits
 236              	 .align 2
 237              	 .thumb
 238              	 .thumb_func
 240              	XMC_DMA_GetChannelsErrorStatus:
 241              	.LFB133:
 597:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** 
 598:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** /**
 599:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 600:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * @return uint32_t DMA error event status
 601:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  *
 602:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 603:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * Get DMA error event status <br>
 604:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  *
 605:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * \par
 606:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  * The function returns error interrupt status. <br>
 607:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****  */
 608:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsErrorStatus(XMC_DMA_t *const dma)
 609:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** {
 242              	 .loc 1 609 0
 243              	 .cfi_startproc
 244              	 
 245              	 
 246              	 
 247 0000 80B4     	 push {r7}
 248              	.LCFI30:
 249              	 .cfi_def_cfa_offset 4
 250              	 .cfi_offset 7,-4
 251 0002 83B0     	 sub sp,sp,#12
 252              	.LCFI31:
 253              	 .cfi_def_cfa_offset 16
 254 0004 00AF     	 add r7,sp,#0
 255              	.LCFI32:
 256              	 .cfi_def_cfa_register 7
 257 0006 7860     	 str r0,[r7,#4]
 610:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h ****   return (dma->STATUSCHEV[8]);
 258              	 .loc 1 610 0
 259 0008 7B68     	 ldr r3,[r7,#4]
 260 000a D3F80833 	 ldr r3,[r3,#776]
 611:D:\Naukowe\BLDC_workspace\PWM_from_ex\Libraries\XMCLib\inc\xmc_dma.h **** }
 261              	 .loc 1 611 0
 262 000e 1846     	 mov r0,r3
 263 0010 0C37     	 adds r7,r7,#12
 264              	.LCFI33:
 265              	 .cfi_def_cfa_offset 4
 266 0012 BD46     	 mov sp,r7
 267              	.LCFI34:
 268              	 .cfi_def_cfa_register 13
 269              	 
 270 0014 5DF8047B 	 ldr r7,[sp],#4
 271              	.LCFI35:
 272              	 .cfi_restore 7
 273              	 .cfi_def_cfa_offset 0
 274 0018 7047     	 bx lr
 275              	 .cfi_endproc
 276              	.LFE133:
 278              	 .comm dma0_event_handlers,32,4
 279              	 .comm dma1_event_handlers,16,4
 280 001a 00BF     	 .section .text.XMC_DMA_Init,"ax",%progbits
 281              	 .align 2
 282              	 .global XMC_DMA_Init
 283              	 .thumb
 284              	 .thumb_func
 286              	XMC_DMA_Init:
 287              	.LFB164:
 288              	 .file 2 "../Libraries/XMCLib/src/xmc_dma.c"
   1:../Libraries/XMCLib/src/xmc_dma.c **** 
   2:../Libraries/XMCLib/src/xmc_dma.c **** /**
   3:../Libraries/XMCLib/src/xmc_dma.c ****  * @file xmc_dma.c
   4:../Libraries/XMCLib/src/xmc_dma.c ****  * @date 2015-10-27
   5:../Libraries/XMCLib/src/xmc_dma.c ****  *
   6:../Libraries/XMCLib/src/xmc_dma.c ****  * @cond
   7:../Libraries/XMCLib/src/xmc_dma.c ****  **************************************************************************************************
   8:../Libraries/XMCLib/src/xmc_dma.c ****  * XMClib v2.1.2 - XMC Peripheral Driver Library 
   9:../Libraries/XMCLib/src/xmc_dma.c ****  *
  10:../Libraries/XMCLib/src/xmc_dma.c ****  * Copyright (c) 2015, Infineon Technologies AG
  11:../Libraries/XMCLib/src/xmc_dma.c ****  * All rights reserved.                        
  12:../Libraries/XMCLib/src/xmc_dma.c ****  *                                             
  13:../Libraries/XMCLib/src/xmc_dma.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  14:../Libraries/XMCLib/src/xmc_dma.c ****  * following conditions are met:   
  15:../Libraries/XMCLib/src/xmc_dma.c ****  *                                                                              
  16:../Libraries/XMCLib/src/xmc_dma.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  17:../Libraries/XMCLib/src/xmc_dma.c ****  * disclaimer.                        
  18:../Libraries/XMCLib/src/xmc_dma.c ****  * 
  19:../Libraries/XMCLib/src/xmc_dma.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  20:../Libraries/XMCLib/src/xmc_dma.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  21:../Libraries/XMCLib/src/xmc_dma.c ****  * 
  22:../Libraries/XMCLib/src/xmc_dma.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  23:../Libraries/XMCLib/src/xmc_dma.c ****  * products derived from this software without specific prior written permission.                  
  24:../Libraries/XMCLib/src/xmc_dma.c ****  *                                                                              
  25:../Libraries/XMCLib/src/xmc_dma.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  26:../Libraries/XMCLib/src/xmc_dma.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  27:../Libraries/XMCLib/src/xmc_dma.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  28:../Libraries/XMCLib/src/xmc_dma.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  29:../Libraries/XMCLib/src/xmc_dma.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  30:../Libraries/XMCLib/src/xmc_dma.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  31:../Libraries/XMCLib/src/xmc_dma.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  32:../Libraries/XMCLib/src/xmc_dma.c ****  *                                                                              
  33:../Libraries/XMCLib/src/xmc_dma.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  34:../Libraries/XMCLib/src/xmc_dma.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  35:../Libraries/XMCLib/src/xmc_dma.c ****  **************************************************************************************************
  36:../Libraries/XMCLib/src/xmc_dma.c ****  *
  37:../Libraries/XMCLib/src/xmc_dma.c ****  * Change History
  38:../Libraries/XMCLib/src/xmc_dma.c ****  * --------------
  39:../Libraries/XMCLib/src/xmc_dma.c ****  *
  40:../Libraries/XMCLib/src/xmc_dma.c ****  * 2015-02-20:
  41:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Initial <br>
  42:../Libraries/XMCLib/src/xmc_dma.c ****  *
  43:../Libraries/XMCLib/src/xmc_dma.c ****  * 2015-05-20:
  44:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Add the declarations for the following APIs: <br>
  45:../Libraries/XMCLib/src/xmc_dma.c ****  *       XMC_DMA_DisableRequestLine, XMC_DMA_ClearRequestLine, <br>
  46:../Libraries/XMCLib/src/xmc_dma.c ****  *       XMC_DMA_CH_ClearSourcePeripheralRequest, <br>
  47:../Libraries/XMCLib/src/xmc_dma.c ****  *       XMC_DMA_CH_ClearDestinationPeripheralRequest <br>
  48:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Remove PRIOARRAY <br>
  49:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Documentation updates <br>
  50:../Libraries/XMCLib/src/xmc_dma.c ****  *
  51:../Libraries/XMCLib/src/xmc_dma.c ****  * 2015-06-20:
  52:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Removed GetDriverVersion API <br>
  53:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Updated XMC_DMA_CH_Init() to support scatter/gather functionality (only
  54:../Libraries/XMCLib/src/xmc_dma.c ****  *       on advanced DMA channels) <br>
  55:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Updated XMC_DMA_CH_Disable() <br>
  56:../Libraries/XMCLib/src/xmc_dma.c ****  *
  57:../Libraries/XMCLib/src/xmc_dma.c ****  * @endcond
  58:../Libraries/XMCLib/src/xmc_dma.c ****  */
  59:../Libraries/XMCLib/src/xmc_dma.c **** 
  60:../Libraries/XMCLib/src/xmc_dma.c **** /*******************************************************************************
  61:../Libraries/XMCLib/src/xmc_dma.c ****  * HEADER FILES
  62:../Libraries/XMCLib/src/xmc_dma.c ****  *******************************************************************************/
  63:../Libraries/XMCLib/src/xmc_dma.c **** 
  64:../Libraries/XMCLib/src/xmc_dma.c **** #include "xmc_dma.h"
  65:../Libraries/XMCLib/src/xmc_dma.c **** 
  66:../Libraries/XMCLib/src/xmc_dma.c **** #if defined (GPDMA0)
  67:../Libraries/XMCLib/src/xmc_dma.c **** 
  68:../Libraries/XMCLib/src/xmc_dma.c **** #include "xmc_scu.h"
  69:../Libraries/XMCLib/src/xmc_dma.c **** 
  70:../Libraries/XMCLib/src/xmc_dma.c **** /*******************************************************************************
  71:../Libraries/XMCLib/src/xmc_dma.c ****  * MACROS
  72:../Libraries/XMCLib/src/xmc_dma.c ****  *******************************************************************************/
  73:../Libraries/XMCLib/src/xmc_dma.c **** 
  74:../Libraries/XMCLib/src/xmc_dma.c **** #define DLR_SRSEL_RS_MSK (0xfUL)
  75:../Libraries/XMCLib/src/xmc_dma.c **** #define DLR_SRSEL_RS_BITSIZE (4UL)
  76:../Libraries/XMCLib/src/xmc_dma.c **** #define DMA_EVENT_MAX (5UL)
  77:../Libraries/XMCLib/src/xmc_dma.c **** #define GPDMA_CH_CFGH_DEST_PER_Pos GPDMA0_CH_CFGH_DEST_PER_Pos
  78:../Libraries/XMCLib/src/xmc_dma.c **** #define GPDMA_CH_CFGH_SRC_PER_Pos GPDMA0_CH_CFGH_SRC_PER_Pos
  79:../Libraries/XMCLib/src/xmc_dma.c **** #define GPDMA0_CH_CFGH_PER_Msk (0x7U)
  80:../Libraries/XMCLib/src/xmc_dma.c **** #define GPDMA1_CH_CFGH_PER_Msk (0x3U)
  81:../Libraries/XMCLib/src/xmc_dma.c **** #define GPDMA_CH_CFGH_PER_BITSIZE (4U)
  82:../Libraries/XMCLib/src/xmc_dma.c **** #define GPDMA_CH_CTLL_INT_EN_Msk GPDMA0_CH_CTLL_INT_EN_Msk
  83:../Libraries/XMCLib/src/xmc_dma.c **** 
  84:../Libraries/XMCLib/src/xmc_dma.c **** /*******************************************************************************
  85:../Libraries/XMCLib/src/xmc_dma.c ****  * LOCAL DATA
  86:../Libraries/XMCLib/src/xmc_dma.c ****  *******************************************************************************/
  87:../Libraries/XMCLib/src/xmc_dma.c **** 
  88:../Libraries/XMCLib/src/xmc_dma.c **** #if defined (GPDMA0)
  89:../Libraries/XMCLib/src/xmc_dma.c **** XMC_DMA_CH_EVENT_HANDLER_t dma0_event_handlers[XMC_DMA0_NUM_CHANNELS];
  90:../Libraries/XMCLib/src/xmc_dma.c **** #endif
  91:../Libraries/XMCLib/src/xmc_dma.c **** 
  92:../Libraries/XMCLib/src/xmc_dma.c **** #if defined (GPDMA1)
  93:../Libraries/XMCLib/src/xmc_dma.c **** XMC_DMA_CH_EVENT_HANDLER_t dma1_event_handlers[XMC_DMA1_NUM_CHANNELS];
  94:../Libraries/XMCLib/src/xmc_dma.c **** #endif
  95:../Libraries/XMCLib/src/xmc_dma.c ****  
  96:../Libraries/XMCLib/src/xmc_dma.c **** /*******************************************************************************
  97:../Libraries/XMCLib/src/xmc_dma.c ****  * API IMPLEMENTATION
  98:../Libraries/XMCLib/src/xmc_dma.c ****  *******************************************************************************/
  99:../Libraries/XMCLib/src/xmc_dma.c **** 
 100:../Libraries/XMCLib/src/xmc_dma.c **** /* Initialize GPDMA */
 101:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_Init(XMC_DMA_t *const dma)
 102:../Libraries/XMCLib/src/xmc_dma.c **** {
 289              	 .loc 2 102 0
 290              	 .cfi_startproc
 291              	 
 292              	 
 293 0000 80B5     	 push {r7,lr}
 294              	.LCFI36:
 295              	 .cfi_def_cfa_offset 8
 296              	 .cfi_offset 7,-8
 297              	 .cfi_offset 14,-4
 298 0002 82B0     	 sub sp,sp,#8
 299              	.LCFI37:
 300              	 .cfi_def_cfa_offset 16
 301 0004 00AF     	 add r7,sp,#0
 302              	.LCFI38:
 303              	 .cfi_def_cfa_register 7
 304 0006 7860     	 str r0,[r7,#4]
 103:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_DMA_Enable(dma);
 305              	 .loc 2 103 0
 306 0008 7868     	 ldr r0,[r7,#4]
 307 000a FFF7FEFF 	 bl XMC_DMA_Enable
 104:../Libraries/XMCLib/src/xmc_dma.c **** }
 308              	 .loc 2 104 0
 309 000e 0837     	 adds r7,r7,#8
 310              	.LCFI39:
 311              	 .cfi_def_cfa_offset 8
 312 0010 BD46     	 mov sp,r7
 313              	.LCFI40:
 314              	 .cfi_def_cfa_register 13
 315              	 
 316 0012 80BD     	 pop {r7,pc}
 317              	 .cfi_endproc
 318              	.LFE164:
 320              	 .section .text.XMC_DMA_Enable,"ax",%progbits
 321              	 .align 2
 322              	 .global XMC_DMA_Enable
 323              	 .thumb
 324              	 .thumb_func
 326              	XMC_DMA_Enable:
 327              	.LFB165:
 105:../Libraries/XMCLib/src/xmc_dma.c **** 
 106:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable GPDMA module */
 107:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_Enable(XMC_DMA_t *const dma)
 108:../Libraries/XMCLib/src/xmc_dma.c **** {
 328              	 .loc 2 108 0
 329              	 .cfi_startproc
 330              	 
 331              	 
 332 0000 80B5     	 push {r7,lr}
 333              	.LCFI41:
 334              	 .cfi_def_cfa_offset 8
 335              	 .cfi_offset 7,-8
 336              	 .cfi_offset 14,-4
 337 0002 82B0     	 sub sp,sp,#8
 338              	.LCFI42:
 339              	 .cfi_def_cfa_offset 16
 340 0004 00AF     	 add r7,sp,#0
 341              	.LCFI43:
 342              	 .cfi_def_cfa_register 7
 343 0006 7860     	 str r0,[r7,#4]
 109:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 110:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 344              	 .loc 2 110 0
 345 0008 7B68     	 ldr r3,[r7,#4]
 346 000a 084A     	 ldr r2,.L17
 347 000c 9342     	 cmp r3,r2
 348 000e 03D1     	 bne .L15
 111:../Libraries/XMCLib/src/xmc_dma.c ****   {
 112:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 113:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 114:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA0);
 115:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 116:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA0);
 349              	 .loc 2 116 0
 350 0010 0748     	 ldr r0,.L17+4
 351 0012 FFF7FEFF 	 bl XMC_SCU_RESET_DeassertPeripheralReset
 352 0016 02E0     	 b .L16
 353              	.L15:
 117:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 118:../Libraries/XMCLib/src/xmc_dma.c ****   }
 119:../Libraries/XMCLib/src/xmc_dma.c ****   else
 120:../Libraries/XMCLib/src/xmc_dma.c ****   {
 121:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 122:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA1);
 123:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 124:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA1);
 354              	 .loc 2 124 0
 355 0018 0648     	 ldr r0,.L17+8
 356 001a FFF7FEFF 	 bl XMC_SCU_RESET_DeassertPeripheralReset
 357              	.L16:
 125:../Libraries/XMCLib/src/xmc_dma.c ****   }
 126:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 127:../Libraries/XMCLib/src/xmc_dma.c **** 
 128:../Libraries/XMCLib/src/xmc_dma.c ****   dma->DMACFGREG = 0x1U;
 358              	 .loc 2 128 0
 359 001e 7B68     	 ldr r3,[r7,#4]
 360 0020 0122     	 movs r2,#1
 361 0022 C3F89823 	 str r2,[r3,#920]
 129:../Libraries/XMCLib/src/xmc_dma.c **** }
 362              	 .loc 2 129 0
 363 0026 0837     	 adds r7,r7,#8
 364              	.LCFI44:
 365              	 .cfi_def_cfa_offset 8
 366 0028 BD46     	 mov sp,r7
 367              	.LCFI45:
 368              	 .cfi_def_cfa_register 13
 369              	 
 370 002a 80BD     	 pop {r7,pc}
 371              	.L18:
 372              	 .align 2
 373              	.L17:
 374 002c 00400150 	 .word 1342259200
 375 0030 10000020 	 .word 536870928
 376 0034 20000020 	 .word 536870944
 377              	 .cfi_endproc
 378              	.LFE165:
 380              	 .section .text.XMC_DMA_Disable,"ax",%progbits
 381              	 .align 2
 382              	 .global XMC_DMA_Disable
 383              	 .thumb
 384              	 .thumb_func
 386              	XMC_DMA_Disable:
 387              	.LFB166:
 130:../Libraries/XMCLib/src/xmc_dma.c **** 
 131:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable GPDMA module */
 132:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_Disable(XMC_DMA_t *const dma)
 133:../Libraries/XMCLib/src/xmc_dma.c **** {
 388              	 .loc 2 133 0
 389              	 .cfi_startproc
 390              	 
 391              	 
 392 0000 80B5     	 push {r7,lr}
 393              	.LCFI46:
 394              	 .cfi_def_cfa_offset 8
 395              	 .cfi_offset 7,-8
 396              	 .cfi_offset 14,-4
 397 0002 82B0     	 sub sp,sp,#8
 398              	.LCFI47:
 399              	 .cfi_def_cfa_offset 16
 400 0004 00AF     	 add r7,sp,#0
 401              	.LCFI48:
 402              	 .cfi_def_cfa_register 7
 403 0006 7860     	 str r0,[r7,#4]
 134:../Libraries/XMCLib/src/xmc_dma.c ****   dma->DMACFGREG = 0x0U;
 404              	 .loc 2 134 0
 405 0008 7B68     	 ldr r3,[r7,#4]
 406 000a 0022     	 movs r2,#0
 407 000c C3F89823 	 str r2,[r3,#920]
 135:../Libraries/XMCLib/src/xmc_dma.c **** 
 136:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 137:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 408              	 .loc 2 137 0
 409 0010 7B68     	 ldr r3,[r7,#4]
 410 0012 064A     	 ldr r2,.L22
 411 0014 9342     	 cmp r3,r2
 412 0016 03D1     	 bne .L20
 138:../Libraries/XMCLib/src/xmc_dma.c ****   {
 139:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 140:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA0);
 413              	 .loc 2 140 0
 414 0018 0548     	 ldr r0,.L22+4
 415 001a FFF7FEFF 	 bl XMC_SCU_RESET_AssertPeripheralReset
 416 001e 02E0     	 b .L19
 417              	.L20:
 141:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 142:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA0);
 143:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 144:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 145:../Libraries/XMCLib/src/xmc_dma.c ****   }
 146:../Libraries/XMCLib/src/xmc_dma.c ****   else
 147:../Libraries/XMCLib/src/xmc_dma.c ****   {
 148:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA1);
 418              	 .loc 2 148 0
 419 0020 0448     	 ldr r0,.L22+8
 420 0022 FFF7FEFF 	 bl XMC_SCU_RESET_AssertPeripheralReset
 421              	.L19:
 149:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 150:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA1);
 151:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 152:../Libraries/XMCLib/src/xmc_dma.c ****   }
 153:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 154:../Libraries/XMCLib/src/xmc_dma.c **** }
 422              	 .loc 2 154 0
 423 0026 0837     	 adds r7,r7,#8
 424              	.LCFI49:
 425              	 .cfi_def_cfa_offset 8
 426 0028 BD46     	 mov sp,r7
 427              	.LCFI50:
 428              	 .cfi_def_cfa_register 13
 429              	 
 430 002a 80BD     	 pop {r7,pc}
 431              	.L23:
 432              	 .align 2
 433              	.L22:
 434 002c 00400150 	 .word 1342259200
 435 0030 10000020 	 .word 536870928
 436 0034 20000020 	 .word 536870944
 437              	 .cfi_endproc
 438              	.LFE166:
 440              	 .section .text.XMC_DMA_IsEnabled,"ax",%progbits
 441              	 .align 2
 442              	 .global XMC_DMA_IsEnabled
 443              	 .thumb
 444              	 .thumb_func
 446              	XMC_DMA_IsEnabled:
 447              	.LFB167:
 155:../Libraries/XMCLib/src/xmc_dma.c **** 
 156:../Libraries/XMCLib/src/xmc_dma.c **** /* Check is the GPDMA peripheral is enabled */
 157:../Libraries/XMCLib/src/xmc_dma.c **** bool XMC_DMA_IsEnabled(const XMC_DMA_t *const dma)
 158:../Libraries/XMCLib/src/xmc_dma.c **** {
 448              	 .loc 2 158 0
 449              	 .cfi_startproc
 450              	 
 451              	 
 452 0000 80B5     	 push {r7,lr}
 453              	.LCFI51:
 454              	 .cfi_def_cfa_offset 8
 455              	 .cfi_offset 7,-8
 456              	 .cfi_offset 14,-4
 457 0002 84B0     	 sub sp,sp,#16
 458              	.LCFI52:
 459              	 .cfi_def_cfa_offset 24
 460 0004 00AF     	 add r7,sp,#0
 461              	.LCFI53:
 462              	 .cfi_def_cfa_register 7
 463 0006 7860     	 str r0,[r7,#4]
 159:../Libraries/XMCLib/src/xmc_dma.c ****   bool status;
 160:../Libraries/XMCLib/src/xmc_dma.c **** 
 161:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 162:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 464              	 .loc 2 162 0
 465 0008 7B68     	 ldr r3,[r7,#4]
 466 000a 1F4A     	 ldr r2,.L31
 467 000c 9342     	 cmp r3,r2
 468 000e 11D1     	 bne .L25
 163:../Libraries/XMCLib/src/xmc_dma.c ****   {
 164:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 165:../Libraries/XMCLib/src/xmc_dma.c ****     status = !XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_GPDMA0);
 469              	 .loc 2 165 0
 470 0010 1E48     	 ldr r0,.L31+4
 471 0012 FFF7FEFF 	 bl XMC_SCU_RESET_IsPeripheralResetAsserted
 472 0016 0346     	 mov r3,r0
 473 0018 002B     	 cmp r3,#0
 474 001a 14BF     	 ite ne
 475 001c 0123     	 movne r3,#1
 476 001e 0023     	 moveq r3,#0
 477 0020 DBB2     	 uxtb r3,r3
 478 0022 83F00103 	 eor r3,r3,#1
 479 0026 DBB2     	 uxtb r3,r3
 480 0028 FB73     	 strb r3,[r7,#15]
 481 002a FB7B     	 ldrb r3,[r7,#15]
 482 002c 03F00103 	 and r3,r3,#1
 483 0030 FB73     	 strb r3,[r7,#15]
 484 0032 10E0     	 b .L26
 485              	.L25:
 166:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 167:../Libraries/XMCLib/src/xmc_dma.c ****     status = status && !XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_GPDMA0);
 168:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 169:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 170:../Libraries/XMCLib/src/xmc_dma.c ****   }
 171:../Libraries/XMCLib/src/xmc_dma.c ****   else
 172:../Libraries/XMCLib/src/xmc_dma.c ****   {
 173:../Libraries/XMCLib/src/xmc_dma.c ****     status = !XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_GPDMA1);
 486              	 .loc 2 173 0
 487 0034 1648     	 ldr r0,.L31+8
 488 0036 FFF7FEFF 	 bl XMC_SCU_RESET_IsPeripheralResetAsserted
 489 003a 0346     	 mov r3,r0
 490 003c 002B     	 cmp r3,#0
 491 003e 14BF     	 ite ne
 492 0040 0123     	 movne r3,#1
 493 0042 0023     	 moveq r3,#0
 494 0044 DBB2     	 uxtb r3,r3
 495 0046 83F00103 	 eor r3,r3,#1
 496 004a DBB2     	 uxtb r3,r3
 497 004c FB73     	 strb r3,[r7,#15]
 498 004e FB7B     	 ldrb r3,[r7,#15]
 499 0050 03F00103 	 and r3,r3,#1
 500 0054 FB73     	 strb r3,[r7,#15]
 501              	.L26:
 174:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 175:../Libraries/XMCLib/src/xmc_dma.c ****     status = status && !XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_GPDMA1);
 176:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 177:../Libraries/XMCLib/src/xmc_dma.c ****   }
 178:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 179:../Libraries/XMCLib/src/xmc_dma.c **** 
 180:../Libraries/XMCLib/src/xmc_dma.c ****   /* DMA reset is not asserted and peripheral clock is not gated */
 181:../Libraries/XMCLib/src/xmc_dma.c ****   if (status == true)
 502              	 .loc 2 181 0
 503 0056 FB7B     	 ldrb r3,[r7,#15]
 504 0058 002B     	 cmp r3,#0
 505 005a 0FD0     	 beq .L27
 182:../Libraries/XMCLib/src/xmc_dma.c ****   {
 183:../Libraries/XMCLib/src/xmc_dma.c ****     status = status && (dma->DMACFGREG != 0U);
 506              	 .loc 2 183 0
 507 005c FB7B     	 ldrb r3,[r7,#15]
 508 005e 002B     	 cmp r3,#0
 509 0060 06D0     	 beq .L28
 510              	 .loc 2 183 0 is_stmt 0 discriminator 1
 511 0062 7B68     	 ldr r3,[r7,#4]
 512 0064 D3F89833 	 ldr r3,[r3,#920]
 513 0068 002B     	 cmp r3,#0
 514 006a 01D0     	 beq .L28
 515              	 .loc 2 183 0 discriminator 3
 516 006c 0123     	 movs r3,#1
 517 006e 00E0     	 b .L29
 518              	.L28:
 519              	 .loc 2 183 0 discriminator 4
 520 0070 0023     	 movs r3,#0
 521              	.L29:
 522              	 .loc 2 183 0 discriminator 6
 523 0072 FB73     	 strb r3,[r7,#15]
 524 0074 FB7B     	 ldrb r3,[r7,#15]
 525 0076 03F00103 	 and r3,r3,#1
 526 007a FB73     	 strb r3,[r7,#15]
 527              	.L27:
 184:../Libraries/XMCLib/src/xmc_dma.c ****   }
 185:../Libraries/XMCLib/src/xmc_dma.c **** 
 186:../Libraries/XMCLib/src/xmc_dma.c ****   return status;
 528              	 .loc 2 186 0 is_stmt 1
 529 007c FB7B     	 ldrb r3,[r7,#15]
 187:../Libraries/XMCLib/src/xmc_dma.c **** }
 530              	 .loc 2 187 0
 531 007e 1846     	 mov r0,r3
 532 0080 1037     	 adds r7,r7,#16
 533              	.LCFI54:
 534              	 .cfi_def_cfa_offset 8
 535 0082 BD46     	 mov sp,r7
 536              	.LCFI55:
 537              	 .cfi_def_cfa_register 13
 538              	 
 539 0084 80BD     	 pop {r7,pc}
 540              	.L32:
 541 0086 00BF     	 .align 2
 542              	.L31:
 543 0088 00400150 	 .word 1342259200
 544 008c 10000020 	 .word 536870928
 545 0090 20000020 	 .word 536870944
 546              	 .cfi_endproc
 547              	.LFE167:
 549              	 .section .text.XMC_DMA_EnableRequestLine,"ax",%progbits
 550              	 .align 2
 551              	 .global XMC_DMA_EnableRequestLine
 552              	 .thumb
 553              	 .thumb_func
 555              	XMC_DMA_EnableRequestLine:
 556              	.LFB168:
 188:../Libraries/XMCLib/src/xmc_dma.c **** 
 189:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable request line */
 190:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_EnableRequestLine(XMC_DMA_t *const dma, uint8_t line, uint8_t peripheral)
 191:../Libraries/XMCLib/src/xmc_dma.c **** {
 557              	 .loc 2 191 0
 558              	 .cfi_startproc
 559              	 
 560              	 
 561              	 
 562 0000 80B4     	 push {r7}
 563              	.LCFI56:
 564              	 .cfi_def_cfa_offset 4
 565              	 .cfi_offset 7,-4
 566 0002 83B0     	 sub sp,sp,#12
 567              	.LCFI57:
 568              	 .cfi_def_cfa_offset 16
 569 0004 00AF     	 add r7,sp,#0
 570              	.LCFI58:
 571              	 .cfi_def_cfa_register 7
 572 0006 7860     	 str r0,[r7,#4]
 573 0008 0B46     	 mov r3,r1
 574 000a FB70     	 strb r3,[r7,#3]
 575 000c 1346     	 mov r3,r2
 576 000e BB70     	 strb r3,[r7,#2]
 192:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 193:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 577              	 .loc 2 193 0
 578 0010 7B68     	 ldr r3,[r7,#4]
 579 0012 1F4A     	 ldr r2,.L36
 580 0014 9342     	 cmp r3,r2
 581 0016 1BD1     	 bne .L34
 194:../Libraries/XMCLib/src/xmc_dma.c ****   {
 195:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 196:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->SRSEL0 = ((DLR->SRSEL0 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 582              	 .loc 2 196 0
 583 0018 1E48     	 ldr r0,.L36+4
 584 001a 1E4B     	 ldr r3,.L36+4
 585 001c 9A68     	 ldr r2,[r3,#8]
 586 001e FB78     	 ldrb r3,[r7,#3]
 587 0020 9B00     	 lsls r3,r3,#2
 588 0022 1946     	 mov r1,r3
 589 0024 0F23     	 movs r3,#15
 590 0026 8B40     	 lsls r3,r3,r1
 591 0028 DB43     	 mvns r3,r3
 592 002a 1A40     	 ands r2,r2,r3
 197:../Libraries/XMCLib/src/xmc_dma.c ****                    ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 593              	 .loc 2 197 0
 594 002c BB78     	 ldrb r3,[r7,#2]
 595 002e F978     	 ldrb r1,[r7,#3]
 596 0030 8900     	 lsls r1,r1,#2
 597 0032 8B40     	 lsls r3,r3,r1
 196:../Libraries/XMCLib/src/xmc_dma.c ****                    ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 598              	 .loc 2 196 0
 599 0034 1343     	 orrs r3,r3,r2
 600 0036 8360     	 str r3,[r0,#8]
 198:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN |= (0x1UL << (line & GPDMA0_CH_CFGH_PER_Msk));
 601              	 .loc 2 198 0
 602 0038 1649     	 ldr r1,.L36+4
 603 003a 164B     	 ldr r3,.L36+4
 604 003c 1A69     	 ldr r2,[r3,#16]
 605 003e FB78     	 ldrb r3,[r7,#3]
 606 0040 03F00703 	 and r3,r3,#7
 607 0044 0120     	 movs r0,#1
 608 0046 00FA03F3 	 lsl r3,r0,r3
 609 004a 1343     	 orrs r3,r3,r2
 610 004c 0B61     	 str r3,[r1,#16]
 611 004e 19E0     	 b .L33
 612              	.L34:
 199:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 200:../Libraries/XMCLib/src/xmc_dma.c ****   }
 201:../Libraries/XMCLib/src/xmc_dma.c ****   else
 202:../Libraries/XMCLib/src/xmc_dma.c ****   {
 203:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->SRSEL1 = ((DLR->SRSEL1 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 613              	 .loc 2 203 0
 614 0050 1048     	 ldr r0,.L36+4
 615 0052 104B     	 ldr r3,.L36+4
 616 0054 DA68     	 ldr r2,[r3,#12]
 617 0056 FB78     	 ldrb r3,[r7,#3]
 618 0058 9B00     	 lsls r3,r3,#2
 619 005a 1946     	 mov r1,r3
 620 005c 0F23     	 movs r3,#15
 621 005e 8B40     	 lsls r3,r3,r1
 622 0060 DB43     	 mvns r3,r3
 623 0062 1A40     	 ands r2,r2,r3
 204:../Libraries/XMCLib/src/xmc_dma.c ****                    ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 624              	 .loc 2 204 0
 625 0064 BB78     	 ldrb r3,[r7,#2]
 626 0066 F978     	 ldrb r1,[r7,#3]
 627 0068 8900     	 lsls r1,r1,#2
 628 006a 8B40     	 lsls r3,r3,r1
 203:../Libraries/XMCLib/src/xmc_dma.c ****                    ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 629              	 .loc 2 203 0
 630 006c 1343     	 orrs r3,r3,r2
 631 006e C360     	 str r3,[r0,#12]
 205:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN |= (0x100UL << line);
 632              	 .loc 2 205 0
 633 0070 0849     	 ldr r1,.L36+4
 634 0072 084B     	 ldr r3,.L36+4
 635 0074 1A69     	 ldr r2,[r3,#16]
 636 0076 FB78     	 ldrb r3,[r7,#3]
 637 0078 4FF48070 	 mov r0,#256
 638 007c 00FA03F3 	 lsl r3,r0,r3
 639 0080 1343     	 orrs r3,r3,r2
 640 0082 0B61     	 str r3,[r1,#16]
 641              	.L33:
 206:../Libraries/XMCLib/src/xmc_dma.c ****   }
 207:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 208:../Libraries/XMCLib/src/xmc_dma.c **** }
 642              	 .loc 2 208 0
 643 0084 0C37     	 adds r7,r7,#12
 644              	.LCFI59:
 645              	 .cfi_def_cfa_offset 4
 646 0086 BD46     	 mov sp,r7
 647              	.LCFI60:
 648              	 .cfi_def_cfa_register 13
 649              	 
 650 0088 5DF8047B 	 ldr r7,[sp],#4
 651              	.LCFI61:
 652              	 .cfi_restore 7
 653              	 .cfi_def_cfa_offset 0
 654 008c 7047     	 bx lr
 655              	.L37:
 656 008e 00BF     	 .align 2
 657              	.L36:
 658 0090 00400150 	 .word 1342259200
 659 0094 00490050 	 .word 1342195968
 660              	 .cfi_endproc
 661              	.LFE168:
 663              	 .section .text.XMC_DMA_DisableRequestLine,"ax",%progbits
 664              	 .align 2
 665              	 .global XMC_DMA_DisableRequestLine
 666              	 .thumb
 667              	 .thumb_func
 669              	XMC_DMA_DisableRequestLine:
 670              	.LFB169:
 209:../Libraries/XMCLib/src/xmc_dma.c **** 
 210:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_DisableRequestLine(XMC_DMA_t *const dma, uint8_t line)
 211:../Libraries/XMCLib/src/xmc_dma.c **** {
 671              	 .loc 2 211 0
 672              	 .cfi_startproc
 673              	 
 674              	 
 675              	 
 676 0000 80B4     	 push {r7}
 677              	.LCFI62:
 678              	 .cfi_def_cfa_offset 4
 679              	 .cfi_offset 7,-4
 680 0002 83B0     	 sub sp,sp,#12
 681              	.LCFI63:
 682              	 .cfi_def_cfa_offset 16
 683 0004 00AF     	 add r7,sp,#0
 684              	.LCFI64:
 685              	 .cfi_def_cfa_register 7
 686 0006 7860     	 str r0,[r7,#4]
 687 0008 0B46     	 mov r3,r1
 688 000a FB70     	 strb r3,[r7,#3]
 212:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 213:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 689              	 .loc 2 213 0
 690 000c 7B68     	 ldr r3,[r7,#4]
 691 000e 0F4A     	 ldr r2,.L41
 692 0010 9342     	 cmp r3,r2
 693 0012 0AD1     	 bne .L39
 214:../Libraries/XMCLib/src/xmc_dma.c ****   {
 215:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 216:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN &= ~(0x1UL << line);
 694              	 .loc 2 216 0
 695 0014 0E49     	 ldr r1,.L41+4
 696 0016 0E4B     	 ldr r3,.L41+4
 697 0018 1A69     	 ldr r2,[r3,#16]
 698 001a FB78     	 ldrb r3,[r7,#3]
 699 001c 0120     	 movs r0,#1
 700 001e 00FA03F3 	 lsl r3,r0,r3
 701 0022 DB43     	 mvns r3,r3
 702 0024 1340     	 ands r3,r3,r2
 703 0026 0B61     	 str r3,[r1,#16]
 704 0028 0AE0     	 b .L38
 705              	.L39:
 217:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 218:../Libraries/XMCLib/src/xmc_dma.c ****   }
 219:../Libraries/XMCLib/src/xmc_dma.c ****   else
 220:../Libraries/XMCLib/src/xmc_dma.c ****   {
 221:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN &= ~(0x100UL << line);
 706              	 .loc 2 221 0
 707 002a 0949     	 ldr r1,.L41+4
 708 002c 084B     	 ldr r3,.L41+4
 709 002e 1A69     	 ldr r2,[r3,#16]
 710 0030 FB78     	 ldrb r3,[r7,#3]
 711 0032 4FF48070 	 mov r0,#256
 712 0036 00FA03F3 	 lsl r3,r0,r3
 713 003a DB43     	 mvns r3,r3
 714 003c 1340     	 ands r3,r3,r2
 715 003e 0B61     	 str r3,[r1,#16]
 716              	.L38:
 222:../Libraries/XMCLib/src/xmc_dma.c ****   }
 223:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 224:../Libraries/XMCLib/src/xmc_dma.c **** }
 717              	 .loc 2 224 0
 718 0040 0C37     	 adds r7,r7,#12
 719              	.LCFI65:
 720              	 .cfi_def_cfa_offset 4
 721 0042 BD46     	 mov sp,r7
 722              	.LCFI66:
 723              	 .cfi_def_cfa_register 13
 724              	 
 725 0044 5DF8047B 	 ldr r7,[sp],#4
 726              	.LCFI67:
 727              	 .cfi_restore 7
 728              	 .cfi_def_cfa_offset 0
 729 0048 7047     	 bx lr
 730              	.L42:
 731 004a 00BF     	 .align 2
 732              	.L41:
 733 004c 00400150 	 .word 1342259200
 734 0050 00490050 	 .word 1342195968
 735              	 .cfi_endproc
 736              	.LFE169:
 738              	 .section .text.XMC_DMA_ClearRequestLine,"ax",%progbits
 739              	 .align 2
 740              	 .global XMC_DMA_ClearRequestLine
 741              	 .thumb
 742              	 .thumb_func
 744              	XMC_DMA_ClearRequestLine:
 745              	.LFB170:
 225:../Libraries/XMCLib/src/xmc_dma.c **** 
 226:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_ClearRequestLine(XMC_DMA_t *const dma, uint8_t line)
 227:../Libraries/XMCLib/src/xmc_dma.c **** {
 746              	 .loc 2 227 0
 747              	 .cfi_startproc
 748              	 
 749              	 
 750              	 
 751 0000 80B4     	 push {r7}
 752              	.LCFI68:
 753              	 .cfi_def_cfa_offset 4
 754              	 .cfi_offset 7,-4
 755 0002 83B0     	 sub sp,sp,#12
 756              	.LCFI69:
 757              	 .cfi_def_cfa_offset 16
 758 0004 00AF     	 add r7,sp,#0
 759              	.LCFI70:
 760              	 .cfi_def_cfa_register 7
 761 0006 7860     	 str r0,[r7,#4]
 762 0008 0B46     	 mov r3,r1
 763 000a FB70     	 strb r3,[r7,#3]
 228:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 229:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 764              	 .loc 2 229 0
 765 000c 7B68     	 ldr r3,[r7,#4]
 766 000e 184A     	 ldr r2,.L46
 767 0010 9342     	 cmp r3,r2
 768 0012 13D1     	 bne .L44
 230:../Libraries/XMCLib/src/xmc_dma.c ****   {
 231:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 232:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN &= ~(0x1UL << line);
 769              	 .loc 2 232 0
 770 0014 1749     	 ldr r1,.L46+4
 771 0016 174B     	 ldr r3,.L46+4
 772 0018 1A69     	 ldr r2,[r3,#16]
 773 001a FB78     	 ldrb r3,[r7,#3]
 774 001c 0120     	 movs r0,#1
 775 001e 00FA03F3 	 lsl r3,r0,r3
 776 0022 DB43     	 mvns r3,r3
 777 0024 1340     	 ands r3,r3,r2
 778 0026 0B61     	 str r3,[r1,#16]
 233:../Libraries/XMCLib/src/xmc_dma.c **** 	DLR->LNEN |= 0x1UL << line;
 779              	 .loc 2 233 0
 780 0028 1249     	 ldr r1,.L46+4
 781 002a 124B     	 ldr r3,.L46+4
 782 002c 1A69     	 ldr r2,[r3,#16]
 783 002e FB78     	 ldrb r3,[r7,#3]
 784 0030 0120     	 movs r0,#1
 785 0032 00FA03F3 	 lsl r3,r0,r3
 786 0036 1343     	 orrs r3,r3,r2
 787 0038 0B61     	 str r3,[r1,#16]
 788 003a 14E0     	 b .L43
 789              	.L44:
 234:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 235:../Libraries/XMCLib/src/xmc_dma.c ****   }
 236:../Libraries/XMCLib/src/xmc_dma.c ****   else
 237:../Libraries/XMCLib/src/xmc_dma.c ****   {
 238:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN &= ~(0x100UL << line);
 790              	 .loc 2 238 0
 791 003c 0D49     	 ldr r1,.L46+4
 792 003e 0D4B     	 ldr r3,.L46+4
 793 0040 1A69     	 ldr r2,[r3,#16]
 794 0042 FB78     	 ldrb r3,[r7,#3]
 795 0044 4FF48070 	 mov r0,#256
 796 0048 00FA03F3 	 lsl r3,r0,r3
 797 004c DB43     	 mvns r3,r3
 798 004e 1340     	 ands r3,r3,r2
 799 0050 0B61     	 str r3,[r1,#16]
 239:../Libraries/XMCLib/src/xmc_dma.c **** 	DLR->LNEN |= 0x100UL << line;
 800              	 .loc 2 239 0
 801 0052 0849     	 ldr r1,.L46+4
 802 0054 074B     	 ldr r3,.L46+4
 803 0056 1A69     	 ldr r2,[r3,#16]
 804 0058 FB78     	 ldrb r3,[r7,#3]
 805 005a 4FF48070 	 mov r0,#256
 806 005e 00FA03F3 	 lsl r3,r0,r3
 807 0062 1343     	 orrs r3,r3,r2
 808 0064 0B61     	 str r3,[r1,#16]
 809              	.L43:
 240:../Libraries/XMCLib/src/xmc_dma.c ****   }
 241:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 242:../Libraries/XMCLib/src/xmc_dma.c **** }
 810              	 .loc 2 242 0
 811 0066 0C37     	 adds r7,r7,#12
 812              	.LCFI71:
 813              	 .cfi_def_cfa_offset 4
 814 0068 BD46     	 mov sp,r7
 815              	.LCFI72:
 816              	 .cfi_def_cfa_register 13
 817              	 
 818 006a 5DF8047B 	 ldr r7,[sp],#4
 819              	.LCFI73:
 820              	 .cfi_restore 7
 821              	 .cfi_def_cfa_offset 0
 822 006e 7047     	 bx lr
 823              	.L47:
 824              	 .align 2
 825              	.L46:
 826 0070 00400150 	 .word 1342259200
 827 0074 00490050 	 .word 1342195968
 828              	 .cfi_endproc
 829              	.LFE170:
 831              	 .section .text.XMC_DMA_GetOverrunStatus,"ax",%progbits
 832              	 .align 2
 833              	 .global XMC_DMA_GetOverrunStatus
 834              	 .thumb
 835              	 .thumb_func
 837              	XMC_DMA_GetOverrunStatus:
 838              	.LFB171:
 243:../Libraries/XMCLib/src/xmc_dma.c **** 
 244:../Libraries/XMCLib/src/xmc_dma.c **** /* Get DMA DLR overrun status */
 245:../Libraries/XMCLib/src/xmc_dma.c **** bool XMC_DMA_GetOverrunStatus(XMC_DMA_t *const dma, uint8_t line)
 246:../Libraries/XMCLib/src/xmc_dma.c **** {
 839              	 .loc 2 246 0
 840              	 .cfi_startproc
 841              	 
 842              	 
 843              	 
 844 0000 80B4     	 push {r7}
 845              	.LCFI74:
 846              	 .cfi_def_cfa_offset 4
 847              	 .cfi_offset 7,-4
 848 0002 85B0     	 sub sp,sp,#20
 849              	.LCFI75:
 850              	 .cfi_def_cfa_offset 24
 851 0004 00AF     	 add r7,sp,#0
 852              	.LCFI76:
 853              	 .cfi_def_cfa_register 7
 854 0006 7860     	 str r0,[r7,#4]
 855 0008 0B46     	 mov r3,r1
 856 000a FB70     	 strb r3,[r7,#3]
 247:../Libraries/XMCLib/src/xmc_dma.c ****   bool status;
 248:../Libraries/XMCLib/src/xmc_dma.c **** 
 249:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 250:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 857              	 .loc 2 250 0
 858 000c 7B68     	 ldr r3,[r7,#4]
 859 000e 124A     	 ldr r2,.L52
 860 0010 9342     	 cmp r3,r2
 861 0012 0CD1     	 bne .L49
 251:../Libraries/XMCLib/src/xmc_dma.c ****   {
 252:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 253:../Libraries/XMCLib/src/xmc_dma.c ****     status = (bool)(DLR->OVRSTAT & (0x1UL << line));
 862              	 .loc 2 253 0
 863 0014 114B     	 ldr r3,.L52+4
 864 0016 1A68     	 ldr r2,[r3]
 865 0018 FB78     	 ldrb r3,[r7,#3]
 866 001a 22FA03F3 	 lsr r3,r2,r3
 867 001e 03F00103 	 and r3,r3,#1
 868 0022 002B     	 cmp r3,#0
 869 0024 14BF     	 ite ne
 870 0026 0123     	 movne r3,#1
 871 0028 0023     	 moveq r3,#0
 872 002a FB73     	 strb r3,[r7,#15]
 873 002c 0CE0     	 b .L50
 874              	.L49:
 254:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 255:../Libraries/XMCLib/src/xmc_dma.c ****   }
 256:../Libraries/XMCLib/src/xmc_dma.c ****   else
 257:../Libraries/XMCLib/src/xmc_dma.c ****   {
 258:../Libraries/XMCLib/src/xmc_dma.c ****     status = (bool)(DLR->OVRSTAT & (0x100UL << line));
 875              	 .loc 2 258 0
 876 002e 0B4B     	 ldr r3,.L52+4
 877 0030 1A68     	 ldr r2,[r3]
 878 0032 FB78     	 ldrb r3,[r7,#3]
 879 0034 4FF48071 	 mov r1,#256
 880 0038 01FA03F3 	 lsl r3,r1,r3
 881 003c 1340     	 ands r3,r3,r2
 882 003e 002B     	 cmp r3,#0
 883 0040 14BF     	 ite ne
 884 0042 0123     	 movne r3,#1
 885 0044 0023     	 moveq r3,#0
 886 0046 FB73     	 strb r3,[r7,#15]
 887              	.L50:
 259:../Libraries/XMCLib/src/xmc_dma.c ****   }
 260:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 261:../Libraries/XMCLib/src/xmc_dma.c **** 
 262:../Libraries/XMCLib/src/xmc_dma.c ****   return status;
 888              	 .loc 2 262 0
 889 0048 FB7B     	 ldrb r3,[r7,#15]
 263:../Libraries/XMCLib/src/xmc_dma.c **** }
 890              	 .loc 2 263 0
 891 004a 1846     	 mov r0,r3
 892 004c 1437     	 adds r7,r7,#20
 893              	.LCFI77:
 894              	 .cfi_def_cfa_offset 4
 895 004e BD46     	 mov sp,r7
 896              	.LCFI78:
 897              	 .cfi_def_cfa_register 13
 898              	 
 899 0050 5DF8047B 	 ldr r7,[sp],#4
 900              	.LCFI79:
 901              	 .cfi_restore 7
 902              	 .cfi_def_cfa_offset 0
 903 0054 7047     	 bx lr
 904              	.L53:
 905 0056 00BF     	 .align 2
 906              	.L52:
 907 0058 00400150 	 .word 1342259200
 908 005c 00490050 	 .word 1342195968
 909              	 .cfi_endproc
 910              	.LFE171:
 912              	 .section .text.XMC_DMA_ClearOverrunStatus,"ax",%progbits
 913              	 .align 2
 914              	 .global XMC_DMA_ClearOverrunStatus
 915              	 .thumb
 916              	 .thumb_func
 918              	XMC_DMA_ClearOverrunStatus:
 919              	.LFB172:
 264:../Libraries/XMCLib/src/xmc_dma.c **** 
 265:../Libraries/XMCLib/src/xmc_dma.c **** /* Clear DMA DLR overrun status */
 266:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_ClearOverrunStatus(XMC_DMA_t *const dma, const uint8_t line)
 267:../Libraries/XMCLib/src/xmc_dma.c **** {
 920              	 .loc 2 267 0
 921              	 .cfi_startproc
 922              	 
 923              	 
 924              	 
 925 0000 80B4     	 push {r7}
 926              	.LCFI80:
 927              	 .cfi_def_cfa_offset 4
 928              	 .cfi_offset 7,-4
 929 0002 83B0     	 sub sp,sp,#12
 930              	.LCFI81:
 931              	 .cfi_def_cfa_offset 16
 932 0004 00AF     	 add r7,sp,#0
 933              	.LCFI82:
 934              	 .cfi_def_cfa_register 7
 935 0006 7860     	 str r0,[r7,#4]
 936 0008 0B46     	 mov r3,r1
 937 000a FB70     	 strb r3,[r7,#3]
 268:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 269:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 938              	 .loc 2 269 0
 939 000c 7B68     	 ldr r3,[r7,#4]
 940 000e 0E4A     	 ldr r2,.L57
 941 0010 9342     	 cmp r3,r2
 942 0012 09D1     	 bne .L55
 270:../Libraries/XMCLib/src/xmc_dma.c ****   {
 271:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 272:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->OVRCLR |= (uint32_t)(0x1UL << line);
 943              	 .loc 2 272 0
 944 0014 0D49     	 ldr r1,.L57+4
 945 0016 0D4B     	 ldr r3,.L57+4
 946 0018 5A68     	 ldr r2,[r3,#4]
 947 001a FB78     	 ldrb r3,[r7,#3]
 948 001c 0120     	 movs r0,#1
 949 001e 00FA03F3 	 lsl r3,r0,r3
 950 0022 1343     	 orrs r3,r3,r2
 951 0024 4B60     	 str r3,[r1,#4]
 952 0026 09E0     	 b .L54
 953              	.L55:
 273:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 274:../Libraries/XMCLib/src/xmc_dma.c ****   }
 275:../Libraries/XMCLib/src/xmc_dma.c ****   else
 276:../Libraries/XMCLib/src/xmc_dma.c ****   {
 277:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->OVRCLR |= (uint32_t)(0x100UL << line);
 954              	 .loc 2 277 0
 955 0028 0849     	 ldr r1,.L57+4
 956 002a 084B     	 ldr r3,.L57+4
 957 002c 5A68     	 ldr r2,[r3,#4]
 958 002e FB78     	 ldrb r3,[r7,#3]
 959 0030 4FF48070 	 mov r0,#256
 960 0034 00FA03F3 	 lsl r3,r0,r3
 961 0038 1343     	 orrs r3,r3,r2
 962 003a 4B60     	 str r3,[r1,#4]
 963              	.L54:
 278:../Libraries/XMCLib/src/xmc_dma.c ****   }
 279:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 280:../Libraries/XMCLib/src/xmc_dma.c **** }
 964              	 .loc 2 280 0
 965 003c 0C37     	 adds r7,r7,#12
 966              	.LCFI83:
 967              	 .cfi_def_cfa_offset 4
 968 003e BD46     	 mov sp,r7
 969              	.LCFI84:
 970              	 .cfi_def_cfa_register 13
 971              	 
 972 0040 5DF8047B 	 ldr r7,[sp],#4
 973              	.LCFI85:
 974              	 .cfi_restore 7
 975              	 .cfi_def_cfa_offset 0
 976 0044 7047     	 bx lr
 977              	.L58:
 978 0046 00BF     	 .align 2
 979              	.L57:
 980 0048 00400150 	 .word 1342259200
 981 004c 00490050 	 .word 1342195968
 982              	 .cfi_endproc
 983              	.LFE172:
 985              	 .section .text.XMC_DMA_CH_Disable,"ax",%progbits
 986              	 .align 2
 987              	 .global XMC_DMA_CH_Disable
 988              	 .thumb
 989              	 .thumb_func
 991              	XMC_DMA_CH_Disable:
 992              	.LFB173:
 281:../Libraries/XMCLib/src/xmc_dma.c **** 
 282:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable DMA channel */
 283:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_Disable(XMC_DMA_t *const dma, const uint8_t channel)
 284:../Libraries/XMCLib/src/xmc_dma.c **** {
 993              	 .loc 2 284 0
 994              	 .cfi_startproc
 995              	 
 996              	 
 997              	 
 998 0000 80B4     	 push {r7}
 999              	.LCFI86:
 1000              	 .cfi_def_cfa_offset 4
 1001              	 .cfi_offset 7,-4
 1002 0002 83B0     	 sub sp,sp,#12
 1003              	.LCFI87:
 1004              	 .cfi_def_cfa_offset 16
 1005 0004 00AF     	 add r7,sp,#0
 1006              	.LCFI88:
 1007              	 .cfi_def_cfa_register 7
 1008 0006 7860     	 str r0,[r7,#4]
 1009 0008 0B46     	 mov r3,r1
 1010 000a FB70     	 strb r3,[r7,#3]
 285:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CHENREG = (uint32_t)(0x100UL << channel);
 1011              	 .loc 2 285 0
 1012 000c FB78     	 ldrb r3,[r7,#3]
 1013 000e 4FF48072 	 mov r2,#256
 1014 0012 9A40     	 lsls r2,r2,r3
 1015 0014 7B68     	 ldr r3,[r7,#4]
 1016 0016 C3F8A023 	 str r2,[r3,#928]
 286:../Libraries/XMCLib/src/xmc_dma.c ****   while((dma->CHENREG & (uint32_t)(0x1UL << channel)) != 0U)
 1017              	 .loc 2 286 0
 1018 001a 00BF     	 nop
 1019              	.L60:
 1020              	 .loc 2 286 0 is_stmt 0 discriminator 1
 1021 001c 7B68     	 ldr r3,[r7,#4]
 1022 001e D3F8A023 	 ldr r2,[r3,#928]
 1023 0022 FB78     	 ldrb r3,[r7,#3]
 1024 0024 22FA03F3 	 lsr r3,r2,r3
 1025 0028 03F00103 	 and r3,r3,#1
 1026 002c 002B     	 cmp r3,#0
 1027 002e F5D1     	 bne .L60
 287:../Libraries/XMCLib/src/xmc_dma.c ****   {
 288:../Libraries/XMCLib/src/xmc_dma.c ****     /* wait until channel is disabled */
 289:../Libraries/XMCLib/src/xmc_dma.c ****   }
 290:../Libraries/XMCLib/src/xmc_dma.c **** }
 1028              	 .loc 2 290 0 is_stmt 1
 1029 0030 0C37     	 adds r7,r7,#12
 1030              	.LCFI89:
 1031              	 .cfi_def_cfa_offset 4
 1032 0032 BD46     	 mov sp,r7
 1033              	.LCFI90:
 1034              	 .cfi_def_cfa_register 13
 1035              	 
 1036 0034 5DF8047B 	 ldr r7,[sp],#4
 1037              	.LCFI91:
 1038              	 .cfi_restore 7
 1039              	 .cfi_def_cfa_offset 0
 1040 0038 7047     	 bx lr
 1041              	 .cfi_endproc
 1042              	.LFE173:
 1044 003a 00BF     	 .section .text.XMC_DMA_CH_IsEnabled,"ax",%progbits
 1045              	 .align 2
 1046              	 .global XMC_DMA_CH_IsEnabled
 1047              	 .thumb
 1048              	 .thumb_func
 1050              	XMC_DMA_CH_IsEnabled:
 1051              	.LFB174:
 291:../Libraries/XMCLib/src/xmc_dma.c **** 
 292:../Libraries/XMCLib/src/xmc_dma.c **** /* Check if a DMA channel is enabled */
 293:../Libraries/XMCLib/src/xmc_dma.c **** bool XMC_DMA_CH_IsEnabled(XMC_DMA_t *const dma, const uint8_t channel)
 294:../Libraries/XMCLib/src/xmc_dma.c **** {
 1052              	 .loc 2 294 0
 1053              	 .cfi_startproc
 1054              	 
 1055              	 
 1056              	 
 1057 0000 80B4     	 push {r7}
 1058              	.LCFI92:
 1059              	 .cfi_def_cfa_offset 4
 1060              	 .cfi_offset 7,-4
 1061 0002 83B0     	 sub sp,sp,#12
 1062              	.LCFI93:
 1063              	 .cfi_def_cfa_offset 16
 1064 0004 00AF     	 add r7,sp,#0
 1065              	.LCFI94:
 1066              	 .cfi_def_cfa_register 7
 1067 0006 7860     	 str r0,[r7,#4]
 1068 0008 0B46     	 mov r3,r1
 1069 000a FB70     	 strb r3,[r7,#3]
 295:../Libraries/XMCLib/src/xmc_dma.c ****   return (bool)(dma->CHENREG & ((uint32_t)1U << channel));
 1070              	 .loc 2 295 0
 1071 000c 7B68     	 ldr r3,[r7,#4]
 1072 000e D3F8A023 	 ldr r2,[r3,#928]
 1073 0012 FB78     	 ldrb r3,[r7,#3]
 1074 0014 22FA03F3 	 lsr r3,r2,r3
 1075 0018 03F00103 	 and r3,r3,#1
 1076 001c 002B     	 cmp r3,#0
 1077 001e 14BF     	 ite ne
 1078 0020 0123     	 movne r3,#1
 1079 0022 0023     	 moveq r3,#0
 1080 0024 DBB2     	 uxtb r3,r3
 296:../Libraries/XMCLib/src/xmc_dma.c **** }
 1081              	 .loc 2 296 0
 1082 0026 1846     	 mov r0,r3
 1083 0028 0C37     	 adds r7,r7,#12
 1084              	.LCFI95:
 1085              	 .cfi_def_cfa_offset 4
 1086 002a BD46     	 mov sp,r7
 1087              	.LCFI96:
 1088              	 .cfi_def_cfa_register 13
 1089              	 
 1090 002c 5DF8047B 	 ldr r7,[sp],#4
 1091              	.LCFI97:
 1092              	 .cfi_restore 7
 1093              	 .cfi_def_cfa_offset 0
 1094 0030 7047     	 bx lr
 1095              	 .cfi_endproc
 1096              	.LFE174:
 1098 0032 00BF     	 .section .text.XMC_DMA_CH_Init,"ax",%progbits
 1099              	 .align 2
 1100              	 .global XMC_DMA_CH_Init
 1101              	 .thumb
 1102              	 .thumb_func
 1104              	XMC_DMA_CH_Init:
 1105              	.LFB175:
 297:../Libraries/XMCLib/src/xmc_dma.c **** 
 298:../Libraries/XMCLib/src/xmc_dma.c **** /* Initialize DMA channel */
 299:../Libraries/XMCLib/src/xmc_dma.c **** XMC_DMA_CH_STATUS_t XMC_DMA_CH_Init(XMC_DMA_t *const dma, const uint8_t channel, const XMC_DMA_CH_C
 300:../Libraries/XMCLib/src/xmc_dma.c **** {
 1106              	 .loc 2 300 0
 1107              	 .cfi_startproc
 1108              	 
 1109              	 
 1110 0000 80B5     	 push {r7,lr}
 1111              	.LCFI98:
 1112              	 .cfi_def_cfa_offset 8
 1113              	 .cfi_offset 7,-8
 1114              	 .cfi_offset 14,-4
 1115 0002 86B0     	 sub sp,sp,#24
 1116              	.LCFI99:
 1117              	 .cfi_def_cfa_offset 32
 1118 0004 00AF     	 add r7,sp,#0
 1119              	.LCFI100:
 1120              	 .cfi_def_cfa_register 7
 1121 0006 F860     	 str r0,[r7,#12]
 1122 0008 0B46     	 mov r3,r1
 1123 000a 7A60     	 str r2,[r7,#4]
 1124 000c FB72     	 strb r3,[r7,#11]
 301:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_DMA_CH_STATUS_t status;
 302:../Libraries/XMCLib/src/xmc_dma.c ****   uint8_t line;
 303:../Libraries/XMCLib/src/xmc_dma.c ****   uint8_t peripheral;
 304:../Libraries/XMCLib/src/xmc_dma.c **** 
 305:../Libraries/XMCLib/src/xmc_dma.c ****   if (XMC_DMA_IsEnabled(dma) == true)
 1125              	 .loc 2 305 0
 1126 000e F868     	 ldr r0,[r7,#12]
 1127 0010 FFF7FEFF 	 bl XMC_DMA_IsEnabled
 1128 0014 0346     	 mov r3,r0
 1129 0016 002B     	 cmp r3,#0
 1130 0018 00F0F181 	 beq .L64
 306:../Libraries/XMCLib/src/xmc_dma.c ****   {
 307:../Libraries/XMCLib/src/xmc_dma.c ****     if (XMC_DMA_CH_IsEnabled(dma, channel) == false)
 1131              	 .loc 2 307 0
 1132 001c FB7A     	 ldrb r3,[r7,#11]
 1133 001e F868     	 ldr r0,[r7,#12]
 1134 0020 1946     	 mov r1,r3
 1135 0022 FFF7FEFF 	 bl XMC_DMA_CH_IsEnabled
 1136 0026 0346     	 mov r3,r0
 1137 0028 83F00103 	 eor r3,r3,#1
 1138 002c DBB2     	 uxtb r3,r3
 1139 002e 002B     	 cmp r3,#0
 1140 0030 00F0E281 	 beq .L65
 308:../Libraries/XMCLib/src/xmc_dma.c ****     {
 309:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].SAR = config->src_addr;
 1141              	 .loc 2 309 0
 1142 0034 FB7A     	 ldrb r3,[r7,#11]
 1143 0036 7A68     	 ldr r2,[r7,#4]
 1144 0038 5268     	 ldr r2,[r2,#4]
 1145 003a F968     	 ldr r1,[r7,#12]
 1146 003c 5820     	 movs r0,#88
 1147 003e 00FB03F3 	 mul r3,r0,r3
 1148 0042 0B44     	 add r3,r3,r1
 1149 0044 1A60     	 str r2,[r3]
 310:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].DAR = config->dst_addr;
 1150              	 .loc 2 310 0
 1151 0046 FB7A     	 ldrb r3,[r7,#11]
 1152 0048 7A68     	 ldr r2,[r7,#4]
 1153 004a 9268     	 ldr r2,[r2,#8]
 1154 004c F968     	 ldr r1,[r7,#12]
 1155 004e 5820     	 movs r0,#88
 1156 0050 00FB03F3 	 mul r3,r0,r3
 1157 0054 0B44     	 add r3,r3,r1
 1158 0056 0833     	 adds r3,r3,#8
 1159 0058 1A60     	 str r2,[r3]
 311:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].LLP = (uint32_t)config->linked_list_pointer;
 1160              	 .loc 2 311 0
 1161 005a FB7A     	 ldrb r3,[r7,#11]
 1162 005c 7A68     	 ldr r2,[r7,#4]
 1163 005e D268     	 ldr r2,[r2,#12]
 1164 0060 1046     	 mov r0,r2
 1165 0062 FA68     	 ldr r2,[r7,#12]
 1166 0064 5821     	 movs r1,#88
 1167 0066 01FB03F3 	 mul r3,r1,r3
 1168 006a 1344     	 add r3,r3,r2
 1169 006c 1033     	 adds r3,r3,#16
 1170 006e 1860     	 str r0,[r3]
 312:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].CTLH = (uint32_t)config->block_size;
 1171              	 .loc 2 312 0
 1172 0070 FB7A     	 ldrb r3,[r7,#11]
 1173 0072 7A68     	 ldr r2,[r7,#4]
 1174 0074 128B     	 ldrh r2,[r2,#24]
 1175 0076 1046     	 mov r0,r2
 1176 0078 FA68     	 ldr r2,[r7,#12]
 1177 007a 5821     	 movs r1,#88
 1178 007c 01FB03F3 	 mul r3,r1,r3
 1179 0080 1344     	 add r3,r3,r2
 1180 0082 1833     	 adds r3,r3,#24
 1181 0084 5860     	 str r0,[r3,#4]
 313:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].CTLL = config->control;
 1182              	 .loc 2 313 0
 1183 0086 FB7A     	 ldrb r3,[r7,#11]
 1184 0088 7A68     	 ldr r2,[r7,#4]
 1185 008a 1268     	 ldr r2,[r2]
 1186 008c F968     	 ldr r1,[r7,#12]
 1187 008e 5820     	 movs r0,#88
 1188 0090 00FB03F3 	 mul r3,r0,r3
 1189 0094 0B44     	 add r3,r3,r1
 1190 0096 1833     	 adds r3,r3,#24
 1191 0098 1A60     	 str r2,[r3]
 314:../Libraries/XMCLib/src/xmc_dma.c **** 
 315:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].CFGL = (uint32_t)((uint32_t)config->priority |
 1192              	 .loc 2 315 0
 1193 009a FB7A     	 ldrb r3,[r7,#11]
 1194 009c 7A68     	 ldr r2,[r7,#4]
 1195 009e D27E     	 ldrb r2,[r2,#27]
 1196 00a0 42F44062 	 orr r2,r2,#3072
 1197 00a4 F968     	 ldr r1,[r7,#12]
 1198 00a6 5820     	 movs r0,#88
 1199 00a8 00FB03F3 	 mul r3,r0,r3
 1200 00ac 0B44     	 add r3,r3,r1
 1201 00ae 4033     	 adds r3,r3,#64
 1202 00b0 1A60     	 str r2,[r3]
 316:../Libraries/XMCLib/src/xmc_dma.c ****                                          (uint32_t)GPDMA0_CH_CFGL_HS_SEL_SRC_Msk |
 317:../Libraries/XMCLib/src/xmc_dma.c ****                                          (uint32_t)GPDMA0_CH_CFGL_HS_SEL_DST_Msk);
 318:../Libraries/XMCLib/src/xmc_dma.c **** 
 319:../Libraries/XMCLib/src/xmc_dma.c ****       if ((dma == XMC_DMA0) && (channel < (uint8_t)2))
 1203              	 .loc 2 319 0
 1204 00b2 FB68     	 ldr r3,[r7,#12]
 1205 00b4 B14A     	 ldr r2,.L91
 1206 00b6 9342     	 cmp r3,r2
 1207 00b8 16D1     	 bne .L66
 1208              	 .loc 2 319 0 is_stmt 0 discriminator 1
 1209 00ba FB7A     	 ldrb r3,[r7,#11]
 1210 00bc 012B     	 cmp r3,#1
 1211 00be 13D8     	 bhi .L66
 320:../Libraries/XMCLib/src/xmc_dma.c ****       {
 321:../Libraries/XMCLib/src/xmc_dma.c ****         /* Configure scatter and gather */
 322:../Libraries/XMCLib/src/xmc_dma.c ****         dma->CH[channel].SGR = config->src_gather_control;
 1212              	 .loc 2 322 0 is_stmt 1
 1213 00c0 FB7A     	 ldrb r3,[r7,#11]
 1214 00c2 7A68     	 ldr r2,[r7,#4]
 1215 00c4 1269     	 ldr r2,[r2,#16]
 1216 00c6 F968     	 ldr r1,[r7,#12]
 1217 00c8 5820     	 movs r0,#88
 1218 00ca 00FB03F3 	 mul r3,r0,r3
 1219 00ce 0B44     	 add r3,r3,r1
 1220 00d0 4833     	 adds r3,r3,#72
 1221 00d2 1A60     	 str r2,[r3]
 323:../Libraries/XMCLib/src/xmc_dma.c ****         dma->CH[channel].DSR = config->dst_scatter_control;
 1222              	 .loc 2 323 0
 1223 00d4 FB7A     	 ldrb r3,[r7,#11]
 1224 00d6 7A68     	 ldr r2,[r7,#4]
 1225 00d8 5269     	 ldr r2,[r2,#20]
 1226 00da F968     	 ldr r1,[r7,#12]
 1227 00dc 5820     	 movs r0,#88
 1228 00de 00FB03F3 	 mul r3,r0,r3
 1229 00e2 0B44     	 add r3,r3,r1
 1230 00e4 5033     	 adds r3,r3,#80
 1231 00e6 1A60     	 str r2,[r3]
 1232              	.L66:
 324:../Libraries/XMCLib/src/xmc_dma.c ****       }
 325:../Libraries/XMCLib/src/xmc_dma.c **** 
 326:../Libraries/XMCLib/src/xmc_dma.c ****       if (config->dst_handshaking == XMC_DMA_CH_DST_HANDSHAKING_HARDWARE)
 1233              	 .loc 2 326 0
 1234 00e8 7B68     	 ldr r3,[r7,#4]
 1235 00ea 1B8C     	 ldrh r3,[r3,#32]
 1236 00ec 002B     	 cmp r3,#0
 1237 00ee 4FD1     	 bne .L67
 327:../Libraries/XMCLib/src/xmc_dma.c ****       {
 328:../Libraries/XMCLib/src/xmc_dma.c ****         /* Hardware handshaking interface configuration */
 329:../Libraries/XMCLib/src/xmc_dma.c ****         if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_M2P_DMA) ||
 1238              	 .loc 2 329 0
 1239 00f0 7B68     	 ldr r3,[r7,#4]
 1240 00f2 9B78     	 ldrb r3,[r3,#2]
 1241 00f4 03F07003 	 and r3,r3,#112
 1242 00f8 DBB2     	 uxtb r3,r3
 1243 00fa 102B     	 cmp r3,#16
 1244 00fc 06D0     	 beq .L68
 330:../Libraries/XMCLib/src/xmc_dma.c ****             (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 1245              	 .loc 2 330 0 discriminator 1
 1246 00fe 7B68     	 ldr r3,[r7,#4]
 1247 0100 9B78     	 ldrb r3,[r3,#2]
 1248 0102 03F07003 	 and r3,r3,#112
 1249 0106 DBB2     	 uxtb r3,r3
 329:../Libraries/XMCLib/src/xmc_dma.c ****             (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 1250              	 .loc 2 329 0 discriminator 1
 1251 0108 302B     	 cmp r3,#48
 1252 010a 41D1     	 bne .L67
 1253              	.L68:
 331:../Libraries/XMCLib/src/xmc_dma.c ****         {
 332:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 333:../Libraries/XMCLib/src/xmc_dma.c ****           if (dma == XMC_DMA0)
 1254              	 .loc 2 333 0
 1255 010c FB68     	 ldr r3,[r7,#12]
 1256 010e 9B4A     	 ldr r2,.L91
 1257 0110 9342     	 cmp r3,r2
 1258 0112 06D1     	 bne .L69
 334:../Libraries/XMCLib/src/xmc_dma.c ****           {
 335:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 336:../Libraries/XMCLib/src/xmc_dma.c ****             line = config->dst_peripheral_request & GPDMA0_CH_CFGH_PER_Msk;
 1259              	 .loc 2 336 0
 1260 0114 7B68     	 ldr r3,[r7,#4]
 1261 0116 93F82230 	 ldrb r3,[r3,#34]
 1262 011a 03F00703 	 and r3,r3,#7
 1263 011e BB75     	 strb r3,[r7,#22]
 1264 0120 05E0     	 b .L70
 1265              	.L69:
 337:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 338:../Libraries/XMCLib/src/xmc_dma.c ****           }
 339:../Libraries/XMCLib/src/xmc_dma.c ****           else
 340:../Libraries/XMCLib/src/xmc_dma.c ****           {
 341:../Libraries/XMCLib/src/xmc_dma.c ****             line = config->dst_peripheral_request & GPDMA1_CH_CFGH_PER_Msk;
 1266              	 .loc 2 341 0
 1267 0122 7B68     	 ldr r3,[r7,#4]
 1268 0124 93F82230 	 ldrb r3,[r3,#34]
 1269 0128 03F00303 	 and r3,r3,#3
 1270 012c BB75     	 strb r3,[r7,#22]
 1271              	.L70:
 342:../Libraries/XMCLib/src/xmc_dma.c ****           }
 343:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 344:../Libraries/XMCLib/src/xmc_dma.c ****           peripheral = config->dst_peripheral_request >> GPDMA_CH_CFGH_PER_BITSIZE;
 1272              	 .loc 2 344 0
 1273 012e 7B68     	 ldr r3,[r7,#4]
 1274 0130 93F82230 	 ldrb r3,[r3,#34]
 1275 0134 1B09     	 lsrs r3,r3,#4
 1276 0136 7B75     	 strb r3,[r7,#21]
 345:../Libraries/XMCLib/src/xmc_dma.c **** 
 346:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGH |= (uint32_t)((uint32_t)line << GPDMA0_CH_CFGH_DEST_PER_Pos);
 1277              	 .loc 2 346 0
 1278 0138 FB7A     	 ldrb r3,[r7,#11]
 1279 013a FA7A     	 ldrb r2,[r7,#11]
 1280 013c F968     	 ldr r1,[r7,#12]
 1281 013e 5820     	 movs r0,#88
 1282 0140 00FB02F2 	 mul r2,r0,r2
 1283 0144 0A44     	 add r2,r2,r1
 1284 0146 4032     	 adds r2,r2,#64
 1285 0148 5168     	 ldr r1,[r2,#4]
 1286 014a BA7D     	 ldrb r2,[r7,#22]
 1287 014c D202     	 lsls r2,r2,#11
 1288 014e 0A43     	 orrs r2,r2,r1
 1289 0150 F968     	 ldr r1,[r7,#12]
 1290 0152 5820     	 movs r0,#88
 1291 0154 00FB03F3 	 mul r3,r0,r3
 1292 0158 0B44     	 add r3,r3,r1
 1293 015a 4033     	 adds r3,r3,#64
 1294 015c 5A60     	 str r2,[r3,#4]
 347:../Libraries/XMCLib/src/xmc_dma.c ****           XMC_DMA_EnableRequestLine(dma, line, peripheral);
 1295              	 .loc 2 347 0
 1296 015e BA7D     	 ldrb r2,[r7,#22]
 1297 0160 7B7D     	 ldrb r3,[r7,#21]
 1298 0162 F868     	 ldr r0,[r7,#12]
 1299 0164 1146     	 mov r1,r2
 1300 0166 1A46     	 mov r2,r3
 1301 0168 FFF7FEFF 	 bl XMC_DMA_EnableRequestLine
 348:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_HS_SEL_DST_Msk;
 1302              	 .loc 2 348 0
 1303 016c FB7A     	 ldrb r3,[r7,#11]
 1304 016e FA7A     	 ldrb r2,[r7,#11]
 1305 0170 F968     	 ldr r1,[r7,#12]
 1306 0172 5820     	 movs r0,#88
 1307 0174 00FB02F2 	 mul r2,r0,r2
 1308 0178 0A44     	 add r2,r2,r1
 1309 017a 4032     	 adds r2,r2,#64
 1310 017c 1268     	 ldr r2,[r2]
 1311 017e 22F48062 	 bic r2,r2,#1024
 1312 0182 F968     	 ldr r1,[r7,#12]
 1313 0184 5820     	 movs r0,#88
 1314 0186 00FB03F3 	 mul r3,r0,r3
 1315 018a 0B44     	 add r3,r3,r1
 1316 018c 4033     	 adds r3,r3,#64
 1317 018e 1A60     	 str r2,[r3]
 1318              	.L67:
 349:../Libraries/XMCLib/src/xmc_dma.c ****         }
 350:../Libraries/XMCLib/src/xmc_dma.c ****       }
 351:../Libraries/XMCLib/src/xmc_dma.c **** 
 352:../Libraries/XMCLib/src/xmc_dma.c **** 
 353:../Libraries/XMCLib/src/xmc_dma.c ****       if (config->src_handshaking == XMC_DMA_CH_SRC_HANDSHAKING_HARDWARE)
 1319              	 .loc 2 353 0
 1320 0190 7B68     	 ldr r3,[r7,#4]
 1321 0192 9B8B     	 ldrh r3,[r3,#28]
 1322 0194 002B     	 cmp r3,#0
 1323 0196 4CD1     	 bne .L71
 354:../Libraries/XMCLib/src/xmc_dma.c ****       {
 355:../Libraries/XMCLib/src/xmc_dma.c ****         if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2M_DMA) ||
 1324              	 .loc 2 355 0
 1325 0198 7B68     	 ldr r3,[r7,#4]
 1326 019a 9B78     	 ldrb r3,[r3,#2]
 1327 019c 03F07003 	 and r3,r3,#112
 1328 01a0 DBB2     	 uxtb r3,r3
 1329 01a2 202B     	 cmp r3,#32
 1330 01a4 06D0     	 beq .L72
 356:../Libraries/XMCLib/src/xmc_dma.c ****             (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 1331              	 .loc 2 356 0 discriminator 1
 1332 01a6 7B68     	 ldr r3,[r7,#4]
 1333 01a8 9B78     	 ldrb r3,[r3,#2]
 1334 01aa 03F07003 	 and r3,r3,#112
 1335 01ae DBB2     	 uxtb r3,r3
 355:../Libraries/XMCLib/src/xmc_dma.c ****             (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 1336              	 .loc 2 355 0 discriminator 1
 1337 01b0 302B     	 cmp r3,#48
 1338 01b2 3ED1     	 bne .L71
 1339              	.L72:
 357:../Libraries/XMCLib/src/xmc_dma.c ****         {
 358:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 359:../Libraries/XMCLib/src/xmc_dma.c ****           if (dma == XMC_DMA0)
 1340              	 .loc 2 359 0
 1341 01b4 FB68     	 ldr r3,[r7,#12]
 1342 01b6 714A     	 ldr r2,.L91
 1343 01b8 9342     	 cmp r3,r2
 1344 01ba 05D1     	 bne .L73
 360:../Libraries/XMCLib/src/xmc_dma.c ****           {
 361:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 362:../Libraries/XMCLib/src/xmc_dma.c ****             line = config->src_peripheral_request & GPDMA0_CH_CFGH_PER_Msk;
 1345              	 .loc 2 362 0
 1346 01bc 7B68     	 ldr r3,[r7,#4]
 1347 01be 9B7F     	 ldrb r3,[r3,#30]
 1348 01c0 03F00703 	 and r3,r3,#7
 1349 01c4 BB75     	 strb r3,[r7,#22]
 1350 01c6 04E0     	 b .L74
 1351              	.L73:
 363:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 364:../Libraries/XMCLib/src/xmc_dma.c ****           }
 365:../Libraries/XMCLib/src/xmc_dma.c ****           else
 366:../Libraries/XMCLib/src/xmc_dma.c ****           {
 367:../Libraries/XMCLib/src/xmc_dma.c ****             line = config->src_peripheral_request & GPDMA1_CH_CFGH_PER_Msk;
 1352              	 .loc 2 367 0
 1353 01c8 7B68     	 ldr r3,[r7,#4]
 1354 01ca 9B7F     	 ldrb r3,[r3,#30]
 1355 01cc 03F00303 	 and r3,r3,#3
 1356 01d0 BB75     	 strb r3,[r7,#22]
 1357              	.L74:
 368:../Libraries/XMCLib/src/xmc_dma.c ****           }
 369:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 370:../Libraries/XMCLib/src/xmc_dma.c ****           peripheral = config->src_peripheral_request >> GPDMA_CH_CFGH_PER_BITSIZE;
 1358              	 .loc 2 370 0
 1359 01d2 7B68     	 ldr r3,[r7,#4]
 1360 01d4 9B7F     	 ldrb r3,[r3,#30]
 1361 01d6 1B09     	 lsrs r3,r3,#4
 1362 01d8 7B75     	 strb r3,[r7,#21]
 371:../Libraries/XMCLib/src/xmc_dma.c **** 
 372:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGH |= (uint32_t)((uint32_t)line << GPDMA0_CH_CFGH_SRC_PER_Pos);
 1363              	 .loc 2 372 0
 1364 01da FB7A     	 ldrb r3,[r7,#11]
 1365 01dc FA7A     	 ldrb r2,[r7,#11]
 1366 01de F968     	 ldr r1,[r7,#12]
 1367 01e0 5820     	 movs r0,#88
 1368 01e2 00FB02F2 	 mul r2,r0,r2
 1369 01e6 0A44     	 add r2,r2,r1
 1370 01e8 4032     	 adds r2,r2,#64
 1371 01ea 5168     	 ldr r1,[r2,#4]
 1372 01ec BA7D     	 ldrb r2,[r7,#22]
 1373 01ee D201     	 lsls r2,r2,#7
 1374 01f0 0A43     	 orrs r2,r2,r1
 1375 01f2 F968     	 ldr r1,[r7,#12]
 1376 01f4 5820     	 movs r0,#88
 1377 01f6 00FB03F3 	 mul r3,r0,r3
 1378 01fa 0B44     	 add r3,r3,r1
 1379 01fc 4033     	 adds r3,r3,#64
 1380 01fe 5A60     	 str r2,[r3,#4]
 373:../Libraries/XMCLib/src/xmc_dma.c ****           XMC_DMA_EnableRequestLine(dma, line, peripheral);
 1381              	 .loc 2 373 0
 1382 0200 BA7D     	 ldrb r2,[r7,#22]
 1383 0202 7B7D     	 ldrb r3,[r7,#21]
 1384 0204 F868     	 ldr r0,[r7,#12]
 1385 0206 1146     	 mov r1,r2
 1386 0208 1A46     	 mov r2,r3
 1387 020a FFF7FEFF 	 bl XMC_DMA_EnableRequestLine
 374:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_HS_SEL_SRC_Msk;
 1388              	 .loc 2 374 0
 1389 020e FB7A     	 ldrb r3,[r7,#11]
 1390 0210 FA7A     	 ldrb r2,[r7,#11]
 1391 0212 F968     	 ldr r1,[r7,#12]
 1392 0214 5820     	 movs r0,#88
 1393 0216 00FB02F2 	 mul r2,r0,r2
 1394 021a 0A44     	 add r2,r2,r1
 1395 021c 4032     	 adds r2,r2,#64
 1396 021e 1268     	 ldr r2,[r2]
 1397 0220 22F40062 	 bic r2,r2,#2048
 1398 0224 F968     	 ldr r1,[r7,#12]
 1399 0226 5820     	 movs r0,#88
 1400 0228 00FB03F3 	 mul r3,r0,r3
 1401 022c 0B44     	 add r3,r3,r1
 1402 022e 4033     	 adds r3,r3,#64
 1403 0230 1A60     	 str r2,[r3]
 1404              	.L71:
 375:../Libraries/XMCLib/src/xmc_dma.c ****         }
 376:../Libraries/XMCLib/src/xmc_dma.c ****       }
 377:../Libraries/XMCLib/src/xmc_dma.c ****       
 378:../Libraries/XMCLib/src/xmc_dma.c ****       XMC_DMA_CH_ClearEventStatus(dma, channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMP
 1405              	 .loc 2 378 0
 1406 0232 FB7A     	 ldrb r3,[r7,#11]
 1407 0234 F868     	 ldr r0,[r7,#12]
 1408 0236 1946     	 mov r1,r3
 1409 0238 1F22     	 movs r2,#31
 1410 023a FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 379:../Libraries/XMCLib/src/xmc_dma.c ****                                                            (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFE
 380:../Libraries/XMCLib/src/xmc_dma.c ****                                                            (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTI
 381:../Libraries/XMCLib/src/xmc_dma.c ****                                                            (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTI
 382:../Libraries/XMCLib/src/xmc_dma.c ****                                                            (uint32_t)XMC_DMA_CH_EVENT_ERROR));
 383:../Libraries/XMCLib/src/xmc_dma.c **** 
 384:../Libraries/XMCLib/src/xmc_dma.c ****       switch (config->transfer_type)
 1411              	 .loc 2 384 0
 1412 023e 7B68     	 ldr r3,[r7,#4]
 1413 0240 9B7E     	 ldrb r3,[r3,#26]
 1414 0242 082B     	 cmp r3,#8
 1415 0244 00F2D480 	 bhi .L90
 1416 0248 01A2     	 adr r2,.L77
 1417 024a 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 1418 024e 00BF     	 .p2align 2
 1419              	.L77:
 1420 0250 F1030000 	 .word .L90+1
 1421 0254 75020000 	 .word .L78+1
 1422 0258 9B020000 	 .word .L79+1
 1423 025c C1020000 	 .word .L80+1
 1424 0260 E7020000 	 .word .L81+1
 1425 0264 0D030000 	 .word .L82+1
 1426 0268 57030000 	 .word .L83+1
 1427 026c 81030000 	 .word .L84+1
 1428 0270 CB030000 	 .word .L85+1
 1429              	 .p2align 1
 1430              	.L78:
 385:../Libraries/XMCLib/src/xmc_dma.c ****       {
 386:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_SINGLE_BLOCK:
 387:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 388:../Libraries/XMCLib/src/xmc_dma.c **** 
 389:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_RELOAD:
 390:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 1431              	 .loc 2 390 0
 1432 0274 FB7A     	 ldrb r3,[r7,#11]
 1433 0276 FA7A     	 ldrb r2,[r7,#11]
 1434 0278 F968     	 ldr r1,[r7,#12]
 1435 027a 5820     	 movs r0,#88
 1436 027c 00FB02F2 	 mul r2,r0,r2
 1437 0280 0A44     	 add r2,r2,r1
 1438 0282 4032     	 adds r2,r2,#64
 1439 0284 1268     	 ldr r2,[r2]
 1440 0286 42F00042 	 orr r2,r2,#-2147483648
 1441 028a F968     	 ldr r1,[r7,#12]
 1442 028c 5820     	 movs r0,#88
 1443 028e 00FB03F3 	 mul r3,r0,r3
 1444 0292 0B44     	 add r3,r3,r1
 1445 0294 4033     	 adds r3,r3,#64
 1446 0296 1A60     	 str r2,[r3]
 391:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1447              	 .loc 2 391 0
 1448 0298 ABE0     	 b .L86
 1449              	.L79:
 392:../Libraries/XMCLib/src/xmc_dma.c **** 
 393:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_CONTIGUOUS:
 394:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 1450              	 .loc 2 394 0
 1451 029a FB7A     	 ldrb r3,[r7,#11]
 1452 029c FA7A     	 ldrb r2,[r7,#11]
 1453 029e F968     	 ldr r1,[r7,#12]
 1454 02a0 5820     	 movs r0,#88
 1455 02a2 00FB02F2 	 mul r2,r0,r2
 1456 02a6 0A44     	 add r2,r2,r1
 1457 02a8 4032     	 adds r2,r2,#64
 1458 02aa 1268     	 ldr r2,[r2]
 1459 02ac 42F08042 	 orr r2,r2,#1073741824
 1460 02b0 F968     	 ldr r1,[r7,#12]
 1461 02b2 5820     	 movs r0,#88
 1462 02b4 00FB03F3 	 mul r3,r0,r3
 1463 02b8 0B44     	 add r3,r3,r1
 1464 02ba 4033     	 adds r3,r3,#64
 1465 02bc 1A60     	 str r2,[r3]
 395:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1466              	 .loc 2 395 0
 1467 02be 98E0     	 b .L86
 1468              	.L80:
 396:../Libraries/XMCLib/src/xmc_dma.c **** 
 397:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_RELOAD:
 398:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL |= (uint32_t)((uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk |
 1469              	 .loc 2 398 0
 1470 02c0 FB7A     	 ldrb r3,[r7,#11]
 1471 02c2 FA7A     	 ldrb r2,[r7,#11]
 1472 02c4 F968     	 ldr r1,[r7,#12]
 1473 02c6 5820     	 movs r0,#88
 1474 02c8 00FB02F2 	 mul r2,r0,r2
 1475 02cc 0A44     	 add r2,r2,r1
 1476 02ce 4032     	 adds r2,r2,#64
 1477 02d0 1268     	 ldr r2,[r2]
 1478 02d2 42F04042 	 orr r2,r2,#-1073741824
 1479 02d6 F968     	 ldr r1,[r7,#12]
 1480 02d8 5820     	 movs r0,#88
 1481 02da 00FB03F3 	 mul r3,r0,r3
 1482 02de 0B44     	 add r3,r3,r1
 1483 02e0 4033     	 adds r3,r3,#64
 1484 02e2 1A60     	 str r2,[r3]
 399:../Libraries/XMCLib/src/xmc_dma.c ****                                               (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk);
 400:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1485              	 .loc 2 400 0
 1486 02e4 85E0     	 b .L86
 1487              	.L81:
 401:../Libraries/XMCLib/src/xmc_dma.c **** 
 402:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_LINKED:
 403:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk;
 1488              	 .loc 2 403 0
 1489 02e6 FB7A     	 ldrb r3,[r7,#11]
 1490 02e8 FA7A     	 ldrb r2,[r7,#11]
 1491 02ea F968     	 ldr r1,[r7,#12]
 1492 02ec 5820     	 movs r0,#88
 1493 02ee 00FB02F2 	 mul r2,r0,r2
 1494 02f2 0A44     	 add r2,r2,r1
 1495 02f4 1832     	 adds r2,r2,#24
 1496 02f6 1268     	 ldr r2,[r2]
 1497 02f8 42F00062 	 orr r2,r2,#134217728
 1498 02fc F968     	 ldr r1,[r7,#12]
 1499 02fe 5820     	 movs r0,#88
 1500 0300 00FB03F3 	 mul r3,r0,r3
 1501 0304 0B44     	 add r3,r3,r1
 1502 0306 1833     	 adds r3,r3,#24
 1503 0308 1A60     	 str r2,[r3]
 404:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1504              	 .loc 2 404 0
 1505 030a 72E0     	 b .L86
 1506              	.L82:
 405:../Libraries/XMCLib/src/xmc_dma.c **** 
 406:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_LINKED:
 407:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 1507              	 .loc 2 407 0
 1508 030c FB7A     	 ldrb r3,[r7,#11]
 1509 030e FA7A     	 ldrb r2,[r7,#11]
 1510 0310 F968     	 ldr r1,[r7,#12]
 1511 0312 5820     	 movs r0,#88
 1512 0314 00FB02F2 	 mul r2,r0,r2
 1513 0318 0A44     	 add r2,r2,r1
 1514 031a 4032     	 adds r2,r2,#64
 1515 031c 1268     	 ldr r2,[r2]
 1516 031e 42F08042 	 orr r2,r2,#1073741824
 1517 0322 F968     	 ldr r1,[r7,#12]
 1518 0324 5820     	 movs r0,#88
 1519 0326 00FB03F3 	 mul r3,r0,r3
 1520 032a 0B44     	 add r3,r3,r1
 1521 032c 4033     	 adds r3,r3,#64
 1522 032e 1A60     	 str r2,[r3]
 408:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk;
 1523              	 .loc 2 408 0
 1524 0330 FB7A     	 ldrb r3,[r7,#11]
 1525 0332 FA7A     	 ldrb r2,[r7,#11]
 1526 0334 F968     	 ldr r1,[r7,#12]
 1527 0336 5820     	 movs r0,#88
 1528 0338 00FB02F2 	 mul r2,r0,r2
 1529 033c 0A44     	 add r2,r2,r1
 1530 033e 1832     	 adds r2,r2,#24
 1531 0340 1268     	 ldr r2,[r2]
 1532 0342 42F00062 	 orr r2,r2,#134217728
 1533 0346 F968     	 ldr r1,[r7,#12]
 1534 0348 5820     	 movs r0,#88
 1535 034a 00FB03F3 	 mul r3,r0,r3
 1536 034e 0B44     	 add r3,r3,r1
 1537 0350 1833     	 adds r3,r3,#24
 1538 0352 1A60     	 str r2,[r3]
 409:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1539              	 .loc 2 409 0
 1540 0354 4DE0     	 b .L86
 1541              	.L83:
 410:../Libraries/XMCLib/src/xmc_dma.c **** 
 411:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_CONTIGUOUS:
 412:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk;
 1542              	 .loc 2 412 0
 1543 0356 FB7A     	 ldrb r3,[r7,#11]
 1544 0358 FA7A     	 ldrb r2,[r7,#11]
 1545 035a F968     	 ldr r1,[r7,#12]
 1546 035c 5820     	 movs r0,#88
 1547 035e 00FB02F2 	 mul r2,r0,r2
 1548 0362 0A44     	 add r2,r2,r1
 1549 0364 1832     	 adds r2,r2,#24
 1550 0366 1268     	 ldr r2,[r2]
 1551 0368 42F08052 	 orr r2,r2,#268435456
 1552 036c F968     	 ldr r1,[r7,#12]
 1553 036e 5820     	 movs r0,#88
 1554 0370 00FB03F3 	 mul r3,r0,r3
 1555 0374 0B44     	 add r3,r3,r1
 1556 0376 1833     	 adds r3,r3,#24
 1557 0378 1A60     	 str r2,[r3]
 413:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1558              	 .loc 2 413 0
 1559 037a 3AE0     	 b .L86
 1560              	.L92:
 1561              	 .align 2
 1562              	.L91:
 1563 037c 00400150 	 .word 1342259200
 1564              	.L84:
 414:../Libraries/XMCLib/src/xmc_dma.c **** 
 415:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_RELOAD:
 416:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 1565              	 .loc 2 416 0
 1566 0380 FB7A     	 ldrb r3,[r7,#11]
 1567 0382 FA7A     	 ldrb r2,[r7,#11]
 1568 0384 F968     	 ldr r1,[r7,#12]
 1569 0386 5820     	 movs r0,#88
 1570 0388 00FB02F2 	 mul r2,r0,r2
 1571 038c 0A44     	 add r2,r2,r1
 1572 038e 4032     	 adds r2,r2,#64
 1573 0390 1268     	 ldr r2,[r2]
 1574 0392 42F00042 	 orr r2,r2,#-2147483648
 1575 0396 F968     	 ldr r1,[r7,#12]
 1576 0398 5820     	 movs r0,#88
 1577 039a 00FB03F3 	 mul r3,r0,r3
 1578 039e 0B44     	 add r3,r3,r1
 1579 03a0 4033     	 adds r3,r3,#64
 1580 03a2 1A60     	 str r2,[r3]
 417:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk;
 1581              	 .loc 2 417 0
 1582 03a4 FB7A     	 ldrb r3,[r7,#11]
 1583 03a6 FA7A     	 ldrb r2,[r7,#11]
 1584 03a8 F968     	 ldr r1,[r7,#12]
 1585 03aa 5820     	 movs r0,#88
 1586 03ac 00FB02F2 	 mul r2,r0,r2
 1587 03b0 0A44     	 add r2,r2,r1
 1588 03b2 1832     	 adds r2,r2,#24
 1589 03b4 1268     	 ldr r2,[r2]
 1590 03b6 42F08052 	 orr r2,r2,#268435456
 1591 03ba F968     	 ldr r1,[r7,#12]
 1592 03bc 5820     	 movs r0,#88
 1593 03be 00FB03F3 	 mul r3,r0,r3
 1594 03c2 0B44     	 add r3,r3,r1
 1595 03c4 1833     	 adds r3,r3,#24
 1596 03c6 1A60     	 str r2,[r3]
 418:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1597              	 .loc 2 418 0
 1598 03c8 13E0     	 b .L86
 1599              	.L85:
 419:../Libraries/XMCLib/src/xmc_dma.c **** 
 420:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_LINKED:
 421:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)((uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk |
 1600              	 .loc 2 421 0
 1601 03ca FB7A     	 ldrb r3,[r7,#11]
 1602 03cc FA7A     	 ldrb r2,[r7,#11]
 1603 03ce F968     	 ldr r1,[r7,#12]
 1604 03d0 5820     	 movs r0,#88
 1605 03d2 00FB02F2 	 mul r2,r0,r2
 1606 03d6 0A44     	 add r2,r2,r1
 1607 03d8 1832     	 adds r2,r2,#24
 1608 03da 1268     	 ldr r2,[r2]
 1609 03dc 42F0C052 	 orr r2,r2,#402653184
 1610 03e0 F968     	 ldr r1,[r7,#12]
 1611 03e2 5820     	 movs r0,#88
 1612 03e4 00FB03F3 	 mul r3,r0,r3
 1613 03e8 0B44     	 add r3,r3,r1
 1614 03ea 1833     	 adds r3,r3,#24
 1615 03ec 1A60     	 str r2,[r3]
 422:../Libraries/XMCLib/src/xmc_dma.c ****                                               (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk);
 423:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1616              	 .loc 2 423 0
 1617 03ee 00E0     	 b .L86
 1618              	.L90:
 424:../Libraries/XMCLib/src/xmc_dma.c **** 
 425:../Libraries/XMCLib/src/xmc_dma.c ****         default:
 426:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1619              	 .loc 2 426 0
 1620 03f0 00BF     	 nop
 1621              	.L86:
 427:../Libraries/XMCLib/src/xmc_dma.c ****       }
 428:../Libraries/XMCLib/src/xmc_dma.c **** 
 429:../Libraries/XMCLib/src/xmc_dma.c ****       status = XMC_DMA_CH_STATUS_OK;
 1622              	 .loc 2 429 0
 1623 03f2 0023     	 movs r3,#0
 1624 03f4 FB75     	 strb r3,[r7,#23]
 1625 03f6 04E0     	 b .L88
 1626              	.L65:
 430:../Libraries/XMCLib/src/xmc_dma.c **** 
 431:../Libraries/XMCLib/src/xmc_dma.c ****     }
 432:../Libraries/XMCLib/src/xmc_dma.c ****     else
 433:../Libraries/XMCLib/src/xmc_dma.c ****     {
 434:../Libraries/XMCLib/src/xmc_dma.c ****       status = XMC_DMA_CH_STATUS_BUSY;
 1627              	 .loc 2 434 0
 1628 03f8 0223     	 movs r3,#2
 1629 03fa FB75     	 strb r3,[r7,#23]
 1630 03fc 01E0     	 b .L88
 1631              	.L64:
 435:../Libraries/XMCLib/src/xmc_dma.c ****     }
 436:../Libraries/XMCLib/src/xmc_dma.c ****   }
 437:../Libraries/XMCLib/src/xmc_dma.c ****   else 
 438:../Libraries/XMCLib/src/xmc_dma.c ****   {
 439:../Libraries/XMCLib/src/xmc_dma.c ****     status = XMC_DMA_CH_STATUS_ERROR;
 1632              	 .loc 2 439 0
 1633 03fe 0123     	 movs r3,#1
 1634 0400 FB75     	 strb r3,[r7,#23]
 1635              	.L88:
 440:../Libraries/XMCLib/src/xmc_dma.c ****   }
 441:../Libraries/XMCLib/src/xmc_dma.c ****   
 442:../Libraries/XMCLib/src/xmc_dma.c ****   return status;
 1636              	 .loc 2 442 0
 1637 0402 FB7D     	 ldrb r3,[r7,#23]
 443:../Libraries/XMCLib/src/xmc_dma.c **** }
 1638              	 .loc 2 443 0
 1639 0404 1846     	 mov r0,r3
 1640 0406 1837     	 adds r7,r7,#24
 1641              	.LCFI101:
 1642              	 .cfi_def_cfa_offset 8
 1643 0408 BD46     	 mov sp,r7
 1644              	.LCFI102:
 1645              	 .cfi_def_cfa_register 13
 1646              	 
 1647 040a 80BD     	 pop {r7,pc}
 1648              	 .cfi_endproc
 1649              	.LFE175:
 1651              	 .section .text.XMC_DMA_CH_Suspend,"ax",%progbits
 1652              	 .align 2
 1653              	 .global XMC_DMA_CH_Suspend
 1654              	 .thumb
 1655              	 .thumb_func
 1657              	XMC_DMA_CH_Suspend:
 1658              	.LFB176:
 444:../Libraries/XMCLib/src/xmc_dma.c **** 
 445:../Libraries/XMCLib/src/xmc_dma.c **** /* Suspend DMA channel transfer */
 446:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_Suspend(XMC_DMA_t *const dma, const uint8_t channel)
 447:../Libraries/XMCLib/src/xmc_dma.c **** {
 1659              	 .loc 2 447 0
 1660              	 .cfi_startproc
 1661              	 
 1662              	 
 1663              	 
 1664 0000 80B4     	 push {r7}
 1665              	.LCFI103:
 1666              	 .cfi_def_cfa_offset 4
 1667              	 .cfi_offset 7,-4
 1668 0002 83B0     	 sub sp,sp,#12
 1669              	.LCFI104:
 1670              	 .cfi_def_cfa_offset 16
 1671 0004 00AF     	 add r7,sp,#0
 1672              	.LCFI105:
 1673              	 .cfi_def_cfa_register 7
 1674 0006 7860     	 str r0,[r7,#4]
 1675 0008 0B46     	 mov r3,r1
 1676 000a FB70     	 strb r3,[r7,#3]
 448:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_CH_SUSP_Msk;
 1677              	 .loc 2 448 0
 1678 000c FB78     	 ldrb r3,[r7,#3]
 1679 000e FA78     	 ldrb r2,[r7,#3]
 1680 0010 7968     	 ldr r1,[r7,#4]
 1681 0012 5820     	 movs r0,#88
 1682 0014 00FB02F2 	 mul r2,r0,r2
 1683 0018 0A44     	 add r2,r2,r1
 1684 001a 4032     	 adds r2,r2,#64
 1685 001c 1268     	 ldr r2,[r2]
 1686 001e 42F48072 	 orr r2,r2,#256
 1687 0022 7968     	 ldr r1,[r7,#4]
 1688 0024 5820     	 movs r0,#88
 1689 0026 00FB03F3 	 mul r3,r0,r3
 1690 002a 0B44     	 add r3,r3,r1
 1691 002c 4033     	 adds r3,r3,#64
 1692 002e 1A60     	 str r2,[r3]
 449:../Libraries/XMCLib/src/xmc_dma.c **** }
 1693              	 .loc 2 449 0
 1694 0030 0C37     	 adds r7,r7,#12
 1695              	.LCFI106:
 1696              	 .cfi_def_cfa_offset 4
 1697 0032 BD46     	 mov sp,r7
 1698              	.LCFI107:
 1699              	 .cfi_def_cfa_register 13
 1700              	 
 1701 0034 5DF8047B 	 ldr r7,[sp],#4
 1702              	.LCFI108:
 1703              	 .cfi_restore 7
 1704              	 .cfi_def_cfa_offset 0
 1705 0038 7047     	 bx lr
 1706              	 .cfi_endproc
 1707              	.LFE176:
 1709 003a 00BF     	 .section .text.XMC_DMA_CH_Resume,"ax",%progbits
 1710              	 .align 2
 1711              	 .global XMC_DMA_CH_Resume
 1712              	 .thumb
 1713              	 .thumb_func
 1715              	XMC_DMA_CH_Resume:
 1716              	.LFB177:
 450:../Libraries/XMCLib/src/xmc_dma.c **** 
 451:../Libraries/XMCLib/src/xmc_dma.c **** /* Resume DMA channel transfer */
 452:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_Resume(XMC_DMA_t *const dma, const uint8_t channel)
 453:../Libraries/XMCLib/src/xmc_dma.c **** {
 1717              	 .loc 2 453 0
 1718              	 .cfi_startproc
 1719              	 
 1720              	 
 1721              	 
 1722 0000 80B4     	 push {r7}
 1723              	.LCFI109:
 1724              	 .cfi_def_cfa_offset 4
 1725              	 .cfi_offset 7,-4
 1726 0002 83B0     	 sub sp,sp,#12
 1727              	.LCFI110:
 1728              	 .cfi_def_cfa_offset 16
 1729 0004 00AF     	 add r7,sp,#0
 1730              	.LCFI111:
 1731              	 .cfi_def_cfa_register 7
 1732 0006 7860     	 str r0,[r7,#4]
 1733 0008 0B46     	 mov r3,r1
 1734 000a FB70     	 strb r3,[r7,#3]
 454:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_CH_SUSP_Msk;
 1735              	 .loc 2 454 0
 1736 000c FB78     	 ldrb r3,[r7,#3]
 1737 000e FA78     	 ldrb r2,[r7,#3]
 1738 0010 7968     	 ldr r1,[r7,#4]
 1739 0012 5820     	 movs r0,#88
 1740 0014 00FB02F2 	 mul r2,r0,r2
 1741 0018 0A44     	 add r2,r2,r1
 1742 001a 4032     	 adds r2,r2,#64
 1743 001c 1268     	 ldr r2,[r2]
 1744 001e 22F48072 	 bic r2,r2,#256
 1745 0022 7968     	 ldr r1,[r7,#4]
 1746 0024 5820     	 movs r0,#88
 1747 0026 00FB03F3 	 mul r3,r0,r3
 1748 002a 0B44     	 add r3,r3,r1
 1749 002c 4033     	 adds r3,r3,#64
 1750 002e 1A60     	 str r2,[r3]
 455:../Libraries/XMCLib/src/xmc_dma.c **** }
 1751              	 .loc 2 455 0
 1752 0030 0C37     	 adds r7,r7,#12
 1753              	.LCFI112:
 1754              	 .cfi_def_cfa_offset 4
 1755 0032 BD46     	 mov sp,r7
 1756              	.LCFI113:
 1757              	 .cfi_def_cfa_register 13
 1758              	 
 1759 0034 5DF8047B 	 ldr r7,[sp],#4
 1760              	.LCFI114:
 1761              	 .cfi_restore 7
 1762              	 .cfi_def_cfa_offset 0
 1763 0038 7047     	 bx lr
 1764              	 .cfi_endproc
 1765              	.LFE177:
 1767 003a 00BF     	 .section .text.XMC_DMA_CH_IsSuspended,"ax",%progbits
 1768              	 .align 2
 1769              	 .global XMC_DMA_CH_IsSuspended
 1770              	 .thumb
 1771              	 .thumb_func
 1773              	XMC_DMA_CH_IsSuspended:
 1774              	.LFB178:
 456:../Libraries/XMCLib/src/xmc_dma.c **** 
 457:../Libraries/XMCLib/src/xmc_dma.c **** /* Check if a DMA channel is suspended */
 458:../Libraries/XMCLib/src/xmc_dma.c **** bool XMC_DMA_CH_IsSuspended(XMC_DMA_t *const dma, const uint8_t channel)
 459:../Libraries/XMCLib/src/xmc_dma.c **** {
 1775              	 .loc 2 459 0
 1776              	 .cfi_startproc
 1777              	 
 1778              	 
 1779              	 
 1780 0000 80B4     	 push {r7}
 1781              	.LCFI115:
 1782              	 .cfi_def_cfa_offset 4
 1783              	 .cfi_offset 7,-4
 1784 0002 83B0     	 sub sp,sp,#12
 1785              	.LCFI116:
 1786              	 .cfi_def_cfa_offset 16
 1787 0004 00AF     	 add r7,sp,#0
 1788              	.LCFI117:
 1789              	 .cfi_def_cfa_register 7
 1790 0006 7860     	 str r0,[r7,#4]
 1791 0008 0B46     	 mov r3,r1
 1792 000a FB70     	 strb r3,[r7,#3]
 460:../Libraries/XMCLib/src/xmc_dma.c ****   return (bool)(dma->CH[channel].CFGL & (uint32_t)GPDMA0_CH_CFGL_CH_SUSP_Msk);
 1793              	 .loc 2 460 0
 1794 000c FB78     	 ldrb r3,[r7,#3]
 1795 000e 7A68     	 ldr r2,[r7,#4]
 1796 0010 5821     	 movs r1,#88
 1797 0012 01FB03F3 	 mul r3,r1,r3
 1798 0016 1344     	 add r3,r3,r2
 1799 0018 4033     	 adds r3,r3,#64
 1800 001a 1B68     	 ldr r3,[r3]
 1801 001c 03F48073 	 and r3,r3,#256
 1802 0020 002B     	 cmp r3,#0
 1803 0022 14BF     	 ite ne
 1804 0024 0123     	 movne r3,#1
 1805 0026 0023     	 moveq r3,#0
 1806 0028 DBB2     	 uxtb r3,r3
 461:../Libraries/XMCLib/src/xmc_dma.c **** }
 1807              	 .loc 2 461 0
 1808 002a 1846     	 mov r0,r3
 1809 002c 0C37     	 adds r7,r7,#12
 1810              	.LCFI118:
 1811              	 .cfi_def_cfa_offset 4
 1812 002e BD46     	 mov sp,r7
 1813              	.LCFI119:
 1814              	 .cfi_def_cfa_register 13
 1815              	 
 1816 0030 5DF8047B 	 ldr r7,[sp],#4
 1817              	.LCFI120:
 1818              	 .cfi_restore 7
 1819              	 .cfi_def_cfa_offset 0
 1820 0034 7047     	 bx lr
 1821              	 .cfi_endproc
 1822              	.LFE178:
 1824 0036 00BF     	 .section .text.XMC_DMA_CH_EnableEvent,"ax",%progbits
 1825              	 .align 2
 1826              	 .global XMC_DMA_CH_EnableEvent
 1827              	 .thumb
 1828              	 .thumb_func
 1830              	XMC_DMA_CH_EnableEvent:
 1831              	.LFB179:
 462:../Libraries/XMCLib/src/xmc_dma.c **** 
 463:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable GPDMA event */
 464:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_EnableEvent(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
 465:../Libraries/XMCLib/src/xmc_dma.c **** {
 1832              	 .loc 2 465 0
 1833              	 .cfi_startproc
 1834              	 
 1835              	 
 1836              	 
 1837 0000 80B4     	 push {r7}
 1838              	.LCFI121:
 1839              	 .cfi_def_cfa_offset 4
 1840              	 .cfi_offset 7,-4
 1841 0002 87B0     	 sub sp,sp,#28
 1842              	.LCFI122:
 1843              	 .cfi_def_cfa_offset 32
 1844 0004 00AF     	 add r7,sp,#0
 1845              	.LCFI123:
 1846              	 .cfi_def_cfa_register 7
 1847 0006 F860     	 str r0,[r7,#12]
 1848 0008 0B46     	 mov r3,r1
 1849 000a 7A60     	 str r2,[r7,#4]
 1850 000c FB72     	 strb r3,[r7,#11]
 466:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t event_idx;
 467:../Libraries/XMCLib/src/xmc_dma.c **** 
 468:../Libraries/XMCLib/src/xmc_dma.c ****   for(event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 1851              	 .loc 2 468 0
 1852 000e 0023     	 movs r3,#0
 1853 0010 7B61     	 str r3,[r7,#20]
 1854 0012 1CE0     	 b .L98
 1855              	.L100:
 469:../Libraries/XMCLib/src/xmc_dma.c ****   {
 470:../Libraries/XMCLib/src/xmc_dma.c ****     if (event & ((uint32_t)0x1UL << event_idx))
 1856              	 .loc 2 470 0
 1857 0014 7B69     	 ldr r3,[r7,#20]
 1858 0016 7A68     	 ldr r2,[r7,#4]
 1859 0018 22FA03F3 	 lsr r3,r2,r3
 1860 001c 03F00103 	 and r3,r3,#1
 1861 0020 002B     	 cmp r3,#0
 1862 0022 11D0     	 beq .L99
 471:../Libraries/XMCLib/src/xmc_dma.c ****     {
 472:../Libraries/XMCLib/src/xmc_dma.c ****       dma->MASKCHEV[event_idx * 2UL] |= ((uint32_t)0x101UL << channel);
 1863              	 .loc 2 472 0
 1864 0024 7B69     	 ldr r3,[r7,#20]
 1865 0026 5A00     	 lsls r2,r3,#1
 1866 0028 7B69     	 ldr r3,[r7,#20]
 1867 002a 5900     	 lsls r1,r3,#1
 1868 002c FB68     	 ldr r3,[r7,#12]
 1869 002e C431     	 adds r1,r1,#196
 1870 0030 53F82110 	 ldr r1,[r3,r1,lsl#2]
 1871 0034 FB7A     	 ldrb r3,[r7,#11]
 1872 0036 40F20110 	 movw r0,#257
 1873 003a 00FA03F3 	 lsl r3,r0,r3
 1874 003e 1943     	 orrs r1,r1,r3
 1875 0040 FB68     	 ldr r3,[r7,#12]
 1876 0042 C432     	 adds r2,r2,#196
 1877 0044 43F82210 	 str r1,[r3,r2,lsl#2]
 1878              	.L99:
 468:../Libraries/XMCLib/src/xmc_dma.c ****   {
 1879              	 .loc 2 468 0 discriminator 2
 1880 0048 7B69     	 ldr r3,[r7,#20]
 1881 004a 0133     	 adds r3,r3,#1
 1882 004c 7B61     	 str r3,[r7,#20]
 1883              	.L98:
 468:../Libraries/XMCLib/src/xmc_dma.c ****   {
 1884              	 .loc 2 468 0 is_stmt 0 discriminator 1
 1885 004e 7B69     	 ldr r3,[r7,#20]
 1886 0050 042B     	 cmp r3,#4
 1887 0052 DFD9     	 bls .L100
 473:../Libraries/XMCLib/src/xmc_dma.c ****     }
 474:../Libraries/XMCLib/src/xmc_dma.c ****   }
 475:../Libraries/XMCLib/src/xmc_dma.c **** }
 1888              	 .loc 2 475 0 is_stmt 1
 1889 0054 1C37     	 adds r7,r7,#28
 1890              	.LCFI124:
 1891              	 .cfi_def_cfa_offset 4
 1892 0056 BD46     	 mov sp,r7
 1893              	.LCFI125:
 1894              	 .cfi_def_cfa_register 13
 1895              	 
 1896 0058 5DF8047B 	 ldr r7,[sp],#4
 1897              	.LCFI126:
 1898              	 .cfi_restore 7
 1899              	 .cfi_def_cfa_offset 0
 1900 005c 7047     	 bx lr
 1901              	 .cfi_endproc
 1902              	.LFE179:
 1904 005e 00BF     	 .section .text.XMC_DMA_CH_DisableEvent,"ax",%progbits
 1905              	 .align 2
 1906              	 .global XMC_DMA_CH_DisableEvent
 1907              	 .thumb
 1908              	 .thumb_func
 1910              	XMC_DMA_CH_DisableEvent:
 1911              	.LFB180:
 476:../Libraries/XMCLib/src/xmc_dma.c **** 
 477:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable GPDMA event */
 478:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_DisableEvent(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
 479:../Libraries/XMCLib/src/xmc_dma.c **** {
 1912              	 .loc 2 479 0
 1913              	 .cfi_startproc
 1914              	 
 1915              	 
 1916              	 
 1917 0000 80B4     	 push {r7}
 1918              	.LCFI127:
 1919              	 .cfi_def_cfa_offset 4
 1920              	 .cfi_offset 7,-4
 1921 0002 87B0     	 sub sp,sp,#28
 1922              	.LCFI128:
 1923              	 .cfi_def_cfa_offset 32
 1924 0004 00AF     	 add r7,sp,#0
 1925              	.LCFI129:
 1926              	 .cfi_def_cfa_register 7
 1927 0006 F860     	 str r0,[r7,#12]
 1928 0008 0B46     	 mov r3,r1
 1929 000a 7A60     	 str r2,[r7,#4]
 1930 000c FB72     	 strb r3,[r7,#11]
 480:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t event_idx;
 481:../Libraries/XMCLib/src/xmc_dma.c **** 
 482:../Libraries/XMCLib/src/xmc_dma.c ****   for(event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 1931              	 .loc 2 482 0
 1932 000e 0023     	 movs r3,#0
 1933 0010 7B61     	 str r3,[r7,#20]
 1934 0012 1CE0     	 b .L102
 1935              	.L104:
 483:../Libraries/XMCLib/src/xmc_dma.c ****   {
 484:../Libraries/XMCLib/src/xmc_dma.c ****     if (event & ((uint32_t)0x1UL << event_idx))
 1936              	 .loc 2 484 0
 1937 0014 7B69     	 ldr r3,[r7,#20]
 1938 0016 7A68     	 ldr r2,[r7,#4]
 1939 0018 22FA03F3 	 lsr r3,r2,r3
 1940 001c 03F00103 	 and r3,r3,#1
 1941 0020 002B     	 cmp r3,#0
 1942 0022 11D0     	 beq .L103
 485:../Libraries/XMCLib/src/xmc_dma.c ****     {
 486:../Libraries/XMCLib/src/xmc_dma.c ****       dma->MASKCHEV[event_idx * 2UL] |= ((uint32_t)0x100UL << channel);
 1943              	 .loc 2 486 0
 1944 0024 7B69     	 ldr r3,[r7,#20]
 1945 0026 5A00     	 lsls r2,r3,#1
 1946 0028 7B69     	 ldr r3,[r7,#20]
 1947 002a 5900     	 lsls r1,r3,#1
 1948 002c FB68     	 ldr r3,[r7,#12]
 1949 002e C431     	 adds r1,r1,#196
 1950 0030 53F82110 	 ldr r1,[r3,r1,lsl#2]
 1951 0034 FB7A     	 ldrb r3,[r7,#11]
 1952 0036 4FF48070 	 mov r0,#256
 1953 003a 00FA03F3 	 lsl r3,r0,r3
 1954 003e 1943     	 orrs r1,r1,r3
 1955 0040 FB68     	 ldr r3,[r7,#12]
 1956 0042 C432     	 adds r2,r2,#196
 1957 0044 43F82210 	 str r1,[r3,r2,lsl#2]
 1958              	.L103:
 482:../Libraries/XMCLib/src/xmc_dma.c ****   {
 1959              	 .loc 2 482 0 discriminator 2
 1960 0048 7B69     	 ldr r3,[r7,#20]
 1961 004a 0133     	 adds r3,r3,#1
 1962 004c 7B61     	 str r3,[r7,#20]
 1963              	.L102:
 482:../Libraries/XMCLib/src/xmc_dma.c ****   {
 1964              	 .loc 2 482 0 is_stmt 0 discriminator 1
 1965 004e 7B69     	 ldr r3,[r7,#20]
 1966 0050 042B     	 cmp r3,#4
 1967 0052 DFD9     	 bls .L104
 487:../Libraries/XMCLib/src/xmc_dma.c ****     }
 488:../Libraries/XMCLib/src/xmc_dma.c ****   }
 489:../Libraries/XMCLib/src/xmc_dma.c **** }
 1968              	 .loc 2 489 0 is_stmt 1
 1969 0054 1C37     	 adds r7,r7,#28
 1970              	.LCFI130:
 1971              	 .cfi_def_cfa_offset 4
 1972 0056 BD46     	 mov sp,r7
 1973              	.LCFI131:
 1974              	 .cfi_def_cfa_register 13
 1975              	 
 1976 0058 5DF8047B 	 ldr r7,[sp],#4
 1977              	.LCFI132:
 1978              	 .cfi_restore 7
 1979              	 .cfi_def_cfa_offset 0
 1980 005c 7047     	 bx lr
 1981              	 .cfi_endproc
 1982              	.LFE180:
 1984 005e 00BF     	 .section .text.XMC_DMA_CH_ClearEventStatus,"ax",%progbits
 1985              	 .align 2
 1986              	 .global XMC_DMA_CH_ClearEventStatus
 1987              	 .thumb
 1988              	 .thumb_func
 1990              	XMC_DMA_CH_ClearEventStatus:
 1991              	.LFB181:
 490:../Libraries/XMCLib/src/xmc_dma.c **** 
 491:../Libraries/XMCLib/src/xmc_dma.c **** /* Clear GPDMA event */
 492:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_ClearEventStatus(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
 493:../Libraries/XMCLib/src/xmc_dma.c **** {
 1992              	 .loc 2 493 0
 1993              	 .cfi_startproc
 1994              	 
 1995              	 
 1996              	 
 1997 0000 80B4     	 push {r7}
 1998              	.LCFI133:
 1999              	 .cfi_def_cfa_offset 4
 2000              	 .cfi_offset 7,-4
 2001 0002 87B0     	 sub sp,sp,#28
 2002              	.LCFI134:
 2003              	 .cfi_def_cfa_offset 32
 2004 0004 00AF     	 add r7,sp,#0
 2005              	.LCFI135:
 2006              	 .cfi_def_cfa_register 7
 2007 0006 F860     	 str r0,[r7,#12]
 2008 0008 0B46     	 mov r3,r1
 2009 000a 7A60     	 str r2,[r7,#4]
 2010 000c FB72     	 strb r3,[r7,#11]
 494:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t event_idx;
 495:../Libraries/XMCLib/src/xmc_dma.c **** 
 496:../Libraries/XMCLib/src/xmc_dma.c ****   for(event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 2011              	 .loc 2 496 0
 2012 000e 0023     	 movs r3,#0
 2013 0010 7B61     	 str r3,[r7,#20]
 2014 0012 13E0     	 b .L106
 2015              	.L108:
 497:../Libraries/XMCLib/src/xmc_dma.c ****   {
 498:../Libraries/XMCLib/src/xmc_dma.c ****     if (event & (uint32_t)((uint32_t)0x1UL << event_idx))
 2016              	 .loc 2 498 0
 2017 0014 7B69     	 ldr r3,[r7,#20]
 2018 0016 7A68     	 ldr r2,[r7,#4]
 2019 0018 22FA03F3 	 lsr r3,r2,r3
 2020 001c 03F00103 	 and r3,r3,#1
 2021 0020 002B     	 cmp r3,#0
 2022 0022 08D0     	 beq .L107
 499:../Libraries/XMCLib/src/xmc_dma.c ****     {
 500:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CLEARCHEV[event_idx * 2UL] = ((uint32_t)0x1UL << channel);
 2023              	 .loc 2 500 0
 2024 0024 7B69     	 ldr r3,[r7,#20]
 2025 0026 5A00     	 lsls r2,r3,#1
 2026 0028 FB7A     	 ldrb r3,[r7,#11]
 2027 002a 0121     	 movs r1,#1
 2028 002c 9940     	 lsls r1,r1,r3
 2029 002e FB68     	 ldr r3,[r7,#12]
 2030 0030 CE32     	 adds r2,r2,#206
 2031 0032 43F82210 	 str r1,[r3,r2,lsl#2]
 2032              	.L107:
 496:../Libraries/XMCLib/src/xmc_dma.c ****   {
 2033              	 .loc 2 496 0 discriminator 2
 2034 0036 7B69     	 ldr r3,[r7,#20]
 2035 0038 0133     	 adds r3,r3,#1
 2036 003a 7B61     	 str r3,[r7,#20]
 2037              	.L106:
 496:../Libraries/XMCLib/src/xmc_dma.c ****   {
 2038              	 .loc 2 496 0 is_stmt 0 discriminator 1
 2039 003c 7B69     	 ldr r3,[r7,#20]
 2040 003e 042B     	 cmp r3,#4
 2041 0040 E8D9     	 bls .L108
 501:../Libraries/XMCLib/src/xmc_dma.c ****     }
 502:../Libraries/XMCLib/src/xmc_dma.c ****   }
 503:../Libraries/XMCLib/src/xmc_dma.c **** 
 504:../Libraries/XMCLib/src/xmc_dma.c **** }
 2042              	 .loc 2 504 0 is_stmt 1
 2043 0042 1C37     	 adds r7,r7,#28
 2044              	.LCFI136:
 2045              	 .cfi_def_cfa_offset 4
 2046 0044 BD46     	 mov sp,r7
 2047              	.LCFI137:
 2048              	 .cfi_def_cfa_register 13
 2049              	 
 2050 0046 5DF8047B 	 ldr r7,[sp],#4
 2051              	.LCFI138:
 2052              	 .cfi_restore 7
 2053              	 .cfi_def_cfa_offset 0
 2054 004a 7047     	 bx lr
 2055              	 .cfi_endproc
 2056              	.LFE181:
 2058              	 .section .text.XMC_DMA_CH_GetEventStatus,"ax",%progbits
 2059              	 .align 2
 2060              	 .global XMC_DMA_CH_GetEventStatus
 2061              	 .thumb
 2062              	 .thumb_func
 2064              	XMC_DMA_CH_GetEventStatus:
 2065              	.LFB182:
 505:../Libraries/XMCLib/src/xmc_dma.c **** 
 506:../Libraries/XMCLib/src/xmc_dma.c **** /* Get GPDMA event status */
 507:../Libraries/XMCLib/src/xmc_dma.c **** uint32_t XMC_DMA_CH_GetEventStatus(XMC_DMA_t *const dma, const uint8_t channel)
 508:../Libraries/XMCLib/src/xmc_dma.c **** {
 2066              	 .loc 2 508 0
 2067              	 .cfi_startproc
 2068              	 
 2069              	 
 2070              	 
 2071 0000 80B4     	 push {r7}
 2072              	.LCFI139:
 2073              	 .cfi_def_cfa_offset 4
 2074              	 .cfi_offset 7,-4
 2075 0002 85B0     	 sub sp,sp,#20
 2076              	.LCFI140:
 2077              	 .cfi_def_cfa_offset 24
 2078 0004 00AF     	 add r7,sp,#0
 2079              	.LCFI141:
 2080              	 .cfi_def_cfa_register 7
 2081 0006 7860     	 str r0,[r7,#4]
 2082 0008 0B46     	 mov r3,r1
 2083 000a FB70     	 strb r3,[r7,#3]
 509:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t event_idx;
 510:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t status = 0UL;
 2084              	 .loc 2 510 0
 2085 000c 0023     	 movs r3,#0
 2086 000e BB60     	 str r3,[r7,#8]
 511:../Libraries/XMCLib/src/xmc_dma.c **** 
 512:../Libraries/XMCLib/src/xmc_dma.c ****   for(event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 2087              	 .loc 2 512 0
 2088 0010 0023     	 movs r3,#0
 2089 0012 FB60     	 str r3,[r7,#12]
 2090 0014 18E0     	 b .L110
 2091              	.L113:
 513:../Libraries/XMCLib/src/xmc_dma.c ****   {
 514:../Libraries/XMCLib/src/xmc_dma.c ****     status |= (uint32_t)((dma->STATUSCHEV[event_idx * 2UL] & (uint32_t)((uint32_t)0x1UL << (uint32_
 2092              	 .loc 2 514 0
 2093 0016 FB68     	 ldr r3,[r7,#12]
 2094 0018 5A00     	 lsls r2,r3,#1
 2095 001a 7B68     	 ldr r3,[r7,#4]
 2096 001c BA32     	 adds r2,r2,#186
 2097 001e 53F82220 	 ldr r2,[r3,r2,lsl#2]
 2098 0022 FB78     	 ldrb r3,[r7,#3]
 2099 0024 22FA03F3 	 lsr r3,r2,r3
 2100 0028 03F00103 	 and r3,r3,#1
 2101 002c 002B     	 cmp r3,#0
 2102 002e 04D0     	 beq .L111
 2103              	 .loc 2 514 0 is_stmt 0 discriminator 1
 2104 0030 FB68     	 ldr r3,[r7,#12]
 2105 0032 0122     	 movs r2,#1
 2106 0034 02FA03F3 	 lsl r3,r2,r3
 2107 0038 00E0     	 b .L112
 2108              	.L111:
 2109              	 .loc 2 514 0 discriminator 2
 2110 003a 0023     	 movs r3,#0
 2111              	.L112:
 2112              	 .loc 2 514 0 discriminator 4
 2113 003c BA68     	 ldr r2,[r7,#8]
 2114 003e 1343     	 orrs r3,r3,r2
 2115 0040 BB60     	 str r3,[r7,#8]
 512:../Libraries/XMCLib/src/xmc_dma.c ****   {
 2116              	 .loc 2 512 0 is_stmt 1 discriminator 4
 2117 0042 FB68     	 ldr r3,[r7,#12]
 2118 0044 0133     	 adds r3,r3,#1
 2119 0046 FB60     	 str r3,[r7,#12]
 2120              	.L110:
 512:../Libraries/XMCLib/src/xmc_dma.c ****   {
 2121              	 .loc 2 512 0 is_stmt 0 discriminator 2
 2122 0048 FB68     	 ldr r3,[r7,#12]
 2123 004a 042B     	 cmp r3,#4
 2124 004c E3D9     	 bls .L113
 515:../Libraries/XMCLib/src/xmc_dma.c ****                          ((uint32_t)0x1UL << event_idx) : (uint32_t)0UL);
 516:../Libraries/XMCLib/src/xmc_dma.c ****   }
 517:../Libraries/XMCLib/src/xmc_dma.c **** 
 518:../Libraries/XMCLib/src/xmc_dma.c ****   return status;
 2125              	 .loc 2 518 0 is_stmt 1
 2126 004e BB68     	 ldr r3,[r7,#8]
 519:../Libraries/XMCLib/src/xmc_dma.c **** }
 2127              	 .loc 2 519 0
 2128 0050 1846     	 mov r0,r3
 2129 0052 1437     	 adds r7,r7,#20
 2130              	.LCFI142:
 2131              	 .cfi_def_cfa_offset 4
 2132 0054 BD46     	 mov sp,r7
 2133              	.LCFI143:
 2134              	 .cfi_def_cfa_register 13
 2135              	 
 2136 0056 5DF8047B 	 ldr r7,[sp],#4
 2137              	.LCFI144:
 2138              	 .cfi_restore 7
 2139              	 .cfi_def_cfa_offset 0
 2140 005a 7047     	 bx lr
 2141              	 .cfi_endproc
 2142              	.LFE182:
 2144              	 .section .text.XMC_DMA_CH_EnableSourceGather,"ax",%progbits
 2145              	 .align 2
 2146              	 .global XMC_DMA_CH_EnableSourceGather
 2147              	 .thumb
 2148              	 .thumb_func
 2150              	XMC_DMA_CH_EnableSourceGather:
 2151              	.LFB183:
 520:../Libraries/XMCLib/src/xmc_dma.c **** 
 521:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable source gather */
 522:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_EnableSourceGather(XMC_DMA_t *const dma, const uint8_t channel, uint32_t interval, 
 523:../Libraries/XMCLib/src/xmc_dma.c **** {
 2152              	 .loc 2 523 0
 2153              	 .cfi_startproc
 2154              	 
 2155              	 
 2156              	 
 2157 0000 80B4     	 push {r7}
 2158              	.LCFI145:
 2159              	 .cfi_def_cfa_offset 4
 2160              	 .cfi_offset 7,-4
 2161 0002 85B0     	 sub sp,sp,#20
 2162              	.LCFI146:
 2163              	 .cfi_def_cfa_offset 24
 2164 0004 00AF     	 add r7,sp,#0
 2165              	.LCFI147:
 2166              	 .cfi_def_cfa_register 7
 2167 0006 F860     	 str r0,[r7,#12]
 2168 0008 7A60     	 str r2,[r7,#4]
 2169 000a 1A46     	 mov r2,r3
 2170 000c 0B46     	 mov r3,r1
 2171 000e FB72     	 strb r3,[r7,#11]
 2172 0010 1346     	 mov r3,r2
 2173 0012 3B81     	 strh r3,[r7,#8]
 524:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_SRC_GATHER_EN_Msk;
 2174              	 .loc 2 524 0
 2175 0014 FB7A     	 ldrb r3,[r7,#11]
 2176 0016 FA7A     	 ldrb r2,[r7,#11]
 2177 0018 F968     	 ldr r1,[r7,#12]
 2178 001a 5820     	 movs r0,#88
 2179 001c 00FB02F2 	 mul r2,r0,r2
 2180 0020 0A44     	 add r2,r2,r1
 2181 0022 1832     	 adds r2,r2,#24
 2182 0024 1268     	 ldr r2,[r2]
 2183 0026 42F40032 	 orr r2,r2,#131072
 2184 002a F968     	 ldr r1,[r7,#12]
 2185 002c 5820     	 movs r0,#88
 2186 002e 00FB03F3 	 mul r3,r0,r3
 2187 0032 0B44     	 add r3,r3,r1
 2188 0034 1833     	 adds r3,r3,#24
 2189 0036 1A60     	 str r2,[r3]
 525:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].SGR = ((uint32_t)interval << GPDMA0_CH_SGR_SGI_Pos) | ((uint32_t)count << GPDMA0
 2190              	 .loc 2 525 0
 2191 0038 FB7A     	 ldrb r3,[r7,#11]
 2192 003a 3A89     	 ldrh r2,[r7,#8]
 2193 003c 1105     	 lsls r1,r2,#20
 2194 003e 7A68     	 ldr r2,[r7,#4]
 2195 0040 0A43     	 orrs r2,r2,r1
 2196 0042 F968     	 ldr r1,[r7,#12]
 2197 0044 5820     	 movs r0,#88
 2198 0046 00FB03F3 	 mul r3,r0,r3
 2199 004a 0B44     	 add r3,r3,r1
 2200 004c 4833     	 adds r3,r3,#72
 2201 004e 1A60     	 str r2,[r3]
 526:../Libraries/XMCLib/src/xmc_dma.c **** }
 2202              	 .loc 2 526 0
 2203 0050 1437     	 adds r7,r7,#20
 2204              	.LCFI148:
 2205              	 .cfi_def_cfa_offset 4
 2206 0052 BD46     	 mov sp,r7
 2207              	.LCFI149:
 2208              	 .cfi_def_cfa_register 13
 2209              	 
 2210 0054 5DF8047B 	 ldr r7,[sp],#4
 2211              	.LCFI150:
 2212              	 .cfi_restore 7
 2213              	 .cfi_def_cfa_offset 0
 2214 0058 7047     	 bx lr
 2215              	 .cfi_endproc
 2216              	.LFE183:
 2218 005a 00BF     	 .section .text.XMC_DMA_CH_DisableSourceGather,"ax",%progbits
 2219              	 .align 2
 2220              	 .global XMC_DMA_CH_DisableSourceGather
 2221              	 .thumb
 2222              	 .thumb_func
 2224              	XMC_DMA_CH_DisableSourceGather:
 2225              	.LFB184:
 527:../Libraries/XMCLib/src/xmc_dma.c **** 
 528:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable source gather */
 529:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_DisableSourceGather(XMC_DMA_t *const dma, const uint8_t channel)
 530:../Libraries/XMCLib/src/xmc_dma.c **** {
 2226              	 .loc 2 530 0
 2227              	 .cfi_startproc
 2228              	 
 2229              	 
 2230              	 
 2231 0000 80B4     	 push {r7}
 2232              	.LCFI151:
 2233              	 .cfi_def_cfa_offset 4
 2234              	 .cfi_offset 7,-4
 2235 0002 83B0     	 sub sp,sp,#12
 2236              	.LCFI152:
 2237              	 .cfi_def_cfa_offset 16
 2238 0004 00AF     	 add r7,sp,#0
 2239              	.LCFI153:
 2240              	 .cfi_def_cfa_register 7
 2241 0006 7860     	 str r0,[r7,#4]
 2242 0008 0B46     	 mov r3,r1
 2243 000a FB70     	 strb r3,[r7,#3]
 531:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CTLL &= (uint32_t)~GPDMA0_CH_CTLL_SRC_GATHER_EN_Msk;
 2244              	 .loc 2 531 0
 2245 000c FB78     	 ldrb r3,[r7,#3]
 2246 000e FA78     	 ldrb r2,[r7,#3]
 2247 0010 7968     	 ldr r1,[r7,#4]
 2248 0012 5820     	 movs r0,#88
 2249 0014 00FB02F2 	 mul r2,r0,r2
 2250 0018 0A44     	 add r2,r2,r1
 2251 001a 1832     	 adds r2,r2,#24
 2252 001c 1268     	 ldr r2,[r2]
 2253 001e 22F40032 	 bic r2,r2,#131072
 2254 0022 7968     	 ldr r1,[r7,#4]
 2255 0024 5820     	 movs r0,#88
 2256 0026 00FB03F3 	 mul r3,r0,r3
 2257 002a 0B44     	 add r3,r3,r1
 2258 002c 1833     	 adds r3,r3,#24
 2259 002e 1A60     	 str r2,[r3]
 532:../Libraries/XMCLib/src/xmc_dma.c **** }
 2260              	 .loc 2 532 0
 2261 0030 0C37     	 adds r7,r7,#12
 2262              	.LCFI154:
 2263              	 .cfi_def_cfa_offset 4
 2264 0032 BD46     	 mov sp,r7
 2265              	.LCFI155:
 2266              	 .cfi_def_cfa_register 13
 2267              	 
 2268 0034 5DF8047B 	 ldr r7,[sp],#4
 2269              	.LCFI156:
 2270              	 .cfi_restore 7
 2271              	 .cfi_def_cfa_offset 0
 2272 0038 7047     	 bx lr
 2273              	 .cfi_endproc
 2274              	.LFE184:
 2276 003a 00BF     	 .section .text.XMC_DMA_CH_EnableDestinationScatter,"ax",%progbits
 2277              	 .align 2
 2278              	 .global XMC_DMA_CH_EnableDestinationScatter
 2279              	 .thumb
 2280              	 .thumb_func
 2282              	XMC_DMA_CH_EnableDestinationScatter:
 2283              	.LFB185:
 533:../Libraries/XMCLib/src/xmc_dma.c **** 
 534:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable destination scatter */
 535:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_EnableDestinationScatter(XMC_DMA_t *const dma, const uint8_t channel, uint32_t inte
 536:../Libraries/XMCLib/src/xmc_dma.c **** {
 2284              	 .loc 2 536 0
 2285              	 .cfi_startproc
 2286              	 
 2287              	 
 2288              	 
 2289 0000 80B4     	 push {r7}
 2290              	.LCFI157:
 2291              	 .cfi_def_cfa_offset 4
 2292              	 .cfi_offset 7,-4
 2293 0002 85B0     	 sub sp,sp,#20
 2294              	.LCFI158:
 2295              	 .cfi_def_cfa_offset 24
 2296 0004 00AF     	 add r7,sp,#0
 2297              	.LCFI159:
 2298              	 .cfi_def_cfa_register 7
 2299 0006 F860     	 str r0,[r7,#12]
 2300 0008 7A60     	 str r2,[r7,#4]
 2301 000a 1A46     	 mov r2,r3
 2302 000c 0B46     	 mov r3,r1
 2303 000e FB72     	 strb r3,[r7,#11]
 2304 0010 1346     	 mov r3,r2
 2305 0012 3B81     	 strh r3,[r7,#8]
 537:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_DST_SCATTER_EN_Msk;
 2306              	 .loc 2 537 0
 2307 0014 FB7A     	 ldrb r3,[r7,#11]
 2308 0016 FA7A     	 ldrb r2,[r7,#11]
 2309 0018 F968     	 ldr r1,[r7,#12]
 2310 001a 5820     	 movs r0,#88
 2311 001c 00FB02F2 	 mul r2,r0,r2
 2312 0020 0A44     	 add r2,r2,r1
 2313 0022 1832     	 adds r2,r2,#24
 2314 0024 1268     	 ldr r2,[r2]
 2315 0026 42F48022 	 orr r2,r2,#262144
 2316 002a F968     	 ldr r1,[r7,#12]
 2317 002c 5820     	 movs r0,#88
 2318 002e 00FB03F3 	 mul r3,r0,r3
 2319 0032 0B44     	 add r3,r3,r1
 2320 0034 1833     	 adds r3,r3,#24
 2321 0036 1A60     	 str r2,[r3]
 538:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].DSR = ((uint32_t)interval << GPDMA0_CH_DSR_DSI_Pos) | ((uint32_t)count << GPDMA0
 2322              	 .loc 2 538 0
 2323 0038 FB7A     	 ldrb r3,[r7,#11]
 2324 003a 3A89     	 ldrh r2,[r7,#8]
 2325 003c 1105     	 lsls r1,r2,#20
 2326 003e 7A68     	 ldr r2,[r7,#4]
 2327 0040 0A43     	 orrs r2,r2,r1
 2328 0042 F968     	 ldr r1,[r7,#12]
 2329 0044 5820     	 movs r0,#88
 2330 0046 00FB03F3 	 mul r3,r0,r3
 2331 004a 0B44     	 add r3,r3,r1
 2332 004c 5033     	 adds r3,r3,#80
 2333 004e 1A60     	 str r2,[r3]
 539:../Libraries/XMCLib/src/xmc_dma.c **** }
 2334              	 .loc 2 539 0
 2335 0050 1437     	 adds r7,r7,#20
 2336              	.LCFI160:
 2337              	 .cfi_def_cfa_offset 4
 2338 0052 BD46     	 mov sp,r7
 2339              	.LCFI161:
 2340              	 .cfi_def_cfa_register 13
 2341              	 
 2342 0054 5DF8047B 	 ldr r7,[sp],#4
 2343              	.LCFI162:
 2344              	 .cfi_restore 7
 2345              	 .cfi_def_cfa_offset 0
 2346 0058 7047     	 bx lr
 2347              	 .cfi_endproc
 2348              	.LFE185:
 2350 005a 00BF     	 .section .text.XMC_DMA_CH_DisableDestinationScatter,"ax",%progbits
 2351              	 .align 2
 2352              	 .global XMC_DMA_CH_DisableDestinationScatter
 2353              	 .thumb
 2354              	 .thumb_func
 2356              	XMC_DMA_CH_DisableDestinationScatter:
 2357              	.LFB186:
 540:../Libraries/XMCLib/src/xmc_dma.c **** 
 541:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable destination scatter */
 542:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_DisableDestinationScatter(XMC_DMA_t *const dma, const uint8_t channel)
 543:../Libraries/XMCLib/src/xmc_dma.c **** {
 2358              	 .loc 2 543 0
 2359              	 .cfi_startproc
 2360              	 
 2361              	 
 2362              	 
 2363 0000 80B4     	 push {r7}
 2364              	.LCFI163:
 2365              	 .cfi_def_cfa_offset 4
 2366              	 .cfi_offset 7,-4
 2367 0002 83B0     	 sub sp,sp,#12
 2368              	.LCFI164:
 2369              	 .cfi_def_cfa_offset 16
 2370 0004 00AF     	 add r7,sp,#0
 2371              	.LCFI165:
 2372              	 .cfi_def_cfa_register 7
 2373 0006 7860     	 str r0,[r7,#4]
 2374 0008 0B46     	 mov r3,r1
 2375 000a FB70     	 strb r3,[r7,#3]
 544:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CTLL &= (uint32_t)~GPDMA0_CH_CTLL_DST_SCATTER_EN_Msk;
 2376              	 .loc 2 544 0
 2377 000c FB78     	 ldrb r3,[r7,#3]
 2378 000e FA78     	 ldrb r2,[r7,#3]
 2379 0010 7968     	 ldr r1,[r7,#4]
 2380 0012 5820     	 movs r0,#88
 2381 0014 00FB02F2 	 mul r2,r0,r2
 2382 0018 0A44     	 add r2,r2,r1
 2383 001a 1832     	 adds r2,r2,#24
 2384 001c 1268     	 ldr r2,[r2]
 2385 001e 22F48022 	 bic r2,r2,#262144
 2386 0022 7968     	 ldr r1,[r7,#4]
 2387 0024 5820     	 movs r0,#88
 2388 0026 00FB03F3 	 mul r3,r0,r3
 2389 002a 0B44     	 add r3,r3,r1
 2390 002c 1833     	 adds r3,r3,#24
 2391 002e 1A60     	 str r2,[r3]
 545:../Libraries/XMCLib/src/xmc_dma.c **** }
 2392              	 .loc 2 545 0
 2393 0030 0C37     	 adds r7,r7,#12
 2394              	.LCFI166:
 2395              	 .cfi_def_cfa_offset 4
 2396 0032 BD46     	 mov sp,r7
 2397              	.LCFI167:
 2398              	 .cfi_def_cfa_register 13
 2399              	 
 2400 0034 5DF8047B 	 ldr r7,[sp],#4
 2401              	.LCFI168:
 2402              	 .cfi_restore 7
 2403              	 .cfi_def_cfa_offset 0
 2404 0038 7047     	 bx lr
 2405              	 .cfi_endproc
 2406              	.LFE186:
 2408 003a 00BF     	 .section .text.XMC_DMA_CH_TriggerSourceRequest,"ax",%progbits
 2409              	 .align 2
 2410              	 .global XMC_DMA_CH_TriggerSourceRequest
 2411              	 .thumb
 2412              	 .thumb_func
 2414              	XMC_DMA_CH_TriggerSourceRequest:
 2415              	.LFB187:
 546:../Libraries/XMCLib/src/xmc_dma.c **** 
 547:../Libraries/XMCLib/src/xmc_dma.c **** /* Trigger source request */
 548:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_TriggerSourceRequest(XMC_DMA_t *const dma, const uint8_t channel, const XMC_DMA_CH_
 549:../Libraries/XMCLib/src/xmc_dma.c **** {
 2416              	 .loc 2 549 0
 2417              	 .cfi_startproc
 2418              	 
 2419              	 
 2420              	 
 2421 0000 80B4     	 push {r7}
 2422              	.LCFI169:
 2423              	 .cfi_def_cfa_offset 4
 2424              	 .cfi_offset 7,-4
 2425 0002 83B0     	 sub sp,sp,#12
 2426              	.LCFI170:
 2427              	 .cfi_def_cfa_offset 16
 2428 0004 00AF     	 add r7,sp,#0
 2429              	.LCFI171:
 2430              	 .cfi_def_cfa_register 7
 2431 0006 7860     	 str r0,[r7,#4]
 2432 0008 0846     	 mov r0,r1
 2433 000a 1146     	 mov r1,r2
 2434 000c 1A46     	 mov r2,r3
 2435 000e 0346     	 mov r3,r0
 2436 0010 FB70     	 strb r3,[r7,#3]
 2437 0012 0B46     	 mov r3,r1
 2438 0014 BB70     	 strb r3,[r7,#2]
 2439 0016 1346     	 mov r3,r2
 2440 0018 7B70     	 strb r3,[r7,#1]
 550:../Libraries/XMCLib/src/xmc_dma.c ****   if ((uint32_t)type == (uint32_t)XMC_DMA_CH_TRANSACTION_TYPE_SINGLE)
 2441              	 .loc 2 550 0
 2442 001a BB78     	 ldrb r3,[r7,#2]
 2443 001c 002B     	 cmp r3,#0
 2444 001e 06D1     	 bne .L120
 551:../Libraries/XMCLib/src/xmc_dma.c ****   {  
 552:../Libraries/XMCLib/src/xmc_dma.c ****     dma->SGLREQSRCREG = ((uint32_t)0x101UL << channel);
 2445              	 .loc 2 552 0
 2446 0020 FB78     	 ldrb r3,[r7,#3]
 2447 0022 40F20112 	 movw r2,#257
 2448 0026 9A40     	 lsls r2,r2,r3
 2449 0028 7B68     	 ldr r3,[r7,#4]
 2450 002a C3F87823 	 str r2,[r3,#888]
 2451              	.L120:
 553:../Libraries/XMCLib/src/xmc_dma.c ****   }
 554:../Libraries/XMCLib/src/xmc_dma.c **** 
 555:../Libraries/XMCLib/src/xmc_dma.c ****   if (last == true)
 2452              	 .loc 2 555 0
 2453 002e 7B78     	 ldrb r3,[r7,#1]
 2454 0030 002B     	 cmp r3,#0
 2455 0032 06D0     	 beq .L121
 556:../Libraries/XMCLib/src/xmc_dma.c ****   {
 557:../Libraries/XMCLib/src/xmc_dma.c ****   dma->LSTSRCREG = (uint32_t)0x101UL << channel;
 2456              	 .loc 2 557 0
 2457 0034 FB78     	 ldrb r3,[r7,#3]
 2458 0036 40F20112 	 movw r2,#257
 2459 003a 9A40     	 lsls r2,r2,r3
 2460 003c 7B68     	 ldr r3,[r7,#4]
 2461 003e C3F88823 	 str r2,[r3,#904]
 2462              	.L121:
 558:../Libraries/XMCLib/src/xmc_dma.c ****   }
 559:../Libraries/XMCLib/src/xmc_dma.c ****   
 560:../Libraries/XMCLib/src/xmc_dma.c ****   dma->REQSRCREG = (uint32_t)0x101UL << channel;
 2463              	 .loc 2 560 0
 2464 0042 FB78     	 ldrb r3,[r7,#3]
 2465 0044 40F20112 	 movw r2,#257
 2466 0048 9A40     	 lsls r2,r2,r3
 2467 004a 7B68     	 ldr r3,[r7,#4]
 2468 004c C3F86823 	 str r2,[r3,#872]
 561:../Libraries/XMCLib/src/xmc_dma.c **** }
 2469              	 .loc 2 561 0
 2470 0050 0C37     	 adds r7,r7,#12
 2471              	.LCFI172:
 2472              	 .cfi_def_cfa_offset 4
 2473 0052 BD46     	 mov sp,r7
 2474              	.LCFI173:
 2475              	 .cfi_def_cfa_register 13
 2476              	 
 2477 0054 5DF8047B 	 ldr r7,[sp],#4
 2478              	.LCFI174:
 2479              	 .cfi_restore 7
 2480              	 .cfi_def_cfa_offset 0
 2481 0058 7047     	 bx lr
 2482              	 .cfi_endproc
 2483              	.LFE187:
 2485 005a 00BF     	 .section .text.XMC_DMA_CH_TriggerDestinationRequest,"ax",%progbits
 2486              	 .align 2
 2487              	 .global XMC_DMA_CH_TriggerDestinationRequest
 2488              	 .thumb
 2489              	 .thumb_func
 2491              	XMC_DMA_CH_TriggerDestinationRequest:
 2492              	.LFB188:
 562:../Libraries/XMCLib/src/xmc_dma.c **** 
 563:../Libraries/XMCLib/src/xmc_dma.c **** /* Trigger destination request */
 564:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_TriggerDestinationRequest(XMC_DMA_t *const dma, const uint8_t channel, const XMC_DM
 565:../Libraries/XMCLib/src/xmc_dma.c **** {
 2493              	 .loc 2 565 0
 2494              	 .cfi_startproc
 2495              	 
 2496              	 
 2497              	 
 2498 0000 80B4     	 push {r7}
 2499              	.LCFI175:
 2500              	 .cfi_def_cfa_offset 4
 2501              	 .cfi_offset 7,-4
 2502 0002 83B0     	 sub sp,sp,#12
 2503              	.LCFI176:
 2504              	 .cfi_def_cfa_offset 16
 2505 0004 00AF     	 add r7,sp,#0
 2506              	.LCFI177:
 2507              	 .cfi_def_cfa_register 7
 2508 0006 7860     	 str r0,[r7,#4]
 2509 0008 0846     	 mov r0,r1
 2510 000a 1146     	 mov r1,r2
 2511 000c 1A46     	 mov r2,r3
 2512 000e 0346     	 mov r3,r0
 2513 0010 FB70     	 strb r3,[r7,#3]
 2514 0012 0B46     	 mov r3,r1
 2515 0014 BB70     	 strb r3,[r7,#2]
 2516 0016 1346     	 mov r3,r2
 2517 0018 7B70     	 strb r3,[r7,#1]
 566:../Libraries/XMCLib/src/xmc_dma.c ****   if(type == XMC_DMA_CH_TRANSACTION_TYPE_SINGLE)
 2518              	 .loc 2 566 0
 2519 001a BB78     	 ldrb r3,[r7,#2]
 2520 001c 002B     	 cmp r3,#0
 2521 001e 06D1     	 bne .L123
 567:../Libraries/XMCLib/src/xmc_dma.c ****   {  
 568:../Libraries/XMCLib/src/xmc_dma.c ****     dma->SGLREQDSTREG = (uint32_t)0x101UL << channel;
 2522              	 .loc 2 568 0
 2523 0020 FB78     	 ldrb r3,[r7,#3]
 2524 0022 40F20112 	 movw r2,#257
 2525 0026 9A40     	 lsls r2,r2,r3
 2526 0028 7B68     	 ldr r3,[r7,#4]
 2527 002a C3F88023 	 str r2,[r3,#896]
 2528              	.L123:
 569:../Libraries/XMCLib/src/xmc_dma.c ****   }
 570:../Libraries/XMCLib/src/xmc_dma.c **** 
 571:../Libraries/XMCLib/src/xmc_dma.c ****   if (last == true)
 2529              	 .loc 2 571 0
 2530 002e 7B78     	 ldrb r3,[r7,#1]
 2531 0030 002B     	 cmp r3,#0
 2532 0032 06D0     	 beq .L124
 572:../Libraries/XMCLib/src/xmc_dma.c ****   {
 573:../Libraries/XMCLib/src/xmc_dma.c ****     dma->LSTDSTREG = (uint32_t)0x101UL << channel;
 2533              	 .loc 2 573 0
 2534 0034 FB78     	 ldrb r3,[r7,#3]
 2535 0036 40F20112 	 movw r2,#257
 2536 003a 9A40     	 lsls r2,r2,r3
 2537 003c 7B68     	 ldr r3,[r7,#4]
 2538 003e C3F89023 	 str r2,[r3,#912]
 2539              	.L124:
 574:../Libraries/XMCLib/src/xmc_dma.c ****   }
 575:../Libraries/XMCLib/src/xmc_dma.c **** 
 576:../Libraries/XMCLib/src/xmc_dma.c ****   dma->REQDSTREG = (uint32_t)0x101UL << channel;
 2540              	 .loc 2 576 0
 2541 0042 FB78     	 ldrb r3,[r7,#3]
 2542 0044 40F20112 	 movw r2,#257
 2543 0048 9A40     	 lsls r2,r2,r3
 2544 004a 7B68     	 ldr r3,[r7,#4]
 2545 004c C3F87023 	 str r2,[r3,#880]
 577:../Libraries/XMCLib/src/xmc_dma.c **** }
 2546              	 .loc 2 577 0
 2547 0050 0C37     	 adds r7,r7,#12
 2548              	.LCFI178:
 2549              	 .cfi_def_cfa_offset 4
 2550 0052 BD46     	 mov sp,r7
 2551              	.LCFI179:
 2552              	 .cfi_def_cfa_register 13
 2553              	 
 2554 0054 5DF8047B 	 ldr r7,[sp],#4
 2555              	.LCFI180:
 2556              	 .cfi_restore 7
 2557              	 .cfi_def_cfa_offset 0
 2558 0058 7047     	 bx lr
 2559              	 .cfi_endproc
 2560              	.LFE188:
 2562 005a 00BF     	 .section .text.XMC_DMA_CH_EnableSourceAddressReload,"ax",%progbits
 2563              	 .align 2
 2564              	 .global XMC_DMA_CH_EnableSourceAddressReload
 2565              	 .thumb
 2566              	 .thumb_func
 2568              	XMC_DMA_CH_EnableSourceAddressReload:
 2569              	.LFB189:
 578:../Libraries/XMCLib/src/xmc_dma.c **** 
 579:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable source address reload */
 580:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_EnableSourceAddressReload(XMC_DMA_t *const dma, const uint8_t channel)
 581:../Libraries/XMCLib/src/xmc_dma.c **** {
 2570              	 .loc 2 581 0
 2571              	 .cfi_startproc
 2572              	 
 2573              	 
 2574              	 
 2575 0000 80B4     	 push {r7}
 2576              	.LCFI181:
 2577              	 .cfi_def_cfa_offset 4
 2578              	 .cfi_offset 7,-4
 2579 0002 83B0     	 sub sp,sp,#12
 2580              	.LCFI182:
 2581              	 .cfi_def_cfa_offset 16
 2582 0004 00AF     	 add r7,sp,#0
 2583              	.LCFI183:
 2584              	 .cfi_def_cfa_register 7
 2585 0006 7860     	 str r0,[r7,#4]
 2586 0008 0B46     	 mov r3,r1
 2587 000a FB70     	 strb r3,[r7,#3]
 582:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 2588              	 .loc 2 582 0
 2589 000c FB78     	 ldrb r3,[r7,#3]
 2590 000e FA78     	 ldrb r2,[r7,#3]
 2591 0010 7968     	 ldr r1,[r7,#4]
 2592 0012 5820     	 movs r0,#88
 2593 0014 00FB02F2 	 mul r2,r0,r2
 2594 0018 0A44     	 add r2,r2,r1
 2595 001a 4032     	 adds r2,r2,#64
 2596 001c 1268     	 ldr r2,[r2]
 2597 001e 42F08042 	 orr r2,r2,#1073741824
 2598 0022 7968     	 ldr r1,[r7,#4]
 2599 0024 5820     	 movs r0,#88
 2600 0026 00FB03F3 	 mul r3,r0,r3
 2601 002a 0B44     	 add r3,r3,r1
 2602 002c 4033     	 adds r3,r3,#64
 2603 002e 1A60     	 str r2,[r3]
 583:../Libraries/XMCLib/src/xmc_dma.c **** }
 2604              	 .loc 2 583 0
 2605 0030 0C37     	 adds r7,r7,#12
 2606              	.LCFI184:
 2607              	 .cfi_def_cfa_offset 4
 2608 0032 BD46     	 mov sp,r7
 2609              	.LCFI185:
 2610              	 .cfi_def_cfa_register 13
 2611              	 
 2612 0034 5DF8047B 	 ldr r7,[sp],#4
 2613              	.LCFI186:
 2614              	 .cfi_restore 7
 2615              	 .cfi_def_cfa_offset 0
 2616 0038 7047     	 bx lr
 2617              	 .cfi_endproc
 2618              	.LFE189:
 2620 003a 00BF     	 .section .text.XMC_DMA_CH_DisableSourceAddressReload,"ax",%progbits
 2621              	 .align 2
 2622              	 .global XMC_DMA_CH_DisableSourceAddressReload
 2623              	 .thumb
 2624              	 .thumb_func
 2626              	XMC_DMA_CH_DisableSourceAddressReload:
 2627              	.LFB190:
 584:../Libraries/XMCLib/src/xmc_dma.c **** 
 585:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable source address reload */
 586:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_DisableSourceAddressReload(XMC_DMA_t *const dma, const uint8_t channel)
 587:../Libraries/XMCLib/src/xmc_dma.c **** {
 2628              	 .loc 2 587 0
 2629              	 .cfi_startproc
 2630              	 
 2631              	 
 2632              	 
 2633 0000 80B4     	 push {r7}
 2634              	.LCFI187:
 2635              	 .cfi_def_cfa_offset 4
 2636              	 .cfi_offset 7,-4
 2637 0002 83B0     	 sub sp,sp,#12
 2638              	.LCFI188:
 2639              	 .cfi_def_cfa_offset 16
 2640 0004 00AF     	 add r7,sp,#0
 2641              	.LCFI189:
 2642              	 .cfi_def_cfa_register 7
 2643 0006 7860     	 str r0,[r7,#4]
 2644 0008 0B46     	 mov r3,r1
 2645 000a FB70     	 strb r3,[r7,#3]
 588:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 2646              	 .loc 2 588 0
 2647 000c FB78     	 ldrb r3,[r7,#3]
 2648 000e FA78     	 ldrb r2,[r7,#3]
 2649 0010 7968     	 ldr r1,[r7,#4]
 2650 0012 5820     	 movs r0,#88
 2651 0014 00FB02F2 	 mul r2,r0,r2
 2652 0018 0A44     	 add r2,r2,r1
 2653 001a 4032     	 adds r2,r2,#64
 2654 001c 1268     	 ldr r2,[r2]
 2655 001e 22F08042 	 bic r2,r2,#1073741824
 2656 0022 7968     	 ldr r1,[r7,#4]
 2657 0024 5820     	 movs r0,#88
 2658 0026 00FB03F3 	 mul r3,r0,r3
 2659 002a 0B44     	 add r3,r3,r1
 2660 002c 4033     	 adds r3,r3,#64
 2661 002e 1A60     	 str r2,[r3]
 589:../Libraries/XMCLib/src/xmc_dma.c **** }
 2662              	 .loc 2 589 0
 2663 0030 0C37     	 adds r7,r7,#12
 2664              	.LCFI190:
 2665              	 .cfi_def_cfa_offset 4
 2666 0032 BD46     	 mov sp,r7
 2667              	.LCFI191:
 2668              	 .cfi_def_cfa_register 13
 2669              	 
 2670 0034 5DF8047B 	 ldr r7,[sp],#4
 2671              	.LCFI192:
 2672              	 .cfi_restore 7
 2673              	 .cfi_def_cfa_offset 0
 2674 0038 7047     	 bx lr
 2675              	 .cfi_endproc
 2676              	.LFE190:
 2678 003a 00BF     	 .section .text.XMC_DMA_CH_EnableDestinationAddressReload,"ax",%progbits
 2679              	 .align 2
 2680              	 .global XMC_DMA_CH_EnableDestinationAddressReload
 2681              	 .thumb
 2682              	 .thumb_func
 2684              	XMC_DMA_CH_EnableDestinationAddressReload:
 2685              	.LFB191:
 590:../Libraries/XMCLib/src/xmc_dma.c **** 
 591:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable destination address reload */
 592:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_EnableDestinationAddressReload(XMC_DMA_t *const dma, const uint8_t channel)
 593:../Libraries/XMCLib/src/xmc_dma.c **** {
 2686              	 .loc 2 593 0
 2687              	 .cfi_startproc
 2688              	 
 2689              	 
 2690              	 
 2691 0000 80B4     	 push {r7}
 2692              	.LCFI193:
 2693              	 .cfi_def_cfa_offset 4
 2694              	 .cfi_offset 7,-4
 2695 0002 83B0     	 sub sp,sp,#12
 2696              	.LCFI194:
 2697              	 .cfi_def_cfa_offset 16
 2698 0004 00AF     	 add r7,sp,#0
 2699              	.LCFI195:
 2700              	 .cfi_def_cfa_register 7
 2701 0006 7860     	 str r0,[r7,#4]
 2702 0008 0B46     	 mov r3,r1
 2703 000a FB70     	 strb r3,[r7,#3]
 594:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 2704              	 .loc 2 594 0
 2705 000c FB78     	 ldrb r3,[r7,#3]
 2706 000e FA78     	 ldrb r2,[r7,#3]
 2707 0010 7968     	 ldr r1,[r7,#4]
 2708 0012 5820     	 movs r0,#88
 2709 0014 00FB02F2 	 mul r2,r0,r2
 2710 0018 0A44     	 add r2,r2,r1
 2711 001a 4032     	 adds r2,r2,#64
 2712 001c 1268     	 ldr r2,[r2]
 2713 001e 42F00042 	 orr r2,r2,#-2147483648
 2714 0022 7968     	 ldr r1,[r7,#4]
 2715 0024 5820     	 movs r0,#88
 2716 0026 00FB03F3 	 mul r3,r0,r3
 2717 002a 0B44     	 add r3,r3,r1
 2718 002c 4033     	 adds r3,r3,#64
 2719 002e 1A60     	 str r2,[r3]
 595:../Libraries/XMCLib/src/xmc_dma.c **** }
 2720              	 .loc 2 595 0
 2721 0030 0C37     	 adds r7,r7,#12
 2722              	.LCFI196:
 2723              	 .cfi_def_cfa_offset 4
 2724 0032 BD46     	 mov sp,r7
 2725              	.LCFI197:
 2726              	 .cfi_def_cfa_register 13
 2727              	 
 2728 0034 5DF8047B 	 ldr r7,[sp],#4
 2729              	.LCFI198:
 2730              	 .cfi_restore 7
 2731              	 .cfi_def_cfa_offset 0
 2732 0038 7047     	 bx lr
 2733              	 .cfi_endproc
 2734              	.LFE191:
 2736 003a 00BF     	 .section .text.XMC_DMA_CH_DisableDestinationAddressReload,"ax",%progbits
 2737              	 .align 2
 2738              	 .global XMC_DMA_CH_DisableDestinationAddressReload
 2739              	 .thumb
 2740              	 .thumb_func
 2742              	XMC_DMA_CH_DisableDestinationAddressReload:
 2743              	.LFB192:
 596:../Libraries/XMCLib/src/xmc_dma.c **** 
 597:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable destination address reload */
 598:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_DisableDestinationAddressReload(XMC_DMA_t *const dma, const uint8_t channel)
 599:../Libraries/XMCLib/src/xmc_dma.c **** {
 2744              	 .loc 2 599 0
 2745              	 .cfi_startproc
 2746              	 
 2747              	 
 2748              	 
 2749 0000 80B4     	 push {r7}
 2750              	.LCFI199:
 2751              	 .cfi_def_cfa_offset 4
 2752              	 .cfi_offset 7,-4
 2753 0002 83B0     	 sub sp,sp,#12
 2754              	.LCFI200:
 2755              	 .cfi_def_cfa_offset 16
 2756 0004 00AF     	 add r7,sp,#0
 2757              	.LCFI201:
 2758              	 .cfi_def_cfa_register 7
 2759 0006 7860     	 str r0,[r7,#4]
 2760 0008 0B46     	 mov r3,r1
 2761 000a FB70     	 strb r3,[r7,#3]
 600:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 2762              	 .loc 2 600 0
 2763 000c FB78     	 ldrb r3,[r7,#3]
 2764 000e FA78     	 ldrb r2,[r7,#3]
 2765 0010 7968     	 ldr r1,[r7,#4]
 2766 0012 5820     	 movs r0,#88
 2767 0014 00FB02F2 	 mul r2,r0,r2
 2768 0018 0A44     	 add r2,r2,r1
 2769 001a 4032     	 adds r2,r2,#64
 2770 001c 1268     	 ldr r2,[r2]
 2771 001e 22F00042 	 bic r2,r2,#-2147483648
 2772 0022 7968     	 ldr r1,[r7,#4]
 2773 0024 5820     	 movs r0,#88
 2774 0026 00FB03F3 	 mul r3,r0,r3
 2775 002a 0B44     	 add r3,r3,r1
 2776 002c 4033     	 adds r3,r3,#64
 2777 002e 1A60     	 str r2,[r3]
 601:../Libraries/XMCLib/src/xmc_dma.c **** }
 2778              	 .loc 2 601 0
 2779 0030 0C37     	 adds r7,r7,#12
 2780              	.LCFI202:
 2781              	 .cfi_def_cfa_offset 4
 2782 0032 BD46     	 mov sp,r7
 2783              	.LCFI203:
 2784              	 .cfi_def_cfa_register 13
 2785              	 
 2786 0034 5DF8047B 	 ldr r7,[sp],#4
 2787              	.LCFI204:
 2788              	 .cfi_restore 7
 2789              	 .cfi_def_cfa_offset 0
 2790 0038 7047     	 bx lr
 2791              	 .cfi_endproc
 2792              	.LFE192:
 2794 003a 00BF     	 .section .text.XMC_DMA_CH_RequestLastMultiblockTransfer,"ax",%progbits
 2795              	 .align 2
 2796              	 .global XMC_DMA_CH_RequestLastMultiblockTransfer
 2797              	 .thumb
 2798              	 .thumb_func
 2800              	XMC_DMA_CH_RequestLastMultiblockTransfer:
 2801              	.LFB193:
 602:../Libraries/XMCLib/src/xmc_dma.c **** 
 603:../Libraries/XMCLib/src/xmc_dma.c **** /* Request last multi-block transfer */
 604:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_RequestLastMultiblockTransfer(XMC_DMA_t *const dma, const uint8_t channel)
 605:../Libraries/XMCLib/src/xmc_dma.c **** {
 2802              	 .loc 2 605 0
 2803              	 .cfi_startproc
 2804              	 
 2805              	 
 2806              	 
 2807 0000 80B4     	 push {r7}
 2808              	.LCFI205:
 2809              	 .cfi_def_cfa_offset 4
 2810              	 .cfi_offset 7,-4
 2811 0002 83B0     	 sub sp,sp,#12
 2812              	.LCFI206:
 2813              	 .cfi_def_cfa_offset 16
 2814 0004 00AF     	 add r7,sp,#0
 2815              	.LCFI207:
 2816              	 .cfi_def_cfa_register 7
 2817 0006 7860     	 str r0,[r7,#4]
 2818 0008 0B46     	 mov r3,r1
 2819 000a FB70     	 strb r3,[r7,#3]
 606:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL &= (uint32_t)~(GPDMA0_CH_CFGL_RELOAD_SRC_Msk | GPDMA0_CH_CFGL_RELOAD_DST_Ms
 2820              	 .loc 2 606 0
 2821 000c FB78     	 ldrb r3,[r7,#3]
 2822 000e FA78     	 ldrb r2,[r7,#3]
 2823 0010 7968     	 ldr r1,[r7,#4]
 2824 0012 5820     	 movs r0,#88
 2825 0014 00FB02F2 	 mul r2,r0,r2
 2826 0018 0A44     	 add r2,r2,r1
 2827 001a 4032     	 adds r2,r2,#64
 2828 001c 1268     	 ldr r2,[r2]
 2829 001e 22F04042 	 bic r2,r2,#-1073741824
 2830 0022 7968     	 ldr r1,[r7,#4]
 2831 0024 5820     	 movs r0,#88
 2832 0026 00FB03F3 	 mul r3,r0,r3
 2833 002a 0B44     	 add r3,r3,r1
 2834 002c 4033     	 adds r3,r3,#64
 2835 002e 1A60     	 str r2,[r3]
 607:../Libraries/XMCLib/src/xmc_dma.c **** }
 2836              	 .loc 2 607 0
 2837 0030 0C37     	 adds r7,r7,#12
 2838              	.LCFI208:
 2839              	 .cfi_def_cfa_offset 4
 2840 0032 BD46     	 mov sp,r7
 2841              	.LCFI209:
 2842              	 .cfi_def_cfa_register 13
 2843              	 
 2844 0034 5DF8047B 	 ldr r7,[sp],#4
 2845              	.LCFI210:
 2846              	 .cfi_restore 7
 2847              	 .cfi_def_cfa_offset 0
 2848 0038 7047     	 bx lr
 2849              	 .cfi_endproc
 2850              	.LFE193:
 2852 003a 00BF     	 .section .text.XMC_DMA_CH_SetEventHandler,"ax",%progbits
 2853              	 .align 2
 2854              	 .global XMC_DMA_CH_SetEventHandler
 2855              	 .thumb
 2856              	 .thumb_func
 2858              	XMC_DMA_CH_SetEventHandler:
 2859              	.LFB194:
 608:../Libraries/XMCLib/src/xmc_dma.c **** 
 609:../Libraries/XMCLib/src/xmc_dma.c **** /* Set event handler */
 610:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_SetEventHandler(XMC_DMA_t *const dma, const uint8_t channel, XMC_DMA_CH_EVENT_HANDL
 611:../Libraries/XMCLib/src/xmc_dma.c **** {
 2860              	 .loc 2 611 0
 2861              	 .cfi_startproc
 2862              	 
 2863              	 
 2864              	 
 2865 0000 80B4     	 push {r7}
 2866              	.LCFI211:
 2867              	 .cfi_def_cfa_offset 4
 2868              	 .cfi_offset 7,-4
 2869 0002 85B0     	 sub sp,sp,#20
 2870              	.LCFI212:
 2871              	 .cfi_def_cfa_offset 24
 2872 0004 00AF     	 add r7,sp,#0
 2873              	.LCFI213:
 2874              	 .cfi_def_cfa_register 7
 2875 0006 F860     	 str r0,[r7,#12]
 2876 0008 0B46     	 mov r3,r1
 2877 000a 7A60     	 str r2,[r7,#4]
 2878 000c FB72     	 strb r3,[r7,#11]
 612:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 613:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 2879              	 .loc 2 613 0
 2880 000e FB68     	 ldr r3,[r7,#12]
 2881 0010 094A     	 ldr r2,.L133
 2882 0012 9342     	 cmp r3,r2
 2883 0014 05D1     	 bne .L131
 614:../Libraries/XMCLib/src/xmc_dma.c ****   {
 615:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 616:../Libraries/XMCLib/src/xmc_dma.c ****     dma0_event_handlers[channel] = event_handler;
 2884              	 .loc 2 616 0
 2885 0016 FB7A     	 ldrb r3,[r7,#11]
 2886 0018 0849     	 ldr r1,.L133+4
 2887 001a 7A68     	 ldr r2,[r7,#4]
 2888 001c 41F82320 	 str r2,[r1,r3,lsl#2]
 2889 0020 04E0     	 b .L130
 2890              	.L131:
 617:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 618:../Libraries/XMCLib/src/xmc_dma.c ****   }
 619:../Libraries/XMCLib/src/xmc_dma.c ****   else
 620:../Libraries/XMCLib/src/xmc_dma.c ****   {
 621:../Libraries/XMCLib/src/xmc_dma.c ****     dma1_event_handlers[channel] = event_handler;
 2891              	 .loc 2 621 0
 2892 0022 FB7A     	 ldrb r3,[r7,#11]
 2893 0024 0649     	 ldr r1,.L133+8
 2894 0026 7A68     	 ldr r2,[r7,#4]
 2895 0028 41F82320 	 str r2,[r1,r3,lsl#2]
 2896              	.L130:
 622:../Libraries/XMCLib/src/xmc_dma.c ****   }
 623:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 624:../Libraries/XMCLib/src/xmc_dma.c **** }
 2897              	 .loc 2 624 0
 2898 002c 1437     	 adds r7,r7,#20
 2899              	.LCFI214:
 2900              	 .cfi_def_cfa_offset 4
 2901 002e BD46     	 mov sp,r7
 2902              	.LCFI215:
 2903              	 .cfi_def_cfa_register 13
 2904              	 
 2905 0030 5DF8047B 	 ldr r7,[sp],#4
 2906              	.LCFI216:
 2907              	 .cfi_restore 7
 2908              	 .cfi_def_cfa_offset 0
 2909 0034 7047     	 bx lr
 2910              	.L134:
 2911 0036 00BF     	 .align 2
 2912              	.L133:
 2913 0038 00400150 	 .word 1342259200
 2914 003c 00000000 	 .word dma0_event_handlers
 2915 0040 00000000 	 .word dma1_event_handlers
 2916              	 .cfi_endproc
 2917              	.LFE194:
 2919              	 .section .text.XMC_DMA_CH_ClearSourcePeripheralRequest,"ax",%progbits
 2920              	 .align 2
 2921              	 .global XMC_DMA_CH_ClearSourcePeripheralRequest
 2922              	 .thumb
 2923              	 .thumb_func
 2925              	XMC_DMA_CH_ClearSourcePeripheralRequest:
 2926              	.LFB195:
 625:../Libraries/XMCLib/src/xmc_dma.c **** 
 626:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_ClearSourcePeripheralRequest(XMC_DMA_t *const dma, uint8_t channel)
 627:../Libraries/XMCLib/src/xmc_dma.c **** {
 2927              	 .loc 2 627 0
 2928              	 .cfi_startproc
 2929              	 
 2930              	 
 2931 0000 80B5     	 push {r7,lr}
 2932              	.LCFI217:
 2933              	 .cfi_def_cfa_offset 8
 2934              	 .cfi_offset 7,-8
 2935              	 .cfi_offset 14,-4
 2936 0002 84B0     	 sub sp,sp,#16
 2937              	.LCFI218:
 2938              	 .cfi_def_cfa_offset 24
 2939 0004 00AF     	 add r7,sp,#0
 2940              	.LCFI219:
 2941              	 .cfi_def_cfa_register 7
 2942 0006 7860     	 str r0,[r7,#4]
 2943 0008 0B46     	 mov r3,r1
 2944 000a FB70     	 strb r3,[r7,#3]
 628:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t line;
 629:../Libraries/XMCLib/src/xmc_dma.c ****   line = (dma->CH[channel].CFGH & GPDMA0_CH_CFGH_SRC_PER_Msk) >> GPDMA0_CH_CFGH_SRC_PER_Pos;
 2945              	 .loc 2 629 0
 2946 000c FB78     	 ldrb r3,[r7,#3]
 2947 000e 7A68     	 ldr r2,[r7,#4]
 2948 0010 5821     	 movs r1,#88
 2949 0012 01FB03F3 	 mul r3,r1,r3
 2950 0016 1344     	 add r3,r3,r2
 2951 0018 4033     	 adds r3,r3,#64
 2952 001a 5B68     	 ldr r3,[r3,#4]
 2953 001c 03F4F063 	 and r3,r3,#1920
 2954 0020 DB09     	 lsrs r3,r3,#7
 2955 0022 FB60     	 str r3,[r7,#12]
 630:../Libraries/XMCLib/src/xmc_dma.c **** 
 631:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_DMA_ClearRequestLine(dma, (uint8_t)line);
 2956              	 .loc 2 631 0
 2957 0024 FB68     	 ldr r3,[r7,#12]
 2958 0026 DBB2     	 uxtb r3,r3
 2959 0028 7868     	 ldr r0,[r7,#4]
 2960 002a 1946     	 mov r1,r3
 2961 002c FFF7FEFF 	 bl XMC_DMA_ClearRequestLine
 632:../Libraries/XMCLib/src/xmc_dma.c **** }
 2962              	 .loc 2 632 0
 2963 0030 1037     	 adds r7,r7,#16
 2964              	.LCFI220:
 2965              	 .cfi_def_cfa_offset 8
 2966 0032 BD46     	 mov sp,r7
 2967              	.LCFI221:
 2968              	 .cfi_def_cfa_register 13
 2969              	 
 2970 0034 80BD     	 pop {r7,pc}
 2971              	 .cfi_endproc
 2972              	.LFE195:
 2974 0036 00BF     	 .section .text.XMC_DMA_CH_ClearDestinationPeripheralRequest,"ax",%progbits
 2975              	 .align 2
 2976              	 .global XMC_DMA_CH_ClearDestinationPeripheralRequest
 2977              	 .thumb
 2978              	 .thumb_func
 2980              	XMC_DMA_CH_ClearDestinationPeripheralRequest:
 2981              	.LFB196:
 633:../Libraries/XMCLib/src/xmc_dma.c **** 
 634:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_ClearDestinationPeripheralRequest(XMC_DMA_t *const dma, uint8_t channel)
 635:../Libraries/XMCLib/src/xmc_dma.c **** {
 2982              	 .loc 2 635 0
 2983              	 .cfi_startproc
 2984              	 
 2985              	 
 2986 0000 80B5     	 push {r7,lr}
 2987              	.LCFI222:
 2988              	 .cfi_def_cfa_offset 8
 2989              	 .cfi_offset 7,-8
 2990              	 .cfi_offset 14,-4
 2991 0002 84B0     	 sub sp,sp,#16
 2992              	.LCFI223:
 2993              	 .cfi_def_cfa_offset 24
 2994 0004 00AF     	 add r7,sp,#0
 2995              	.LCFI224:
 2996              	 .cfi_def_cfa_register 7
 2997 0006 7860     	 str r0,[r7,#4]
 2998 0008 0B46     	 mov r3,r1
 2999 000a FB70     	 strb r3,[r7,#3]
 636:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t line;
 637:../Libraries/XMCLib/src/xmc_dma.c ****   line = (dma->CH[channel].CFGH & GPDMA0_CH_CFGH_DEST_PER_Msk) >> GPDMA0_CH_CFGH_DEST_PER_Pos;
 3000              	 .loc 2 637 0
 3001 000c FB78     	 ldrb r3,[r7,#3]
 3002 000e 7A68     	 ldr r2,[r7,#4]
 3003 0010 5821     	 movs r1,#88
 3004 0012 01FB03F3 	 mul r3,r1,r3
 3005 0016 1344     	 add r3,r3,r2
 3006 0018 4033     	 adds r3,r3,#64
 3007 001a 5B68     	 ldr r3,[r3,#4]
 3008 001c 03F4F043 	 and r3,r3,#30720
 3009 0020 DB0A     	 lsrs r3,r3,#11
 3010 0022 FB60     	 str r3,[r7,#12]
 638:../Libraries/XMCLib/src/xmc_dma.c **** 
 639:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_DMA_ClearRequestLine(dma, (uint8_t)line);
 3011              	 .loc 2 639 0
 3012 0024 FB68     	 ldr r3,[r7,#12]
 3013 0026 DBB2     	 uxtb r3,r3
 3014 0028 7868     	 ldr r0,[r7,#4]
 3015 002a 1946     	 mov r1,r3
 3016 002c FFF7FEFF 	 bl XMC_DMA_ClearRequestLine
 640:../Libraries/XMCLib/src/xmc_dma.c **** }
 3017              	 .loc 2 640 0
 3018 0030 1037     	 adds r7,r7,#16
 3019              	.LCFI225:
 3020              	 .cfi_def_cfa_offset 8
 3021 0032 BD46     	 mov sp,r7
 3022              	.LCFI226:
 3023              	 .cfi_def_cfa_register 13
 3024              	 
 3025 0034 80BD     	 pop {r7,pc}
 3026              	 .cfi_endproc
 3027              	.LFE196:
 3029 0036 00BF     	 .section .text.XMC_DMA_IRQHandler,"ax",%progbits
 3030              	 .align 2
 3031              	 .global XMC_DMA_IRQHandler
 3032              	 .thumb
 3033              	 .thumb_func
 3035              	XMC_DMA_IRQHandler:
 3036              	.LFB197:
 641:../Libraries/XMCLib/src/xmc_dma.c **** 
 642:../Libraries/XMCLib/src/xmc_dma.c **** /* Default DMA IRQ handler */
 643:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_IRQHandler(XMC_DMA_t *const dma)
 644:../Libraries/XMCLib/src/xmc_dma.c **** {
 3037              	 .loc 2 644 0
 3038              	 .cfi_startproc
 3039              	 
 3040              	 
 3041 0000 80B5     	 push {r7,lr}
 3042              	.LCFI227:
 3043              	 .cfi_def_cfa_offset 8
 3044              	 .cfi_offset 7,-8
 3045              	 .cfi_offset 14,-4
 3046 0002 88B0     	 sub sp,sp,#32
 3047              	.LCFI228:
 3048              	 .cfi_def_cfa_offset 40
 3049 0004 00AF     	 add r7,sp,#0
 3050              	.LCFI229:
 3051              	 .cfi_def_cfa_register 7
 3052 0006 7860     	 str r0,[r7,#4]
 645:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t event;
 646:../Libraries/XMCLib/src/xmc_dma.c ****   int32_t channel;
 647:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t mask;
 648:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_DMA_CH_EVENT_HANDLER_t *dma_event_handlers;
 649:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_DMA_CH_EVENT_HANDLER_t event_handler;
 650:../Libraries/XMCLib/src/xmc_dma.c **** 
 651:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 652:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 3053              	 .loc 2 652 0
 3054 0008 7B68     	 ldr r3,[r7,#4]
 3055 000a 804A     	 ldr r2,.L170
 3056 000c 9342     	 cmp r3,r2
 3057 000e 02D1     	 bne .L138
 653:../Libraries/XMCLib/src/xmc_dma.c ****   {
 654:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 655:../Libraries/XMCLib/src/xmc_dma.c ****     dma_event_handlers = dma0_event_handlers;
 3058              	 .loc 2 655 0
 3059 0010 7F4B     	 ldr r3,.L170+4
 3060 0012 BB61     	 str r3,[r7,#24]
 3061 0014 01E0     	 b .L139
 3062              	.L138:
 656:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 657:../Libraries/XMCLib/src/xmc_dma.c ****   }
 658:../Libraries/XMCLib/src/xmc_dma.c ****   else
 659:../Libraries/XMCLib/src/xmc_dma.c ****   {
 660:../Libraries/XMCLib/src/xmc_dma.c ****     dma_event_handlers = dma1_event_handlers;
 3063              	 .loc 2 660 0
 3064 0016 7F4B     	 ldr r3,.L170+8
 3065 0018 BB61     	 str r3,[r7,#24]
 3066              	.L139:
 661:../Libraries/XMCLib/src/xmc_dma.c ****   }
 662:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 663:../Libraries/XMCLib/src/xmc_dma.c ****   
 664:../Libraries/XMCLib/src/xmc_dma.c ****   event = XMC_DMA_GetEventStatus(dma);
 3067              	 .loc 2 664 0
 3068 001a 7868     	 ldr r0,[r7,#4]
 3069 001c FFF7FEFF 	 bl XMC_DMA_GetEventStatus
 3070 0020 7861     	 str r0,[r7,#20]
 665:../Libraries/XMCLib/src/xmc_dma.c ****   channel = 0;
 3071              	 .loc 2 665 0
 3072 0022 0023     	 movs r3,#0
 3073 0024 FB61     	 str r3,[r7,#28]
 666:../Libraries/XMCLib/src/xmc_dma.c **** 
 667:../Libraries/XMCLib/src/xmc_dma.c ****   if ((event & (uint32_t)XMC_DMA_CH_EVENT_ERROR) != (uint32_t)0UL)
 3074              	 .loc 2 667 0
 3075 0026 7B69     	 ldr r3,[r7,#20]
 3076 0028 03F01003 	 and r3,r3,#16
 3077 002c 002B     	 cmp r3,#0
 3078 002e 2AD0     	 beq .L140
 668:../Libraries/XMCLib/src/xmc_dma.c ****   {
 669:../Libraries/XMCLib/src/xmc_dma.c ****     event = XMC_DMA_GetChannelsErrorStatus(dma);
 3079              	 .loc 2 669 0
 3080 0030 7868     	 ldr r0,[r7,#4]
 3081 0032 FFF7FEFF 	 bl XMC_DMA_GetChannelsErrorStatus
 3082 0036 7861     	 str r0,[r7,#20]
 670:../Libraries/XMCLib/src/xmc_dma.c ****     while (event != 0)
 3083              	 .loc 2 670 0
 3084 0038 21E0     	 b .L141
 3085              	.L145:
 671:../Libraries/XMCLib/src/xmc_dma.c ****     {
 672:../Libraries/XMCLib/src/xmc_dma.c ****       mask = (uint32_t)1U << channel;
 3086              	 .loc 2 672 0
 3087 003a 0122     	 movs r2,#1
 3088 003c FB69     	 ldr r3,[r7,#28]
 3089 003e 02FA03F3 	 lsl r3,r2,r3
 3090 0042 3B61     	 str r3,[r7,#16]
 673:../Libraries/XMCLib/src/xmc_dma.c ****       if ((event & mask) != 0)
 3091              	 .loc 2 673 0
 3092 0044 7A69     	 ldr r2,[r7,#20]
 3093 0046 3B69     	 ldr r3,[r7,#16]
 3094 0048 1340     	 ands r3,r3,r2
 3095 004a 002B     	 cmp r3,#0
 3096 004c 14D0     	 beq .L142
 674:../Libraries/XMCLib/src/xmc_dma.c ****       {
 675:../Libraries/XMCLib/src/xmc_dma.c ****         event_handler = dma_event_handlers[channel];
 3097              	 .loc 2 675 0
 3098 004e FB69     	 ldr r3,[r7,#28]
 3099 0050 9B00     	 lsls r3,r3,#2
 3100 0052 BA69     	 ldr r2,[r7,#24]
 3101 0054 1344     	 add r3,r3,r2
 3102 0056 1B68     	 ldr r3,[r3]
 3103 0058 FB60     	 str r3,[r7,#12]
 676:../Libraries/XMCLib/src/xmc_dma.c **** 
 677:../Libraries/XMCLib/src/xmc_dma.c ****         /* Call user callback to handle event */
 678:../Libraries/XMCLib/src/xmc_dma.c ****         if (event_handler != NULL)
 3104              	 .loc 2 678 0
 3105 005a FB68     	 ldr r3,[r7,#12]
 3106 005c 002B     	 cmp r3,#0
 3107 005e 02D0     	 beq .L143
 679:../Libraries/XMCLib/src/xmc_dma.c ****         {
 680:../Libraries/XMCLib/src/xmc_dma.c ****           event_handler(XMC_DMA_CH_EVENT_ERROR);
 3108              	 .loc 2 680 0
 3109 0060 FB68     	 ldr r3,[r7,#12]
 3110 0062 1020     	 movs r0,#16
 3111 0064 9847     	 blx r3
 3112              	.L143:
 681:../Libraries/XMCLib/src/xmc_dma.c ****         }
 682:../Libraries/XMCLib/src/xmc_dma.c **** 
 683:../Libraries/XMCLib/src/xmc_dma.c ****         XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_ERROR);
 3113              	 .loc 2 683 0
 3114 0066 FB69     	 ldr r3,[r7,#28]
 3115 0068 DBB2     	 uxtb r3,r3
 3116 006a 7868     	 ldr r0,[r7,#4]
 3117 006c 1946     	 mov r1,r3
 3118 006e 1022     	 movs r2,#16
 3119 0070 FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 684:../Libraries/XMCLib/src/xmc_dma.c ****         
 685:../Libraries/XMCLib/src/xmc_dma.c ****         break;
 3120              	 .loc 2 685 0
 3121 0074 00BF     	 nop
 3122 0076 C5E0     	 b .L137
 3123              	.L142:
 686:../Libraries/XMCLib/src/xmc_dma.c ****       }
 687:../Libraries/XMCLib/src/xmc_dma.c ****       ++channel;
 3124              	 .loc 2 687 0
 3125 0078 FB69     	 ldr r3,[r7,#28]
 3126 007a 0133     	 adds r3,r3,#1
 3127 007c FB61     	 str r3,[r7,#28]
 3128              	.L141:
 670:../Libraries/XMCLib/src/xmc_dma.c ****     {
 3129              	 .loc 2 670 0
 3130 007e 7B69     	 ldr r3,[r7,#20]
 3131 0080 002B     	 cmp r3,#0
 3132 0082 DAD1     	 bne .L145
 3133 0084 BEE0     	 b .L137
 3134              	.L140:
 688:../Libraries/XMCLib/src/xmc_dma.c ****     }
 689:../Libraries/XMCLib/src/xmc_dma.c ****   }
 690:../Libraries/XMCLib/src/xmc_dma.c ****   else if ((event & (uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE) != (uint32_t)0UL)
 3135              	 .loc 2 690 0
 3136 0086 7B69     	 ldr r3,[r7,#20]
 3137 0088 03F00103 	 and r3,r3,#1
 3138 008c 002B     	 cmp r3,#0
 3139 008e 2AD0     	 beq .L147
 691:../Libraries/XMCLib/src/xmc_dma.c ****   {
 692:../Libraries/XMCLib/src/xmc_dma.c ****     event = XMC_DMA_GetChannelsTransferCompleteStatus(dma);
 3140              	 .loc 2 692 0
 3141 0090 7868     	 ldr r0,[r7,#4]
 3142 0092 FFF7FEFF 	 bl XMC_DMA_GetChannelsTransferCompleteStatus
 3143 0096 7861     	 str r0,[r7,#20]
 693:../Libraries/XMCLib/src/xmc_dma.c ****     while (event != 0)
 3144              	 .loc 2 693 0
 3145 0098 21E0     	 b .L148
 3146              	.L152:
 694:../Libraries/XMCLib/src/xmc_dma.c ****     {
 695:../Libraries/XMCLib/src/xmc_dma.c ****       mask = (uint32_t)1U << channel;
 3147              	 .loc 2 695 0
 3148 009a 0122     	 movs r2,#1
 3149 009c FB69     	 ldr r3,[r7,#28]
 3150 009e 02FA03F3 	 lsl r3,r2,r3
 3151 00a2 3B61     	 str r3,[r7,#16]
 696:../Libraries/XMCLib/src/xmc_dma.c ****       if (event & mask)
 3152              	 .loc 2 696 0
 3153 00a4 7A69     	 ldr r2,[r7,#20]
 3154 00a6 3B69     	 ldr r3,[r7,#16]
 3155 00a8 1340     	 ands r3,r3,r2
 3156 00aa 002B     	 cmp r3,#0
 3157 00ac 14D0     	 beq .L149
 697:../Libraries/XMCLib/src/xmc_dma.c ****       {
 698:../Libraries/XMCLib/src/xmc_dma.c ****         event_handler = dma_event_handlers[channel];
 3158              	 .loc 2 698 0
 3159 00ae FB69     	 ldr r3,[r7,#28]
 3160 00b0 9B00     	 lsls r3,r3,#2
 3161 00b2 BA69     	 ldr r2,[r7,#24]
 3162 00b4 1344     	 add r3,r3,r2
 3163 00b6 1B68     	 ldr r3,[r3]
 3164 00b8 FB60     	 str r3,[r7,#12]
 699:../Libraries/XMCLib/src/xmc_dma.c **** 
 700:../Libraries/XMCLib/src/xmc_dma.c ****         /* Call user callback to handle event */
 701:../Libraries/XMCLib/src/xmc_dma.c ****         if (event_handler != NULL)
 3165              	 .loc 2 701 0
 3166 00ba FB68     	 ldr r3,[r7,#12]
 3167 00bc 002B     	 cmp r3,#0
 3168 00be 02D0     	 beq .L150
 702:../Libraries/XMCLib/src/xmc_dma.c ****         {
 703:../Libraries/XMCLib/src/xmc_dma.c ****           event_handler(XMC_DMA_CH_EVENT_TRANSFER_COMPLETE);
 3169              	 .loc 2 703 0
 3170 00c0 FB68     	 ldr r3,[r7,#12]
 3171 00c2 0120     	 movs r0,#1
 3172 00c4 9847     	 blx r3
 3173              	.L150:
 704:../Libraries/XMCLib/src/xmc_dma.c ****         }
 705:../Libraries/XMCLib/src/xmc_dma.c **** 
 706:../Libraries/XMCLib/src/xmc_dma.c ****         XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_TR
 3174              	 .loc 2 706 0
 3175 00c6 FB69     	 ldr r3,[r7,#28]
 3176 00c8 DBB2     	 uxtb r3,r3
 3177 00ca 7868     	 ldr r0,[r7,#4]
 3178 00cc 1946     	 mov r1,r3
 3179 00ce 0F22     	 movs r2,#15
 3180 00d0 FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 707:../Libraries/XMCLib/src/xmc_dma.c ****                                                                       (uint32_t)XMC_DMA_CH_EVENT_BL
 708:../Libraries/XMCLib/src/xmc_dma.c ****                                                                       (uint32_t)XMC_DMA_CH_EVENT_SR
 709:../Libraries/XMCLib/src/xmc_dma.c ****                                                                       (uint32_t)XMC_DMA_CH_EVENT_DS
 710:../Libraries/XMCLib/src/xmc_dma.c **** 																	  
 711:../Libraries/XMCLib/src/xmc_dma.c ****         break;
 3181              	 .loc 2 711 0
 3182 00d4 00BF     	 nop
 3183 00d6 95E0     	 b .L137
 3184              	.L149:
 712:../Libraries/XMCLib/src/xmc_dma.c ****       }
 713:../Libraries/XMCLib/src/xmc_dma.c ****       ++channel;
 3185              	 .loc 2 713 0
 3186 00d8 FB69     	 ldr r3,[r7,#28]
 3187 00da 0133     	 adds r3,r3,#1
 3188 00dc FB61     	 str r3,[r7,#28]
 3189              	.L148:
 693:../Libraries/XMCLib/src/xmc_dma.c ****     {
 3190              	 .loc 2 693 0
 3191 00de 7B69     	 ldr r3,[r7,#20]
 3192 00e0 002B     	 cmp r3,#0
 3193 00e2 DAD1     	 bne .L152
 3194 00e4 8EE0     	 b .L137
 3195              	.L147:
 714:../Libraries/XMCLib/src/xmc_dma.c ****     }
 715:../Libraries/XMCLib/src/xmc_dma.c ****   }
 716:../Libraries/XMCLib/src/xmc_dma.c ****   else if ((event & (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE) != (uint32_t)0UL)
 3196              	 .loc 2 716 0
 3197 00e6 7B69     	 ldr r3,[r7,#20]
 3198 00e8 03F00203 	 and r3,r3,#2
 3199 00ec 002B     	 cmp r3,#0
 3200 00ee 2AD0     	 beq .L153
 717:../Libraries/XMCLib/src/xmc_dma.c ****   {
 718:../Libraries/XMCLib/src/xmc_dma.c ****     event = XMC_DMA_GetChannelsBlockCompleteStatus(dma);
 3201              	 .loc 2 718 0
 3202 00f0 7868     	 ldr r0,[r7,#4]
 3203 00f2 FFF7FEFF 	 bl XMC_DMA_GetChannelsBlockCompleteStatus
 3204 00f6 7861     	 str r0,[r7,#20]
 719:../Libraries/XMCLib/src/xmc_dma.c ****     while (event != 0)
 3205              	 .loc 2 719 0
 3206 00f8 21E0     	 b .L154
 3207              	.L158:
 720:../Libraries/XMCLib/src/xmc_dma.c ****     {
 721:../Libraries/XMCLib/src/xmc_dma.c ****       mask = (uint32_t)1U << channel;
 3208              	 .loc 2 721 0
 3209 00fa 0122     	 movs r2,#1
 3210 00fc FB69     	 ldr r3,[r7,#28]
 3211 00fe 02FA03F3 	 lsl r3,r2,r3
 3212 0102 3B61     	 str r3,[r7,#16]
 722:../Libraries/XMCLib/src/xmc_dma.c ****       if (event & mask)
 3213              	 .loc 2 722 0
 3214 0104 7A69     	 ldr r2,[r7,#20]
 3215 0106 3B69     	 ldr r3,[r7,#16]
 3216 0108 1340     	 ands r3,r3,r2
 3217 010a 002B     	 cmp r3,#0
 3218 010c 14D0     	 beq .L155
 723:../Libraries/XMCLib/src/xmc_dma.c ****       {
 724:../Libraries/XMCLib/src/xmc_dma.c ****         event_handler = dma_event_handlers[channel];
 3219              	 .loc 2 724 0
 3220 010e FB69     	 ldr r3,[r7,#28]
 3221 0110 9B00     	 lsls r3,r3,#2
 3222 0112 BA69     	 ldr r2,[r7,#24]
 3223 0114 1344     	 add r3,r3,r2
 3224 0116 1B68     	 ldr r3,[r3]
 3225 0118 FB60     	 str r3,[r7,#12]
 725:../Libraries/XMCLib/src/xmc_dma.c **** 
 726:../Libraries/XMCLib/src/xmc_dma.c ****         /* Call user callback to handle event */
 727:../Libraries/XMCLib/src/xmc_dma.c ****         if (event_handler != NULL)
 3226              	 .loc 2 727 0
 3227 011a FB68     	 ldr r3,[r7,#12]
 3228 011c 002B     	 cmp r3,#0
 3229 011e 02D0     	 beq .L156
 728:../Libraries/XMCLib/src/xmc_dma.c ****         {
 729:../Libraries/XMCLib/src/xmc_dma.c ****           event_handler(XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE);
 3230              	 .loc 2 729 0
 3231 0120 FB68     	 ldr r3,[r7,#12]
 3232 0122 0220     	 movs r0,#2
 3233 0124 9847     	 blx r3
 3234              	.L156:
 730:../Libraries/XMCLib/src/xmc_dma.c ****         }
 731:../Libraries/XMCLib/src/xmc_dma.c **** 
 732:../Libraries/XMCLib/src/xmc_dma.c ****         XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_BL
 3235              	 .loc 2 732 0
 3236 0126 FB69     	 ldr r3,[r7,#28]
 3237 0128 DBB2     	 uxtb r3,r3
 3238 012a 7868     	 ldr r0,[r7,#4]
 3239 012c 1946     	 mov r1,r3
 3240 012e 0E22     	 movs r2,#14
 3241 0130 FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 733:../Libraries/XMCLib/src/xmc_dma.c ****                                                                       (uint32_t)XMC_DMA_CH_EVENT_SR
 734:../Libraries/XMCLib/src/xmc_dma.c ****                                                                       (uint32_t)XMC_DMA_CH_EVENT_DS
 735:../Libraries/XMCLib/src/xmc_dma.c ****         break;
 3242              	 .loc 2 735 0
 3243 0134 00BF     	 nop
 3244 0136 65E0     	 b .L137
 3245              	.L155:
 736:../Libraries/XMCLib/src/xmc_dma.c ****       }
 737:../Libraries/XMCLib/src/xmc_dma.c ****       ++channel;
 3246              	 .loc 2 737 0
 3247 0138 FB69     	 ldr r3,[r7,#28]
 3248 013a 0133     	 adds r3,r3,#1
 3249 013c FB61     	 str r3,[r7,#28]
 3250              	.L154:
 719:../Libraries/XMCLib/src/xmc_dma.c ****     {
 3251              	 .loc 2 719 0
 3252 013e 7B69     	 ldr r3,[r7,#20]
 3253 0140 002B     	 cmp r3,#0
 3254 0142 DAD1     	 bne .L158
 3255 0144 5EE0     	 b .L137
 3256              	.L153:
 738:../Libraries/XMCLib/src/xmc_dma.c ****     }
 739:../Libraries/XMCLib/src/xmc_dma.c ****   }
 740:../Libraries/XMCLib/src/xmc_dma.c ****   else if ((event & (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE) != (uint32_t)0UL)
 3257              	 .loc 2 740 0
 3258 0146 7B69     	 ldr r3,[r7,#20]
 3259 0148 03F00403 	 and r3,r3,#4
 3260 014c 002B     	 cmp r3,#0
 3261 014e 2AD0     	 beq .L159
 741:../Libraries/XMCLib/src/xmc_dma.c ****   {
 742:../Libraries/XMCLib/src/xmc_dma.c ****     event = XMC_DMA_GetChannelsSourceTransactionCompleteStatus(dma);
 3262              	 .loc 2 742 0
 3263 0150 7868     	 ldr r0,[r7,#4]
 3264 0152 FFF7FEFF 	 bl XMC_DMA_GetChannelsSourceTransactionCompleteStatus
 3265 0156 7861     	 str r0,[r7,#20]
 743:../Libraries/XMCLib/src/xmc_dma.c ****     while (event != 0)
 3266              	 .loc 2 743 0
 3267 0158 21E0     	 b .L160
 3268              	.L164:
 744:../Libraries/XMCLib/src/xmc_dma.c ****     {
 745:../Libraries/XMCLib/src/xmc_dma.c ****       mask = (uint32_t)1U << channel;
 3269              	 .loc 2 745 0
 3270 015a 0122     	 movs r2,#1
 3271 015c FB69     	 ldr r3,[r7,#28]
 3272 015e 02FA03F3 	 lsl r3,r2,r3
 3273 0162 3B61     	 str r3,[r7,#16]
 746:../Libraries/XMCLib/src/xmc_dma.c ****       if (event & mask)
 3274              	 .loc 2 746 0
 3275 0164 7A69     	 ldr r2,[r7,#20]
 3276 0166 3B69     	 ldr r3,[r7,#16]
 3277 0168 1340     	 ands r3,r3,r2
 3278 016a 002B     	 cmp r3,#0
 3279 016c 14D0     	 beq .L161
 747:../Libraries/XMCLib/src/xmc_dma.c ****       {
 748:../Libraries/XMCLib/src/xmc_dma.c ****         event_handler = dma_event_handlers[channel];
 3280              	 .loc 2 748 0
 3281 016e FB69     	 ldr r3,[r7,#28]
 3282 0170 9B00     	 lsls r3,r3,#2
 3283 0172 BA69     	 ldr r2,[r7,#24]
 3284 0174 1344     	 add r3,r3,r2
 3285 0176 1B68     	 ldr r3,[r3]
 3286 0178 FB60     	 str r3,[r7,#12]
 749:../Libraries/XMCLib/src/xmc_dma.c **** 
 750:../Libraries/XMCLib/src/xmc_dma.c ****         /* Call user callback to handle event */
 751:../Libraries/XMCLib/src/xmc_dma.c ****         if (event_handler != NULL)
 3287              	 .loc 2 751 0
 3288 017a FB68     	 ldr r3,[r7,#12]
 3289 017c 002B     	 cmp r3,#0
 3290 017e 02D0     	 beq .L162
 752:../Libraries/XMCLib/src/xmc_dma.c ****         {
 753:../Libraries/XMCLib/src/xmc_dma.c ****           event_handler(XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE);
 3291              	 .loc 2 753 0
 3292 0180 FB68     	 ldr r3,[r7,#12]
 3293 0182 0420     	 movs r0,#4
 3294 0184 9847     	 blx r3
 3295              	.L162:
 754:../Libraries/XMCLib/src/xmc_dma.c ****         }
 755:../Libraries/XMCLib/src/xmc_dma.c **** 
 756:../Libraries/XMCLib/src/xmc_dma.c ****         XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTI
 3296              	 .loc 2 756 0
 3297 0186 FB69     	 ldr r3,[r7,#28]
 3298 0188 DBB2     	 uxtb r3,r3
 3299 018a 7868     	 ldr r0,[r7,#4]
 3300 018c 1946     	 mov r1,r3
 3301 018e 0422     	 movs r2,#4
 3302 0190 FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 757:../Libraries/XMCLib/src/xmc_dma.c ****         
 758:../Libraries/XMCLib/src/xmc_dma.c ****         break;
 3303              	 .loc 2 758 0
 3304 0194 00BF     	 nop
 3305 0196 35E0     	 b .L137
 3306              	.L161:
 759:../Libraries/XMCLib/src/xmc_dma.c ****       }
 760:../Libraries/XMCLib/src/xmc_dma.c ****       ++channel;
 3307              	 .loc 2 760 0
 3308 0198 FB69     	 ldr r3,[r7,#28]
 3309 019a 0133     	 adds r3,r3,#1
 3310 019c FB61     	 str r3,[r7,#28]
 3311              	.L160:
 743:../Libraries/XMCLib/src/xmc_dma.c ****     {
 3312              	 .loc 2 743 0
 3313 019e 7B69     	 ldr r3,[r7,#20]
 3314 01a0 002B     	 cmp r3,#0
 3315 01a2 DAD1     	 bne .L164
 3316 01a4 2EE0     	 b .L137
 3317              	.L159:
 761:../Libraries/XMCLib/src/xmc_dma.c ****     }
 762:../Libraries/XMCLib/src/xmc_dma.c ****   }
 763:../Libraries/XMCLib/src/xmc_dma.c ****   else if ((event & (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE) != (uint32_t)0UL)
 3318              	 .loc 2 763 0
 3319 01a6 7B69     	 ldr r3,[r7,#20]
 3320 01a8 03F00803 	 and r3,r3,#8
 3321 01ac 002B     	 cmp r3,#0
 3322 01ae 29D0     	 beq .L137
 764:../Libraries/XMCLib/src/xmc_dma.c ****   {
 765:../Libraries/XMCLib/src/xmc_dma.c ****     event = XMC_DMA_GetChannelsDestinationTransactionCompleteStatus(dma);
 3323              	 .loc 2 765 0
 3324 01b0 7868     	 ldr r0,[r7,#4]
 3325 01b2 FFF7FEFF 	 bl XMC_DMA_GetChannelsDestinationTransactionCompleteStatus
 3326 01b6 7861     	 str r0,[r7,#20]
 766:../Libraries/XMCLib/src/xmc_dma.c ****     while (event != 0)
 3327              	 .loc 2 766 0
 3328 01b8 21E0     	 b .L165
 3329              	.L169:
 767:../Libraries/XMCLib/src/xmc_dma.c ****     {
 768:../Libraries/XMCLib/src/xmc_dma.c ****       mask = (uint32_t)1U << channel;
 3330              	 .loc 2 768 0
 3331 01ba 0122     	 movs r2,#1
 3332 01bc FB69     	 ldr r3,[r7,#28]
 3333 01be 02FA03F3 	 lsl r3,r2,r3
 3334 01c2 3B61     	 str r3,[r7,#16]
 769:../Libraries/XMCLib/src/xmc_dma.c ****       if (event & mask)
 3335              	 .loc 2 769 0
 3336 01c4 7A69     	 ldr r2,[r7,#20]
 3337 01c6 3B69     	 ldr r3,[r7,#16]
 3338 01c8 1340     	 ands r3,r3,r2
 3339 01ca 002B     	 cmp r3,#0
 3340 01cc 14D0     	 beq .L166
 770:../Libraries/XMCLib/src/xmc_dma.c ****       {
 771:../Libraries/XMCLib/src/xmc_dma.c ****         event_handler = dma_event_handlers[channel];
 3341              	 .loc 2 771 0
 3342 01ce FB69     	 ldr r3,[r7,#28]
 3343 01d0 9B00     	 lsls r3,r3,#2
 3344 01d2 BA69     	 ldr r2,[r7,#24]
 3345 01d4 1344     	 add r3,r3,r2
 3346 01d6 1B68     	 ldr r3,[r3]
 3347 01d8 FB60     	 str r3,[r7,#12]
 772:../Libraries/XMCLib/src/xmc_dma.c **** 
 773:../Libraries/XMCLib/src/xmc_dma.c ****         /* Call user callback to handle event */
 774:../Libraries/XMCLib/src/xmc_dma.c ****         if (event_handler != NULL)
 3348              	 .loc 2 774 0
 3349 01da FB68     	 ldr r3,[r7,#12]
 3350 01dc 002B     	 cmp r3,#0
 3351 01de 02D0     	 beq .L167
 775:../Libraries/XMCLib/src/xmc_dma.c ****         {
 776:../Libraries/XMCLib/src/xmc_dma.c ****           event_handler(XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE);
 3352              	 .loc 2 776 0
 3353 01e0 FB68     	 ldr r3,[r7,#12]
 3354 01e2 0820     	 movs r0,#8
 3355 01e4 9847     	 blx r3
 3356              	.L167:
 777:../Libraries/XMCLib/src/xmc_dma.c ****         }
 778:../Libraries/XMCLib/src/xmc_dma.c ****         
 779:../Libraries/XMCLib/src/xmc_dma.c ****         XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTI
 3357              	 .loc 2 779 0
 3358 01e6 FB69     	 ldr r3,[r7,#28]
 3359 01e8 DBB2     	 uxtb r3,r3
 3360 01ea 7868     	 ldr r0,[r7,#4]
 3361 01ec 1946     	 mov r1,r3
 3362 01ee 0822     	 movs r2,#8
 3363 01f0 FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 780:../Libraries/XMCLib/src/xmc_dma.c **** 
 781:../Libraries/XMCLib/src/xmc_dma.c ****         break;
 3364              	 .loc 2 781 0
 3365 01f4 00BF     	 nop
 3366 01f6 05E0     	 b .L137
 3367              	.L166:
 782:../Libraries/XMCLib/src/xmc_dma.c ****       }
 783:../Libraries/XMCLib/src/xmc_dma.c ****       ++channel;
 3368              	 .loc 2 783 0
 3369 01f8 FB69     	 ldr r3,[r7,#28]
 3370 01fa 0133     	 adds r3,r3,#1
 3371 01fc FB61     	 str r3,[r7,#28]
 3372              	.L165:
 766:../Libraries/XMCLib/src/xmc_dma.c ****     {
 3373              	 .loc 2 766 0
 3374 01fe 7B69     	 ldr r3,[r7,#20]
 3375 0200 002B     	 cmp r3,#0
 3376 0202 DAD1     	 bne .L169
 3377              	.L137:
 784:../Libraries/XMCLib/src/xmc_dma.c ****     }
 785:../Libraries/XMCLib/src/xmc_dma.c ****   }
 786:../Libraries/XMCLib/src/xmc_dma.c ****   else
 787:../Libraries/XMCLib/src/xmc_dma.c ****   {
 788:../Libraries/XMCLib/src/xmc_dma.c ****     /* no active interrupt was found? */
 789:../Libraries/XMCLib/src/xmc_dma.c ****   }
 790:../Libraries/XMCLib/src/xmc_dma.c **** 
 791:../Libraries/XMCLib/src/xmc_dma.c **** }
 3378              	 .loc 2 791 0
 3379 0204 2037     	 adds r7,r7,#32
 3380              	.LCFI230:
 3381              	 .cfi_def_cfa_offset 8
 3382 0206 BD46     	 mov sp,r7
 3383              	.LCFI231:
 3384              	 .cfi_def_cfa_register 13
 3385              	 
 3386 0208 80BD     	 pop {r7,pc}
 3387              	.L171:
 3388 020a 00BF     	 .align 2
 3389              	.L170:
 3390 020c 00400150 	 .word 1342259200
 3391 0210 00000000 	 .word dma0_event_handlers
 3392 0214 00000000 	 .word dma1_event_handlers
 3393              	 .cfi_endproc
 3394              	.LFE197:
 3396              	 .text
 3397              	.Letext0:
 3398              	 .file 3 "d:\\dave-4.1.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 3399              	 .file 4 "d:\\dave-4.1.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 3400              	 .file 5 "D:\\Naukowe\\BLDC_workspace\\PWM_from_ex/Libraries/CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 3401              	 .file 6 "D:\\Naukowe\\BLDC_workspace\\PWM_from_ex\\Libraries\\XMCLib\\inc/xmc4_scu.h"
 3402              	 .file 7 "D:\\Naukowe\\BLDC_workspace\\PWM_from_ex/Libraries/CMSIS/Include/core_cm4.h"
 3403              	 .file 8 "D:\\Naukowe\\BLDC_workspace\\PWM_from_ex/Libraries/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_dma.c
    {standard input}:20     .text.XMC_DMA_GetEventStatus:00000000 $t
    {standard input}:24     .text.XMC_DMA_GetEventStatus:00000000 XMC_DMA_GetEventStatus
    {standard input}:64     .text.XMC_DMA_GetChannelsTransferCompleteStatus:00000000 $t
    {standard input}:68     .text.XMC_DMA_GetChannelsTransferCompleteStatus:00000000 XMC_DMA_GetChannelsTransferCompleteStatus
    {standard input}:107    .text.XMC_DMA_GetChannelsBlockCompleteStatus:00000000 $t
    {standard input}:111    .text.XMC_DMA_GetChannelsBlockCompleteStatus:00000000 XMC_DMA_GetChannelsBlockCompleteStatus
    {standard input}:150    .text.XMC_DMA_GetChannelsSourceTransactionCompleteStatus:00000000 $t
    {standard input}:154    .text.XMC_DMA_GetChannelsSourceTransactionCompleteStatus:00000000 XMC_DMA_GetChannelsSourceTransactionCompleteStatus
    {standard input}:193    .text.XMC_DMA_GetChannelsDestinationTransactionCompleteStatus:00000000 $t
    {standard input}:197    .text.XMC_DMA_GetChannelsDestinationTransactionCompleteStatus:00000000 XMC_DMA_GetChannelsDestinationTransactionCompleteStatus
    {standard input}:236    .text.XMC_DMA_GetChannelsErrorStatus:00000000 $t
    {standard input}:240    .text.XMC_DMA_GetChannelsErrorStatus:00000000 XMC_DMA_GetChannelsErrorStatus
                            *COM*:00000020 dma0_event_handlers
                            *COM*:00000010 dma1_event_handlers
    {standard input}:281    .text.XMC_DMA_Init:00000000 $t
    {standard input}:286    .text.XMC_DMA_Init:00000000 XMC_DMA_Init
    {standard input}:326    .text.XMC_DMA_Enable:00000000 XMC_DMA_Enable
    {standard input}:321    .text.XMC_DMA_Enable:00000000 $t
    {standard input}:374    .text.XMC_DMA_Enable:0000002c $d
    {standard input}:381    .text.XMC_DMA_Disable:00000000 $t
    {standard input}:386    .text.XMC_DMA_Disable:00000000 XMC_DMA_Disable
    {standard input}:434    .text.XMC_DMA_Disable:0000002c $d
    {standard input}:441    .text.XMC_DMA_IsEnabled:00000000 $t
    {standard input}:446    .text.XMC_DMA_IsEnabled:00000000 XMC_DMA_IsEnabled
    {standard input}:543    .text.XMC_DMA_IsEnabled:00000088 $d
    {standard input}:550    .text.XMC_DMA_EnableRequestLine:00000000 $t
    {standard input}:555    .text.XMC_DMA_EnableRequestLine:00000000 XMC_DMA_EnableRequestLine
    {standard input}:658    .text.XMC_DMA_EnableRequestLine:00000090 $d
    {standard input}:664    .text.XMC_DMA_DisableRequestLine:00000000 $t
    {standard input}:669    .text.XMC_DMA_DisableRequestLine:00000000 XMC_DMA_DisableRequestLine
    {standard input}:733    .text.XMC_DMA_DisableRequestLine:0000004c $d
    {standard input}:739    .text.XMC_DMA_ClearRequestLine:00000000 $t
    {standard input}:744    .text.XMC_DMA_ClearRequestLine:00000000 XMC_DMA_ClearRequestLine
    {standard input}:826    .text.XMC_DMA_ClearRequestLine:00000070 $d
    {standard input}:832    .text.XMC_DMA_GetOverrunStatus:00000000 $t
    {standard input}:837    .text.XMC_DMA_GetOverrunStatus:00000000 XMC_DMA_GetOverrunStatus
    {standard input}:907    .text.XMC_DMA_GetOverrunStatus:00000058 $d
    {standard input}:913    .text.XMC_DMA_ClearOverrunStatus:00000000 $t
    {standard input}:918    .text.XMC_DMA_ClearOverrunStatus:00000000 XMC_DMA_ClearOverrunStatus
    {standard input}:980    .text.XMC_DMA_ClearOverrunStatus:00000048 $d
    {standard input}:986    .text.XMC_DMA_CH_Disable:00000000 $t
    {standard input}:991    .text.XMC_DMA_CH_Disable:00000000 XMC_DMA_CH_Disable
    {standard input}:1045   .text.XMC_DMA_CH_IsEnabled:00000000 $t
    {standard input}:1050   .text.XMC_DMA_CH_IsEnabled:00000000 XMC_DMA_CH_IsEnabled
    {standard input}:1099   .text.XMC_DMA_CH_Init:00000000 $t
    {standard input}:1104   .text.XMC_DMA_CH_Init:00000000 XMC_DMA_CH_Init
    {standard input}:1990   .text.XMC_DMA_CH_ClearEventStatus:00000000 XMC_DMA_CH_ClearEventStatus
    {standard input}:1420   .text.XMC_DMA_CH_Init:00000250 $d
    {standard input}:1429   .text.XMC_DMA_CH_Init:00000274 $t
    {standard input}:1563   .text.XMC_DMA_CH_Init:0000037c $d
    {standard input}:1566   .text.XMC_DMA_CH_Init:00000380 $t
    {standard input}:1652   .text.XMC_DMA_CH_Suspend:00000000 $t
    {standard input}:1657   .text.XMC_DMA_CH_Suspend:00000000 XMC_DMA_CH_Suspend
    {standard input}:1710   .text.XMC_DMA_CH_Resume:00000000 $t
    {standard input}:1715   .text.XMC_DMA_CH_Resume:00000000 XMC_DMA_CH_Resume
    {standard input}:1768   .text.XMC_DMA_CH_IsSuspended:00000000 $t
    {standard input}:1773   .text.XMC_DMA_CH_IsSuspended:00000000 XMC_DMA_CH_IsSuspended
    {standard input}:1825   .text.XMC_DMA_CH_EnableEvent:00000000 $t
    {standard input}:1830   .text.XMC_DMA_CH_EnableEvent:00000000 XMC_DMA_CH_EnableEvent
    {standard input}:1905   .text.XMC_DMA_CH_DisableEvent:00000000 $t
    {standard input}:1910   .text.XMC_DMA_CH_DisableEvent:00000000 XMC_DMA_CH_DisableEvent
    {standard input}:1985   .text.XMC_DMA_CH_ClearEventStatus:00000000 $t
    {standard input}:2059   .text.XMC_DMA_CH_GetEventStatus:00000000 $t
    {standard input}:2064   .text.XMC_DMA_CH_GetEventStatus:00000000 XMC_DMA_CH_GetEventStatus
    {standard input}:2145   .text.XMC_DMA_CH_EnableSourceGather:00000000 $t
    {standard input}:2150   .text.XMC_DMA_CH_EnableSourceGather:00000000 XMC_DMA_CH_EnableSourceGather
    {standard input}:2219   .text.XMC_DMA_CH_DisableSourceGather:00000000 $t
    {standard input}:2224   .text.XMC_DMA_CH_DisableSourceGather:00000000 XMC_DMA_CH_DisableSourceGather
    {standard input}:2277   .text.XMC_DMA_CH_EnableDestinationScatter:00000000 $t
    {standard input}:2282   .text.XMC_DMA_CH_EnableDestinationScatter:00000000 XMC_DMA_CH_EnableDestinationScatter
    {standard input}:2351   .text.XMC_DMA_CH_DisableDestinationScatter:00000000 $t
    {standard input}:2356   .text.XMC_DMA_CH_DisableDestinationScatter:00000000 XMC_DMA_CH_DisableDestinationScatter
    {standard input}:2409   .text.XMC_DMA_CH_TriggerSourceRequest:00000000 $t
    {standard input}:2414   .text.XMC_DMA_CH_TriggerSourceRequest:00000000 XMC_DMA_CH_TriggerSourceRequest
    {standard input}:2486   .text.XMC_DMA_CH_TriggerDestinationRequest:00000000 $t
    {standard input}:2491   .text.XMC_DMA_CH_TriggerDestinationRequest:00000000 XMC_DMA_CH_TriggerDestinationRequest
    {standard input}:2563   .text.XMC_DMA_CH_EnableSourceAddressReload:00000000 $t
    {standard input}:2568   .text.XMC_DMA_CH_EnableSourceAddressReload:00000000 XMC_DMA_CH_EnableSourceAddressReload
    {standard input}:2621   .text.XMC_DMA_CH_DisableSourceAddressReload:00000000 $t
    {standard input}:2626   .text.XMC_DMA_CH_DisableSourceAddressReload:00000000 XMC_DMA_CH_DisableSourceAddressReload
    {standard input}:2679   .text.XMC_DMA_CH_EnableDestinationAddressReload:00000000 $t
    {standard input}:2684   .text.XMC_DMA_CH_EnableDestinationAddressReload:00000000 XMC_DMA_CH_EnableDestinationAddressReload
    {standard input}:2737   .text.XMC_DMA_CH_DisableDestinationAddressReload:00000000 $t
    {standard input}:2742   .text.XMC_DMA_CH_DisableDestinationAddressReload:00000000 XMC_DMA_CH_DisableDestinationAddressReload
    {standard input}:2795   .text.XMC_DMA_CH_RequestLastMultiblockTransfer:00000000 $t
    {standard input}:2800   .text.XMC_DMA_CH_RequestLastMultiblockTransfer:00000000 XMC_DMA_CH_RequestLastMultiblockTransfer
    {standard input}:2853   .text.XMC_DMA_CH_SetEventHandler:00000000 $t
    {standard input}:2858   .text.XMC_DMA_CH_SetEventHandler:00000000 XMC_DMA_CH_SetEventHandler
    {standard input}:2913   .text.XMC_DMA_CH_SetEventHandler:00000038 $d
    {standard input}:2920   .text.XMC_DMA_CH_ClearSourcePeripheralRequest:00000000 $t
    {standard input}:2925   .text.XMC_DMA_CH_ClearSourcePeripheralRequest:00000000 XMC_DMA_CH_ClearSourcePeripheralRequest
    {standard input}:2975   .text.XMC_DMA_CH_ClearDestinationPeripheralRequest:00000000 $t
    {standard input}:2980   .text.XMC_DMA_CH_ClearDestinationPeripheralRequest:00000000 XMC_DMA_CH_ClearDestinationPeripheralRequest
    {standard input}:3030   .text.XMC_DMA_IRQHandler:00000000 $t
    {standard input}:3035   .text.XMC_DMA_IRQHandler:00000000 XMC_DMA_IRQHandler
    {standard input}:3390   .text.XMC_DMA_IRQHandler:0000020c $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_SCU_RESET_DeassertPeripheralReset
XMC_SCU_RESET_AssertPeripheralReset
XMC_SCU_RESET_IsPeripheralResetAsserted
